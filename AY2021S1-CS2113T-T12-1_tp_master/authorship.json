[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    implementation \u0027org.jetbrains:annotations:19.0.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "    mainClassName \u003d \"StudyIt\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "        attributes ("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "            \u0027Main-Class\u0027: \u0027studyit.StudyIt\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "        )"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 2,
      "farice9": 9,
      "-": 45
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yuan Bing | [Github](https://github.com/farice9) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Si Hui | [Github](https://github.com/lingsihui) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Lu Ziyi | [Github](https://github.com/luziyi9898) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Florence Lim | [Github](https://github.com/hailqueenflo) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Lin Yuheng | [Github](https://github.com/slightlyharp) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e master"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 3,
      "hailqueenflo": 1,
      "luziyi9898": 1,
      "farice9": 2,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "Welcome to Study It Developer Guide!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "This document details the architecture of Study It. It aims to provide an overview of the high-level system "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "architecture and design of the app. It will also break down the design of the app into smaller components and be "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "explained in detail. This will allow the readers to understand the architecture and design flow of Study It and "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "how it operates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "Study It is an interactive desktop app that helps NUS students manage their study related matters especially during "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "this online study environment. It is optimized for use via a Command Line Interface (CLI). It can keep track of the "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "student’s various study matters, present them in an organized and thoughtful manner to help them organize their "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "study life. It will also provide various functionalities to help with their studies. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "The 4 main functionalities available now are bookmark, timetable, academic tracker and flashcard. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "Each of this will be discussed in detail under the “Design \u0026 Implementation” section later in the document."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "## Setting up \u0026 getting started"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "**Requirements**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "* Java 11.0.8"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "  * You may refer to this [website](https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html) "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "to download and install Java 11.0.8"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "  * The installation guide can be found in the following websites:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "    * [Windows](https://docs.oracle.com/en/java/javase/11/install/installation-jdk-microsoft-windows-platforms.html#GUID-A7E27B90-A28D-4237-9383-A58B416071CA)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "    * [Linux](https://docs.oracle.com/en/java/javase/11/install/installation-jdk-linux-platforms.html)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "    * [Mac](https://docs.oracle.com/javase/10/install/installation-jdk-and-jre-macos.htm#JSJIG-GUID-2FE451B0-9572-4E38-A1A5-568B77B146DE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "**Running the software**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "1. Download the tP.jar file from our [Github release](https://github.com/AY2021S1-CS2113T-T12-1/tp/releases) and "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "place it in an empty folder"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "2. Open your computer’s command prompt"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "3. Change the directory of the command prompt to the folder containing tP.jar file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "4. Type `java -jar tp.jar` into the command prompt and press Enter to execute it"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "5. If the application runs successfully, you’ll be greeted by a welcome message"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "**Setting up the project on your PC**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "1. Configure the JDK: Configuring the JDK to ensure Intellij is configured to use JDK 11."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "2. Import the project as a Gradle project."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "3. Run the studyit.StudyIt and try a few commands."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "4. Run the tests to ensure they all pass."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "This section explains the architecture of our software and the design of each component."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "### **Major components**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "This section introduces the multiple components in Study It."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "![](Images/ArchitectureDiagrams/components.png)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "Study It contains 4 major functional components which are the "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "bookmark, timetable, academic and flashcard. Each of these component"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "provide different functionalities, and they combine to form our software -- Study It."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "Component | What it does"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "----------|----------------"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "Bookmark  | Stores internet links under different categories for easier access"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "Timetable | Tracks and display your weekly schedule"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "Academic  | Stores important contacts and keep track of your grades"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": "Flashcard | Stores study questions and allow you to quiz yourself for easier memorization"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": "The **main component** of Study It helps user access each of these components."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "It processes the user input, provides general functionalities to traverse the software and other"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "farice9"
        },
        "content": "helpful functionalities. This will be further explained under Study It\u0027s design later."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": "### **Architecture**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": "This section describes the overall architecture of Study It."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "![Architecture Diagram](Images/ArchitectureDiagrams/architecture.png)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": "The *Architecture Diagram* given above explains the high-level design of the software."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "farice9"
        },
        "content": "Each component in the diagram will be briefly explained below."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "farice9"
        },
        "content": "The **`main`** in **`Study It`** is responsible for initializing all the other components"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "farice9"
        },
        "content": "in the software."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "farice9"
        },
        "content": "The following is a brief overview of the components in Study It:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "farice9"
        },
        "content": "* **UI**: Handles the communication between the software and the user"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "farice9"
        },
        "content": "* **Parser**: Processes the input from the user"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "farice9"
        },
        "content": "* **Execution**: Perform the actions determined by the parser"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "farice9"
        },
        "content": "The following components processes their respective actions (parsing and execution) and handles their own"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "farice9"
        },
        "content": "storage component: "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "farice9"
        },
        "content": "* **Bookmark**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "farice9"
        },
        "content": "* **Timetable**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "farice9"
        },
        "content": "* **Academic**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "farice9"
        },
        "content": "* **Flashcard**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "farice9"
        },
        "content": "**General commands** are commands that takes priority in execution no matter which mode the software is currently"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "farice9"
        },
        "content": "in."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "farice9"
        },
        "content": "**Modes of the program**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "farice9"
        },
        "content": "Study It has 5 **modes** that the user can navigate between:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "farice9"
        },
        "content": "* **Main menu**: Default mode when booting the software, there are no functionalities tied to this mode"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "farice9"
        },
        "content": "* **Bookmark**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "farice9"
        },
        "content": "* **Timetable**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "farice9"
        },
        "content": "* **Academic**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "farice9"
        },
        "content": "* **Flashcard**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "farice9"
        },
        "content": "Each of these modes has their own unique commands. The user must switch to that mode to perform the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "farice9"
        },
        "content": "mode\u0027s functionalities."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "farice9"
        },
        "content": "User can switch between these modes at any point when using the software."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "farice9"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "farice9"
        },
        "content": "![Sequence Overview](Images/ArchitectureDiagrams/overviewsequence.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "farice9"
        },
        "content": "As shown in the sequence diagram above, the user will interact with Study It via the User Interface (UI)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "farice9"
        },
        "content": "The commands received will then be parsed to identify the type of command. If the command is one of the "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "farice9"
        },
        "content": "general commands, it\u0027ll be processed and provide output. Otherwise, the command will be relayed"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "farice9"
        },
        "content": "to different components to be processed based on the software\u0027s current mode. "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "farice9"
        },
        "content": "### **Main Component**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "farice9"
        },
        "content": "This section will give an overview of the main component of Study It"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "farice9"
        },
        "content": "![Main Component Diagram](Images/MainComponentDiagrams/maincomponent.png)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "farice9"
        },
        "content": "The main class being run for the program is contained under `StudyIt` class. "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "farice9"
        },
        "content": "As there are multiple modes of our app (main menu/bookmark/timetable/academic/flashcard), "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "farice9"
        },
        "content": "the Mode enumeration and a private static currentMode of Mode type is introduced to monitor the current "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "farice9"
        },
        "content": "operating mode of StudyIt. This is to allow the program to respond to different commands under different modes."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "farice9"
        },
        "content": "Each command input by the user will be processed by CommandParser class to determine the command type. "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "farice9"
        },
        "content": "This information, along with the original command string will be passed into Command class and executed under "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "farice9"
        },
        "content": "executeCommand(). If it is one of the general commands, it will be processed by that class. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "farice9"
        },
        "content": "If it isn’t, the Command class will detect the current mode of the program and run that command string under that "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "farice9"
        },
        "content": "specific mode, distributed under handleNonGeneralCommand() method. If it still doesn’t parse successfully, "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "farice9"
        },
        "content": "it will be considered an invalid command and an error message will be printed out."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "farice9"
        },
        "content": "The classes Ui, ErrorMessage, HelpMessage and MainMenu help handle the printing of various user interfaces of the "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "farice9"
        },
        "content": "program. ErrorMessage, HelpMessage and MainMenu are subclasses of Ui to make use of the methods in Ui."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "farice9"
        },
        "content": "StudyIt class will also initialize various instances of classes such as TimeTableRun, FlashCardRun, "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "farice9"
        },
        "content": "ArrayList\u003cBookmarkCategory\u003e, ArrayList\u003cGrade\u003e, ArrayList\u003cPerson\u003e and pass it to Command class to perform "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "farice9"
        },
        "content": "each mode’s functionality."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "farice9"
        },
        "content": "### **Bookmark Component**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "This bookmark section consists of how the bookmark feature is implemented. "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "The bookmark feature is implemented similarly to the main architecture, however, "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "in a smaller scale and a more bookmark-specific way. Figure 1 illustrates the general overview, "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "the associations and the multiplicity of the bookmark classes."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![Bookmark Class Diagram](Images/BookmarkDG/BookmarkRun_Class.png)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "API: java.bookmarkRun"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "The bookmark component consists of six major classes: `BookmarkRun`, `BookmarkStorage`, `BookmarkUi`, "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`BookmarkCategory`, `BookmarkList` and `BookmarkParser`. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "As shown in figure 1, `BookmarkRun` is "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* The main class to be called when the bookmark mode is accessed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* The main class to access other bookmark classes."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Given below, Figure 2, is the sequence diagram of how the classes interact with each "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "other when bookmark mode is accessed from the main function."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![Bookmark Sequence Diagram](Images/BookmarkDG/sequence_bookmark.png)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "The bookmark component has two modes: the main bookmark mode and the category mode. "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "As shown in Figure 2, when `BookmarkRun` is called, "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`BookmarkParser` will be called and return a `BookmarkCommand`. "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Afterwards, `BookmarkRun` will then call `executeCommand` in `BookmarkCommand` which executes "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "the intended actions "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Then, it will call `getCategorymode` to get the current mode the user is in. "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Bookmark Implementation**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "A more detailed explanation of `BookmarkCommand`, `BookmarkCategory` and `BookmarkList` will be "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "shown below. `BookmarkUi` and `BookmarkStorage` follow the same design implementations as the main "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "architecture. The below figure shows the command classes available and they are called based on the "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`BookmarkParser` class as illustrated in Figure 2. "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![BookmarkCommand ClassDiagram](Images/BookmarkDG/bookmarkCommand_Class.png)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Figure 4 shows a more detailed sequence diagram of how the `BookmarkCategory`, `BookmarkCommand` "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "and `BookmarkList` interacts with each other for the scenario when the user input an `AddLinkCommand` "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "in Bookmark mode."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![BookmarkCommand ClassDiagram](Images/BookmarkDG/AddCommand_sequenceDiagram.png)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "###Timetable Component"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "This section will describe in detail how some features inside the timetable section have been "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "implemented."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "![Timetable Class Diagram](Images/TimeTable%20class%20diagram.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "**API:** \u003cspan style\u003d\"color:blue\"\u003e`TimeTableRun`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "The timetable component consists of 7 major classes as shown. The above figure illustrates the"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": " association and the multiplicity of the classes. "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": " "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": " 1. As shown in the figure, `TimetableRun` is the main class to be accessed "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": " when the timetable function is called. "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": " 1. It associates with the `TimeTableStorage` class which is used to save data into a text file "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": " 1. `DateList` class that contains a number of `EventList`. "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": " 1. `EventList` contains a number of `Event`. "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": " 1. `Event` class is the abstract parent class for `Lesson` and `Activity`. "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": " 1. `Event` class also contains a number of `Duration` and it has a dependency on the `EvenType` enum."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "The figure below is the sequence diagram of how the classes interact with each other when "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "the main function make the run(command) API call."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "![timetable_sequence diagram](Images/timetable_sequence%20diagram.png)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "farice9"
        },
        "content": "### **Academic Component**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "This section will describe in detail how some features inside the academic tracker section have been implemented."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Figure x illustrates the general overview, the associations and the multiplicity of the academic classes."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![Academic_Class_Diagram](Images/Academic_Class_Diagram.png)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "API: `java.academic`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "The above diagram looks at the overall structure of how the academic tracker is being implemented. "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "This component is split into 7 different classes, "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "their associations and multiplicity as explained in the above diagram x. "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "The functions of the academic tracker will be called through the `AcademicRun` class "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "when the program is in academic mode, which will subsequently call "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "the functions in `PersonBook` or `GradeBook`. "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "The academic component:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* initialises two arraylists, `ArrayList\u003cGrade\u003e` and `ArrayList\u003cPeople\u003e` "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "to store the relevant `Grade` and `People` objects."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* uses `AcademicCommandParser` to parse the user command."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* identifies `AcademicCommandType` to decide "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "which of the commands under `PersonBook` or `GradeBook` is to be executed."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* calls `AcademicStorage` to store the current set of data into the local storage file."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "**Academic Implementation**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "This section explains the details on how certain features "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "are implemented in the academic tracker."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "**GradeBook Features**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "The grade features are facilitated by `Gradebook`, which further make use of `Grade`. "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Each `Grade` will contain information such as the module\u0027s title, credits, grade, status of SU and status of star."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "All grades are stored internally under `AcademicRun` as an array list `ArrayList\u003cGrade\u003e`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `addGrade(String[], ArrayList\u003cGrade\u003e)`:Adds a `Grade` to the `ArrayList\u003cGrade\u003e`. "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `printCap(ArrayList\u003cGrade\u003e)`:Calculate the current CAP based on the `ArrayList\u003cGrade\u003e`. "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `printListOfGrades(ArrayList\u003cGrade\u003e)`:Print out all the `Grade` that are currently stored inside `ArrayList\u003cGrade\u003e`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `deleteGrade(Integer, ArrayList\u003cGrade\u003e)`:Delete a `Grade` from a specified index inside `ArrayList\u003cGrade\u003e`."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `suGradeInGradeBook(Integer, ArrayList\u003cGrade\u003e)`:Su a `Grade` from a specified index inside `ArrayList\u003cGrade\u003e`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `starGrade(Integer, ArrayList\u003cGrade\u003e)`:Star a `Grade` from a specified index inside `ArrayList\u003cGrade\u003e`."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "* `combineGradeDetails(Grade)`:Print out the details of a particular `Grade`."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "The following sequence diagram demonstrates an example of how the Su Grade function works:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![Academic_Sequence_Diagram](Images/Academic_Sequence_Diagram.png)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "With reference to above, it can be observed that whenever a command modifies the array lists, "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`AcademicStorage` is called to update the local storage files."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "**PersonBook Features**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "The contact features are facilitated by `Personbook`, which further make use of `Person`. "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "In terms of general structure, it is largely similar to that of `GradeBook`\u0027s."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "farice9"
        },
        "content": "### **Flashcard Component**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "This section will describe in detail how the flashcard feature is implemented."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "![Flashcard Component Class Diagram](Images/Flashcard_Class.png)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "The above diagram looks at the overall structure of how the flashcard component is being implemented. "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "This component is split into 4 different classes, their associations and multiplicity as explained in "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "the above Figure 7. "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "1. The main class `FlashcardRun` will be accessed when the flashcard mode is called in `StudyIt` Class. "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "1. `FlashcardRun` class is associated with `FlashcardStorage` class that is used to store data in .txt file. "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "1.`FlashcardDeck` class which contains any number of `Flashcards`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "**Flashcard Implementation**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "![Sequence Diagram when user input “add card” command](Images/addCard_sequenceDiagram.png)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "With reference to Figure 8, when `FlashcardRun` is first initialised by `StudyIt`, it will construct "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "the `FlashcardDeck` class. As an add card command is given by the user, `FlashcardRun` will take in the "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "command and call `addCard()` method in `FlashcardDeck` which constructs a new Flashcard object and stores "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "it inside the `FlashcardDeck` object.The `addCard()` function will then show the user the question and "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "answer of the flashcard that have been created."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "## Documentation, logging, testing, configuration, dev-ops"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "### Testing guide"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Running tests:  "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "The main way that was used to run the test for Study It is:   "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Using IntelliJ JUnit test runner.   "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "A. To run all tests, right-click on the src/test/java folder and choose "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Run Test in ‘tp.test’  "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "B. To run a subset of tests, you can right-click on a test package, "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "test class or a test and choose Run ‘ABC’.  "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Type of Tests  "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "This project has 5 types of tests. 4 tests to test each feature and 1 test to test the main integration of the whole application."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "### Logging guide"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "We are using java.util.logging package for logging "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "The StudyItLog class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Log messages are output through the console and to a  .log file."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "The output logging level can be controlled using .setlevel( )"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "When choosing a level for a log message, follow the following conventions:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "1. SEVERE: A critical problem detected which may cause the termination of the application."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "2. WARNING: Can continue, but with caution."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "3. INFO: Information showing the noteworthy actions by the App."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "4. FINE:  Details that are not usually noteworthy but may be useful in debugging."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "### DevOps Guide "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Build automation  "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "This project uses Gradle for build automation management."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "./gradlew build - check for checkstyle error and runs all tests"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Code coverage"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "This project uses code coverage that is in IntelliJ IDE to check for the coverage of the code. "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "## Appendix: Requirement "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Target user profile:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* studies in NUS"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* has a need to manage a significant number of links"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* has a need to manage their classes in a timetable"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* has a need to manage their grades"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* has a need to manage contact numbers of professors and teaching assistants."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* has a need to memorise content to study "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* is reasonably comfortable using CLI apps  "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Value proposition:**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* manage links faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "* manage grades more easily than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "* manage contact numbers of professors and teaching assistants more effectively than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "* manage timetable in a more organised manner than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "* manage study content more efficiently than a typical mouse/GUI driven app "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "#### User Stories"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|Version| As a ... | I want to ... | So that I ...|"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|v1.0|Student in Nus|organise my zoom links|don’t need to find the zoom link everytime lectures/tutorials start.|"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|v1.0|student attending online classes|keep track of the timetable of my lessons whether  it is online or offline|do not miss any lessons.|"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|v2.0|Student in Nus|organise all the useful signup links (internship/ hackathon/ talks) sent to our emails|can keep track of my time and dates of any relevant events.|"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|v1.0|Student in Nus|keep track of my results and the number of SUs I have left,|can plan my semester properly|"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|v1.0|student with packed timetables|see clashes in my timetable |can plan things without overlapping events.|"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|v1.0|student taking a mod that requires me to memorize a lot of contents|organize the contents into flashcards|can revise them on the go.|"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|v1.0|student who is worried about my results|calculate my CAP based on estimated grades|know i won’t get expelled :’)|"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|v1.0|Student in Nus|keep track of my profs and ta’s contacts|know who to find when i have troubles.|"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "|v1.0|Student in Nus|bookmark all the important NUS websites|can access them more easily|"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "#### Non-Functional Requirements"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "* Should work on any [mainstream OS](#glossary) as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* A user with above average typing speed for regular English text "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "(i.e. not code, not system admin commands) should be able to accomplish most of the "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "* *Mainstream OS* - Windows, Unix, Linux, OS-X"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 112,
      "hailqueenflo": 25,
      "slightlyharp": 27,
      "luziyi9898": 51,
      "farice9": 133,
      "-": 26
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "{Give a product intro}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{Give steps to get started quickly}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Down the latest version of `Duke` from [here](http://link.to/duke)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "## 1. Bookmark"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Now that more lessons are moving online, are you managing your links well? You might "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "want to save your time finding your zoom links in your email inbox and save all your "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "links in the bookmark feature to access them easily! The bookmark mode enables you to "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "compile all your links in one destination and even categorise them into different groups. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "After entering the bookmark mode (refer to General Command 2), use the following commands to "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "navigate around bookmark mode. This section contains 8 commands : 1.1, 1.2, 1.3, 1.4, 1.5, "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "1.6, 1.7 and 1.8. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "###1.1 Viewing bookmarks in each category : "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`bm NUMBER`   "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Managing so many links can be a hassle! However, categorising the links into different "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "groups can make it even more efficient to find your links! After entering bookmark mode "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "(refer to General Command 2), you can view the list of links in each category using the "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "following commands. This command allows you to change the bookmark category within the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " bookmark mode. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Instruction:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "1. `bm NUMBER `"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "E.g. `bm 2`  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Expected output: "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![Bookmark_1.1](Images/BookmarkUG/Figure1.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Useful Information:**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* You can only use this command anywhere after entering the bookmark mode. ( Refer to General Command 2)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Zoom, Nus, Internship, Hackathon, Career Talks categories are included in the default."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "If you encounter any errors, take note of the following warnings. If problems still persist, refer to FAQ at the end of the user guide. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Warning:**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Ensure that the category NUMBER that you have chosen is valid. Error will be shown if the category NUMBER does not exist or the NUMBER you have entered is not a number. To find out the valid category NUMBER, go back to bookmark main. (Refer to 1.6)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "###1.2 Viewing all the bookmarks links : "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`list`   "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Are you trying to find your links by entering into each category to view the links? You might want to have an easy way to view the overview of the entire list of links in each category. You can now view the entire list of links using the following commands. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Instructions:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "1. `list`  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![Bookmark_1.2](Images/BookmarkUG/Figure2.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Useful Information:**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* You can only use this command anywhere after entering the bookmark mode.  (Refer to General Command 2)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* If your category does not have any links, it will indicate that the list is empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "###1.3 Adding category :  "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`cat CATEGORY_NAME `"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "If you cannot find the perfect category to place your bookmark, why not create your own category! In addition to the default categories that are added (Zoom, NUS, Internship, Hackathon, Career Talks), create your own category to add your bookmark links. Use the following commands to add a category and navigate it (Refer to 1.1) the same way as the rest of your categories."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "1. `cat CATEGORY_NAME`   "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "e.g. `cat entertainment`, `cat stocks`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Expected output:   "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![Bookmark_1.3](Images/BookmarkUG/Figure3.png)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Useful Information:** "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* You can only use this command anywhere after entering the bookmark mode.  (Refer to General Command 2)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* NUS, Zoom, Internship, Hackathon and Career Talk categories are included in the default."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "If you encounter any errors, take note of the following warnings. If problems still persist, refer to FAQ at the end of the user guide. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Warning:** "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Ensure that the category name is not empty. Error will be shown if the category name is empty. "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "###1.4 Deleting a category :  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`delete CATEGORY_NUMBER`  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "When you have a category, but you have no important links related to the category, take it out of your bookmark list! Organise and design your bookmark categories to your own personal needs by adding your own category (refer to 1.3) and deleting unnecessary categories using these following commands."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Instruction:  "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "1. delete CATEGORY_NUMBER  "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "e.g. delete 6  "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Expected output:  "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![Bookmark_1.4](Images/BookmarkUG/Figure4.png)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Useful Information:**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* You can only use this command in bookmark main.  (Refer to 1.5 to go back to the bookmark main)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Before deleting a category, take note of the following warnings. If you encounter any problems, refer to FAQ at the end of the user guide. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Warning:**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Ensure that the category NUMBER that you have chosen is valid. Error will be shown if the category NUMBER does not exist or the NUMBER you have entered is not a number. To find out the valid category NUMBER, go back to bookmark main. (Refer to 1.5)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* CAUTION: Deleting a category will delete all the bookmarks in the category! "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "###1.5 Going back to bookmark main : "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`back` "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "There are two modes in bookmark feature: the main bookmark mode (refer to General Command 2) and the category mode (refer to 1.1). To navigate freely from mode to mode, use the following command. This command goes back to the previous mode depending on which mode you are in. "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingsihui"
        },
        "content": " "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "1. back "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Expected output:   "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![Bookmark_1.5](Images/BookmarkUG/Figure5.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![Bookmark_1.6](Images/BookmarkUG/Figure6.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Useful Information:**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* When you input back in any bookmark category, you are brought back to the bookmark main. "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* When you input back in the bookmark main, you will be prompted to type “exit” to exit bookmark mode. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "###1.6 Adding a link to your chosen category : "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`add LINK` "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "If you have a link to add to your bookmark category, follow these commands. Make sure that you have chosen your category (Refer to 1.1)  and ensure that you do not add an invalid link or an empty link to your bookmark."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "1. add LINK  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "e.g. add https://nus-cs2113-ay2021s1.github.io/website/index.html"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Expected output:   "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![Bookmark_1.7](Images/BookmarkUG/Figure7.png)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Useful Information:**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* You can only use this command after choosing your category. (Refer to 1.1)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "If you encounter any errors, take note of the following warnings. If problems still persist, refer to FAQ at the end of the user guide. "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Warning:** "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Ensure that you have chosen a category. You will be prompted to choose a category before you are allowed to add your links. (Refer to 1.1) "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Ensure that the link added is valid. Error will be shown if the link you have given is empty or is not valid (does not contain “https://” and a “.”). "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "###1.7 Deleting a link: "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "`rm LINK_NUMBER `"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "If you have a link that you no longer want to bookmark, or if you have a link that you accidentally bookmarked it, you can remove the bookmark easily just by following these few commands. Make sure that you have chosen your category (Refer to 1.1)  and ensure that you do not add input an empty or a invalid link number"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "1. rm LINK_NUMBER  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "e.g. rm 1"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Expected output:   "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![Bookmark_1.8](Images/BookmarkUG/Figure8.png)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Useful Information:**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* You can only use this command after choosing your category. (Refer to 1.1)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "If you encounter any errors, take note of the following warnings. If problems still persist, refer to FAQ at the end of the user guide. "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Warning:**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Ensure that you have chosen a category. You will be prompted to choose a category before you are allowed to remove your links. (Refer to 1.1) "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Ensure that the link number that you want to remove is valid. Error will be shown if the link number you have given is empty or is not valid. Refer to 1.2 to find out the correct link number. "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "###1.8 Marking/ Unmarking a link as a starred link: star LINK_NUMBER "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "You might have many links that you need to manage, however, some of the links might be more important than others. If you have such links, you can easily mark them up by following these few commands. Make sure that you have chosen your category (Refer to 1.1)  and ensure that you do not have an empty or invalid link number."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "1. `star LINK_NUMBER`  "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "e.g. `star 1`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "Expected output:   "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "![Bookmark_1.9](Images/BookmarkUG/Figure9.png)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Useful Information:** "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* It is the same command for marking and unmarking any links. For example, if link 1 is not starred, star 1  will mark the link as starred. And if link 1 is starred, star 1 will unmark link 1. "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "If you encounter any errors, take note of the following warnings. If problems still persist, refer to FAQ at the end of the user guide. "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "**Warning:**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Ensure that you have chosen a category. You will be prompted to choose a category before you are allowed to mark your links as starred. (Refer to 1.1) "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "* Ensure that the link number that you want to mark as star is valid. Error will be shown if the link number you have given is empty or is not valid. Refer to 1.2 to find out the correct link number. "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "## 3. Academic"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Have you ever had to dig through tons of emails to look for the contact of a particular TA "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "or sweat over your calculator when trying to estimate your CAPS this semester? "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Academic tracker provides a convenient experience where you can store "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "all the information you need in one place! To access the academic tracker, "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "follow the instructions below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "###3.1 Entering Academic Mode : Entering Academic Mode : "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`cd 4` / `cd academic`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "This command allows you to enter academic tracker mode from the main menu or from the other modes."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "After entering this mode, you can then access all the features that the academic tracker offers!"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. `cd 4` / `academic`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![Academic_3_1](Images/AcademicUG/Academic_3_1.png)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "### 3.2 Adding a contact : "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`add contact c/CONTACT DETAILS m/MOBILE NUMBER  e/EMAIL`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "In academic mode, you can add a contact to the current list of contacts, following the instructions below. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. `add contact c/CONTACT DETAILS  m/MOBILE NUMBER  e/EMAIL`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`add contact c/Prof Lim  m/81234567  e/E7654321@u.nus.edu` "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "will add a contact with the name Prof Lim, mobile number 81234567, and email E7654321@u.nus.edu."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Expected output:  "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![Academic_3_2](Images/AcademicUG/Academic_3_2.png)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "*Note that contacts must be fully numerical and emails must contain an @."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "### 3.3 Listing all contacts: "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`list contact`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "You can view all the contacts that have been added previously "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "and stored on your computer by following these sets of instructions"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. `list contact`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![Academic_3_3](Images/AcademicUG/Academic_3_3.png)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "### 3.4 Starring a contact:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`star contact INDEX`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Sometimes you may wish to highlight an important contact, and that\u0027s where"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "starring a contact come into use. Follow the instructions below to mark an "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "important contact with a star."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. `star contact INDEX`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`star contact 1` will mark the first contact in the list with a star."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![Academic_3_4](Images/AcademicUG/Academic_3_4.png)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "### 3.5 Deleting a contact:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`delete contact INDEX`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Do you no longer require the contact of the TA of last sem\u0027s module? "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Make use of the delete contact function to clean up your contacts by following the"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "instructions below."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. `delete contact INDEX`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`delete contact 1` will delete the first contact in the list."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![Academic_3_5](Images/AcademicUG/Academic_3_5.png)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "### 3.6 Adding a grade : "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`add grade n/MODULE NAME  m/MC  g/GRADE`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "In academic mode, you can add a grade to the current list of grades, following the instructions below. "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. `add grade n/MODULE NAME  m/MC  g/GRADE`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`add grade n/CS2101  m/4  g/A-` "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "will add a grade with the title CS2101 that has 4 credits and scored an A-."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Expected output:  "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![Academic_3_6](Images/AcademicUG/Academic_3_6.png)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "*Note that module credits need to be a positive integer, and grade entered must be a valid grade."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "### 3.7 Listing all grades: "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`list grade`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "You can view all the grades that have been added previously "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "and stored on your computer by following these sets of instructions"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. `list grade`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![Academic_3_7](Images/AcademicUG/Academic_3_7.png)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "### 3.8 Checking current cap : "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`check cap`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "To calculate your current CAP based on the grades you have entered previously, "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "follow the instructions below"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. `check cap`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![Academic_3_8](Images/AcademicUG/Academic_3_8.png)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "### 3.9 Starring a grade:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`star grade INDEX`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "The star grade function can be used to highlight a particular grade. "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Follow the instructions below to mark an "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "important grade with a star."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. `star grade INDEX`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`star grade 1` will mark the first grade in the list with a star."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![Academic_3_9](Images/AcademicUG/Academic_3_9.png)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "### 3.10 SUing a grade:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`su grade INDEX`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "SUed a module and want to exclude it from your CAP calculation? The SU grade"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "function allows you to do just that through these simple steps."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. `su grade INDEX`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`su grade 1` will su the first grade in the list."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![Academic_3_10](Images/AcademicUG/Academic_3_10.png)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "### 3.11 Deleting a grade:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`delete grade INDEX`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "The delete grade function can be used to delete a grade from the currently stored"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " list of grades by following the instructions below."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. `delete grade INDEX`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`delete grade 1` will delete the first grade in the list."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![Academic_3_11](Images/AcademicUG/Academic_3_11.png)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "### 3.12 Listing all the starred items in academic:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "`list star`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "The list star function works like the highlight function, but only displaying"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "the starred items inside the academic section. "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "1. `list star`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "![Academic_3_12](Images/AcademicUG/Academic_3_12.png)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "### Adding a todo: `todo`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a new item to the list of todo items."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `todo n/TODO_NAME d/DEADLINE`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "* The `DEADLINE` can be in a natural language format."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "* The `TODO_NAME` cannot contain punctuation.  "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "`todo n/Write the rest of the User Guide d/next week`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "`todo n/Refactor the User Guide to remove passive voice d/13/04/2020`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: {your answer here}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "{Give a \u0027cheat sheet\u0027 of commands here}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* Add todo `todo n/TODO_NAME d/DEADLINE`"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 162,
      "luziyi9898": 196,
      "-": 41
    }
  },
  {
    "path": "src/main/java/academic/AcademicCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import academic.Grade;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import exceptions.InvalidGradeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import exceptions.InvalidMcException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class AcademicCommandParser extends CommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static AcademicCommandType getAcademicCommandType(String command)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throws InvalidCommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String commandModified \u003d CommandParser.standardizeCommand(command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (commandModified.startsWith(\"add contact\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return AcademicCommandType.ADD_CONTACT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else if (commandModified.startsWith(\"list contact\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return AcademicCommandType.LIST_CONTACT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"add grade\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return AcademicCommandType.ADD_GRADE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else if (commandModified.startsWith(\"check cap\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return AcademicCommandType.CHECK_CAP;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else if (commandModified.equalsIgnoreCase(\"list grade\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return AcademicCommandType.LIST_GRADE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else if (commandModified.startsWith(\"delete contact\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return AcademicCommandType.DELETE_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else if (commandModified.startsWith(\"delete grade\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return AcademicCommandType.DELETE_GRADE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else if (commandModified.startsWith(\"su grade\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return AcademicCommandType.SU_GRADE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"star grade\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return AcademicCommandType.STAR_GRADE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"star contact\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return AcademicCommandType.STAR_CONTACT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"list star\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return AcademicCommandType.LIST_STAR;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static String[] getContact(String command) throws NumberFormatException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String name \u003d command.substring(command.indexOf(\"c/\") + 2,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                command.indexOf(\"m/\")).trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String number \u003d command.substring(command.indexOf(\"m/\") + 2,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                command.indexOf(\"e/\")).trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String email \u003d command.substring(command.indexOf(\"e/\") + 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int numberFormatTest \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return new String[]{name, number, email};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static String[] getGrade(String command) throws InvalidGradeException, InvalidMcException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String name \u003d command.substring(command.indexOf(\"n/\") + 2,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                command.indexOf(\"m/\")).trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String mc \u003d command.substring(command.indexOf(\"m/\") + 2,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                command.indexOf(\"g/\")).trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String grade \u003d command.substring(command.indexOf(\"g/\") + 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(Grade.listOfGrades);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if (!list.contains(grade.toLowerCase())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            throw new InvalidGradeException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else if (Integer.parseInt(mc) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            throw new InvalidMcException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return new String[]{name, mc, grade};"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static String[] parseImportedPerson(String importedStatement) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int positionOfFirstDivider \u003d importedStatement.indexOf(\"|\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int positionOfSecondDivider \u003d importedStatement.indexOf(\"|\",positionOfFirstDivider + 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int positionOfThirdDivider \u003d importedStatement.indexOf(\"|\",positionOfSecondDivider + 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int positionOfFourthDivider \u003d importedStatement.lastIndexOf(\"|\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String var1 \u003d importedStatement.substring(positionOfFirstDivider + 1,positionOfSecondDivider).trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String var2 \u003d importedStatement.substring(positionOfSecondDivider + 1,positionOfThirdDivider).trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String var3 \u003d importedStatement.substring(positionOfThirdDivider + 1, positionOfFourthDivider).trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String var4 \u003d importedStatement.substring(positionOfFourthDivider + 1).trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return new String[]{var1, var2, var3, var4};"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static String[] parseImportedGrade(String importedStatement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int positionOfFirstDivider \u003d importedStatement.indexOf(\"|\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int positionOfSecondDivider \u003d importedStatement.indexOf(\"|\",positionOfFirstDivider + 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int positionOfThirdDivider \u003d importedStatement.indexOf(\"|\", positionOfSecondDivider + 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int positionOfFourthDivider \u003d importedStatement.indexOf(\"|\", positionOfThirdDivider + 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int positionOfFifthDivider \u003d importedStatement.lastIndexOf(\"|\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String var1 \u003d importedStatement.substring(positionOfFirstDivider + 1,positionOfSecondDivider).trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String var2 \u003d importedStatement.substring(positionOfSecondDivider + 1,positionOfThirdDivider).trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String var3 \u003d importedStatement.substring(positionOfThirdDivider + 1,positionOfFourthDivider).trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String var4 \u003d importedStatement.substring(positionOfFourthDivider + 1,positionOfFifthDivider).trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String var5 \u003d importedStatement.substring(positionOfFifthDivider + 1).trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return new String[]{var1, var2, var3, var4, var5};"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static Integer parseDeletePerson(String command) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return Integer.parseInt(command.substring(\"delete contact\".length()).trim());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static Integer parseDeleteGrade(String command) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return Integer.parseInt(command.substring(\"delete grade\".length()).trim());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static Integer parseSuGrade(String command) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return Integer.parseInt(command.substring(\"su grade\".length()).trim());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static Integer parseStarGrade(String command) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return Integer.parseInt(command.substring(\"star grade\".length()).trim());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static Integer parseStarContact(String command) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return Integer.parseInt(command.substring(\"star contact\".length()).trim());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 75,
      "farice9": 49
    }
  },
  {
    "path": "src/main/java/academic/AcademicCommandType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "public enum AcademicCommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "    ADD_CONTACT,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    LIST_CONTACT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "    ADD_GRADE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    CHECK_CAP,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    LIST_GRADE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    DELETE_PERSON,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    DELETE_GRADE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "    SU_GRADE,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "    STAR_GRADE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "    STAR_CONTACT,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "    LIST_STAR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 5,
      "farice9": 10
    }
  },
  {
    "path": "src/main/java/academic/AcademicRun.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import exceptions.InvalidEmailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "import exceptions.InvalidGradeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "import exceptions.InvalidMcException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.StudyItLog;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "import userinterface.ErrorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "import userinterface.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class AcademicRun {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private ArrayList\u003cGrade\u003e currentGrades;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private ArrayList\u003cPerson\u003e listOfPerson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public AcademicRun() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "        currentGrades \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        listOfPerson \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "            AcademicStorage.loadFile(listOfPerson, currentGrades);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "            System.out.println(\"Problem loading academic storage file\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Problem loading academic storage file\\n\" + e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StudyItLog.logger.info(\"Academic mode initialized\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "            AcademicCommandType commandType \u003d AcademicCommandParser.getAcademicCommandType(command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (commandType \u003d\u003d AcademicCommandType.ADD_CONTACT) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "                PersonBook.addPerson(AcademicCommandParser.getContact(command), listOfPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                Ui.printLine(\"Adding Contact\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } else if (commandType \u003d\u003d AcademicCommandType.LIST_CONTACT) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Ui.printLine(PersonBook.printPersonBook(listOfPerson));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else if (commandType \u003d\u003d AcademicCommandType.ADD_GRADE) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "                GradeBook.addGrade(AcademicCommandParser.getGrade(command), currentGrades);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                Ui.printLine(\"Adding Grade\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } else if (commandType \u003d\u003d AcademicCommandType.CHECK_CAP) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Ui.printLine(GradeBook.printCap(currentGrades));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else if (commandType \u003d\u003d AcademicCommandType.LIST_GRADE) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Ui.printLine(GradeBook.printListOfGrades(currentGrades));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else if (commandType \u003d\u003d AcademicCommandType.DELETE_PERSON) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "                PersonBook.deletePerson(AcademicCommandParser.parseDeletePerson(command),listOfPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                Ui.printLine(\"Deleting contact\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else if (commandType \u003d\u003d AcademicCommandType.DELETE_GRADE) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "                GradeBook.deleteGrade(AcademicCommandParser.parseDeleteGrade(command),currentGrades);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                Ui.printLine(\"Deleting grade\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else if (commandType \u003d\u003d AcademicCommandType.SU_GRADE) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "                GradeBook.suGradeInGradeBook(AcademicCommandParser.parseSuGrade(command), currentGrades);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                Ui.printLine(\"SU-ing grade\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else if (commandType \u003d\u003d AcademicCommandType.STAR_GRADE) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "                GradeBook.starGrade(AcademicCommandParser.parseStarGrade(command), currentGrades);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                Ui.printLine(\"Marking this grade as star\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else if (commandType \u003d\u003d AcademicCommandType.STAR_CONTACT) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "                PersonBook.starContact(AcademicCommandParser.parseStarContact(command), listOfPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                Ui.printLine(\"Marking this person as star\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else if (commandType \u003d\u003d AcademicCommandType.LIST_STAR) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "                AcademicUi.printStarList(currentGrades, listOfPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "            ErrorMessage.printUnidentifiableCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Invalid academic command: Command unidentifiable\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": "            ErrorMessage.printUnidentifiableInput();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Invalid academic command: String Index out of bounds.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": "            ErrorMessage.printInvalidNumber();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Invalid academic command: Invalid Number\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (InvalidGradeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": "            ErrorMessage.printInvalidGrade();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Invalid academic command: Invalid Grade\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (InvalidMcException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": "            ErrorMessage.printInvalidMc();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Invalid academic command: Invalid MC\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } catch (InvalidEmailException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            ErrorMessage.printInvalidEmail();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Invalid academic command: Invalid Email\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "farice9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "farice9"
        },
        "content": "            AcademicStorage.writeFile(listOfPerson, currentGrades);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "farice9"
        },
        "content": "            System.out.println(\"Problem writing to academic storage file\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Problem writing to academic storage file\\n\" + e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 13,
      "farice9": 79
    }
  },
  {
    "path": "src/main/java/academic/AcademicStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import exceptions.InvalidEmailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import timetable.DateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import userinterface.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class AcademicStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static final String filePath \u003d \"data/academic.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void loadFile(ArrayList\u003cPerson\u003e listOfPerson, ArrayList\u003cGrade\u003e listOfGrades) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            loadText(listOfPerson,listOfGrades);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } catch (FileNotFoundException | InvalidEmailException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "            System.out.println(\"data/academic.txt is not found, creating a new file now!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static void loadText(ArrayList\u003cPerson\u003e listOfPerson, ArrayList\u003cGrade\u003e listOfGrades)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            throws FileNotFoundException, InvalidEmailException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            String importedCommand \u003d s.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (importedCommand.startsWith(\"[P]\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                PersonBook.addPerson(AcademicCommandParser.parseImportedPerson(importedCommand),listOfPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            } else if (importedCommand.startsWith(\"[G]\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                GradeBook.addGrade(AcademicCommandParser.parseImportedGrade(importedCommand),listOfGrades);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void writeFile(ArrayList\u003cPerson\u003e listOfPerson, ArrayList\u003cGrade\u003e listOfGrades)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        for (Person person : listOfPerson) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (person !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                fw.write(Person.printIndividualPerson(person) + System.lineSeparator());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        for (Grade grade : listOfGrades) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (grade !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                fw.write(Grade.printIndividualGrade(grade) + System.lineSeparator());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 60,
      "farice9": 1
    }
  },
  {
    "path": "src/main/java/academic/AcademicUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import userinterface.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class AcademicUi extends Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printStarList(ArrayList\u003cGrade\u003e currentGrades, ArrayList\u003cPerson\u003e listOfPerson) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int listIndex \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Starred grades:\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "        for (Grade grade : currentGrades) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (grade.isStar) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "                System.out.println(listIndex + \".\" + GradeBook.combineGradeDetails(grade));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listIndex++;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"\\nStarred contacts:\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "        listIndex \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        for (Person person : listOfPerson) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (person.isStar) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "                System.out.println(listIndex + \".\" + PersonBook.combinePersonDetails(person));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listIndex++;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 27
    }
  },
  {
    "path": "src/main/java/academic/Grade.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " * Represents a grade for a module in study-it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class Grade {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected String moduleName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected Integer moduleCredits;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected String moduleGrade;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected Boolean isModuleSued;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected Boolean isStar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static String[] listOfGrades \u003d new String[]{\"a+\",\"a\",\"a-\",\"b+\",\"b\",\"b-\",\"c+\",\"c\",\"d+\",\"d\",\"f\"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public Grade(String name, Integer credits, String grade) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.moduleName \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.moduleCredits \u003d credits;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.moduleGrade \u003d grade;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.isModuleSued \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        this.isStar \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static String printIndividualGrade(Grade grade) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return \"[G] | \" + grade.moduleName + \" | \" + grade.moduleCredits"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "                + \" | \" + grade.moduleGrade + \" | \" + grade.isModuleSued"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "                + \" | \" + grade.isStar;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static Integer getModuleCredits(Grade grade) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return grade.moduleCredits;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static String getModuleGrade(Grade grade) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return grade.moduleGrade;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void suGrade(Grade grade) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        grade.isModuleSued \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static Boolean isGradeSued(Grade grade) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return  grade.isModuleSued;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void changeStarGrade(Grade grade) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "        grade.isStar \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static Boolean isGradeStar(Grade grade) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return grade.isStar;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static double convertLetterToCredit(String input) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        switch (input.trim().toLowerCase()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        case \"a+\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        case \"a\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return 5.0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        case \"a-\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return 4.5;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        case \"b+\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return 4.0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        case \"b\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return 3.5;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        case \"b-\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return 3.0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        case \"c+\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return 2.5;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        case \"c\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return 2.0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        case \"d+\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return 1.5;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        case \"d\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return 1.0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        case \"f\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 70,
      "farice9": 12
    }
  },
  {
    "path": "src/main/java/academic/GradeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " * Represents a grade book in study-it."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class GradeBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void addGrade(String[] args, ArrayList\u003cGrade\u003e currentGrades) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        currentGrades.add(new Grade(args[0], Integer.parseInt(args[1]), args[2].toUpperCase()));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (args.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (args[3].equals(\"true\")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                Grade.suGrade(currentGrades.get(currentGrades.size() - 1));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (args[4].equals(\"true\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "                Grade.changeStarGrade(currentGrades.get(currentGrades.size() - 1));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void deleteGrade(Integer indexToBeDeleted, ArrayList\u003cGrade\u003e currentGrades) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        currentGrades.remove(indexToBeDeleted - 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String printCap(ArrayList\u003cGrade\u003e currentGrades) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        double totalGradeScore \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int totalCredits \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        for (Grade grade : currentGrades) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (!Grade.isGradeSued(grade)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                totalCredits +\u003d Grade.getModuleCredits(grade);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                totalGradeScore +\u003d Grade.convertLetterToCredit(Grade.getModuleGrade(grade))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                        * Grade.getModuleCredits(grade);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if (totalCredits !\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return \"Current CAP is \" + totalGradeScore / totalCredits + \".\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            return \"Current CAP is not available!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void suGradeInGradeBook(Integer indexToBeSued, ArrayList\u003cGrade\u003e currentGrades) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        Grade.suGrade(currentGrades.get(indexToBeSued - 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void starGrade(Integer indexToBeStar, ArrayList\u003cGrade\u003e currentGrades) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (indexToBeStar \u003e 0 \u0026\u0026 indexToBeStar \u003c\u003d currentGrades.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Grade.changeStarGrade(currentGrades.get(indexToBeStar - 1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "            System.out.println(\"Invalid star index! Please try again!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String printListOfGrades(ArrayList\u003cGrade\u003e currentGrades) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int listIndex \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        StringBuilder listToPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if (currentGrades.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listToPrint.append(\"You have not added any grades!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "        for (Grade grade : currentGrades) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (grade !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listToPrint.append(listIndex + 1 + \".\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listToPrint.append(combineGradeDetails(grade));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                listIndex++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "                if (currentGrades.size() !\u003d listIndex) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    listToPrint.append(\"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return listToPrint.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String combineGradeDetails(Grade grade) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StringBuilder gradeDetail \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "        gradeDetail.append(\"[\" + grade.moduleName + \"]\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "farice9"
        },
        "content": "        gradeDetail.append(\" [\" + grade.moduleCredits + \"MC]\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": "        gradeDetail.append(\" [\" + grade.moduleGrade + \"]\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (Grade.isGradeSued(grade)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "farice9"
        },
        "content": "            gradeDetail.append(\" (This mod is SU-ed)\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (Grade.isGradeStar(grade)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "farice9"
        },
        "content": "            gradeDetail.append(\" (*)\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return gradeDetail.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 54,
      "farice9": 33
    }
  },
  {
    "path": "src/main/java/academic/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " * Represents a person in study-it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected String nameOfPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected String contactNumberOfPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    protected String emailOfPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "    protected Boolean isStar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public Person(String name, String number, String email) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.nameOfPerson \u003d name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.contactNumberOfPerson \u003d number;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        this.emailOfPerson \u003d email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "        this.isStar \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static String printIndividualPerson(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return \"[P] | \" + person.nameOfPerson + \" | \" + person.contactNumberOfPerson"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "                + \" | \" + person.emailOfPerson + \" | \" + person.isStar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void changePersonStar(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "        person.isStar \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static Boolean isStar(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return person.isStar;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 19,
      "farice9": 12
    }
  },
  {
    "path": "src/main/java/academic/PersonBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import exceptions.InvalidEmailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " * Represents a grade book in study-it."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class PersonBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void addPerson(String[] args, ArrayList\u003cPerson\u003e listOfPerson) throws InvalidEmailException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if (args[2].contains(\"@\")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "            listOfPerson.add(new Person(args[0], args[1], args[2]));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (args.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "                if (args[3].equals(\"true\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    Person.changePersonStar(listOfPerson.get(listOfPerson.size() - 1));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            throw new InvalidEmailException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void deletePerson(Integer indexToBeDeleted, ArrayList\u003cPerson\u003e listOfPerson) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        listOfPerson.remove(indexToBeDeleted - 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void starContact(Integer indexToBeStar, ArrayList\u003cPerson\u003e listOfPerson) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (indexToBeStar \u003e 0 \u0026\u0026 indexToBeStar \u003c\u003d listOfPerson.size()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Person.changePersonStar(listOfPerson.get(indexToBeStar - 1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "            System.out.println(\"Invalid star index! Please try again\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String printPersonBook(ArrayList\u003cPerson\u003e listOfPerson) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        int listIndex \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        StringBuilder listToPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        if (listOfPerson.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            listToPrint.append(\"You have not added any contacts!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "        for (Person person : listOfPerson) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            if (person !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listToPrint.append((listIndex + 1) + \".\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "                listToPrint.append(combinePersonDetails(person));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                listIndex++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "                if (listOfPerson.size() !\u003d listIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                    listToPrint.append(\"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        return listToPrint.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String combinePersonDetails(Person person) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StringBuilder personDetails \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "        personDetails.append(\"[\" + person.nameOfPerson + \"]\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "        personDetails.append(\" [\" + person.contactNumberOfPerson + \"]\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "        personDetails.append(\" [\" + person.emailOfPerson + \"]\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (Person.isStar(person)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "            personDetails.append(\" (*)\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return personDetails.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 36,
      "farice9": 31
    }
  },
  {
    "path": "src/main/java/bookmark/BookmarkCategory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class BookmarkCategory {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private ArrayList\u003cBookmarkList\u003e links \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public BookmarkCategory(String name) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public ArrayList\u003cBookmarkList\u003e getLinks() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return links;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void addLink(String link, String title) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        links.add(new BookmarkList(link, title));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void removeLink(int number) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        links.remove(number - 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void markLinkAsStar(int number) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        links.get(number).markLinkAsStar();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 32
    }
  },
  {
    "path": "src/main/java/bookmark/BookmarkList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class BookmarkList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String link;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private Boolean star;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public BookmarkList(String link, String title) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.link \u003d link;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.star \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String getLink() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String returnLink \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (star) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            returnLink +\u003d \"|STAR|\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (title !\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return returnLink + link + \" t-\u003e\" + title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return returnLink + link;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void markLinkAsStar() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (!this.star) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            this.star \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            assert this.star : \"star is unmarked incorrectly\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            this.star \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String getStarIcon() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return (star ? \" (*)\" : \"\"); //return tick symbols"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (title \u003d\u003d \"\" || title \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return link + getStarIcon();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return title + \": \" + link + getStarIcon();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public Boolean getStar() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return star;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 50
    }
  },
  {
    "path": "src/main/java/bookmark/BookmarkParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.AddCategoryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.AddLinkCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.BackCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.ChangeModeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.BookmarkCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.RemoveCategoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.RemoveLinkCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.StarCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "import bookmark.commands.ListStarCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.CommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.StudyItLog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class BookmarkParser extends CommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public BookmarkParser() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public BookmarkCommand evaluateInput(String command, int chosenCategory) throws InvalidCommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            StudyItLog.logger.finest(\"Empty command\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String commandModified \u003d command.trim().toLowerCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (commandModified.startsWith(\"bm\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return new ChangeModeCommand(command, chosenCategory);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"add\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return new AddLinkCommand(command, chosenCategory);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"rm\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return new RemoveLinkCommand(command, chosenCategory);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"list\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (commandModified.contains(\"star\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "                return new ListStarCommand(chosenCategory);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                return new ListCommand(chosenCategory);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"back\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return new BackCommand(chosenCategory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (commandModified.startsWith(\"cat\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return new AddCategoryCommand(command,chosenCategory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (commandModified.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return new RemoveCategoryCommand(command,chosenCategory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else if (commandModified.startsWith(\"star\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return new StarCommand(command,chosenCategory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            StudyItLog.logger.info(\"Cannot understand bookmark command\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 38,
      "farice9": 14
    }
  },
  {
    "path": "src/main/java/bookmark/BookmarkRun.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.BookmarkCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import studyit.StudyItLog;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class BookmarkRun {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private ArrayList\u003cBookmarkCategory\u003e bookmarkCategories;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private BookmarkUi bookmarkUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private BookmarkParser bookmarkParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private BookmarkStorage bookmarkStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int mode \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public BookmarkRun() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        bookmarkUi \u003d new BookmarkUi();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        bookmarkParser \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        bookmarkStorage \u003d new BookmarkStorage(\"data/bookmark.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            bookmarkCategories \u003d bookmarkStorage.loadFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "            System.out.println(\"An error occured: \" + e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StudyItLog.logger.info(\"Bookmark mode initialized\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            BookmarkCommand c \u003d bookmarkParser.evaluateInput(command,mode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            c.executeCommand(bookmarkUi,bookmarkCategories,bookmarkStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            mode \u003d c.getCategoryNumber();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            bookmarkUi.showInvalidBookmarkCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Invalid bookmark command: Command unidentifiable\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 33,
      "farice9": 8
    }
  },
  {
    "path": "src/main/java/bookmark/BookmarkStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.StudyItLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class BookmarkStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private final File bookmarkFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public BookmarkStorage(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String dirPath \u003d \"data\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        File fileDir \u003d new File(dirPath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (!fileDir.exists()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            fileDir.mkdir();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        bookmarkFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public ArrayList\u003cBookmarkCategory\u003e loadFile() throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            Scanner s \u003d new Scanner(bookmarkFile);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ArrayList\u003cBookmarkCategory\u003e bookmarkCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                String[] parseCategory \u003d s.nextLine().split(\"\u003d\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                String categoryName \u003d parseCategory[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                bookmarkCategories.add(new BookmarkCategory(categoryName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                if (parseCategory.length \u003c 2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                String[] links \u003d parseCategory[1].split(\",\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                String title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                int x \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                for (String link : links) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    link \u003d link.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    if (link.contains(\" t-\u003e\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                        String[] array \u003d link.split(\" t-\u003e\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                        link \u003d array[0].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                        title \u003d array[1].trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                        title \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    assert i \u003e\u003d 0 : \"Problem reading file\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    if (link.contains(\"|STAR|\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                        bookmarkCategories.get(i).addLink(link.substring(6),title);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                        bookmarkCategories.get(i).markLinkAsStar(x);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                        bookmarkCategories.get(i).addLink(link,title);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    x++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return bookmarkCategories;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": "            System.out.println(\"data/bookmark.txt is not found, creating a new file now!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": "            bookmarkFile.createNewFile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ArrayList\u003cBookmarkCategory\u003e newBookmarkCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            newBookmarkCategories.add(new BookmarkCategory(\"NUS\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            newBookmarkCategories.add(new BookmarkCategory(\"Zoom\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            newBookmarkCategories.add(new BookmarkCategory(\"Internship\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            newBookmarkCategories.add(new BookmarkCategory(\"Hackathon\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            newBookmarkCategories.add(new BookmarkCategory(\"Career Talk\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": "            saveLinksToFile(newBookmarkCategories);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.info(e + \"\\nflashcard storage file created\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            return newBookmarkCategories;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void saveLinksToFile(ArrayList\u003cBookmarkCategory\u003e categories) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, false); //true append, false overwrite"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            for (BookmarkCategory category : categories) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                fw.write(category.getName() + \"\u003d\" + getCategoryLinks(category) + System.lineSeparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            System.out.println(\"Something went wrong\" + e.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Problem writing to bookmark storage file\\n\" + e);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String getCategoryLinks(BookmarkCategory category) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String listOfLinks \u003d \"\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        for (BookmarkList link : category.getLinks()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            listOfLinks +\u003d link.getLink() + \",\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return listOfLinks;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 93,
      "farice9": 8
    }
  },
  {
    "path": "src/main/java/bookmark/BookmarkUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class BookmarkUi {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public BookmarkUi() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printWelcomeBookmarkMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Welcome to bookmark mode!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"You can use this mode to bookmark your links for easier access!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"\\nChoose your category by typing \\\"bm \u003ccategory index\u003e!\\\"\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Otherwise, insert \\\"help\\\" to find the list of commands available\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showBookmarkCategoryList(ArrayList\u003cBookmarkCategory\u003e bookmarkCategories) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Here are the categories available:\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        for (BookmarkCategory category: bookmarkCategories) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            System.out.println(i + \".\" + category.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showBookmarkLinkList(ArrayList\u003cBookmarkList\u003e links) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Bookmarks:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (links.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "            System.out.println(\"\u003cempty\u003e\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            for (BookmarkList link: links) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                System.out.println(\"\\t\" + i + \".\" + link);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void printGoodbyeMessage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Use \\\"exit\\\" to exit the mode or enter another category\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "                + \"using \\\"bm \u003ccategory index\u003e\\\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showBookmarkList(ArrayList\u003cBookmarkCategory\u003e categories) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Here is the list\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        for (int i \u003d 0; i \u003c categories.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            System.out.println((i + 1) + \". Category: \" + categories.get(i).getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            showBookmarkLinkList(categories.get(i).getLinks());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showInvalidBookmarkCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Invalid Bookmark commands\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void printChooseCategoryMessage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Please choose a category.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showEmptyLinkError() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Empty link :(\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showInvalidLinkError() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Not a valid link, please enter a valid link.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showInvalidNumberError() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Enter a number\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showModeChangeMessage(ArrayList\u003cBookmarkCategory\u003e categories, int categoryNumberInList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"You are now in \" + categories.get(categoryNumberInList).getName() + \" category\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"The following are your current bookmarks in this category\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        showBookmarkLinkList(categories.get(categoryNumberInList).getLinks());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Add new bookmarks by using \\\"add \u003clink\u003e\\\"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showAlreadyInModeMessage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Already in chosen Category\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void showStarBookmarks(ArrayList\u003cBookmarkCategory\u003e categories) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(\"Starred bookmarks: \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        for (BookmarkCategory category : categories) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            for (BookmarkList link : category.getLinks()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                if (link.getStar()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                    System.out.println(i + \".\" + link);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 86,
      "farice9": 11
    }
  },
  {
    "path": "src/main/java/bookmark/commands/AddCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkCategory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import exceptions.EmptyBookmarkException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class AddCategoryCommand extends BookmarkCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int CAT_LENGTH \u003d 3;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int categoryNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String  categoryToAdd;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public AddCategoryCommand(String command,int categoryNumber) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.categoryNumber \u003d categoryNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.categoryToAdd \u003d command.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert command.toLowerCase().startsWith(\"cat\") : \"Add category command is \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                + \"called when line does not start with cat\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert categoryNumber \u003e\u003d 0 : \"Missing category number\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand(BookmarkUi ui, ArrayList\u003cBookmarkCategory\u003e categories, BookmarkStorage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            evaluateCategory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            categories.add(new BookmarkCategory(categoryName));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            System.out.println(\"Adding \" + categoryName + \" to bookmark category...\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showBookmarkCategoryList(categories);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            storage.saveLinksToFile(categories);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (EmptyBookmarkException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showEmptyLinkError();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private void evaluateCategory() throws EmptyBookmarkException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (categoryToAdd.length() \u003c\u003d CAT_LENGTH) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new EmptyBookmarkException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert categoryToAdd.length() \u003e 0 : \"Link should not be empty\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categoryName \u003d categoryToAdd.substring(CAT_LENGTH).trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public int getCategoryNumber() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return categoryNumber;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 47
    }
  },
  {
    "path": "src/main/java/bookmark/commands/AddLinkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkCategory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import exceptions.InvalidBookmarkException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import exceptions.EmptyBookmarkException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class AddLinkCommand extends BookmarkCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int ADD_LENGTH \u003d 3;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int categoryNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String link;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public AddLinkCommand(String line, int categoryNumber) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.categoryNumber \u003d categoryNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.line \u003d line.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert line.toLowerCase().startsWith(\"add\") : \"Add link command is called when line does not start with add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert categoryNumber \u003e\u003d 0 : \"Missing category number\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand(BookmarkUi ui, ArrayList\u003cBookmarkCategory\u003e categories, BookmarkStorage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            if (categoryNumber \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                ui.printChooseCategoryMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                assert categoryNumber \u003e 0 : \"Category number is not chosen\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                evaluateLink();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                categories.get(categoryNumber - 1).addLink(link,title);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                ui.showBookmarkLinkList(categories.get(categoryNumber - 1).getLinks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                storage.saveLinksToFile(categories);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (EmptyBookmarkException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showEmptyLinkError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (InvalidBookmarkException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showInvalidLinkError();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private void evaluateLink() throws EmptyBookmarkException, InvalidBookmarkException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (line.length() \u003c\u003d ADD_LENGTH) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new EmptyBookmarkException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert line.length() \u003e 0 : \"Link should not be empty\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        link \u003d line.substring(ADD_LENGTH).trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (link.contains(\" t-\u003e\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            String[] array \u003d link.split(\" t-\u003e\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            if (array.length \u003c 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                throw new EmptyBookmarkException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            link \u003d array[0].trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            title \u003d array[1].trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            title \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (!link.contains(\".\") || link.contains(\" \")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new InvalidBookmarkException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert link.contains(\".\") \u0026\u0026 !link.contains(\" \") : \"Invalid link\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public int getCategoryNumber() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return categoryNumber;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 68
    }
  },
  {
    "path": "src/main/java/bookmark/commands/BackCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkCategory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class BackCommand extends BookmarkCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int categoryNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public BackCommand(int chosenCategory) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.categoryNumber \u003d chosenCategory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert categoryNumber \u003e\u003d 0 : \"Missing category number\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand(BookmarkUi ui, ArrayList\u003cBookmarkCategory\u003e categories, BookmarkStorage bookmarkStorage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (categoryNumber \u003d\u003d 0) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.printGoodbyeMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showBookmarkCategoryList(categories);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            categoryNumber \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            assert categoryNumber \u003d\u003d 0 : \"Category number not updated\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public int getCategoryNumber() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return categoryNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 29
    }
  },
  {
    "path": "src/main/java/bookmark/commands/BookmarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkCategory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public abstract class BookmarkCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public abstract void executeCommand(BookmarkUi ui, ArrayList\u003cBookmarkCategory\u003e categories,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                                        BookmarkStorage bookmarkStorage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public abstract int getCategoryNumber();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 15
    }
  },
  {
    "path": "src/main/java/bookmark/commands/ChangeModeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkCategory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import exceptions.InvalidBookmarkException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import exceptions.EmptyBookmarkException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class ChangeModeCommand extends BookmarkCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int RM_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int categoryNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public ChangeModeCommand(String line, int categoryNumber) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.line \u003d line.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.categoryNumber \u003d categoryNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert line.startsWith(\"bm\") : \"change mode command is called when line does not start with cd\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert categoryNumber \u003e\u003d 0 : \"Missing category number\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand(BookmarkUi ui, ArrayList\u003cBookmarkCategory\u003e categories, BookmarkStorage bookmarkStorage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            int category \u003d getChosenCategory(categories);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            if (category \u003d\u003d categoryNumber) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                ui.showAlreadyInModeMessage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "                assert category \u003d\u003d categoryNumber : \"studyit.Mode does not change when it is already in the mode\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                categoryNumber \u003d category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "                int categoryNumberInList \u003d categoryNumber - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                ui.showModeChangeMessage(categories, categoryNumberInList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (EmptyBookmarkException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showEmptyLinkError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (InvalidBookmarkException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showInvalidLinkError();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int getChosenCategory(ArrayList\u003cBookmarkCategory\u003e categories)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throws InvalidBookmarkException, EmptyBookmarkException, NumberFormatException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (line.trim().length() \u003c\u003d RM_LENGTH) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new EmptyBookmarkException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int category \u003d Integer.parseInt(line.substring(RM_LENGTH).trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (category \u003d\u003d 0 || category \u003e categories.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new InvalidBookmarkException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public int getCategoryNumber() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return categoryNumber;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 58,
      "farice9": 2
    }
  },
  {
    "path": "src/main/java/bookmark/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkCategory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class ListCommand extends BookmarkCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int categoryNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public ListCommand(int categoryNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.categoryNumber \u003d categoryNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert categoryNumber \u003e\u003d 0 : \"Missing category number\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand(BookmarkUi ui, ArrayList\u003cBookmarkCategory\u003e categories, BookmarkStorage bookmarkStorage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        ui.showBookmarkList(categories);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public int getCategoryNumber() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return categoryNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 25
    }
  },
  {
    "path": "src/main/java/bookmark/commands/ListStarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package bookmark.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import bookmark.BookmarkCategory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "import bookmark.BookmarkStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class ListStarCommand extends BookmarkCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private int categoryNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public ListStarCommand(int categoryNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "        this.categoryNumber \u003d categoryNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assert categoryNumber \u003e\u003d 0 : \"Missing category number\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public int getCategoryNumber() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return categoryNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public void executeCommand(BookmarkUi ui, ArrayList\u003cBookmarkCategory\u003e categories, BookmarkStorage bookmarkStorage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "        ui.showStarBookmarks(categories);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 24
    }
  },
  {
    "path": "src/main/java/bookmark/commands/RemoveCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkCategory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import exceptions.EmptyBookmarkException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import exceptions.InvalidBookmarkException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class RemoveCategoryCommand extends BookmarkCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int DELETE_LENGTH \u003d 6;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int catNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int categoryNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public RemoveCategoryCommand(String line, int categoryNumber) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.categoryNumber \u003d categoryNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.line \u003d line.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert line.toLowerCase().startsWith(\"delete\") : \"Delete category command is called wrongly\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert categoryNumber \u003e\u003d 0 : \"Missing category number\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand(BookmarkUi ui, ArrayList\u003cBookmarkCategory\u003e categories, BookmarkStorage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            if (categoryNumber !\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                System.out.println(\"Please go back to main bookmark menu to delete a category\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                assert categoryNumber \u003e 0 : \"Choose Category message is called when category number is chosen\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            } else if (line.length() \u003c\u003d DELETE_LENGTH) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                throw new EmptyBookmarkException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                line \u003d line.substring(DELETE_LENGTH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                assert line.length() \u003e 0 : \"Link should not be empty\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                catNumber \u003d evaluateLinkNumber(categories);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                System.out.println(\"Deleting Category: \" + categories.get(catNumber - 1).getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                categories.remove(catNumber - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                ui.showBookmarkCategoryList(categories);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                storage.saveLinksToFile(categories);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (EmptyBookmarkException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showEmptyLinkError();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (InvalidBookmarkException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showInvalidLinkError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int evaluateLinkNumber(ArrayList\u003cBookmarkCategory\u003e categories)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throws NumberFormatException, InvalidBookmarkException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        line \u003d line.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int catNum \u003d Integer.parseInt(line);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (catNum \u003d\u003d 0 || catNum \u003e categories.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new InvalidBookmarkException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return catNum;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public int getCategoryNumber() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return categoryNumber;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lingsihui": 67
    }
  },
  {
    "path": "src/main/java/bookmark/commands/RemoveLinkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkCategory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import exceptions.InvalidBookmarkException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import exceptions.EmptyBookmarkException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class RemoveLinkCommand extends BookmarkCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int RM_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int linkNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int categoryNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public RemoveLinkCommand(String line, int categoryNumber) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.categoryNumber \u003d categoryNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.line \u003d line.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert line.startsWith(\"rm\") : \"Remove link command is called when line does not start with rm\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assert categoryNumber \u003e\u003d 0 : \"Missing category number\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand(BookmarkUi ui, ArrayList\u003cBookmarkCategory\u003e categories, BookmarkStorage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            if (categoryNumber \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                ui.printChooseCategoryMessage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                assert categoryNumber \u003d\u003d 0 : \"Choose Category message is called when category number is chosen\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            } else if (line.length() \u003c\u003d RM_LENGTH) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                throw new EmptyBookmarkException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                line \u003d line.substring(RM_LENGTH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                assert line.length() \u003e 0 : \"Link should not be empty\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                linkNumber \u003d evaluateLinkNumber(categories);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                System.out.println(\"Removing link: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                        + categories.get(categoryNumber - 1).getLinks().get(linkNumber - 1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                categories.get(categoryNumber - 1).removeLink(linkNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                ui.showBookmarkLinkList(categories.get(categoryNumber - 1).getLinks());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                storage.saveLinksToFile(categories);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (EmptyBookmarkException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showEmptyLinkError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (InvalidBookmarkException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showInvalidLinkError();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int evaluateLinkNumber(ArrayList\u003cBookmarkCategory\u003e categories)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throws NumberFormatException, InvalidBookmarkException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        line \u003d line.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int linkNum \u003d Integer.parseInt(line);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (linkNum \u003d\u003d 0 || linkNum \u003e categories.get(categoryNumber - 1).getLinks().size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new InvalidBookmarkException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return linkNum;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public int getCategoryNumber() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return categoryNumber;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 63
    }
  },
  {
    "path": "src/main/java/bookmark/commands/StarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkCategory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import exceptions.EmptyBookmarkException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import exceptions.InvalidBookmarkException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class StarCommand extends BookmarkCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static final int STAR_LENGTH \u003d 4;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int chosenCategory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int starLinkNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public StarCommand(String line, int chosenCategory) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.line \u003d line.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        this.chosenCategory \u003d chosenCategory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand(BookmarkUi ui, ArrayList\u003cBookmarkCategory\u003e categories, BookmarkStorage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            if (chosenCategory \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                ui.printChooseCategoryMessage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            } else if (line.length() \u003c\u003d STAR_LENGTH) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                throw new EmptyBookmarkException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                assert chosenCategory \u003e 0 : \"Category number is not chosen\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                evaluateStarNumber(categories);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                categories.get(chosenCategory - 1).markLinkAsStar(starLinkNumber - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                ui.showBookmarkLinkList(categories.get(chosenCategory - 1).getLinks());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                ui.showStarBookmarks(categories);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                storage.saveLinksToFile(categories);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (EmptyBookmarkException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showEmptyLinkError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (InvalidBookmarkException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showInvalidLinkError();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private void evaluateStarNumber(ArrayList\u003cBookmarkCategory\u003e categories)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throws NumberFormatException, InvalidBookmarkException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        line \u003d line.substring(STAR_LENGTH).trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int catNum \u003d Integer.parseInt(line);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        if (catNum \u003d\u003d 0 || catNum \u003e categories.get(chosenCategory - 1).getLinks().size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            throw new InvalidBookmarkException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        starLinkNumber \u003d catNum;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public int getCategoryNumber() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        return chosenCategory;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 58
    }
  },
  {
    "path": "src/main/java/exceptions/EmptyBookmarkException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class EmptyBookmarkException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 4
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidBookmarkException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class InvalidBookmarkException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 4
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 4
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidEmailException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class InvalidEmailException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 4
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidGradeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class InvalidGradeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 4
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidMcException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "public class InvalidMcException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 4
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidModeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class InvalidModeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 4
    }
  },
  {
    "path": "src/main/java/flashcard/Flashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "package flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "public class Flashcard {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public String question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public String answer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public Flashcard(String question, String answer) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        return question + \"|\" + answer + \"\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hailqueenflo": 15,
      "slightlyharp": 1
    }
  },
  {
    "path": "src/main/java/flashcard/FlashcardDeck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "package flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import userinterface.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "public class FlashcardDeck {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public ArrayList\u003cFlashcard\u003e flashcardDeck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public FlashcardDeck() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        flashcardDeck \u003d new ArrayList\u003cFlashcard\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public void addCards() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.out.println(\"Please enter question: \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        final String question \u003d in.nextLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.out.println(\"Please enter answer: \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        String answer \u003d in.nextLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        while (answer.equals(\"back\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            System.out.println(\"The answer cannot be \\\"back\\\"! Please enter another answer: \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            answer \u003d in.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        flashcardDeck.add(new Flashcard(question, answer));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.out.println(\"You have successfully created the flashcard below: \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                + \"Question: \" + question + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                + \"Answer: \" + answer);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public void listCards() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.out.println(\"Here is the list of flashcards you have: \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        int cardIndex \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        for (Flashcard flashcard: flashcardDeck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            System.out.println(cardIndex + \". \" + flashcard.question + \"|\" + flashcard.answer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            cardIndex++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public void testRandomCard() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        int score \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.out.println(\"You have entered the test mode.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        String attempt \u003d \"null\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        while (!attempt.equals(\"back\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            Random random \u003d new Random();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            int randomIndex \u003d random.nextInt(flashcardDeck.size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            System.out.println(\"What is the answer to this question?\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            System.out.println(flashcardDeck.get(randomIndex).question);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            attempt \u003d in.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            while (!attempt.equals(flashcardDeck.get(randomIndex).answer) \u0026\u0026 !attempt.equals(\"back\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                System.out.println(\"Incorrect! Try again?\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                attempt \u003d in.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            if (attempt.equals(\"back\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                Ui.printDivider();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                System.out.println(\"Exiting test mode...\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                        + \"You are now back in flashcard main.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                score++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                System.out.print(\"This is the right answer! \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                if (score \u003d\u003d 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                    System.out.println(\"You now have \" + score + \" point.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                    System.out.println(\"You now have \" + score + \" points.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            Ui.printDivider();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public void deleteCard() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.out.println(\"Please enter the index of the card you wish to delete.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        int cardIndex \u003d 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            cardIndex \u003d Integer.parseInt(userInput);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            if (cardIndex \u003e flashcardDeck.size()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                Ui.printDivider();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                System.out.println(\"Sorry, you only have \" + flashcardDeck.size() + \" cards in your deck!\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                        + \"Please enter a number within the range of 1-\" + flashcardDeck.size() + \".\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                Ui.printDivider();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                assert cardIndex \u003c\u003d flashcardDeck.size() : \"card index inserted should be less than size of deck \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                        + \"at this step\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                Ui.printDivider();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                System.out.println(\"Noted. I have removed this card: \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                        + flashcardDeck.get(cardIndex - 1).question + \"|\" + flashcardDeck.get(cardIndex - 1).answer"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                        + \"\\n\" + \"Now you have \" + (flashcardDeck.size() - 1) + \" cards in the list.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                Ui.printDivider();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                flashcardDeck.remove(cardIndex - 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            Ui.printDivider();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            System.out.println(\"Please enter the index of the card as an integer!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            Ui.printDivider();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public void findCard() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        int numberOfCardsFound \u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.out.println(\"Please enter a relevant search term: \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        String searchItem \u003d in.nextLine();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        ArrayList\u003cFlashcard\u003e cardsFound \u003d (ArrayList\u003cFlashcard\u003e) flashcardDeck.stream()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                .filter((flashcard) -\u003e flashcard.question.contains(searchItem))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                .collect((Collectors.toList()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        if (cardsFound.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            Ui.printDivider();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            System.out.println(\"There are no matching cards in your list.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            Ui.printDivider();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            Ui.printDivider();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            System.out.println(\"Here are the matching cards in your list:\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            for (Flashcard flashcard: cardsFound) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                numberOfCardsFound++;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                System.out.println(numberOfCardsFound + \". \" + flashcard.question + \"|\" + flashcard.answer);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            Ui.printDivider();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hailqueenflo": 136
    }
  },
  {
    "path": "src/main/java/flashcard/FlashcardRun.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "package flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.StudyItLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "import userinterface.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "public class FlashcardRun {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public static final String TEST \u003d \"test\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public static final String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public static final String FIND \u003d \"find\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public FlashcardDeck flashcardDeck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public FlashcardStorage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public static final String ADD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public static final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public static final String EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public FlashcardRun() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        flashcardDeck \u003d new FlashcardDeck();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "            storage \u003d new FlashcardStorage(\"data/flashcard.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "            storage.readFromFile(flashcardDeck);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StudyItLog.logger.info(\"Flashcard mode initialized\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            flashcardDeck.addCards();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            flashcardDeck.deleteCard();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            flashcardDeck.listCards();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        case TEST:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            flashcardDeck.testRandomCard();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            flashcardDeck.findCard();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printDivider();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            System.out.println(\"Invalid command. Valid commands are \\\"add\\\", \\\"delete\\\", \\\"list\\\",\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                    + \"\\\"test\\\" and \\\"find\\\".\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                    + \"\\nUse \\\"exit\\\" to exit the flashcard mode.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printDivider();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Invalid flashcard command: Command unidentifiable\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        storage.writeToFile(flashcardDeck);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hailqueenflo": 48,
      "farice9": 10
    }
  },
  {
    "path": "src/main/java/flashcard/FlashcardStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "package flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.StudyItLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "public class FlashcardStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public ArrayList\u003cFlashcard\u003e flashcardDeck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private final String dirPath \u003d \"data\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public FlashcardStorage(String filePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Creates the data directory"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        File fileDir \u003d new File(dirPath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (!fileDir.exists()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "            fileDir.mkdir();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        file \u003d new File(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public void writeToFile(FlashcardDeck flashcardDeck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            for (Flashcard flashcard : flashcardDeck.flashcardDeck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                fw.write(flashcard.writeToFile());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            System.out.println(\"Something went wrong!\" + e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Problem writing to flashcard storage file\\n\" + e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public void readFromFile(FlashcardDeck flashcardDeck) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            Flashcard flashcard;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                String[] parseCard \u003d s.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                String question \u003d parseCard[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                String answer \u003d parseCard[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                flashcard \u003d new Flashcard(question, answer);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                flashcardDeck.flashcardDeck.add(flashcard);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "            System.out.println(\"data/flashcard.txt is not found, creating a new file now!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.info(e + \"\\nflashcard storage file created\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hailqueenflo": 47,
      "farice9": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import flashcard.FlashcardDeck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello \" + in.nextLine());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        FlashcardDeck flashcardDeck \u003d new FlashcardDeck();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hailqueenflo": 3,
      "lingsihui": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/studyit/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package studyit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import flashcard.FlashcardRun;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import timetable.TimeTableRun;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "import userinterface.ErrorMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "import userinterface.HelpMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "import userinterface.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkRun;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "import academic.AcademicRun;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static void executeCommand(String command, CommandType commandType,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                                      BookmarkRun bookmarkRun, FlashcardRun flashcardRun,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "                                      TimeTableRun timeTableRun, AcademicRun academicRun) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (commandType \u003d\u003d CommandType.EXIT_PROGRAM) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printExit();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.EXIT_MODE) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.exitMode();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.LOCATION) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printLocation();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.CHANGE_MODE) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.changeModeCommand(command);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.HELP) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "            HelpMessage.printHelpMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.HIGHLIGHT) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Ui.printHighlight(bookmarkRun, academicRun);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (StudyIt.getCurrentMode() !\u003d Mode.MENU) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Run the mode specific commands if the input is none of the general command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            handleNonGeneralCommand(command, commandType, bookmarkRun, flashcardRun, timeTableRun,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    academicRun);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "            assert commandType \u003d\u003d CommandType.UNIDENTIFIABLE : \"This command should be unidentifiable\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "            ErrorMessage.printUnidentifiableCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static void handleNonGeneralCommand(String command, CommandType commandType,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "                                               BookmarkRun bookmarkRun,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "                                               FlashcardRun flashcardRun, TimeTableRun timeTableRun,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "                                               AcademicRun academicRun) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Mode currentMode \u003d StudyIt.getCurrentMode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (currentMode \u003d\u003d Mode.BOOKMARK) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            executeBookmarkModeCommand(command, bookmarkRun);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (currentMode \u003d\u003d Mode.TIMETABLE) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            executeTimetableModeCommand(command, timeTableRun);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (currentMode \u003d\u003d Mode.ACADEMIC) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "            executeAcademicModeCommand(command, academicRun);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (currentMode \u003d\u003d Mode.FLASHCARD) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            executeFlashcardCommand(command, flashcardRun);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "            assert currentMode \u003d\u003d Mode.MENU : \"The current mode should be at menu\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            StudyItLog.logger.severe(\"Mode is not handled properly.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static void executeBookmarkModeCommand(String command, BookmarkRun bookmarkRun) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StudyItLog.logger.info(\"Processing bookmark command: \" + command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        bookmarkRun.run(command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public static void executeTimetableModeCommand(String command, TimeTableRun timeTableRun) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StudyItLog.logger.info(\"Processing timetable command: \" + command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        timeTableRun.run(command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Ui.printDivider();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void executeAcademicModeCommand(String command, AcademicRun academicRun) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StudyItLog.logger.info(\"Processing academic command: \" + command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": "        academicRun.run(command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public static void executeFlashcardCommand(String command, FlashcardRun flashcardRun) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StudyItLog.logger.info(\"Processing flashcard command: \" + command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        flashcardRun.run(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hailqueenflo": 5,
      "lingsihui": 12,
      "slightlyharp": 4,
      "farice9": 60
    }
  },
  {
    "path": "src/main/java/studyit/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package studyit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import exceptions.InvalidModeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String standardizeCommand(String text) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return text.trim().toLowerCase();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static CommandType getCommandType(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String commandModified \u003d standardizeCommand(command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if ((StudyIt.getCurrentMode() \u003d\u003d Mode.MENU) \u0026\u0026 (commandModified.equals(\"exit\"))) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return CommandType.EXIT_PROGRAM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.equals(\"exit\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return CommandType.EXIT_MODE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.equals(\"location\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return CommandType.LOCATION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.startsWith(\"cd\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return CommandType.CHANGE_MODE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.equals(\"help\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return CommandType.HELP;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (commandModified.equals(\"highlight\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return CommandType.HIGHLIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return CommandType.UNIDENTIFIABLE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static Mode getDestinationMode(String command) throws InvalidModeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String commandModified \u003d standardizeCommand(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "        int initialLength \u003d \"cd\".length();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String destination \u003d commandModified.substring(initialLength).trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (destination.equals(\"1\") || destination.equals(ModeNames.MENU_NAME)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return Mode.MENU;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (destination.equals(\"2\") || destination.equals(ModeNames.BOOKMARK_NAME)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return Mode.BOOKMARK;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (destination.equals(\"3\") || destination.equals(ModeNames.TIMETABLE_NAME)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return Mode.TIMETABLE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (destination.equals(\"4\") || destination.equals(ModeNames.ACADEMIC_NAME)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return Mode.ACADEMIC;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (destination.equals(\"5\") || destination.equals(ModeNames.FLASHCARD_NAME)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return Mode.FLASHCARD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            StudyItLog.logger.info(\"Invalid mode was chosen.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "            throw new InvalidModeException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 1,
      "farice9": 50
    }
  },
  {
    "path": "src/main/java/studyit/CommandType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package studyit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "    EXIT_PROGRAM,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    EXIT_MODE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "    LOCATION,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    CHANGE_MODE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "    UNIDENTIFIABLE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    HELP,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "    HIGHLIGHT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 1,
      "farice9": 10
    }
  },
  {
    "path": "src/main/java/studyit/Mode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package studyit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "public enum Mode {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "    MENU,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    BOOKMARK,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "    TIMETABLE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    ACADEMIC,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "    FLASHCARD"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 9
    }
  },
  {
    "path": "src/main/java/studyit/ModeNames.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package studyit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class ModeNames {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String BOOKMARK_NAME \u003d \"bookmark\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String TIMETABLE_NAME \u003d \"timetable\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String ACADEMIC_NAME \u003d \"academic\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String FLASHCARD_NAME \u003d \"flashcard\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String MENU_NAME \u003d \"menu\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String getCurrentModeName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Mode currentMode \u003d StudyIt.getCurrentMode();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "        switch (currentMode) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "        case BOOKMARK:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return BOOKMARK_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "        case TIMETABLE:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return TIMETABLE_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "        case ACADEMIC:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return ACADEMIC_NAME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        case FLASHCARD:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return FLASHCARD_NAME;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "            return MENU_NAME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 26
    }
  },
  {
    "path": "src/main/java/studyit/StudyIt.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package studyit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import academic.AcademicRun;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import timetable.TimeTableRun;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import flashcard.FlashcardRun;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "import userinterface.MainMenu;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "import userinterface.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkRun;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class StudyIt {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static Mode currentMode \u003d Mode.MENU;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private BookmarkRun bookmarkRun;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private TimeTableRun timeTableRun;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private FlashcardRun flashcardRun;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private AcademicRun academicRun;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void changeMode(Mode destinationMode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "        currentMode \u003d destinationMode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static Mode getCurrentMode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return currentMode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public StudyIt() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        StudyItLog.setUpLogger();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StudyItLog.logger.info(\"Initializing program\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "        bookmarkRun \u003d new BookmarkRun();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "        timeTableRun \u003d new TimeTableRun();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "        flashcardRun \u003d new FlashcardRun();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "        academicRun \u003d new AcademicRun();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StudyItLog.logger.info(\"Program initialized\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StudyIt studyIt \u003d new StudyIt();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "        MainMenu.printWelcome();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "        studyIt.run();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "        CommandType commandType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        StudyItLog.logger.info(\"Executing program\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Repeatedly receive \u0026 process user command until \"exit\" is given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "            // Collect user\u0027s command \u0026 identify the type"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "            String command \u003d Ui.inputCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "            commandType \u003d CommandParser.getCommandType(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.info(\"Command received: \" + command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.info(\"Command type identified: \" + commandType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            Command.executeCommand(command, commandType, bookmarkRun, flashcardRun,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    timeTableRun, academicRun);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } while (commandType !\u003d CommandType.EXIT_PROGRAM);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        StudyItLog.logger.info(\"End of program.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hailqueenflo": 1,
      "lingsihui": 10,
      "slightlyharp": 3,
      "farice9": 47
    }
  },
  {
    "path": "src/main/java/studyit/StudyItLog.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package studyit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "public class StudyItLog {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public static void setUpLogger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "            String dirPath \u003d \"logs\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "            File fileDir \u003d new File(dirPath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (!fileDir.exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "                fileDir.mkdir();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"logs/StudyIt_Logger.log\", true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            fh.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            logger.log(Level.SEVERE, \"File logger not working.\", e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 30,
      "farice9": 12
    }
  },
  {
    "path": "src/main/java/timetable/Activity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "public class Activity extends Event {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public Activity(String activityName, boolean isOnline, String linkOrVenue, Duration duration) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        super(activityName, isOnline, linkOrVenue, EventType.A);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        super.addPeriod(duration);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        assert super.periods.size() \u003d\u003d 1 : \"periods size should return 1\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public void addPeriod(Duration duration) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public String getStorageString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        return \"|\" + periods.get(0).startDateTime.toString()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                + \"|\" + periods.get(0).endDateTime.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 20
    }
  },
  {
    "path": "src/main/java/timetable/ClashScheduleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "public class ClashScheduleException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 4
    }
  },
  {
    "path": "src/main/java/timetable/DateList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "public class DateList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public List\u003cEventList\u003e dateList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public List\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public DateList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        dateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public void addEvent(Event event) throws ClashScheduleException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        for (Duration duration: event.periods) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            boolean existList \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            for (EventList eventList: dateList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                if (eventList.dateTag.equals(duration.startDateTime.toLocalDate())) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    if (clashDetection(duration, eventList)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                        throw new ClashScheduleException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                        eventList.addEvent(event);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                        existList \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            if (!existList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                EventList newList \u003d new EventList(duration.startDateTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                newList.addEvent(event);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                dateList.add(newList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public boolean clashDetection(Duration duration, EventList eventList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        for (int i \u003d 0; i \u003c duration.timeSlot.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            for (Event event: eventList.events) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                for (Duration period: event.periods) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    if (duration.startDateTime.toLocalDate().equals(period.startDateTime.toLocalDate())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                        \u0026\u0026 period.containTimeSlot(duration.timeSlot.get(i))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 52
    }
  },
  {
    "path": "src/main/java/timetable/Duration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "public class Duration {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public List\u003cInteger\u003e timeSlot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public Duration(LocalDateTime startDateTime, LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        timeSlot \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        int start \u003d getTime(startDateTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        int end \u003d getTime(endDateTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        for (int time \u003d start; time \u003c end; time +\u003d 100) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            timeSlot.add(time);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public Duration(LocalDateTime startDateTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        this.endDateTime \u003d startDateTime.plusHours(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        timeSlot \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        int start \u003d getTime(startDateTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        int end \u003d getTime(endDateTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        for (int time \u003d start; time \u003c end; time +\u003d 100) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            timeSlot.add(time);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public int getTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        return dateTime.getHour() * 100 + dateTime.getMinute();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public boolean containTimeSlot(int timeSlot) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        return this.timeSlot.contains(timeSlot);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 41
    }
  },
  {
    "path": "src/main/java/timetable/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "public abstract class Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public boolean isOnline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public String linkOrVenue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public List\u003cDuration\u003e periods;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public EventType eventType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public Event(String name, boolean isOnline, String linkOrVenue,EventType eventType) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        this.isOnline \u003d isOnline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        this.linkOrVenue \u003d linkOrVenue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        periods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        this.eventType \u003d eventType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public void addPeriod(Duration period) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        this.periods.add(period);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public abstract String getStorageString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 26
    }
  },
  {
    "path": "src/main/java/timetable/EventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public LocalDate dateTag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public List\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public EventList(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        dateTag \u003d dateTime.toLocalDate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 20
    }
  },
  {
    "path": "src/main/java/timetable/EventType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "public enum EventType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    A,L"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 5
    }
  },
  {
    "path": "src/main/java/timetable/InvalidDayOfTheWeekException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "public class InvalidDayOfTheWeekException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 4
    }
  },
  {
    "path": "src/main/java/timetable/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "public class Lesson extends Event {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public int numPerWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public Lesson(String moduleCode, String linkOrVenue, boolean isOnline, int numPerWeek) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        super(moduleCode, isOnline,linkOrVenue,EventType.L);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        this.numPerWeek \u003d numPerWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public String getStorageString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        String storageString \u003d \"|\" + numPerWeek + \"|\" + super.periods.size();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        for (Duration period : super.periods) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            storageString \u003d String.format(\"%s|%s\", storageString, period.startDateTime.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            storageString \u003d String.format(\"%s|%s\", storageString, period.endDateTime.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        return storageString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 21
    }
  },
  {
    "path": "src/main/java/timetable/Message.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public static final String printSuccessfulClassAddition \u003d \"This class has been added successfully! \""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            + \"\\nUse \\\"show schedule\\\" to view your timetable.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public static final String printSuccessfulActivityAddition \u003d \"This activity has been added successfully! \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            + \"\\nUse \\\"show schedule\\\" to view your timetable.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public static final String printShowSchedule \u003d \"This is your schedule for the next 7 days.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    public static final String printShowLink \u003d \"This is the conference link you need for the next two hours.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String printInvalidEvent \u003d \"Invalid command!\\n\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            + \"Use \\\"add class\\\" or \\\"add activity\\\" to start adding items\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"into your timetable or \\\"show schedule\\\" to check your timetable\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hailqueenflo": 5,
      "slightlyharp": 10,
      "farice9": 2
    }
  },
  {
    "path": "src/main/java/timetable/TablePrinter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "public class TablePrinter {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    private static final String space \u003d \" \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public static void printTable(List\u003cEventList\u003e dateList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        String[][] table \u003d new String[8][25];"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        table[0][0] \u003d space;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        for (int i \u003d 0; i \u003c 2400; i +\u003d 100) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            table[0][i / 100 + 1] \u003d String.format(\"%04d\", i);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            table[i + 1][0] \u003d LocalDate.now().plusDays(i).getDayOfWeek().name();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            boolean skip \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            for (int dateListIndex \u003d 0; dateListIndex \u003c dateList.size() \u0026\u0026 !skip; dateListIndex++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                if (dateList.get(dateListIndex).dateTag.equals(LocalDate.now().plusDays(i))) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    for (int j \u003d 0; j \u003c 24; j++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                        boolean isFree \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                        for (int eventListIndex \u003d 0; eventListIndex \u003c dateList.get(dateListIndex).events.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                             eventListIndex++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                            Event current \u003d dateList.get(dateListIndex).events.get(eventListIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                            for (Duration period: current.periods) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                                if (period.containTimeSlot(j * 100) \u0026\u0026 period.startDateTime"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                                        .toLocalDate().equals(dateList.get(dateListIndex).dateTag)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                                    table[i + 1][j + 1] \u003d current.name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                                    isFree \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                        if (isFree) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                            table[i + 1][j + 1] \u003d space;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    skip \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            for (int j \u003d 0; j \u003c 24 \u0026\u0026 !skip; j++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                table[i + 1][j + 1] \u003d space;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        for (int i \u003d 0; i \u003c 25; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            for (int j \u003d 0; j \u003c 8; j++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                System.out.printf(\"%-10s|\", table[j][i]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            System.out.println(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 55
    }
  },
  {
    "path": "src/main/java/timetable/TimeTableParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.StudyItLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "public class TimeTableParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public static void commandParser(String command, DateList dateList, TimeTableStorage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        if (command.equals(\"show schedule\")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            System.out.println(Message.printShowSchedule);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            TablePrinter.printTable(dateList.dateList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        } else if (command.equals(\"show link\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            System.out.println(Message.printShowLink);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            showLink(dateList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            String[] words \u003d command.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            String action \u003d words[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            String type \u003d words[1];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            if (action.equals(\"add\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                switch (type) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                case \"activity\": {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    Activity activity \u003d addActivity();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    dateList.addEvent(activity);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    storage.writeFile(activity);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                    System.out.println(Message.printSuccessfulActivityAddition);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                case \"class\": {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    Lesson lesson \u003d addClass();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    dateList.addEvent(lesson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    storage.writeFile(lesson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    System.out.println(Message.printSuccessfulClassAddition);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    System.out.println((Message.printInvalidEvent));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            System.out.println(Message.printInvalidEvent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Invalid timetable command: Invalid event input\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        } catch (InvalidDayOfTheWeekException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            System.out.println(\"Day of the week input is invalid. Please add the class again.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Invalid timetable command: Invalid day of the week input\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        } catch (ClashScheduleException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            System.out.println(\"There is a clash in schedule!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public static Lesson addClass() throws InvalidDayOfTheWeekException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Please enter module code: \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        boolean isInvalid \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        String moduleCode \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        while (isInvalid) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            moduleCode \u003d in.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            if (moduleCode.length() \u003e 7) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                System.out.println(\"The code exceeded the maximum number of characters allowed. Please enter again: \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        isInvalid \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        System.out.println(\"Is the class online? (yes/no)\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        boolean isOnline \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        while (isInvalid) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            String status \u003d in.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            if (status.equals(\"yes\") || status.equals(\"online\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                isOnline \u003d true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                System.out.println(\"Please enter zoom link: \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            } else if (status.equals(\"no\") || status.equals(\"offline\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                System.out.println(\"Please enter the venue: \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                System.out.println(\"Invalid command command\\n Is the class online? \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        String linkOrVenue \u003d in.nextLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.out.println(\"What are the days and time of the lesson?\\n(e.g. Monday 5-8pm, Tuesday 6-9pm)\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        String [] periods \u003d in.nextLine().split(\", \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        System.out.println(\"How many weeks is the lesson?\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        int repeat \u003d Integer.parseInt(in.nextLine());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.out.println(\"Which date does the lesson start? (e.g. 26/10/2020)\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        LocalDateTime startDay \u003d getDateTime(in.nextLine());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Lesson lesson \u003d new Lesson(moduleCode, linkOrVenue, isOnline, repeat);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        addClassPeriods(periods, repeat, startDay, lesson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        return lesson;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public static void addClassPeriods(String[] periods, int repeat, LocalDateTime startDay,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                                Lesson lesson) throws InvalidDayOfTheWeekException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        int startDayNum \u003d startDay.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        for (int i \u003d 0; i \u003c repeat; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            for (String period : periods) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                String [] dayAndTime \u003d period.split((\" \"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                String day \u003d dayAndTime[0].toUpperCase().replace(\" \", \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                String time \u003d dayAndTime[1];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                int dayNum;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    dayNum \u003d DayOfWeek.valueOf(day).getValue();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    throw new InvalidDayOfTheWeekException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                int startTime \u003d Integer.parseInt(time.split(\"-\")[0]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                int endTime \u003d Integer.parseInt(time.split(\"-\")[1].replaceAll(\"[^0-9]\", \"\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                if (time.contains(\"pm\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    startTime +\u003d 12;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    endTime +\u003d 12;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                int daysDifference \u003d dayNum - startDayNum;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                if (daysDifference \u003c 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    daysDifference +\u003d 7;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                LocalDateTime startDateTime \u003d startDay.plusDays(daysDifference).plusHours(startTime).plusDays(7 * i);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                LocalDateTime endDateTime \u003d startDateTime.withHour(endTime).plusDays(7 * i);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                Duration duration \u003d new Duration(startDateTime, endDateTime);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                lesson.addPeriod(duration);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public static Activity addActivity() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        System.out.println(\"Please enter the activity: \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        final String activityName \u003d in.nextLine();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        boolean isInvalid \u003d true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        System.out.println(\"Is the activity online? (yes/no)\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        boolean isOnline \u003d false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        while (isInvalid) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            String status \u003d in.nextLine();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            if (status.equals(\"yes\") || status.equals(\"online\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                isOnline \u003d true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                System.out.println(\"Please enter zoom link\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            } else if (status.equals(\"no\") || status.equals(\"offline\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                System.out.println(\"Please enter the venue\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "                System.out.println(\"Invalid command command\\n Is the class online? (yes/no)\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        final String linkOrVenue \u003d in.nextLine();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.out.println(\"Please enter the date (e.g. 28/10/2020)\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        LocalDateTime date \u003d getDateTime(in.nextLine());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.out.println(\"Please enter the time of your activity (e.g. 6-9pm)\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        String time \u003d in.nextLine();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        int startTime \u003d Integer.parseInt(time.split(\"-\")[0]);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        int endTime \u003d Integer.parseInt(time.split(\"-\")[1].replaceAll(\"[^0-9]\", \"\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        if (time.contains(\"pm\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            startTime +\u003d 12;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            endTime +\u003d 12;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        LocalDateTime startDateTime \u003d date.plusHours(startTime);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        LocalDateTime endDateTime \u003d date.withHour(endTime);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Duration duration \u003d new Duration(startDateTime, endDateTime);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        return new Activity(activityName, isOnline, linkOrVenue, duration);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public static void showLink(DateList dateList) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        LocalDate todayDate \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        int now \u003d LocalDateTime.now().toLocalTime().getHour() * 100;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        for (EventList eventList: dateList.dateList) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            if (eventList.dateTag.equals(todayDate)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                accessEventList(eventList, todayDate, now);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public static void accessEventList(EventList eventList, LocalDate todayDate, int now) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        for (Event event: eventList.events) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            for (Duration period: event.periods) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                if ((period.timeSlot.contains(now) || period.timeSlot.contains(now + 100)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                        || period.timeSlot.contains(now + 200))"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                        \u0026\u0026 period.startDateTime.toLocalDate().equals(todayDate)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    System.out.print(event.linkOrVenue + \"|\" + event.name + \"\\n\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public static void fileParser(String command, DateList dateList) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        String[] words \u003d command.split(\"\\\\|\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        EventType eventType \u003d EventType.valueOf(words[0]);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        String name \u003d words[1];"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        String linkOrVenue \u003d words[2];"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        boolean isOnline \u003d Boolean.parseBoolean(words[3]);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            switch (eventType) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            case L: {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                int numPerWeek \u003d Integer.parseInt(words[4]);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                int durationNum \u003d Integer.parseInt(words[5]);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                Lesson lesson \u003d new Lesson(name, linkOrVenue, isOnline, numPerWeek);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                for (int i \u003d 0; i \u003c durationNum; i++) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    assert words[5 + 2 * i + 1].contains(\"-\") : \"this word should be the datetime format\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    LocalDateTime start \u003d LocalDateTime.parse(words[5 + 2 * i + 1]);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    assert words[5 + 2 * i + 2].contains(\"-\") : \"this word should be the datetime format\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    LocalDateTime end \u003d LocalDateTime.parse(words[5 + 2 * i + 2]);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    Duration duration \u003d new Duration(start, end);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                    lesson.addPeriod(duration);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                dateList.addEvent(lesson);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            case A: {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                LocalDateTime start \u003d LocalDateTime.parse(words[4]);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                LocalDateTime end \u003d LocalDateTime.parse(words[5]);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                Duration duration \u003d new Duration(start, end);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                Activity activity \u003d new Activity(name, isOnline, linkOrVenue, duration);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                dateList.addEvent(activity);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        } catch (ClashScheduleException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            System.out.println(\"There is a clash in schedule\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public static LocalDateTime getDateTime(String date)throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        String [] dateArray \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        int day \u003d Integer.parseInt(dateArray[0]);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        int month \u003d Integer.parseInt(dateArray[1]);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        int year \u003d Integer.parseInt(dateArray[2]);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        return LocalDateTime.of(year, month, day, 0, 0);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hailqueenflo": 11,
      "slightlyharp": 219,
      "farice9": 5
    }
  },
  {
    "path": "src/main/java/timetable/TimeTableRun.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.StudyItLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "public class TimeTableRun {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public DateList events;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public TimeTableStorage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public TimeTableRun() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        events \u003d new DateList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "        storage \u003d new TimeTableStorage(\"data/timetable.txt\", events);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StudyItLog.logger.info(\"Academic mode initialized\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        TimeTableParser.commandParser(command, events, storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 17,
      "farice9": 4
    }
  },
  {
    "path": "src/main/java/timetable/TimeTableStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.StudyItLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "public class TimeTableStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    private static File taskFile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public TimeTableStorage(String filePath, DateList dateList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Creates data directory"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        String dirPath \u003d \"data\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "        File fileDir \u003d new File(dirPath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (!fileDir.exists()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "            fileDir.mkdir();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        taskFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        checkFile(dateList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public void checkFile(DateList dateList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            if (taskFile.createNewFile()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "                System.out.println(\"data/timetable.txt is not found, creating a new file now!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                loadFile(dateList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            System.out.println(\"An error occurred: \" + e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Problem loading timetable storage file\\n\" + e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    private void loadFile(DateList dateList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            Scanner s \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                String command \u003d s.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                TimeTableParser.fileParser(command, dateList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    public void writeFile(Event event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            if (event.eventType.equals(EventType.L)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                fw.write(\"L|\" + event.name + \"|\" + event.linkOrVenue + \"|\" + event.isOnline"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                        + event.getStorageString() + System.lineSeparator());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            } else if (event.eventType.equals(EventType.A)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                fw.write(\"A|\" + event.name + \"|\" + event.linkOrVenue + \"|\" + event.isOnline"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                        + event.getStorageString() + System.lineSeparator());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "            System.out.println(\"Something went wrong\" + e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": "            StudyItLog.logger.warning(\"Problem writing to timetable storage file\\n\" + e);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 59,
      "farice9": 12
    }
  },
  {
    "path": "src/main/java/userinterface/ErrorMessage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class ErrorMessage extends Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printUnidentifiableCommand() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printLine(\"Sorry that\u0027s not an available command! Please try again\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "                + \"or you can type \\\"help\\\" for more information\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void printUnidentifiableInput() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        printLine(\"Sorry that\u0027s not an available input! Please try again\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                + \"or you can type \\\"help\\\" for more information\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void printInvalidNumber() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        printLine(\"Please enter a valid number when applicable!\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                + \"or you can type \\\"help\\\" for more information\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void printInvalidGrade() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        printLine(\"Please enter a valid grade!\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                + \"or you can type \\\"help\\\" for more information\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void printInvalidMc() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        printLine(\"MC must be a positive integer!\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                + \"or you can type \\\"help\\\" for more information\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    public static void printInvalidEmail() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        printLine(\"Please enter a valid email with the structure of abc@xyz!\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "                + \"or you can type \\\"help\\\" for more information\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 27,
      "farice9": 10
    }
  },
  {
    "path": "src/main/java/userinterface/HelpMessage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.Mode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.StudyIt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class HelpMessage extends Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static final String generalCommands \u003d \"Here are the general commands available:\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"help                 - prints out help message\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"location             - tells you your current mode\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"cd \u003cMODE_INDEX/NAME\u003e - changes the program to the corresponding mode\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"highlight            - prints out the important items you stored\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"exit                 - exit the program/mode you are currently at\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String currentModes \u003d \"These are the modes you can go to:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"1 menu       - main menu\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"2 bookmark   - bookmark internet links\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"3 timetable  - plan your study schedule\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"4 academic   - track your academic details\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"5 flashcard  - flashcards to revise your study materials\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private static final String academicCommands \u003d \"Here are the academic commands available:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"list star                      - prints the list of starred components\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"---------CONTACTS--------\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"add contact c/\u003cCONTACT\u003e        - adds a contact\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"     m/\u003cMOBILE\u003e e/\u003cEMAIL\u003e\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            + \"list contact                   - prints the list of contact currently stored\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"delete contact INDEX_NUMBER    - deletes contact at specified index\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"star contact INDEX_NUMBER      - marks the contact as star\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"----------GRADE----------\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"add grade n/\u003cMODULE_NAME\u003e      - adds a grade\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"     m/\u003cMC\u003e g/\u003cGRADE\u003e\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            + \"check cap                      - prints the current CAP based on grade stored\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            + \"list grade                     - prints the list of grades currently stored\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"delete grade \u003cINDEX_NUMBER\u003e    - deletes grade at specified index\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"su grade \u003cINDEX_NUMBER\u003e        - SU the grade at specified index\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"star grade \u003cINDEX_NUMBER\u003e      - marks the grade as star\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private static final String bookmarkCommands \u003d \"Here are the bookmark commands available:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"bm \u003cCATEGORY_INDEX\u003e          - changes mode from bookmark main into a category \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            + \"back                         - go back to bookmark main\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"add \u003cLINK\u003e                   - add bookmark link into a specific category\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"add \u003cLINK\u003e t-\u003e \u003cTITLE\u003e       - add optional title to your link!\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"cat \u003cCATEGORY_NAME\u003e          - add category to bookmark list\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"rm \u003cLINK_INDEX\u003e              - remove a bookmark link into a specific category\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"delete \u003cCATEGORY_INDEX\u003e      - remove a bookmark category\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"list                         - prints the list of categories and\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"                               respective list of links\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"star \u003cLINK_NUMBER\u003e           - mark the bookmark link as star\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    private static final String timetableCommands \u003d  \"Here are the timetable commands available:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            + \"add class      - adds a class to the timetable\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            + \"add activity   - adds an activity to the timetable\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"show link      - displays the links/venues of events occurring\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"                 in the next 2 hours\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"show schedule  - displays schedule\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    private static final String flashcardCommands \u003d \"Here are the flashcard commands available:\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            + \"add     - adds a question and answer to the flashcard deck\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            + \"list    - shows the flashcards that have been added\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"delete  - deletes the flashcard corresponding to the card index entered by user\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "            + \"test    - user can attempt to answer a random question from the flashcard deck\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"find    - searches and returns flashcards containing user\u0027s desired search term\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"back    - exit test mode and go back to flashcard main\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printHelpMessage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(LINE_DIVIDER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(generalCommands);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.lineSeparator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(currentModes);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.lineSeparator();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Mode currentMode \u003d StudyIt.getCurrentMode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (currentMode \u003d\u003d Mode.BOOKMARK) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printBookmarkHelp();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (currentMode \u003d\u003d Mode.TIMETABLE) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printTimetableHelp();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (currentMode \u003d\u003d Mode.ACADEMIC) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printAcademicHelp();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (currentMode \u003d\u003d Mode.FLASHCARD) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printFlashcardHelp();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(LINE_DIVIDER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printBookmarkHelp() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        System.out.println(bookmarkCommands);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printTimetableHelp() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.out.println(timetableCommands);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printAcademicHelp() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        System.out.println(academicCommands);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printFlashcardHelp() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.out.println(flashcardCommands);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 4,
      "hailqueenflo": 9,
      "slightlyharp": 1,
      "luziyi9898": 7,
      "farice9": 80
    }
  },
  {
    "path": "src/main/java/userinterface/MainMenu.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import userinterface.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class MainMenu extends Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"EEE d MMM yyyy\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"hh:mm a\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static String currentDateFormatted \u003d dateFormat.format(currentDateTime);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static String currentTimeFormatted \u003d timeFormat.format(currentDateTime);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d LINE_DIVIDER + System.lineSeparator()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"Welcome to Study It! Your personal study assistant!\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"\\n\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"Today\u0027s date: \" + currentDateFormatted"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"\\nThe time now is \" + currentTimeFormatted"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"\\n\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"Let\u0027s get productive!\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + HelpMessage.currentModes"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"\\nInsert \\\"cd MODE_INDEX or MODE_NAME\\\" to access these modes\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"\\nor \\\"help\\\" to get the list of available commands\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + LINE_DIVIDER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printWelcome() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printWelcomeBackMessage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Welcome back to main menu!\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "                + \"\\nToday\u0027s date: \" + currentDateFormatted"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "                + \"\\nThe time now is \" + currentTimeFormatted);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 38
    }
  },
  {
    "path": "src/main/java/userinterface/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "package userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import academic.AcademicRun;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "import academic.AcademicUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "import academic.Grade;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "import academic.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "import bookmark.BookmarkRun;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "import exceptions.InvalidModeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.ModeNames;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.Mode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.CommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.StudyIt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.StudyItLog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static final String LINE_DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": "            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(LINE_DIVIDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Receive command input from the user via terminal."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @return the command input as a String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static String inputCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assert in !\u003d null : \"null is passed in\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": "        command \u003d in.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assert command.length() \u003e\u003d 0 : \"The length of command should be at least 0\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * Prints text with line divider above and below the text."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "     * @param text any String type text"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printLine(String text) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(LINE_DIVIDER + \"\\n\" + text + \"\\n\" + LINE_DIVIDER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(LINE_DIVIDER + \"\\nSee you again soon!!!\\n\" + LINE_DIVIDER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printLocation() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printLine(\"You are currently at \" + ModeNames.getCurrentModeName() + \"!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void changeModeCommand(String command) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "            Mode newMode \u003d CommandParser.getDestinationMode(command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "            if (newMode !\u003d StudyIt.getCurrentMode()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "                StudyIt.changeMode(newMode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": "                printLine(\"Mode changed! You are now at: \" + ModeNames.getCurrentModeName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": "                printModeIntro(newMode);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "                printLine(\"You are already in \" + ModeNames.getCurrentModeName() + \"!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "farice9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } catch (InvalidModeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printLine(\"Invalid mode name! Please try again.\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": "                    + \"You are still at: \" + ModeNames.getCurrentModeName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            StudyItLog.logger.fine(\"Cannot understand mode chosen.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printModeIntro(Mode newMode) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Prints introduction to the mode (if any)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "farice9"
        },
        "content": "        if (newMode \u003d\u003d Mode.BOOKMARK) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "farice9"
        },
        "content": "            BookmarkUi.printWelcomeBookmarkMessage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (newMode \u003d\u003d Mode.ACADEMIC) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printWelcomeAcademicMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (newMode \u003d\u003d Mode.TIMETABLE) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printWelcomeTimetableMessage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (newMode \u003d\u003d Mode.FLASHCARD) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "farice9"
        },
        "content": "            printWelcomeFlashcardMessage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "farice9"
        },
        "content": "        } else if (newMode \u003d\u003d Mode.MENU) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "farice9"
        },
        "content": "            MainMenu.printWelcomeBackMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "farice9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printWelcomeAcademicMessage() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Welcome to academic mode!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"\\nYou can use this mode to keep track of your grades \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "farice9"
        },
        "content": "                + \"\u0026 important contacts\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"\\nInsert \\\"help\\\" to find the list of commands available\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printWelcomeTimetableMessage() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Welcome to timetable mode!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"\\nYou can use this mode to schedule your classes \u0026 events\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"\\nInsert \\\"help\\\" to find the list of commands available\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printWelcomeFlashcardMessage() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Welcome to flashcard mode!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"\\nYou can use this mode to create and store flashcards and use them to help\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"you memorize your study content!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"\\nInsert \\\"help\\\" to find the list of commands available\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void exitMode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Exited \" + ModeNames.getCurrentModeName() + \"!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StudyIt.changeMode(Mode.MENU); //TODO: Check UI"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"You are now back at: \" + ModeNames.getCurrentModeName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "farice9"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "farice9"
        },
        "content": "        MainMenu.printWelcomeBackMessage();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "farice9"
        },
        "content": "    public static void printHighlight(BookmarkRun bookmarkRun, AcademicRun academicRun) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println(\"Here are your starred items:\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "farice9"
        },
        "content": "        bookmarkRun.run(\"list star\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "farice9"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "farice9"
        },
        "content": "        academicRun.run(\"list star\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 1,
      "farice9": 132
    }
  },
  {
    "path": "src/test/java/AcademicParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": "import academic.AcademicCommandParser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import academic.AcademicCommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import exceptions.InvalidGradeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import exceptions.InvalidMcException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "class AcademicParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void getCommandType_correctCommandInputs_success() throws InvalidCommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        AcademicCommandParser parser \u003d new AcademicCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(AcademicCommandType.ADD_CONTACT, parser.getAcademicCommandType(\"add contact\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(AcademicCommandType.LIST_CONTACT, parser.getAcademicCommandType(\"list contact\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(AcademicCommandType.ADD_GRADE, parser.getAcademicCommandType(\"add grade\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(AcademicCommandType.CHECK_CAP, parser.getAcademicCommandType(\"check cap\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(AcademicCommandType.LIST_GRADE, parser.getAcademicCommandType(\"list grade\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(AcademicCommandType.LIST_GRADE, parser.getAcademicCommandType(\"list grade\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(AcademicCommandType.DELETE_PERSON, parser.getAcademicCommandType(\"delete contact\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(AcademicCommandType.DELETE_GRADE, parser.getAcademicCommandType(\"delete grade\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(AcademicCommandType.SU_GRADE, parser.getAcademicCommandType(\"su grade\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(AcademicCommandType.STAR_GRADE, parser.getAcademicCommandType(\"star grade\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(AcademicCommandType.STAR_CONTACT, parser.getAcademicCommandType(\"star contact\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(AcademicCommandType.LIST_STAR, parser.getAcademicCommandType(\"list star\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void getCommandType_incorrectCommandInput_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        AcademicCommandParser parser \u003d new AcademicCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            parser.getAcademicCommandType(\"what is this command?\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_incorrectGetContact_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        AcademicCommandParser parser \u003d new AcademicCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            parser.getContact(\"add contact c/Prof Lim  m/number81234567  e/E7654321@u.nus.edu\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_incorrectGetGrade_gradeExceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        AcademicCommandParser parser \u003d new AcademicCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertThrows(InvalidGradeException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            parser.getGrade(\"add grade n/CS2101  m/4  g/A+++\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_incorrectGetGrade_mcExceptionThrown() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        AcademicCommandParser parser \u003d new AcademicCommandParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertThrows(InvalidMcException.class, () -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            parser.getGrade(\"add grade n/CS2101  m/0 g/A\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_getContactCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        AcademicCommandParser parser \u003d new AcademicCommandParser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String input \u003d \"add contact c/Prof Lim  m/81234567  e/E7654321@u.nus.edu\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final String[] result \u003d parser.getContact(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final String[] expectedResult \u003d {\"Prof Lim\",\"81234567\",\"E7654321@u.nus.edu\"};"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertArrayEquals(expectedResult,result);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_getGradeCommand_parsedCorrectly() throws InvalidGradeException, InvalidMcException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        AcademicCommandParser parser \u003d new AcademicCommandParser();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String input \u003d \"add grade n/CS2101  m/4  g/A-\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final String[] result \u003d parser.getGrade(input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final String[] expectedResult \u003d {\"CS2101\",\"4\",\"A-\"};"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertArrayEquals(expectedResult,result);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_parseImportedGrade_parsedCorrectly() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        AcademicCommandParser parser \u003d new AcademicCommandParser();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String input \u003d \"[G] | CS2101 | 4 | A- | true | true\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final String[] result \u003d parser.parseImportedGrade(input);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final String[] expectedResult \u003d {\"CS2101\",\"4\",\"A-\",\"true\",\"true\"};"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertArrayEquals(expectedResult,result);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_parseImportedPerson_parsedCorrectly() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        AcademicCommandParser parser \u003d new AcademicCommandParser();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String input \u003d \"[P] | Prof Lim | 81234567 | E7654321@u.nus.edu | false\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final String[] result \u003d parser.parseImportedPerson(input);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final String[] expectedResult \u003d {\"Prof Lim\",\"81234567\",\"E7654321@u.nus.edu\",\"false\"};"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertArrayEquals(expectedResult,result);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_parseDeletePerson_parsedCorrectly() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        AcademicCommandParser parser \u003d new AcademicCommandParser();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String input \u003d \"delete person 5\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final Integer result \u003d parser.parseDeletePerson(input);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final Integer expectedResult \u003d 5;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(expectedResult,result);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_parseDeleteGrade_parsedCorrectly() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        AcademicCommandParser parser \u003d new AcademicCommandParser();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String input \u003d \"delete grade 21\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final Integer result \u003d parser.parseDeleteGrade(input);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final Integer expectedResult \u003d 21;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(expectedResult,result);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_parseSuGrade_parsedCorrectly() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        AcademicCommandParser parser \u003d new AcademicCommandParser();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String input \u003d \"su grade 1\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final Integer result \u003d parser.parseSuGrade(input);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final Integer expectedResult \u003d 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(expectedResult,result);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_parseStarGrade_parsedCorrectly() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        AcademicCommandParser parser \u003d new AcademicCommandParser();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String input \u003d \"star grade 2\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final Integer result \u003d parser.parseStarGrade(input);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final Integer expectedResult \u003d 2;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(expectedResult,result);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_parseStarContact_parsedCorrectly() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        AcademicCommandParser parser \u003d new AcademicCommandParser();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String input \u003d \"star contact 3\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final Integer result \u003d parser.parseStarContact(input);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        final Integer expectedResult \u003d 3;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(expectedResult,result);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 147,
      "farice9": 2
    }
  },
  {
    "path": "src/test/java/CommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "farice9"
        },
        "content": "import exceptions.InvalidModeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "farice9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.CommandParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.Mode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "farice9"
        },
        "content": "import studyit.StudyIt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "farice9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "farice9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "farice9"
        },
        "content": "class CommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "farice9"
        },
        "content": "    void testStandardizeCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "farice9"
        },
        "content": "        CommandParser commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(\"this is a test\", commandParser.standardizeCommand(\" ThIs is A teST  \"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "farice9"
        },
        "content": "    void getCommandType_correctCommandInputs_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "farice9"
        },
        "content": "        CommandParser commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Checks if exit detects correctly when it is in main menu"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(CommandType.EXIT_PROGRAM, commandParser.getCommandType(\"exit\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(CommandType.LOCATION, commandParser.getCommandType(\"location\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(CommandType.CHANGE_MODE, commandParser.getCommandType(\"cd 3\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(CommandType.HELP, commandParser.getCommandType(\"help\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Checks if exit detects exit mode when inside one of the modes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "farice9"
        },
        "content": "        StudyIt studyIt \u003d new StudyIt();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "farice9"
        },
        "content": "        studyIt.changeMode(Mode.ACADEMIC);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(CommandType.EXIT_MODE, commandParser.getCommandType(\"exit\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "farice9"
        },
        "content": "    void getCommandType_incorrectCommandInput_unidentifiableCommandType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "farice9"
        },
        "content": "        CommandParser commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(CommandType.UNIDENTIFIABLE, commandParser.getCommandType(\"asdhajskd\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "farice9"
        },
        "content": "    void getDestinationMode_correctModeInputs_success() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "farice9"
        },
        "content": "        CommandParser commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Test for mode index input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(Mode.MENU, commandParser.getDestinationMode(\"cd 1\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(Mode.BOOKMARK, commandParser.getDestinationMode(\"cd 2\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(Mode.TIMETABLE, commandParser.getDestinationMode(\"cd 3\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(Mode.ACADEMIC, commandParser.getDestinationMode(\"cd 4\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(Mode.FLASHCARD, commandParser.getDestinationMode(\"cd 5\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "        // Test for mode name input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(Mode.MENU, commandParser.getDestinationMode(\"cd menu\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(Mode.BOOKMARK, commandParser.getDestinationMode(\"cd bookmark\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(Mode.TIMETABLE, commandParser.getDestinationMode(\"cd timetable\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(Mode.ACADEMIC, commandParser.getDestinationMode(\"cd academic\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertEquals(Mode.FLASHCARD, commandParser.getDestinationMode(\"cd flashcard\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "    void getDestinationMode_incorrectModeNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "        CommandParser commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertThrows(InvalidModeException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "farice9"
        },
        "content": "            commandParser.getDestinationMode(\"cd 10\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "farice9"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "farice9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "farice9"
        },
        "content": "    void getDestinationMode_incorrectModeName_exceptionThrown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "farice9"
        },
        "content": "        CommandParser commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "farice9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "farice9"
        },
        "content": "        assertThrows(InvalidModeException.class, () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "farice9"
        },
        "content": "            commandParser.getDestinationMode(\"cd easyA\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "farice9"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "farice9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "farice9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "farice9": 78
    }
  },
  {
    "path": "src/test/java/academic/GradeBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "class GradeBookTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private GradeBook gradeBook \u003d new GradeBook();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private ArrayList\u003cGrade\u003e currentGrade \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private Grade testGrade \u003d new Grade(\"CS2101\",4,\"A-\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_addGrade_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String[] inputVars \u003d {\"CS2101\",\"4\",\"A-\",\"false\",\"false\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        gradeBook.addGrade(inputVars,currentGrade);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(Grade.printIndividualGrade(testGrade),Grade.printIndividualGrade(currentGrade.get(0)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_printCap_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String[] inputVars \u003d {\"CS2101\",\"4\",\"A-\",\"false\",\"false\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        gradeBook.addGrade(inputVars,currentGrade);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String result \u003d gradeBook.printCap(currentGrade);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(\"Current CAP is 4.5.\",result);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_printListOfGrades_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String[] inputVars \u003d {\"CS2101\",\"4\",\"A-\",\"false\",\"false\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        gradeBook.addGrade(inputVars,currentGrade);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String result \u003d gradeBook.printListOfGrades(currentGrade);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(\"1.[CS2101] [4MC] [A-]\",result);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_combineGradeDetails_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String result \u003d gradeBook.combineGradeDetails(testGrade);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(\"[CS2101] [4MC] [A-]\",result);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_deleteGrade_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String[] inputVars \u003d {\"CS2101\",\"4\",\"A-\",\"false\",\"false\"};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        gradeBook.addGrade(inputVars,currentGrade);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        gradeBook.deleteGrade(1,currentGrade);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertTrue(currentGrade.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 56
    }
  },
  {
    "path": "src/test/java/academic/PersonBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "package academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import exceptions.InvalidEmailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "class PersonBookTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private PersonBook personBook \u003d new PersonBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private ArrayList\u003cPerson\u003e listOfPerson \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    private Person testPerson \u003d new Person(\"Prof Lim\", \"81234567\", \"E7654321@u.nus.edu\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_addPerson_success() throws InvalidEmailException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String[] inputVars \u003d {\"Prof Lim\",\"81234567\",\"E7654321@u.nus.edu\",\"false\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        personBook.addPerson(inputVars,listOfPerson);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(Person.printIndividualPerson(testPerson),Person.printIndividualPerson(listOfPerson.get(0)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_incorrectAddPerson_invalidEmailExceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String[] inputVars \u003d {\"Prof Lim\",\"81234567\",\"thisIsAEmail\",\"false\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertThrows(InvalidEmailException.class, () -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "            personBook.addPerson(inputVars,listOfPerson);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_printPersonBook_success() throws InvalidEmailException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String[] inputVars \u003d {\"Prof Lim\",\"81234567\",\"E7654321@u.nus.edu\",\"false\"};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        personBook.addPerson(inputVars,listOfPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String result \u003d personBook.printPersonBook(listOfPerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(\"1.[Prof Lim] [81234567] [E7654321@u.nus.edu]\",result);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_combinePersonDetails_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String result \u003d personBook.combinePersonDetails(testPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertEquals(\"[Prof Lim] [81234567] [E7654321@u.nus.edu]\",result);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    void evaluateInput_deletePerson_success() throws InvalidEmailException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        String[] inputVars \u003d {\"Prof Lim\",\"81234567\",\"E7654321@u.nus.edu\",\"false\"};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        personBook.addPerson(inputVars,listOfPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        personBook.deletePerson(1,listOfPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "        assertTrue(listOfPerson.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luziyi9898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luziyi9898": 61
    }
  },
  {
    "path": "src/test/java/bookmark/BookmarkParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "farice9"
        },
        "content": "import bookmark.BookmarkParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.AddLinkCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.BackCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.ChangeModeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.RemoveLinkCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.commands.BookmarkCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "class BookmarkParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private int chosenCategory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void evaluateInput_listCommand_parsedCorrectly() throws InvalidCommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        BookmarkParser parser \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String input \u003d \"list\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        final BookmarkCommand result \u003d parser.evaluateInput(input,chosenCategory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(ListCommand.class));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void evaluateInput_changeModeCommand_parsedCorrectly() throws InvalidCommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        BookmarkParser parser \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String input \u003d \"bm 2\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        final BookmarkCommand result \u003d parser.evaluateInput(input,chosenCategory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(ChangeModeCommand.class));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void evaluateInput_addCommand_parsedCorrectly() throws InvalidCommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        BookmarkParser parser \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String input \u003d \"add http://facebook.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        final BookmarkCommand result \u003d parser.evaluateInput(input,chosenCategory);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(AddLinkCommand.class));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void evaluateInput_removeCommand_parsedCorrectly() throws InvalidCommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        BookmarkParser parser \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String input \u003d \"rm 2\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        final BookmarkCommand result \u003d parser.evaluateInput(input,chosenCategory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(RemoveLinkCommand.class));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void evaluateInput_backCommand_parsedCorrectly() throws InvalidCommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        BookmarkParser parser \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String input \u003d \"back\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        final BookmarkCommand result \u003d parser.evaluateInput(input,chosenCategory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(BackCommand.class));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void evaluateInput_invalidBookmarkCommand_expectExceptions() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        BookmarkParser parser \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String input \u003d \"huhuhuh\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            parser.evaluateInput(input,chosenCategory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void evaluateInput_nullCommand_expectExceptions() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        BookmarkParser parser \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String input \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "            parser.evaluateInput(input,chosenCategory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 77,
      "farice9": 1
    }
  },
  {
    "path": "src/test/java/bookmark/commands/AddLinkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkCategory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "class AddLinkCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private BookmarkUi ui \u003d new BookmarkUi();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private ArrayList\u003cBookmarkCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private BookmarkStorage storage \u003d new BookmarkStorage(\"data/bookmark.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand_addValidLinkCommand_addLinkCorrectly() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"NUS\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"Zoom\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String inputString \u003d \"add https://facebook.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        AddLinkCommand command \u003d new AddLinkCommand(inputString,categoryNumber);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        command.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(1,categories.get(categoryNumber - 1).getLinks().size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand_addInValidLinkCommand_doesNotAddLink() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"NUS\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"Zoom\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String inputString \u003d \"add huhuhuh\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        AddLinkCommand command \u003d new AddLinkCommand(inputString,categoryNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        command.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(0,categories.get(categoryNumber - 1).getLinks().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand_addEmptyLinkCommand_doesNotAddLink() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"NUS\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"Zoom\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String inputString \u003d \"add \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        AddLinkCommand command \u003d new AddLinkCommand(inputString,categoryNumber);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        command.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(0,categories.get(categoryNumber - 1).getLinks().size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand_categoryNotChosen_doesNotAddLink() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"NUS\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"Zoom\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String inputString \u003d \"add \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        AddLinkCommand command \u003d new AddLinkCommand(inputString,categoryNumber);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        command.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(0,categories.get(categoryNumber).getLinks().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(0,categories.get(categoryNumber + 1).getLinks().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 70
    }
  },
  {
    "path": "src/test/java/bookmark/commands/BackCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkCategory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "class BackCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private BookmarkUi ui \u003d new BookmarkUi();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private ArrayList\u003cBookmarkCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private BookmarkStorage storage \u003d new BookmarkStorage(\"data/bookmark.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void executeCommand_backCommandInMain_showByeMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        BackCommand command \u003d new BackCommand(categoryNumber);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        command.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(0,command.getCategoryNumber());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void executeCommand_backCommandInCategory_returnToBookmarkMain() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        BackCommand command \u003d new BackCommand(categoryNumber);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        command.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(0,command.getCategoryNumber());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 33
    }
  },
  {
    "path": "src/test/java/bookmark/commands/ChangeModeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkCategory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "class ChangeModeCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private BookmarkUi ui \u003d new BookmarkUi();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private ArrayList\u003cBookmarkCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private BookmarkStorage storage \u003d new BookmarkStorage(\"data/bookmark.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void executeCommand_validCategory_returnsUpdatedCategoryNumber() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"NUS\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"Zoom\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String inputString \u003d \"bm 2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        ChangeModeCommand command \u003d new ChangeModeCommand(inputString,categoryNumber);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        command.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(2,command.getCategoryNumber());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void executeCommand_InvalidCategory_doesNotUpdateCategoryNumber() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"NUS\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"Zoom\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String inputString \u003d \"bm 200\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        ChangeModeCommand command \u003d new ChangeModeCommand(inputString,categoryNumber);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        command.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(0,command.getCategoryNumber());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void executeCommand_EmptyCategory_doesNotUpdateCategoryNumber() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"NUS\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"Zoom\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String inputString \u003d \"bm \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        ChangeModeCommand command \u003d new ChangeModeCommand(inputString,categoryNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        command.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(0,command.getCategoryNumber());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void executeCommand_SameCategory_doesNotUpdateCategoryNumber() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"NUS\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"Zoom\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String inputString \u003d \"bm 2\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        ChangeModeCommand command \u003d new ChangeModeCommand(inputString,categoryNumber);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        command.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(2,command.getCategoryNumber());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 60
    }
  },
  {
    "path": "src/test/java/bookmark/commands/RemoveLinkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "package bookmark.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkCategory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import bookmark.BookmarkUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "class RemoveLinkCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private BookmarkUi ui \u003d new BookmarkUi();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private ArrayList\u003cBookmarkCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private BookmarkStorage storage \u003d new BookmarkStorage(\"data/bookmark.txt\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void executeCommand_removeValidLinkCommand_removeLinkCorrectly() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        setUpBookmark();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String inputString \u003d \"rm 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        RemoveLinkCommand removeCommand \u003d new RemoveLinkCommand(inputString,categoryNumber);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        removeCommand.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(0,categories.get(categoryNumber - 1).getLinks().size());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void executeCommand_removeInValidCategoryCommand_doseNotRemoveLink() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        setUpBookmark();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String inputString \u003d \"rm 10000\"; //rm 0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        RemoveLinkCommand removeCommand \u003d new RemoveLinkCommand(inputString,categoryNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        removeCommand.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(1,categories.get(categoryNumber - 1).getLinks().size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void executeCommand_removeEmptyCategoryCommand_doesNotRemoveLink() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        setUpBookmark();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String inputString \u003d \"rm \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        RemoveLinkCommand removeCommand \u003d new RemoveLinkCommand(inputString,categoryNumber);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        removeCommand.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(1,categories.get(categoryNumber - 1).getLinks().size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    void executeCommand_removeNotANumber_doesNotRemoveLink() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        setUpBookmark();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String inputString \u003d \"rm abcdef\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        RemoveLinkCommand removeCommand \u003d new RemoveLinkCommand(inputString,categoryNumber);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        removeCommand.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(1,categories.get(categoryNumber - 1).getLinks().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    public void executeCommand_categoryNotChosen_doesNotRemoveLink() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        setUpBookmark();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String inputString \u003d \"rm 1\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        RemoveLinkCommand removeCommand \u003d new RemoveLinkCommand(inputString,categoryNumber);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        removeCommand.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(0,categories.get(categoryNumber).getLinks().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        assertEquals(1,categories.get(categoryNumber + 1).getLinks().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    private void setUpBookmark() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"NUS\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        categories.add(new BookmarkCategory(\"Zoom\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        String addLink \u003d \"add https://huhuhu.com\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        int categoryNumber \u003d 2;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        AddLinkCommand command \u003d new AddLinkCommand(addLink,categoryNumber);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "        command.executeCommand(ui,categories,storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingsihui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingsihui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingsihui": 76
    }
  },
  {
    "path": "src/test/java/flashcard/FlashcardDeckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "package flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "class FlashcardDeckTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    void executeCommand_addCardsCommand_addCardCorrectly() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        FlashcardDeck flashcardDeck \u003d new FlashcardDeck();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        String input \u003d \"2+2\\n4\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        flashcardDeck.addCards();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        assertEquals(\"2+2\", flashcardDeck.flashcardDeck.get(0).question);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        assertEquals(\"4\", flashcardDeck.flashcardDeck.get(0).answer);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    void executeCommand_deleteCardCommand_deleteCardCorrectly() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        FlashcardDeck flashcardDeck \u003d new FlashcardDeck();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Flashcard flashcard1 \u003d new Flashcard(\"1+1\", \"2\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Flashcard flashcard2 \u003d new Flashcard(\"2+2\", \"4\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Flashcard flashcard3 \u003d new Flashcard(\"3+3\", \"6\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Flashcard flashcard4 \u003d new Flashcard(\"4+4\", \"8\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        flashcardDeck.flashcardDeck.add(flashcard1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        flashcardDeck.flashcardDeck.add(flashcard2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        flashcardDeck.flashcardDeck.add(flashcard3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        flashcardDeck.flashcardDeck.add(flashcard4);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        String input \u003d \"3\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        assertEquals(4, flashcardDeck.flashcardDeck.size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        flashcardDeck.deleteCard();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        assertEquals(3, flashcardDeck.flashcardDeck.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        assertEquals(\"4+4\", flashcardDeck.flashcardDeck.get(2).question);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hailqueenflo": 44
    }
  },
  {
    "path": "src/test/java/flashcard/FlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "package flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "class FlashcardTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    void writeToFile_addCards_savedToFile() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(\"2+2\", \"4\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        String expected \u003d \"2+2|4\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        String actual \u003d flashcard.writeToFile();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hailqueenflo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hailqueenflo": 16
    }
  },
  {
    "path": "src/test/java/timetable/DateListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "class DateListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    void addLesson_checkListValue() throws ClashScheduleException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        DateList dateList \u003d new DateList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Lesson lesson \u003d new Lesson(\"CS2113\", \"www.zoom.com/abcde\", true, 1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Duration duration1 \u003d new Duration(LocalDateTime.of(2020,10,16,16,0),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                LocalDateTime.of(2020,10,16,18,0));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        lesson.addPeriod(duration1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Duration duration2 \u003d new Duration(LocalDateTime.of(2020,10,19,16,0),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                LocalDateTime.of(2020,10,19,18,0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        lesson.addPeriod(duration2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        LocalDate result1 \u003d LocalDate.of(2020,10,16);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        LocalDate result2 \u003d LocalDate.of(2020,10,19);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        dateList.addEvent(lesson);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        assertEquals(result1, dateList.dateList.get(0).dateTag);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        assertEquals(result2, dateList.dateList.get(1).dateTag);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    void addLesson_addTwoLesson() throws ClashScheduleException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Lesson lesson1 \u003d new Lesson(\"CS2113\", \"www.zoom.com/abcde\", true, 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Lesson lesson2 \u003d new Lesson(\"CS2101\", \"www.zoom.com/cdefg\", true, 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Duration duration1 \u003d new Duration(LocalDateTime.of(2020,10,16,16,0),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                LocalDateTime.of(2020,10,16,18,0));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        lesson1.addPeriod(duration1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Duration duration2 \u003d new Duration(LocalDateTime.of(2020,10,19,16,0),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                LocalDateTime.of(2020,10,19,18,0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        lesson2.addPeriod(duration2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        DateList dateList \u003d new DateList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        dateList.addEvent(lesson1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        dateList.addEvent(lesson2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        assertEquals(\"CS2101\", dateList.dateList.get(1).events.get(0).name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 44
    }
  },
  {
    "path": "src/test/java/timetable/DurationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "class DurationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    private static final  LocalDateTime dateTime1 \u003d LocalDateTime.of(2020, 10,16,16,0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    private static final  LocalDateTime dateTime2 \u003d LocalDateTime.of(2020,10,16,18,0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    private static final Duration duration \u003d new Duration(dateTime1, dateTime2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    void getTime() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        assertEquals(1600, duration.getTime(dateTime1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    void containTimeSlot_testTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        assertTrue(duration.containTimeSlot(1700));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    void containTimeSlot_testFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        assertFalse(duration.containTimeSlot(1300));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 31
    }
  },
  {
    "path": "src/test/java/timetable/LessonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "class LessonTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    void getStorageString_test() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Lesson lesson \u003d new Lesson(\"CS2113\", \"www.zoom.com/abcde\", true, 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Duration duration \u003d new Duration(LocalDateTime.of(2020,10,16,16,0),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                LocalDateTime.of(2020,10,16,18,0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        lesson.addPeriod(duration);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        assertEquals(\"|1|1|2020-10-16T16:00|2020-10-16T18:00\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                lesson.getStorageString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 20
    }
  },
  {
    "path": "src/test/java/timetable/TimeTableParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "package timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "class TimeTableParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    void addClassTest() throws InvalidDayOfTheWeekException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        String input \u003d \"CS1234\\n\" + \"yes\\n\" + \"www.zoom.com/asdf\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                + \"Wednesday 2-4pm\\n\" + \"1\\n\" + \"20/10/2020\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Lesson lesson \u003d TimeTableParser.addClass();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        Duration duration \u003d new Duration(LocalDateTime.of(2020,10,21,14,0),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                LocalDateTime.of(2020,10,21,16,0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        List\u003cDuration\u003e expectedPeriod \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        expectedPeriod.add(duration);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        assertEquals(\"CS1234\", lesson.name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        assertEquals(EventType.L, lesson.eventType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        assertEquals(expectedPeriod.get(0).timeSlot, lesson.periods.get(0).timeSlot);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    void addClassTest_throwInvalidDayOfWeekException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        String input \u003d \"CS1234\\n\" + \"yes\\n\" + \"www.zoom.com/asdf\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "                + \"Wednfesday 2-4pm\\n\" + \"1\\n\" + \"20/10/2020\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "        assertThrows(InvalidDayOfTheWeekException.class, TimeTableParser::addClass);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //    void showLinkTest() throws InvalidDayOfTheWeekException, ClashScheduleException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        DateList dateList \u003d new DateList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        int currentHour \u003d LocalDateTime.now().getHour();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        String currentDay \u003d LocalDateTime.now().getDayOfWeek().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        Lesson lesson1 \u003d new Lesson(\"CS1234\", \"www.zoom.com/asdf\", true, 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        Lesson lesson2 \u003d new Lesson(\"CS5678\", \"www.zoom.com/qwer\", true, 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        String periodText1 \u003d currentDay + \" \" + (currentHour) + \"-\" + (currentHour + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        String[] period1 \u003d periodText1.split(\", \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        String periodText2 \u003d currentDay + \" \" + (currentHour + 1) + \"-\" + (currentHour + 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        String[] period2 \u003d periodText2.split(\", \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        TimeTableParser.addClassPeriods(period1, 1, LocalDateTime.now().toLocalDate().atTime(0,0), lesson1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        TimeTableParser.addClassPeriods(period2, 1, LocalDateTime.now().toLocalDate().atTime(0,0), lesson2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        dateList.addEvent(lesson1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        dateList.addEvent(lesson2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        TimeTableParser.showLink(dateList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        String expected \u003d \"www.zoom.com/asdf|CS1234\\nwww.zoom.com/qwer|CS5678\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //        assertEquals(expected, outContent.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "farice9"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "slightlyharp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "slightlyharp": 45,
      "farice9": 21
    }
  }
]
