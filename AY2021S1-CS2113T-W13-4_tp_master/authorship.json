[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    mainClassName \u003d \"seedu.lifeasier.LifEasier\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    archiveBaseName \u003d \"lifeasier\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "dojh111": 2,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Danzel Ong | [Github](https://github.com/dojh111) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Edmund Tan | [Github](https://github.com/EdmundEXE) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Johannine | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Daniel Lim | [Github](https://github.com/daniellimzj) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "EdmundEXE": 1,
      "dojh111": 1,
      "johan9se": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/LifEasier.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.ui.ScheduleUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.ui.TimetableUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * LifEasier is a CLI application that allows busy CEG students to schedule their day."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * If you can type fast, LifEasier will get your scheduling done faster than traditional GUI calender apps."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class LifEasier {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileStorage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private ScheduleUi scheduleUi;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public LifEasier(String fileNameTasks, String fileNameNotes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        notes \u003d new NoteList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage \u003d new FileStorage(fileNameTasks, fileNameNotes, ui, notes, tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        scheduleUi \u003d new ScheduleUi();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Runs the LifEasier program infinitely until termination by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.readSaveFiles();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        showStartupSequence();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        boolean isFinished \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        while (!isFinished) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                Command userCommand \u003d parser.parseCommand(fullCommand, ui);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                userCommand.execute(ui, notes, tasks, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                isFinished \u003d userCommand.isFinished();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            } catch (ParserException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showParseUnknownCommandMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showGoodbyeMessage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showStartupSequence() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showLogo();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        //scheduleUi.showHome(tasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showGreetingMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Main entry-point for the LifEasier application."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        new LifEasier(\"saveFileTasks.txt\", \"saveFileNotes.txt\").run();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 21,
      "EdmundEXE": 2,
      "dojh111": 33,
      "johan9se": 14,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/AddDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public AddDeadlineCommand(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.addDeadline(description, by);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.saveTasks();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        ui.showAddConfirmationMessage(\"Deadline: \" + description + \" by \" + by.format(format));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 4,
      "daniellimzj": 21,
      "dojh111": 3
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public AddEventCommand(String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.addEvent(description, start, end);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.saveTasks();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        ui.showAddConfirmationMessage(\"Event: \" + description  + \" from \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                + start.format(format) + \" to \" + end.format(format));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 5,
      "daniellimzj": 23,
      "dojh111": 3
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/AddLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class AddLessonCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public AddLessonCommand(String moduleCode, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.addLesson(moduleCode, start, end);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.saveTasks();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        ui.showAddConfirmationMessage(\"Lesson: \" + moduleCode + \" from \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                + start.format(format) + \" to \" + end.format(format));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 5,
      "daniellimzj": 23,
      "dojh111": 3
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/AddNotesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class AddNotesCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(AddNotesCommand.class.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isEmpty \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public AddNotesCommand(String title) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String checkForEmpty(Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for checking empty description inputs\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (input.trim().length() \u003e 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            isEmpty \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showEmptyDescriptionMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of checking empty description inputs\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String isValidTitle(Ui ui, String title) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String noteTitle \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (title.trim().length() \u003e 0) {        // title is already inputted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            isEmpty \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            noteTitle \u003d title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNoteTitleMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            while (isEmpty) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                noteTitle \u003d checkForEmpty(ui);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return noteTitle;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of AddNotesCommand\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String noteDescription \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for assigning noteTitle\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        final String noteTitle \u003d isValidTitle(ui, title);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End for assigning noteTitle\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isEmpty \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"IsEmpty set back to true\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.showNoteDescriptionMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for assigning noteDescription\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (isEmpty) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            noteDescription \u003d checkForEmpty(ui);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End for assigning noteDescription\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        notes.add(new Note(noteTitle,noteDescription));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Note is added\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.showNoteAddedMessage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.saveNote();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 18,
      "EdmundEXE": 52,
      "dojh111": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/ArchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.archiveData();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 14
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " * The Command class will handle all the commands input from the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    protected boolean isTerminated;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.isTerminated \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Executes the user command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public abstract void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns status of whether the program has been terminated."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public boolean isFinished() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return isTerminated;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 12,
      "EdmundEXE": 2,
      "dojh111": 15,
      "johan9se": 1
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/DisplayScheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.ui.TimetableUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.ui.ScheduleUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class DisplayScheduleCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private boolean isDisplayWeek;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final ScheduleUi scheduleUi \u003d new ScheduleUi();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public DisplayScheduleCommand(String toDisplay) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.isDisplayWeek \u003d toDisplay.equals(\"week\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (isDisplayWeek) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            scheduleUi.displayWeekSchedule(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (scheduleUi.getTaskCountForToday(tasks, currDate) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                System.out.println(\"You have nothing on for today!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                System.out.println(\"Here is your schedule for today:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                scheduleUi.displayDaySchedule(currDate, tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 16,
      "dojh111": 2,
      "johan9se": 17
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.isTerminated \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 16,
      "dojh111": 2
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showHelp();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 11,
      "dojh111": 3
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/ShowNotesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.notes.TitleNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class ShowNotesCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(ShowNotesCommand.class.getName());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public ShowNotesCommand(String title) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private void findTitle(Ui ui, NoteList notes, String title) throws TitleNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for finding title in note list\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int noteNumber \u003d -1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int matchNumber \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (notes.get(i).getTitle().contains(title)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                matchNumber++;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                noteNumber \u003d i;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        switch (matchNumber) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        case 0:     // no matches"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"No matches for title\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            throw new TitleNotFoundException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"One match found\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(notes.get(noteNumber).toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Multiple matches found\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showMultipleMatchesFoundMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            printMultipleMatches(notes, title);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            noteNumber \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            checkForIndexOutOfBounds(notes, noteNumber);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            System.out.println(notes.get(noteNumber - 1).toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End for finding title in note list\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private void printMultipleMatches(NoteList notes, String title) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of printing all matching notes\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (notes.get(i).getTitle().contains(title)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                System.out.println(i + 1 + \". \" + notes.get(i).getTitle() + \"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of printing all matching notes\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private void printAllNotes(NoteList notes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of printing all notes in the list\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println((i + 1) + \". \" + notes.get(i).getTitle() + \"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of printing all notes in the list\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private void checkForIndexOutOfBounds(NoteList notes, int noteNumber) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (noteNumber - 1 \u003e notes.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Start of ShowNotesCommand\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (title.trim().length() \u003e 0) {        // title is already inputted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                findTitle(ui, notes, title);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                ui.showSelectWhichNoteMessage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                printAllNotes(notes);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                int noteNumber \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                checkForIndexOutOfBounds(notes, noteNumber);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                System.out.println(notes.get(noteNumber - 1).toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"End of ShowNotesCommand\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input number is out of bounds\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInvalidNumberMessage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (TitleNotFoundException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input title does not match any of the note titles\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNoTitleFoundMessage();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a number\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNumberFormatMessage();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 22,
      "EdmundEXE": 81,
      "dojh111": 1
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/notes/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package seedu.lifeasier.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public Note(String title, String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return \"Title: \" + title + \"\\n\\n\" + description + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 23
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/notes/NoteList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package seedu.lifeasier.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class NoteList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private final ArrayList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public NoteList(ArrayList\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public NoteList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public Note get(int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return notes.get(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void add(Note note) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public ArrayList\u003cNote\u003e getNotes() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return notes.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 28,
      "dojh111": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/notes/TitleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package seedu.lifeasier.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class TitleNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.AddNotesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.DisplayScheduleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.ShowNotesCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private static Logger LOGGER \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_ADD_LESSON \u003d \"addLesson\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_ADD_EVENT \u003d \"addEvent\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_ADD_DEADLINE \u003d \"addDeadline\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_ADD_NOTES \u003d \"addNotes\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_SHOW_NOTES \u003d \"showNotes\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_DISPLAY \u003d \"display\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String PARAM_ARCHIVE \u003d \"archive\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_CODE \u003d \"/code\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_TIME \u003d \"/time\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_TO \u003d \"/to\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_BY \u003d \"/by\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yy HH:mm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns the first word entered from the user\u0027s input, which represents the command type."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return The first word that the user input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String getCommandType(String input) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LOGGER.log(Level.INFO, \"Getting command type...\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int indexOfFirstSpace \u003d input.indexOf(\" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (indexOfFirstSpace \u003e 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            return input.substring(0, indexOfFirstSpace);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            return input;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the addLesson command that the user inputs."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return AddLessonCommand with the parameters input by the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    Command parseAddLessonCommand(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LOGGER.log(Level.INFO, \"Parsing addLesson command...\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfCodeCommand \u003d input.indexOf(PARAM_CODE) + PARAM_CODE.length();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfDateCommand \u003d input.indexOf(PARAM_DATE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfDateCommand \u003d firstIndexOfDateCommand + PARAM_DATE.length();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfTimeCommand \u003d input.indexOf(PARAM_TIME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfTimeCommand \u003d firstIndexOfTimeCommand + PARAM_TIME.length();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfToCommand \u003d input.indexOf(PARAM_TO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfToCommand \u003d firstIndexOfToCommand + PARAM_TO.length();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String moduleCode \u003d input.substring(lastIndexOfCodeCommand, firstIndexOfDateCommand).trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String date \u003d input.substring(lastIndexOfDateCommand, firstIndexOfTimeCommand).trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String startTime \u003d input.substring(lastIndexOfTimeCommand, firstIndexOfToCommand).trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String endTime \u003d  input.substring(lastIndexOfToCommand).trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(date + \" \" + startTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(date + \" \" + endTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new AddLessonCommand(moduleCode, start, end);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the addEvent command that the user inputs."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return AddEventCommand with the parameters input by the user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Command parseAddEventCommand(String input) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LOGGER.log(Level.INFO, \"Parsing addEvent command...\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfAddEventCommand \u003d input.indexOf(PARAM_ADD_EVENT) + PARAM_ADD_EVENT.length();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfDateCommand \u003d input.indexOf(PARAM_DATE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfDateCommand \u003d firstIndexOfDateCommand + PARAM_DATE.length();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfTimeCommand \u003d input.indexOf(PARAM_TIME);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfTimeCommand \u003d firstIndexOfTimeCommand + PARAM_TIME.length();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfToCommand \u003d input.indexOf(PARAM_TO);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfToCommand \u003d firstIndexOfToCommand + PARAM_TO.length();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d input.substring(lastIndexOfAddEventCommand, firstIndexOfDateCommand).trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String date \u003d input.substring(lastIndexOfDateCommand, firstIndexOfTimeCommand).trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String startTime \u003d input.substring(lastIndexOfTimeCommand, firstIndexOfToCommand).trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String endTime \u003d  input.substring(lastIndexOfToCommand).trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(date + \" \" + startTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(date + \" \" + endTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new AddEventCommand(description, start, end);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the addDeadline command that the user inputs."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return AddDeadlineCommand with the parameters input by the user."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    Command parseAddDeadlineCommand(String input) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LOGGER.log(Level.INFO, \"Parsing addDeadline command...\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfAddDeadlineCommand \u003d input.indexOf(PARAM_ADD_DEADLINE) + PARAM_ADD_DEADLINE.length();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfByCommand \u003d input.indexOf(PARAM_BY);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfByCommand \u003d firstIndexOfByCommand + PARAM_BY.length();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d input.substring(lastIndexOfAddDeadlineCommand, firstIndexOfByCommand).trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String byInput \u003d input.substring(lastIndexOfByCommand).trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime by \u003d LocalDateTime.parse(byInput, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new AddDeadlineCommand(description, by);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the addNotes command that the user inputs."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return AddNotesCommand with the parameters input by the user."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Command parseAddNotesCommand(String input) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LOGGER.log(Level.INFO, \"Parsing addNotes command...\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfAddNotesCommand \u003d input.indexOf(PARAM_ADD_NOTES) + PARAM_ADD_NOTES.length();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String title \u003d input.substring(lastIndexOfAddNotesCommand).trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new AddNotesCommand(title);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the showNotes command that the user inputs."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return ShowNotesCommand with the parameters input by the user."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Command parseShowNotesCommand(String input) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LOGGER.log(Level.INFO, \"Parsing showNotes command...\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfShowNotesCommand \u003d input.indexOf(PARAM_SHOW_NOTES) + PARAM_SHOW_NOTES.length();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String title \u003d input.substring(lastIndexOfShowNotesCommand).trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new ShowNotesCommand(title);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the display command that the user inputs."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return DisplayScheduleCommand with the parameters input by the user."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Command parseDisplayScheduleCommand(String input) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LOGGER.log(Level.INFO, \"Parsing display command...\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfDisplayScheduleCommand \u003d input.indexOf(PARAM_DISPLAY) + PARAM_DISPLAY.length();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String toDisplay \u003d input.substring(lastIndexOfDisplayScheduleCommand).trim();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new DisplayScheduleCommand(toDisplay);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the user\u0027s input into a Command object that can later be executed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return Command that the user inputs."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Command parseCommand(String input, Ui ui) throws ParserException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LOGGER.log(Level.INFO, \"Parsing user input for command...\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            String commandType \u003d getCommandType(input);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_ADD_LESSON):"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return parseAddLessonCommand(input);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_ADD_EVENT):"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return parseAddEventCommand(input);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_ADD_DEADLINE):"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return parseAddDeadlineCommand(input);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_ADD_NOTES):"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return parseAddNotesCommand(input);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_SHOW_NOTES):"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return parseShowNotesCommand(input);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_DISPLAY):"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return parseDisplayScheduleCommand(input);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_HELP):"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case (PARAM_ARCHIVE):"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                return new ArchiveCommand();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_EXIT):"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                throw new ParserException();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showParseIncorrectCommandFormatMessage();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showParseIncorrectDateTimeMessage();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 230,
      "dojh111": 14
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/parser/ParserException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class ParserException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/FileArchive.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class FileArchive {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(NoteStorage.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String NOTE_SEPARATOR \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            \"-------------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public FileArchive(NoteList notes, Ui ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates new archive save file in archive directory and clears notes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param archiveFilePath File path to the save directory."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void handleDataArchiving(String archiveFilePath) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cNote\u003e notesList \u003d notes.getNotes();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Boolean isNotesEmpty \u003d checkForEmptyNotes(notesList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Check notes empty status: isNotesEmpty\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (isNotesEmpty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showNoDataToArchiveMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Notes empty\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Notes not empty\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File archiveDirectory \u003d new File(archiveFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assert archiveDirectory.exists() : \"Archive directory must exist\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String archiveSaveFilePath \u003d archiveFilePath + getCurrentDateTime() + \"Archive.txt\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File archiveSave \u003d new File(archiveSaveFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createArchiveSaveFile(archiveSave);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            writeDataToArchiveSaveFile(archiveSaveFilePath, notesList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            clearNoteList(notesList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileArchiveError();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showArchiveEndMessage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Finish archiving process\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Handles writing all data from current note list onto archive save file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param archiveSaveFilePath File path of where to save archive data."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param notesList ArrayList of notes to be archived."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws IOException When an error is encountered writing to the archive file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void writeDataToArchiveSaveFile(String archiveSaveFilePath, ArrayList\u003cNote\u003e notesList) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(archiveSaveFilePath, true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assert notesList.size() \u003e 0 : \"NotesList cannot be empty when archiving\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Start archive file write\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (Note note : notesList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String noteTitle \u003d getNoteTitle(note);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String noteBody \u003d getNoteBody(note);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(NOTE_SEPARATOR);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(noteTitle);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(noteBody);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(NOTE_SEPARATOR);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Archive written for: \" + noteTitle);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"End archive file write\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String getNoteBody(Note note) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return note.getDescription().trim() + System.lineSeparator();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String getNoteTitle(Note note) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return note.getTitle().trim() + System.lineSeparator();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void createArchiveSaveFile(File archiveSave) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new save if none exist"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!archiveSave.exists()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Creating new archive save\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (!archiveSave.createNewFile()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.WARNING, \"Archive save file creation failed\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Archive save created\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Boolean checkForEmptyNotes(ArrayList\u003cNote\u003e notesList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return notesList.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String getCurrentDateTime() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String formattedDateTime \u003d currentDateTime.format(FileCommand.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return formattedDateTime.replaceAll(\" \", \"T\").replace(\":\", \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Removes all notes from the current noteList after archiving."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param notesList ArrayList where all notes are to be removed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void clearNoteList(ArrayList\u003cNote\u003e notesList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Clearing notes\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notesList.clear();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 126
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/FileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The FileCommand class will house similar commands used by both NoteStorage and TaskStorage classes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class FileCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yy HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"31-12-99 00:00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TIME_DELIMITER \u003d \"T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String WHITE_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(FileCommand.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public FileCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Clears all data from the specified save file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param filePath File path to which file to clear information."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void clearSaveFile(String filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Clearing save file\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileClear \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileClear.write(BLANK_STRING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileClear.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileWriteError();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Error encountered clearing save file\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Save file cleared\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Converts the saved raw string text in the save file into LocalDateTime objects."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param dateTimeInformation String which is to be parsed into LocalDateTime object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Input string parsed into LocalDateTime object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public LocalDateTime convertToLocalDateTime(String dateTimeInformation) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime taskDateTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            dateTimeInformation \u003d dateTimeInformation.replace(TIME_DELIMITER, WHITE_SPACE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskDateTime \u003d LocalDateTime.parse(dateTimeInformation, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showLocalDateTimeParseError();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Error encountered parsing LocalDateTime from save file\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Set as default time"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskDateTime \u003d LocalDateTime.parse(DEFAULT_DATETIME, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assert taskDateTime !\u003d null : \"taskDateTime must never be null\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskDateTime;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Converts a string to boolean form."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param string String to be parsed into a boolean."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Boolean true if string is \"true\", and false for all other cases."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public Boolean convertToBoolean(String string) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return Boolean.parseBoolean(string);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 86
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/FileStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The FileStorage class is the main entry point to actions related to the reading, writing and creation of the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * LifEasier save files."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class FileStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String DIRECTORY_PATH \u003d \"LifEasierSaves/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String ARCHIVE_PATH \u003d DIRECTORY_PATH + \"Archives/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(FileStorage.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String filePathTasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String filePathNotes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteStorage noteStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskStorage taskStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileArchive fileArchive;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public FileStorage(String fileNameTasks, String fileNameNotes, Ui ui, NoteList notes, TaskList tasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.filePathTasks \u003d DIRECTORY_PATH + fileNameTasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.filePathNotes \u003d DIRECTORY_PATH + fileNameNotes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.noteStorage \u003d new NoteStorage(notes, filePathNotes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.taskStorage \u003d new TaskStorage(tasks, filePathTasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileArchive \u003d new FileArchive(notes, ui);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Acts as main entry point into data archiving for LifEasier."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void archiveData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File archiveDirectory \u003d new File(ARCHIVE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showArchiveStartMessge();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Start archiving process\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create archive directory if non existent"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!directoryExists(archiveDirectory)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNewDirectory(archiveDirectory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileArchive.handleDataArchiving(ARCHIVE_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Clear notes save file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileCommand.clearSaveFile(filePathNotes);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Reads and loads the stored information on the save file. If save files are missing, the method will create a new"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * save file and directory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void readSaveFiles() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File saveFileTasks \u003d new File(filePathTasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File saveFileNotes \u003d new File(filePathNotes);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Start processing read saves\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showDataLoadingMessage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check if both saves present. If they are, proceed to read data, else determine which saves to create"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!checkIfBothFilesExists(saveFileTasks, saveFileNotes)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save files missing, create save files\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNewSaves(saveFileTasks, saveFileNotes);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assert checkIfBothFilesExists(saveFileTasks, saveFileNotes) : \"Both saves are supposed to exist\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save files found, read save files\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            noteStorage.readNotesSave(filePathNotes);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.readTasksSave(filePathTasks);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Startup file read end\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Checks if both save files exist."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileTasks File object with file path to the save file which contains saved task information."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileNotes File object with file path to the save file which contains saved note information."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return True when both files exist."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private boolean checkIfBothFilesExists(File saveFileTasks, File saveFileNotes) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return saveFileTasks.exists() \u0026\u0026 saveFileNotes.exists();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void createNewSaves(File saveFileTasks, File saveFileNotes) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File fileDirectory \u003d new File(DIRECTORY_PATH);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (directoryExists(fileDirectory)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Directory exists, check individual save files and create the missing files."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save directory found\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            handleExistingSaveDirectory(saveFileTasks, saveFileNotes);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assert !directoryExists(fileDirectory) : \"Directory should not exist\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Directory missing, create new directory"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save directory missing, proceed to create\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            handleMissingSaveDirectory(fileDirectory, saveFileTasks, saveFileNotes);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void handleExistingSaveDirectory(File saveFileTasks, File saveFileNotes) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        checkForTasksSaveFile(saveFileTasks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        checkForNotesSaveFile(saveFileNotes);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void checkForNotesSaveFile(File saveFileNotes) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Checking for notes save file\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new save file if task save file does not exist"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!saveFileNotes.exists()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNewSaveFile(saveFileNotes);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Read note save file"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteStorage.readNotesSave(filePathNotes);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void checkForTasksSaveFile(File saveFileTasks) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Checking for task save file\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new notes save file if notes save file does not exist"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!saveFileTasks.exists()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNewSaveFile(saveFileTasks);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Read task save file"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskStorage.readTasksSave(filePathTasks);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private boolean directoryExists(File fileDirectory) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return fileDirectory.exists();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void handleMissingSaveDirectory(File fileDirectory, File saveFileTasks, File saveFileNotes) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Attempt creation of new save directory to hold save files"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Creating save directory\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (createNewDirectory(fileDirectory)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                createNewSaveFile(saveFileTasks);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                createNewSaveFile(saveFileNotes);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showDirectoryCreationFailedError();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Save directory creation failed\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private boolean createNewDirectory(File fileDirectory) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return fileDirectory.mkdir();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void createNewSaveFile(File saveFile) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Creating save file\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            saveFile.createNewFile();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save file created\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileCreationError();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Save file creation failed\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void saveNote() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteStorage.writeToNoteSaveFile();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void saveTasks() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskStorage.writeToTaskSaveFile();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 183
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/NoteStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The NoteStorage class handles the reading and writing of the save file for notes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class NoteStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(NoteStorage.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String SAVE_DELIMITER \u003d \"\u003d-\u003d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String filePathNotes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public NoteStorage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public NoteStorage(NoteList notes, String filePathNotes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.filePathNotes \u003d filePathNotes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Reads and loads all saved note information."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param filePathNotes File object containing the file path of the notes save file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void readNotesSave(String filePathNotes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Read Notes save file start\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File saveFile \u003d new File(filePathNotes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assert saveFile.exists() : \"Save file is supposed to exist\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNoteList(fileScanner);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileReadError();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Encountered error reading Notes save file\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Read Notes save file end\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void createNoteList(Scanner fileScanner) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Rebuilding notes from save\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String noteInformation \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String[] noteComponents \u003d noteInformation.split(SAVE_DELIMITER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String noteTitle \u003d noteComponents[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String noteDescription \u003d noteComponents[1];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                notes.add(new Note(noteTitle, noteDescription));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.INFO, \"New Note added: \" + noteTitle);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showSaveDataMissingError();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Missing data from save file\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Notes rebuilt\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Writes information from the notes onto the notes save file for storage when there is a change to the notes."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws IOException When the file cannot be found or is corrupted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void writeToNoteSaveFile() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Write to Notes save start\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePathNotes, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(filePathNotes);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ArrayList\u003cNote\u003e noteList \u003d notes.getNotes();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assert noteList.size() \u003e 0 : \"noteList must contain at least 1 item when saving\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Append note information into save file for notes"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            for (Note note : noteList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String noteToSave \u003d convertNoteToString(note);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fileWriter.write(noteToSave);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.INFO, \"New Note saved\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileWriteError();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Unable to write to notes save file\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Write to Notes save end\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String convertNoteToString(Note note) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return note.getTitle().trim() + SAVE_DELIMITER + note.getDescription().trim() + System.lineSeparator();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 119
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/StorageException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class StorageException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/TaskStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.Lesson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The TaskStorage class handles the reading and writing of the save file for tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class TaskStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(TaskStorage.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String SAVE_DELIMITER \u003d \"\u003d-\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEFAULT_DATA \u003d \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String filePathTasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public TaskStorage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public TaskStorage(TaskList tasks, String filePathTasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.filePathTasks \u003d filePathTasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void readTasksSave(String filePathTasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Read Tasks save file start\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File saveFile \u003d new File(filePathTasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assert saveFile.exists() : \"Save file is supposed to exist\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createTaskList(fileScanner);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileReadError();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Encountered error reading Tasks save file\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Read Tasks save file end\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void createTaskList(Scanner fileScanner) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Rebuilding tasks list from save file\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskInformation \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String[] taskComponents \u003d taskInformation.split(SAVE_DELIMITER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskType \u003d taskComponents[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskDescription \u003d taskComponents[2];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                Boolean taskStatus \u003d fileCommand.convertToBoolean(taskComponents[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    rebuildDeadline(taskComponents, taskList, taskDescription, taskStatus);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    rebuildEvent(taskComponents, taskList, taskDescription, taskStatus);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"lesson\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    rebuildLesson(taskComponents, taskList, taskDescription, taskStatus);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    throw new StorageException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.INFO, \"Rebuilt task: \" + taskType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showSaveDataMissingError();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Missing data from save file\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showUndeterminableTaskError();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Read task type failed\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void rebuildLesson(String[] taskComponents, ArrayList\u003cTask\u003e taskList, String description, Boolean status)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime lessonStartTime \u003d fileCommand.convertToLocalDateTime(taskComponents[3]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime lessonEndTime \u003d fileCommand.convertToLocalDateTime(taskComponents[4]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new event in tasks"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.add(new Lesson(description, lessonStartTime, lessonEndTime, status));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        tasks.increaseTaskCount();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void rebuildEvent(String[] taskComponents, ArrayList\u003cTask\u003e taskList, String description, Boolean status)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime eventStartTime \u003d fileCommand.convertToLocalDateTime(taskComponents[3]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime eventEndTime \u003d fileCommand.convertToLocalDateTime(taskComponents[4]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new event in tasks"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.add(new Event(description, eventStartTime, eventEndTime, status));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        tasks.increaseTaskCount();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void rebuildDeadline(String[] taskComponents, ArrayList\u003cTask\u003e taskList, String description, Boolean status)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime deadlineTimeInfo \u003d fileCommand.convertToLocalDateTime(taskComponents[3]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new deadline in tasks"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.add(new Deadline(description, deadlineTimeInfo, status));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        tasks.increaseTaskCount();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Writes information of TaskList onto the save file for storage whenever there is a change."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void writeToTaskSaveFile() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePathTasks, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(filePathTasks);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String dataToSave;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assert taskList.size() \u003e 0 : \"taskList cannot be empty when saving\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Append each tasks information into save file for tasks"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskType \u003d task.getType();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    dataToSave \u003d convertDeadlineToString(task, taskType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    dataToSave \u003d convertEventToString(task, taskType);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"lesson\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    dataToSave \u003d convertLessonToString(task, taskType);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    dataToSave \u003d DEFAULT_DATA;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    fileWriter.write(dataToSave);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    throw new StorageException();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fileWriter.write(dataToSave);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.INFO, \"Write task to save: \" + taskType);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileWriteError();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Unable to write to save file\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showInvalidCastError();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Wrong class type passed, unable to cast\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showUndeterminableTaskError();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Read task type failed\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String convertLessonToString(Task task, String taskType) throws ClassCastException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Lesson lesson \u003d (Lesson) task;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskType + SAVE_DELIMITER + task.getStatus() + SAVE_DELIMITER + task.getDescription() + SAVE_DELIMITER"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + lesson.getStart().format(FileCommand.DATE_TIME_FORMATTER) + SAVE_DELIMITER"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + lesson.getEnd().format(FileCommand.DATE_TIME_FORMATTER) + System.lineSeparator();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String convertEventToString(Task task, String taskType) throws ClassCastException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskType + SAVE_DELIMITER + task.getStatus() + SAVE_DELIMITER + task.getDescription() + SAVE_DELIMITER"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + event.getStart().format(FileCommand.DATE_TIME_FORMATTER) + SAVE_DELIMITER"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + event.getEnd().format(FileCommand.DATE_TIME_FORMATTER) + System.lineSeparator();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String convertDeadlineToString(Task task, String taskType) throws ClassCastException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskType + SAVE_DELIMITER + task.getStatus() + SAVE_DELIMITER + task.getDescription() + SAVE_DELIMITER"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + deadline.getBy().format(FileCommand.DATE_TIME_FORMATTER) + System.lineSeparator();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 193
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/tasks/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String type \u003d \"deadline\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Deadline(String description, LocalDateTime by, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getBy() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return \".[D]\" + super.toString() + \" (\" + by + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getBy();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 27,
      "daniellimzj": 1,
      "dojh111": 6,
      "johan9se": 10
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/tasks/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime start;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime end;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String type \u003d \"event\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Event(String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Event(String description, LocalDateTime start, LocalDateTime end, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return \".[E]\" + super.toString() + \" (\" + start + \"  \" +  end + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 32,
      "daniellimzj": 2,
      "dojh111": 9
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/tasks/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class Lesson extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime start;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime end;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String type \u003d \"lesson\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Lesson(String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Lesson(String description, LocalDateTime start, LocalDateTime end, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return \".[E]\" + super.toString() + \" (\" + start + \"  \" + end + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 33,
      "daniellimzj": 1,
      "dojh111": 8
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/tasks/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected static int taskCounter \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskCounter++;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbol"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskCounter--;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public abstract LocalDateTime getStart();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public abstract LocalDateTime getEnd();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean isWithinTimeSlot(int hour) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return startsAfter(hour) \u0026\u0026 endsBefore(hour + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean endsBefore(int hour) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getEnd().getHour() \u003e\u003d hour;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean startsAfter(int hour) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getStart().getHour() \u003c\u003d hour;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean isHappeningOn(LocalDate date) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getStart().toLocalDate().equals(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 25,
      "daniellimzj": 1,
      "dojh111": 11,
      "johan9se": 24
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/tasks/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.util.stream.Collector;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected static ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected static int taskCount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskCount \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getTaskCount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return taskCount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static void addTask(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskCount++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void increaseTaskCount() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskCount++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void displayTaskList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"This is what is in the taskList:\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(task.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * Add new event to taskList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param description description of event."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param start start date/time of event."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param end end date/time of event."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static void addEvent(String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        Event event \u003d new Event(description, start, end);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        addTask(event);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * Add new Lesson to taskList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param moduleCode module code of lesson."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param start start date/time of lesson."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param end end date/time of lesson."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static void addLesson(String moduleCode, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        Lesson lesson \u003d new Lesson(moduleCode, start, end);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        addTask(lesson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * Adds a new Deadline to taskList."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param by deadline of task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static void addDeadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        addTask(deadline);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        taskList.sort(Comparator.comparing(Task::getStart));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 56,
      "daniellimzj": 1,
      "dojh111": 13,
      "johan9se": 12
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/ui/ScheduleUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johan9se"
        },
        "content": "package seedu.lifeasier.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johan9se"
        },
        "content": "public class ScheduleUi {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final TimetableUi timetable \u003d new TimetableUi();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showHome(TaskList tasks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        timetable.showTimetable(tasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        displayDeadlines(tasks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void displayDeadlines(TaskList tasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (Task task : TaskList.getTaskList()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                System.out.println(task.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void displayWeekSchedule(TaskList tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        timetable.showTimetable(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void displayDaySchedule(LocalDate date, TaskList tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Task task \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            LocalDateTime startDateTime \u003d task.getStart();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            LocalDateTime endDateTime \u003d task.getEnd();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (startDateTime.toLocalDate().equals(date)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                printWithScheduleFormat(task, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void printWithScheduleFormat(Task task, LocalDateTime startDateTime, LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String startDateTimeString \u003d getTimeStamp(startDateTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String endDateTimeString \u003d (endDateTime \u003d\u003d null) ? \"      \" : (\"-\" + getTimeStamp(endDateTime));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(startDateTimeString + endDateTimeString + \"  \" + task.getDescription());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static String getDayOfWeek(int i) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalDateTime datePointer \u003d LocalDateTime.now().plus(i, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return datePointer.getDayOfWeek().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String getTimeStamp(LocalDateTime timedItem) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return timedItem.toLocalTime().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getTaskCountForToday(TaskList tasks, LocalDate date) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Task task \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (task.getStart().toLocalDate().equals(date)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johan9se": 68
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/ui/TimetableUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johan9se"
        },
        "content": "package seedu.lifeasier.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "public class TimetableUi {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String TIME_COLUMN_NAME \u003d \"TIME\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String TIME_FORMAT \u003d \"%02d:00\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DEFAULT_START_HOUR \u003d 7;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DEFAULT_END_HOUR \u003d 18;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DAYS_COLUMN_COUNT \u003d 7;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int MAX_COLUMN_WIDTH \u003d 15;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String ROW_FORMAT \u003d \"|%-11s| %-15s | %-15s | %-15s | %-15s | %-15s | %-15s | %-15s |\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String ROW_SEPARATOR \u003d \"+-----------+\" + \"-----------------+\".repeat(DAYS_COLUMN_COUNT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private ArrayList\u003cString\u003e timetableRows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showTimetable(TaskList tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        generateTimetable(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(ROW_SEPARATOR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (String row: timetableRows) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            System.out.println(row);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            System.out.println(ROW_SEPARATOR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void generateTimetable(TaskList tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        timetableRows.add(getColumnTitlesString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalTime[] timeRange \u003d getTimetableTimeRange(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int firstHour \u003d timeRange[0].getHour();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int lastHour \u003d timeRange[1].getHour();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int currHour \u003d firstHour;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        while (currHour \u003c lastHour) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            timetableRows.add(generateRowString(currHour, tasks));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            currHour++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String getColumnTitlesString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String[] columnTitles \u003d new String[8];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        columnTitles[0] \u003d TIME_COLUMN_NAME;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            columnTitles[i + 1] \u003d ScheduleUi.getDayOfWeek(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return String.format(ROW_FORMAT, (Object[]) columnTitles);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String generateRowString(int hour, TaskList tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String[] rowContents \u003d generateRowContents(hour, tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return String.format(ROW_FORMAT, (Object[]) rowContents);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String[] generateRowContents(int hour, TaskList tasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String[] rowContents \u003d new String[8];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        rowContents[0] \u003d getTimeSlotString(hour);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (int dayIncrement \u003d 0; dayIncrement \u003c 7; dayIncrement++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            LocalDate currDate \u003d todayDate.plus(dayIncrement, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            rowContents[dayIncrement + 1] \u003d getCellString(currDate, hour, tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return rowContents;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String trimToFitTimetableCell(String fullString) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (fullString.length() \u003e MAX_COLUMN_WIDTH) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return fullString.substring(0, MAX_COLUMN_WIDTH - 3) + \"...\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return fullString;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private String getTimeSlotString(int startHour) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String startHourString \u003d String.format(TIME_FORMAT, startHour);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String endHourString \u003d String.format(TIME_FORMAT, startHour + 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return startHourString + \"-\" + endHourString;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private String getCellString(LocalDate date, int hour, TaskList tasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ArrayList\u003cString\u003e cellContents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Task task \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (!(task instanceof Deadline) \u0026\u0026 task.isHappeningOn(date) \u0026\u0026 task.isWithinTimeSlot(hour)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                cellContents.add(task.getDescription());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return trimToFitTimetableCell(cellContents.toString().replace(\"[\", \"\").replace(\"]\", \"\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public LocalTime[] getTimetableTimeRange(TaskList tasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalTime defaultEarliestTime \u003d LocalTime.parse(String.format(TIME_FORMAT, DEFAULT_START_HOUR));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalTime defaultLatestTime \u003d LocalTime.parse(String.format(TIME_FORMAT, DEFAULT_END_HOUR));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Task task \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (!(task instanceof Deadline)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                LocalTime currTaskStartTime \u003d task.getStart().toLocalTime();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                LocalTime currTaskEndTime \u003d task.getEnd().toLocalTime();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                defaultEarliestTime \u003d getEarlierTime(defaultEarliestTime, currTaskStartTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                defaultLatestTime \u003d getLaterTime(defaultLatestTime, currTaskEndTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return new LocalTime[] {defaultEarliestTime, defaultLatestTime};"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public LocalTime getEarlierTime(LocalTime defaultEarliestTime, LocalTime startTime) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return startTime.isBefore(defaultEarliestTime) ? startTime : defaultEarliestTime;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public LocalTime getLaterTime(LocalTime defaultLatestTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return endTime.isAfter(defaultLatestTime) ? endTime : defaultLatestTime;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "johan9se"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johan9se": 124
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The Ui class deals with all interactions with the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String SEPARATOR \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String LOGO \u003d \"\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"  _      _  __ ______          _\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" | |    (_)/ _|  ____|        (_)\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" | |     _| |_| |__   __ _ ___ _  ___ _ __\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" | |    | |  _|  __| / _` / __| |/ _ \\\\ \u0027__|\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" | |____| | | | |___| (_| \\\\__ \\\\ |  __/ |\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" |______|_|_| |______\\\\__,_|___/_|\\\\___|_|\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //Error messages"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ERROR_INVALID_COMMAND \u003d \"Oh no, I do not understand this command! Type \u0027help\u0027 for \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"a list of available commands\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //General UI messages"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_GOODBYE \u003d \"Goodbye, hope to see you again soon!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_GREETING \u003d \"Hello [NAME], what can I do for you today?\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_HELP_COMMAND \u003d \" -Type \u0027help\u0027 for a list the list of available commands\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //Help message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"These are the commands that are available:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"Notes about the command format:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" * Words in UPPER_CASE are the parameters to be supplied by the user\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" * Items in square brackets are optional, e.g [DATE]\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"COMMANDS\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"*************************************************************************\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"help ---------------------------------------- Displays available commands\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"addLesson /code MODULE_CODE /date DATE /time START /to END -- Adds lesson\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"addEvent EVENT_NAME /date DATE /time START /to END -------- Adds an event\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"addDeadline DEADLINE_NAME /by DATETIME ------------------ Adds a deadline\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"addNotes TITLE ------------------------------------------ Adds a new note\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"showNotes TITLE ------------------------------------- Shows selected note\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"display WEEK/DAY --------------- Displays either weekly or daily schedule\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"exit --------------------------------------- Closes the LifEasier program\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"*************************************************************************\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"For more detailed information, please visit the online user guide at:\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Scanner conversation;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.conversation \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printSeparator() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showLogo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showGreetingMessage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_GREETING);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_HELP_COMMAND);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showAddConfirmationMessage(String task) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        System.out.println(\"Done! I\u0027ve added \\\"\" + task + \"\\\" to your calendar\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void printLogo() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(LOGO);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showHelp() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(HELP_MESSAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns read user command."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return conversation.nextLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showInvalidCommandError() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(ERROR_INVALID_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showGoodbyeMessage() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(MESSAGE_GOODBYE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNoteTitleMessage() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Please put in a title:\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNoteDescriptionMessage() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Alright! Please fill in your notes.\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showFileCreationError() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"Something went wrong... Save file creation failed...\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showDataLoadingMessage() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"Reading your save data. New saves will be created if no saves are found.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showNoDataToArchiveMessage() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"You do not have any data available for archiving.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showFileArchiveError() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"There was an error archiving your data\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showArchiveStartMessge() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"Starting archiving...\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showArchiveEndMessage() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"Archiving successful!\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showFileReadError() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"Something went wrong, unable to read from save file...\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showFileWriteError() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"Something went wrong while saving your data...\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showDirectoryCreationFailedError() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"Directory creation failed...\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showInvalidNumberMessage() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"The number you inputted is invalid!\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNoTitleFoundMessage() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"The title you inputted is not found...\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNumberFormatMessage() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"\\nPlease input only a number!\\n\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showInvalidCastError() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"Something went wrong, mismatching task types...\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showSaveDataMissingError() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"Encountered an error while reading from the save file - Data missing/corrupted\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showLocalDateTimeParseError() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"Encountered a problem reading the date and time of the task...\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showUndeterminableTaskError() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"Something went wrong while determining the tasks...\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showParseUnknownCommandMessage() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"I\u0027m sorry! I don\u0027t understand that command!\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showParseIncorrectCommandFormatMessage() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"I\u0027m sorry! Please double check the input of your format!\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"Use the help command for formats of all the commands!\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showParseIncorrectDateTimeMessage() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"I\u0027m sorry! Please ensure your dates are in the format dd-mm-yy,\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"and your times are in the format hh:mm!\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showEmptyDescriptionMessage() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Empty description! \u003dO\\n\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNoteAddedMessage() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Ok! I\u0027ve taken note of this note!\\n\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showMultipleMatchesFoundMessage() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Multiple matches found! Please select the one you are looking for:\\n\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showSelectWhichNoteMessage() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Please select the notes you want to view:\\n\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 4,
      "daniellimzj": 25,
      "EdmundEXE": 33,
      "dojh111": 138,
      "johan9se": 11
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/LifEasierTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "class LifEasierTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/commands/ShowNotesCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package test.java.seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "class ShowNotesCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private NoteList notes \u003d new NoteList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    void testShowCommandInputs_inputSizeMatchesActualSize() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        notes.add(new Note(\"cat\", \"i like cats\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        notes.add(new Note(\"dog\", \"i like dogs\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        assertEquals(2, notes.size());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 18
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/notes/NoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package test.java.seedu.lifeasier.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "class NoteTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    void testGetTitle() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        assertEquals(\"cat\", new Note(\"cat\", \"i like cats\").getTitle());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    void testGetDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        assertEquals(\"i like cats\", new Note(\"cat\", \"i like cats\").getDescription());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        assertEquals(\"Title: cat\\n\\ni like cats\\n\", new Note(\"cat\", \"i like cats\").toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 24
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputHelp_HelpCommand() throws ParserException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand(\"help\", ui);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof HelpCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputAddLesson_AddLessonCommand() throws ParserException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand(\"addLesson /code cg1111 /date 10-10-20 /time 10:00 /to 20:00\", ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof AddLessonCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputInvalidCommand_ParserException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertThrows(ParserException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            parser.parseCommand(\"I want to add a lesson\", ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseAddDeadlineCommand_inputInvalidDateTime_ParserException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            parser.parseAddDeadlineCommand(\"addDeadline do homework /by 10-30-40 24:67\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 50
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/storage/FileCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "class FileCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yy HH:mm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public FileCommandTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertToLocalDateTime_inputValidDateTime_correctOutput() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String formattedDateTime \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fileCommand.convertToLocalDateTime(\"09-04-21T18:00\").format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(\"09-04-21 18:00\", formattedDateTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertToLocalDateTIme_invalidDateTime_defaultDateTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String formattedDateTime \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fileCommand.convertToLocalDateTime(\"09-23-21T18:00\").format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(\"31-12-99 00:00\", formattedDateTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 32
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/storage/NoteStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "class NoteStorageTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String EXPECTED_STRING_OUTPUT_NOTES \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            \"Cats are awesome!\u003d-\u003dCats are so cute, they are the best :D\" + System.lineSeparator();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteStorage noteStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public NoteStorageTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.noteStorage \u003d new NoteStorage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertNoteToString_newNote_correctStringOutput() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note note \u003d new Note(\"Cats are awesome!  \", \"  Cats are so cute, they are the best :D  \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String output \u003d noteStorage.convertNoteToString(note);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(EXPECTED_STRING_OUTPUT_NOTES, output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 25
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/storage/TaskStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "class TaskStorageTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskStorage taskStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public TaskStorageTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.taskStorage \u003d new TaskStorage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        startTime \u003d fileCommand.convertToLocalDateTime(\"09-04-21T18:00\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        endTime \u003d fileCommand.convertToLocalDateTime(\"09-04-21T18:00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertDeadlineToString_invalidClass_ClassCastException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Event testEvent \u003d new Event(\"Test event\", startTime, endTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertThrows(ClassCastException.class, () -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.convertDeadlineToString(testEvent, \"deadline\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertEventToString_invalidClass_ClassCastException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(\"Test Deadline\", startTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertThrows(ClassCastException.class, () -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.convertEventToString(testDeadline, \"event\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertLessonToString_invalidClass_ClassCastException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(\"Test Deadline\", startTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertThrows(ClassCastException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.convertLessonToString(testDeadline, \"lesson\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 52
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/tasks/TaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "package seedu.lifeasier.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void getTaskCount_returnTaskCountAsInt() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList.addTask(new Event(\"EXAMPLE\", LocalDateTime.now(), LocalDateTime.now()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertEquals(1, taskList.getTaskCount());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void getTask_outOfBoundIndex_throwsException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList.addTask(new Event(\"EXAMPLE\", LocalDateTime.now(), LocalDateTime.now()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e taskList.getTask(2));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void getTask_invalidIndex_throwsException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList.addTask(new Event(\"EXAMPLE\", LocalDateTime.now(), LocalDateTime.now()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e taskList.getTask(-1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 34
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/ui/ScheduleUiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johan9se"
        },
        "content": "package seedu.lifeasier.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johan9se"
        },
        "content": "class ScheduleUiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static final TaskList TEST_TASKS \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static final LocalDate SAMPLE_DATE \u003d LocalDateTime.parse(\"2020-10-15T00:00\").toLocalDate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void getTaskCountForToday_emptyTaskList_Zero() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ScheduleUi scheduleUiTest \u003d new ScheduleUi();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int taskCount \u003d scheduleUiTest.getTaskCountForToday(seedu.lifeasier.ui.ScheduleUiTest.TEST_TASKS, SAMPLE_DATE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(0, taskCount);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johan9se": 21
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "bye"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 3
    }
  }
]
