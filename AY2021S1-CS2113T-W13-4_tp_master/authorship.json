[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    compile group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00271.18\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    mainClassName \u003d \"seedu.lifeasier.LifEasier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    archiveBaseName \u003d \"lifeasier\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "dojh111": 3,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "# About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ":----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Danzel Ong | [Github](https://github.com/dojh111) | [Portfolio](/docs/team/dojh111.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Daniel | [Github](https://github.com/daniellimzj) | [Portfolio](/docs/team/daniellimzj.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Edmund | [Github](https://github.com/EdmundEXE) | [Portfolio](/docs/team/edmundexe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Fairuz| [Github](https://github.com/skyaxe97) | [Portfolio](/docs/team/skyaxe97.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Johannine | [Github](https://github.com/johan9se) | [Portfolio](/docs/team/johan9se.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 10,
      "-": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "# LifEasier Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [1.0 Introduction](#10-introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [2.0 Setting Up](#20-setting-up)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [3.0 Design](#30-design)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.1 Architecture](#31-architecture)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.2 Components](#32-components)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        * [3.2.1 LifEasier Component](#321-lifeasier-component)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        * [3.2.2 UI Component](#322-ui-component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        * [3.2.3 Parser Component](#323-parser-component)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        * [3.2.4 Command Component](#324-command-component)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        * [3.2.5 Model Component](#325-model-component)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        * [3.2.6 Storage Component](#326-storage-component)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [4.0 Implementation](#40-implementation)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.1 Adding Lessons, Events, Deadlines (Fairuz)](#41-adding-lessons-events-deadlines-fairuz)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.2 Editing Lessons, Events, Deadlines (Fairuz)](#42-editing-lessons-events-deadlines-fairuz)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.3 Deleting Lessons, Events, Deadlines (Fairuz)](#43-deleting-of-lessons-events-deadlines-fairuz)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.4 Adding Notes (Edmund)](#44-adding-notes-edmund)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.5 Editing and Deleting Notes (Edmund)](#45-editing-and-deleting-notes-edmund)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.6 Undoing Changes Made to Tasks and Notes (Johannine)](#46-undoing-changes-made-to-tasks-and-notes-johannine)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.7 Storing and Archiving Notes (Danzel)](#47-storing-and-archiving-notes-danzel)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.8 Displaying Schedule (Johannine)](#48-displaying-schedule-johannine)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.9 Displaying Free Time and Sleep Time (Daniel)](#49-displaying-free-time-and-sleep-time-daniel)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.10 Parsing Commands (Edmund)](#410-parsing-commands-edmund)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.11 Recurring Tasks and Auto Deletion (Daniel)](#411-recurring-tasks-and-auto-deletion-daniel)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [5.0 Product Scope](#50-product-scope)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [5.1 Target user profile](#51-target-user-profile)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [5.2 Value proposition](#52-value-proposition)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [6.0 User Stories](#60-user-stories)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [7.0 Non-Functional Requirements](#70-non-functional-requirements)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [8.0 Documentation](#80-documentation)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [9.0 Testing / Logging](#90-testing--logging)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [10.0 Dev Ops](#100-dev-ops)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [11.0 Glossary](#110-glossary)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* [Appendix A: Guidelines on Manual Testing](#appendix-a-guidelines-on-manual-testing)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* [Appendix B: Effort](#appendix-b-effort)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 1.0 Introduction"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "**LifEasier** helps Computer Engineering (CEG) students to manage their classes, social events, deadlines and school notes through the Command Line Interface (CLI). **LifEasier** is developed by a group of CEG students for their CS2101/CS2113T mods."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "This developer guide documents the design, architecture and instructions for testing, as a reference for developers who will be maintaining or expanding **LifEasier** in the future. "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 2.0 Setting Up"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The following section will provide information on how to set up **LifEasier** for development."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "### 2.1 Prerequisites"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. `JDK 11`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": "2. Intellij IDE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "### 2.2 Setting Up the Project"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. Open _IntelliJ_ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Click `New...` and find the directory of the JDK."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. Click Import Project."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. Click `Open as Project`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johan9se"
        },
        "content": "### 2.3 Verifying Setup"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Run `seedu.LifEasier.Main` and try a few commands."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. Run the tests to ensure they all pass. This can be done by executing the command `gradlew build` in _IntelliJ’s_ terminal."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 3.0 Design"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The following section provides more details on the design and architecture of **LifEasier**."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.1 Architecture"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "This section elaborates on the high-level architecture of the **LifEasier** application. It provides a brief introduction to each component, and how these components interact with one another. Figure 3.1-1 provides an overview of the architecture."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "![Figure 3.1-1](images/DeveloperGuide/Figure%203.1-1.png) "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Figure 3.1-1 Architecture diagram for LifEasier_"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "LifEasier is comprised of 7 components, which are listed below together with their functions:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "1. `LifEasier`: The main class of the application."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. `Ui`: Displays messages to the user, and takes in the user’s commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. `Parser`: Understands the user’s commands, and creates the necessary Command objects."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. `Command`: Carries out the user’s command."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. `Model`: Holds the user\u0027s task and note data in memory."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. `Storage`: Reads and writes data from the hard disk."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Each of these components are expanded on in more detail in their respective sections."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Figure 3.1-2 illustrates the Sequence diagram for how each class interacts with one another through an example  “addDeadline” command."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "![Figure 3.1-2](images/DeveloperGuide/Figure 3.1-2.png)  "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "_Figure 3.1-2. Sequence diagram of “addDeadline”._"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.2 Components"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "This section expands on the various components that were first seen in the Architecture section."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "#### 3.2.1 LifEasier Component"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The **LifEasier** component is the main class of the application. It initialises all other components,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " and is used as the centre of all other components."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "#### 3.2.2 UI Component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The `UI` component reads the user’s inputs and displays messages and content to the user. It consists of 3 classes; a main `Ui`,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": " a `ScheduleUi` and a `TimetableUi`. The `ScheduleUi` handles all outputs to do with displaying a user’s schedule."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "  To do this, it uses the `TimetableUi` to display a specialised timetable view of the weekly schedule. "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "  The main `Ui` handles everything else, such as displaying general messages and reading the user’s inputs. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "#### 3.2.3 Parser Component"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The `Parser` component takes the user’s inputs from the `Ui` component, and makes sense of these commands. If the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": " commands are incomplete, it calls the `Ui` component to prompt the user for more input until the commands have "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": " the parameters required to execute. Once this condition is fulfilled, it returns a `Command` object to **LifEasier**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "  for the commands to be executed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "  "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "#### 3.2.4 Command Component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The `Command` component consists of an abstract `Command` class and the many different commands that inherit the "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "`Command` class. What is important to note is that each type of command class (e.g. `addLessonCommand`, `showNotesCommand`)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": " implements an abstract `execute()` method that carries out the command. Figure 3.2.4-1 below shows the classes that "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": " inherit from the `Command` class."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " ![Figure 3.2.4-1](images/DeveloperGuide/Figure%203.2.4-1.png)  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " _Figure 3.2.4-1: The classes that inherit from the Command class_"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "#### 3.2.5 Model Component"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The `Model` component contains all the user\u0027s notes and tasks in memory. It is comprised of the `TaskList`, `NoteList`, `TaskHistory` and `NoteHistory` classes."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The `TaskList` class handles additions, edits and deletions to the user\u0027s tasks, while the `TaskHistory` class allows users to undo their most recent task edits and deletions."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Similarly, the `NoteList` class handles additions, edits and deletions to the user\u0027s notes, while the `NoteHistory` class allows users to undo their most recent notes edits and deletions."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "All classes in the `Model` component interact heavily with the `Command` component as most commands make use of the user\u0027s tasks and notes."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "#### 3.2.6 Storage Component"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The `Storage` component handles saving of the users’ notes and tasks to persistent storage."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": " It does this after every addition, change, or deletion to the `TaskList` component or `NoteList` component. "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": " It also handles the moving of the stored `notes` to a separate `archive` file if instructed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 4.0 Implementation"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The following section will go into further details on how the different features of **LifEasier** are implemented."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.1 Adding Lessons, Events, Deadlines (Fairuz)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "The `addLesson`, `addEvent` and `addDeadline` commands adds the specific task into the `TaskList`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Due to the different parameters required by the addition of different types of tasks, each command has"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " a specific intended parameter to be input by the user."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "For example, if the user uses the `addEvent` command, the user will have to input the `EVENT_NAME`,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " `START_TIME` and `END_TIME`, whereas if the user uses the `addDeadline` command, the user will have input `DEADLINE_NAME` and `BY`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "When the command is called, the class invokes the `TaskList` class method to add the specific task to"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " the `TaskList`, after which `Storage` is called to save the updated `TaskList` to the local save file. Figure 4.1-1 shows the "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " sequence diagram for the `addDeadlineCommand`. This sequence diagram is applicable to the other two `addEventCommand` and "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " `addLessonCommand`, with the only difference being in their parameters."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " ![Figure 4.1-1](images/DeveloperGuide/Figure%204.1-1.png)  "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " _Figure 4.1-1: Sequence diagram for addDeadlineCommand execution_"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "The success and accuracy of the command is heavily dependent on the values passed to the command by the `Parser` class."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " Thus, checks have to be thoroughly conducted by the `Parser` class before the `Command` class is invoked."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "### 4.2 Editing Lessons, Events, Deadlines (Fairuz)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "The `editEventCommand`, `editDeadlineCommand` and `editLessonCommand` allows the user to edit existing"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " tasks in the `TaskList` according to the type of task."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "These command classes will be invoked when the user inputs the `editTask` command, followed by"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " the type of task to be edited. "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "The user also has an option to input the task’s name, or part of it, after which **LifEasier**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " will print out all tasks matching the type, and the user query. If the user chooses to leave"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " that search parameter blank, **LifEasier** will print out all the tasks of the intended type."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " The program will then prompt User to input the index of the task to be edited."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Upon receiving a valid index of a task to be edited, **LifEasier** will prompt the User for the"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " parameter to be edited - `Name` or `Time`. "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Upon receiving a valid option of parameter to edit, **LifEasier** will prompt the User to input"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " the new descriptions. If the User input is valid according to the required format, **LifEasier** will print a confirmation"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " of the edit. The edited task will then be saved by `Storage`. Figure 4.2-1 illustrates the flow of `editDeadlineCommand` "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " through a sequence diagram. The logic of this class remains the same among the different types of `Tasks`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "![Figure 4.2-1](images/DeveloperGuide/Figure%204.2-1.png)    "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "_Figure 4.2-1: Sequence diagram for editDeadlineCommand execution_"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Due to the difference in the types of tasks and their parameters, this functionality was designed to guide the User"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " explicitly to ensure accurate inputs and thus efficiency. This will have minimal impact on the efficiency of the program,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " while improving the quality of use for the User."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "### 4.3 Deleting of Lessons, Events, Deadlines (Fairuz)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "The `deleteTaskCommand` allows the user to delete any `Task` (lesson, event or deadline) from the `TaskList`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "The User first enters the `deleteTask` command and appends the type of task to be deleted. **LifEasier** will then print"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " out the list of tasks of the intended type. For example, when User inputs `deleteTask /type event`, **LifEasier** will "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " print out all `Events` in the `TaskList`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "**LifEasier** will then prompt the user to select the `Task` to be deleted by inputting the index of the `Task` as seen from"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " the terminal. Before the `Task` is deleted, a temporary copy of the current state of the `Task` will be saved by "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " `TaskHistory`. The `Task` is then deleted and **LifEasier** will print the confirmation of the deletion. The old copy of the "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " `Task` will then be pushed to `TaskHistory`, and the updated `TaskList` will be saved by `Storage`. Figure 4.3 will illustrate "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " the flow of the `deleteTaskCommand` through a sequence diagram."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "![Figure 4.3-1](images/DeveloperGuide/Figure%204.3-1.png)    "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "_Figure 4.3-1: Sequence diagram for deleteTaskCommand execution_"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "The command has to handle separate types of tasks as printing all tasks and forcing the User to look up the whole table"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " would be impractical in the long run. The enhanced capability with `TaskHistory` to allow the User to undo any action is "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": " crucial as its initial functionality did not have the ability to restore any accidentally deleted `Tasks`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.4 Adding Notes (Edmund)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "The `addNotes` command adds user’s notes to the NoteList with a specified title and description. "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "The `addNotes` command first starts with 2 paths: with or without title. If a title is added alongside the "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "“addNotes” (ie. the user inputs “addNotes cats”) then the title is passed on to a method `isValidTitle` that would "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "check for a blank input. Conversely, if no title is appended, then the system would prompt the user for the title. "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Either way, the system would still check for if the user inputs an empty title. "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Next, the system would prompt the user for a description. Similar to title, the same method `isValidTitle`, to check "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "if the user has inputted an empty String."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Finally, if both title and description are of valid input, then the 2 parameters would be added to the `NoteList` "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "and passed on to `NoteStorage`. "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Figure 4.4-1 below illustrates the flow of `addNotes` through a sequence diagram."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "![Figure 4.4-1](images/DeveloperGuide/Figure 4.4-1.png)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Figure 4.4-1: Sequence diagram for addNotesCommand_"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "An empty string must be defined clearly (a long string of spaces/no string) and must not be inputted "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "by the user as it affects the usability and searchability of the `NoteList`. As such, checks would need to"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "be implemented to prevent any hiccups by the user."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.5 Editing and Deleting Notes (Edmund)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "The `editNotes` command allows the user to change the title or description of their notes stored in the `NoteList`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "The `deleteNotes` command allows the user to remove the specified notes completely from the `NoteList`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Below illustrates the steps taken by each command to ensure their execution."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "###### editNotes"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "1. `checkEmptyList` would be called to ensure the `NoteList` is not empty before proceeding on with the execution. "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "If an empty list is detected, the command would terminate with a prompt of empty list to the user."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. A condition of whether the user has pre-inputted the title is checked."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    * If the user pre-inputs a title, the findTitle function would go through the list to find the title. If the input "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    title does not match any of the titles in the list, the command would terminate with a message: "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    “title is not found”. If a match is found, the system prints out the note and asks for which part to edit. "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    In the case of multiple matches, the system would print all matching cases and ask the user to select amongst them. "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    Following the confirmation, a “T” would mean editing the title while “D” would mean editing the description."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * If the user did not pre-input the title, the system would print all notes currently in the list and ask for "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "the user to select which note to edit among them. Following the confirmation, a “T” would mean editing the title "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "while “D” would mean editing the description."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "       "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. The new edited note would then be passed on to storage for saving."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Figure 4.5-1 illustrates the above steps via a sequence diagram."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "![Figure 4.5-1](images/DeveloperGuide/Figure 4.5-1.png)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Figure 4.5-1: Sequence diagram for editNotesCommand_"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "###### deleteNotes"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "1. checkEmptyList would be called to ensure the NoteList is not empty before proceeding on with the execution. "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "If an empty list is detected, the command would terminate with a prompt of empty list to the user."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. A condition of whether the user has pre-inputted the title is checked."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    * If the user has included a title in the command, the `findTitle` function would go through the list to "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "find the title. If the input title does not match any of the titles in the list, the command would terminate with "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "a message: “title is not found”. If a match is found, the system prints out the note and asks for confirmation "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "for deletion. In the case of multiple matches, the system would print all matching cases and ask the user to select "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "amongst them. Following the confirmation, a “N” would terminate the command while a “Y” would proceed to remove "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "the note from the list."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * If the user did not pre-input the title, the system would print all notes currently in the list and ask "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "for the user to select which note to delete among them. Following the confirmation for deletion, a “N” would terminate "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "the command while a “Y” would proceed to remove the note from the list."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "1. The current note list would then be saved by the `Storage` class."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Figure 4.5-2 illustrates the above steps via a Sequence Diagram."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "![Figure 4.5-2](images/DeveloperGuide/Figure 4.5-2.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "_Figure 4.5-2: Sequence diagram for deleteNotesCommand_"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* Any number inputs by the user must be checked through to ensure that it is not out of the available indexes "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "in the array. "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* The function must deal with incorrect title inputs by the user. The user cannot input a title that is not found "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "in any of the notes nor can he input an invalid title such as an empty string."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* In the event of an empty list, the user cannot delete any more notes from the list. Hence this would result in "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "an exception caught."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.6 Undoing Changes Made to Tasks and Notes (Johannine)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "johan9se"
        },
        "content": "The undo feature allows the user to undo any changes made to Task or Note objects, particularly edits and deletions."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "johan9se"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "johan9se"
        },
        "content": "To implement the `undo` feature, the concept of a stack was used to hold all the history of previous versions of `Tasks` "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "johan9se"
        },
        "content": "(or `Notes`) before they are changed."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "johan9se"
        },
        "content": "At every instance where a particular `Task` (or `Note`) is edited or deleted, using commands such as `editDeadline`, "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "johan9se"
        },
        "content": "`deleteTask` or `editNote`, a copy of the `Task` (or `Note`) is created as the changes are being made. Every `Task` or "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "johan9se"
        },
        "content": "`Note` object has an `editNumber` attributed to it, which is assigned a positive value if it has been edited, and a "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "johan9se"
        },
        "content": "negative value if it has been deleted."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "johan9se"
        },
        "content": "The copy made is stored as a new `Task` (or `Note`) object temporarily. Once the edit or deletion is successful, the "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "johan9se"
        },
        "content": "copy of the old unchanged `Task` (or `Note`) is then pushed into an array called `taskHistory` (or `noteHistory`), "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "johan9se"
        },
        "content": "which holds all the previous copies of the object."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Figure 4.6-1 illustrates the sequence diagram of the concept above, applied on changes made to a `Task`. The concept "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "johan9se"
        },
        "content": "works in a similar manner for `Note` objects."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "johan9se"
        },
        "content": "![Figure 4.6-1](images/DeveloperGuide/Figure 4.6-1.png)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "johan9se"
        },
        "content": "_Figure 4.6-1: Sequence Diagram for creating and pushing old copies of Tasks_ "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "johan9se"
        },
        "content": "When the `undo` command is called, it retrieves the `editNumber` of the copied `Task` (or `Note`) at the top of the "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "johan9se"
        },
        "content": "stack in `taskHistory` (or `noteHistory`), and iterates through the existing `TaskList` (or `NoteList`) to see which "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "johan9se"
        },
        "content": "`Task` (or `Note`) has the corresponding `editNumber`. If there is a match, the existing `Task` is replaced with the "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "johan9se"
        },
        "content": "old copy, and then the old copy is removed from the `Tasklist`."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The corresponding confirmation message to be displayed is determined by whether the `editNumber` is positive or negative."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "johan9se"
        },
        "content": "![Figure 4.6-2](images/DeveloperGuide/Figure 4.6-2.png)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "johan9se"
        },
        "content": "_Figure 4.6-2: Sequence Diagram for undoing edits or deletions of Tasks_"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "johan9se"
        },
        "content": "A new `taskHistory` (or `noteHistory`) is created at every startup of the application. Therefore, the history of any "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "johan9se"
        },
        "content": "edits and deletions are only available for the current session. Once the program is closed, all information is discarded."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "johan9se"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "johan9se"
        },
        "content": "To allow for multiple undos on the same `Task` (or `Note`) object, the `editNumber` of `Tasks` (or `Notes`) that have "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "johan9se"
        },
        "content": "been edited before must be checked. If it is anything but the _default assigned value(-999999)_, then its existing "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "johan9se"
        },
        "content": "`editNumber` will be taken and used as the `editID` for all successive copies made of it. This is to allow the "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "johan9se"
        },
        "content": "application to always find the same instance of the `Task` (or `Note`) inside the `TaskList` (or `NoteList`) when "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "johan9se"
        },
        "content": "restoring previous versions."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "johan9se"
        },
        "content": "However, multiple undos are only allowed until a particular object is deleted. Because of how each `Task` (or `Note`) only "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "johan9se"
        },
        "content": "has one `editNumber` attributed to it, once it is assigned a deleteID (a negative number), it has to overwrite its "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "johan9se"
        },
        "content": "previous (positive) editID. Therefore, if an object is deleted, all other previously stored copies of it in the `taskHistory` "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "johan9se"
        },
        "content": "(or `noteHistory`) are discarded. For example, if a particular object goes through _edit1-edit2-delete1-edit3_, the "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "johan9se"
        },
        "content": "user will only be able to undo _edit3_ and _delete1_. The copies related to _edit1_ and _edit2_ are removed from history."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.7 Storing and Archiving Notes (Danzel)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The storing and saving of data in the **LifEasier** app is done automatically after every change such as adding, editing, "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dojh111"
        },
        "content": "deleting a component such as a lesson, deadline, event or note. The following section documents how the data storing "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "dojh111"
        },
        "content": "and archiving system of **LifEasier** was implemented, followed by the considerations taken during the design of the storage components."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dojh111"
        },
        "content": "##### Implementation - Data saving and storing"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Figure 4.7-1 shows the simplified class diagram of all the components in the storage package. There are far more methods "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dojh111"
        },
        "content": "that exist then as shown in the class diagram. These have been omitted for simplicity."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "![Class Diagram Image](images/DeveloperGuide/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dojh111"
        },
        "content": "_Figure 4.7-1: Class Diagram for all storage components_"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Figure 4.7-2 shows the sequence diagram of the save data reading process which runs whenever **LifEasier** is run. Upon app startup, "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dojh111"
        },
        "content": "the main `LifEasier` class creates a new `FileStorage` object, which starts the save reading process to load in all the previously stored "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dojh111"
        },
        "content": "data of the user, if available. Else, new save directories and save files are created in the same directory which the `LifEasier.jar` was run. "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Tasks and notes data read from the save file are used to create new `Task` and `Note` objects respectively, and added into `TaskList` and `NoteList`."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dojh111"
        },
        "content": "![Startup file load sequence diagram](images/DeveloperGuide/Figure 4.7-2.png)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "dojh111"
        },
        "content": "_Figure 4.7-2: Sequence diagram for save data reading on startup_"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "dojh111"
        },
        "content": "By default, the save directory is set as _LifEasierSaves_ under the `DIRECTORY_PATH` constant found in the `FileStorage` class. "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The names of the tasks and notes save files are passed in as arguments from the main method in the `LifEasier` class, where the first "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "dojh111"
        },
        "content": "argument dictates the resulting name of the tasks save file, while the second determines the name of the notes save file, as seen from the "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "dojh111"
        },
        "content": "code snippet in figure 4.7-3. Save directory names and paths are **editable**, along with the save file names by changing the values in the locations as stated."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "dojh111"
        },
        "content": "````java"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public static void main(String[] args) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    new LifEasier(\"saveFileTasks.txt\", \"saveFileNotes.txt\").run(false);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "dojh111"
        },
        "content": "````"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "dojh111"
        },
        "content": "_Figure 4.7-3: Code snippet for where save file names are set_"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Whenever a new task or note is added, edited or deleted, the `saveTask()` or `saveNote()` methods in the `FileStorage` class is called depending "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "dojh111"
        },
        "content": "on whether the changed item was a task or a note, to begin the data saving process. Figure 4.7-4 shows the sequence diagram taken by the program "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "dojh111"
        },
        "content": "to save the user’s notes data. The saving process for tasks and notes are implemented in similar ways, with the saving process for tasks "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "dojh111"
        },
        "content": "requiring a few more additional steps to correctly convert the tasks’ `LocalDateTime` information into formatted Strings to allow for more "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "dojh111"
        },
        "content": "readable save files. The format in which the `LocalDateTime` objects are converted to can be found in the `DateTimeFormatter` object in the "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "dojh111"
        },
        "content": "`FileCommand` class."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "![Save sequence diagram](images/DeveloperGuide/StorageSaveSequenceDiagram.png)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "dojh111"
        },
        "content": "_Figure 4.7-4: Sequence diagram for saving of user note data_"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "dojh111"
        },
        "content": "##### Implementation - Note Archiving"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The `archive` command immediately moves all currently loaded notes into a newly generated text file in the `Archives` directory found within the "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "dojh111"
        },
        "content": "_LifEasierSaves_ directory. The main code snippet which drives the `archive` command is shown in figure 4.7-5. "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "dojh111"
        },
        "content": "If no `Archives` directory is found, it is automatically created. Archive save files are automatically named as the "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "dojh111"
        },
        "content": "current date in the **DD-MM-YY** format, and the time the archive command was run in the **HH:MM** format, separated by a **T**. The current save "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "dojh111"
        },
        "content": "file for notes will be automatically cleared with the `clearSaveFile()` command found in the `FileCommand` class, and the current `noteList` as well as `noteHistory` are  "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "dojh111"
        },
        "content": "cleared. All errors are handled in `handleDataArchiving()`."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "dojh111"
        },
        "content": "````java"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void archiveData() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File archiveDirectory \u003d new File(ARCHIVE_PATH);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showArchiveStartMessage();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Start archiving process\");"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create archive directory if non existent"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!directoryExists(archiveDirectory)) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNewDirectory(archiveDirectory);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileArchive.handleDataArchiving(ARCHIVE_PATH);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileCommand.clearSaveFile(filePathNotes);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteHistory.clearNoteHistory();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "dojh111"
        },
        "content": "````"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "dojh111"
        },
        "content": "_Figure 4.7-5: Code snippet for main driver of archive command_"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The `archive` command checks for the size of the current `noteList` before execution, and as such, when an empty `noteList` is detected, "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "dojh111"
        },
        "content": "the archiving process will not be started. Archived notes will **not** be read by the program anymore and any changes can be made to the created archive save file."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "dojh111"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "dojh111"
        },
        "content": "In order to ensure users get the best hassle free and user-friendly experience while using **LifEasier**, saves are automatically done after any change "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "dojh111"
        },
        "content": "that affects any user added tasks and notes. While the constant clearing and rewriting of the save data whenever a change occurs may affect performance "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "dojh111"
        },
        "content": "when the save files get larger, it was decided that the convenience of an automatic saving system outweighs the performance costs, and the assurance "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "dojh111"
        },
        "content": "granted to users that their data is constantly saved without needing their manual intervention."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Saves were also designed to be stored in simple plain text and easily accessible to users to allow experienced users to modify "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "dojh111"
        },
        "content": "the save files directly and easily, if required. "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "dojh111"
        },
        "content": "In the event of **corrupted or missing data**, the `storage` component defends and protects the app from potential issues that might arise from "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "dojh111"
        },
        "content": "reading in this data by throwing exceptions to stop prevent the current data from being read. Any data read up to that point is **untouched**, and the app will "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "dojh111"
        },
        "content": "continue to read in the remaining data and run as per normal. **Manual intervention from the user** is required to remove improperly formatted and/or missing data.  "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "johan9se"
        },
        "content": "### 4.8 Displaying Schedule (Johannine)"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "johan9se"
        },
        "content": "The `displaySchedule` command presents the `TaskList` contents in a timetable format, given that it is specified to "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "johan9se"
        },
        "content": "display the full week. Otherwise, it displays the current day’s schedule in a list form, with the `Task` items sorted "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "johan9se"
        },
        "content": "by date."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "johan9se"
        },
        "content": "![Figure 4.8-1](images/DeveloperGuide/Figure 4.8-1.png)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "johan9se"
        },
        "content": "_Figure 4.8-1: Sequence diagram for displaying week or day schedule_"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "johan9se"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "johan9se"
        },
        "content": "The timetable is structured in such a way that the first column always starts with the schedule of the current day, "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "johan9se"
        },
        "content": "followed by that of the next 6 days. This is so that the user always sees 7 days ahead, rather than a typical fixed "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "johan9se"
        },
        "content": "format _(e.g. from Monday to Sunday)_."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Changes to the timetable are updated at every call of the `showTimetable()` method, which first involves the generation "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "johan9se"
        },
        "content": "of the timetable by loading the contents of the `TaskList` into it, then printing it row by row."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "johan9se"
        },
        "content": "The timetable is modelled using an `ArrayList`, with each entry containing a row of the timetable as a string. The "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "johan9se"
        },
        "content": "individual cell entries of the timetable are collected by iterating through each day, each time slot and then through "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "johan9se"
        },
        "content": "the `TaskList` to see which tasks fall on that particular day and are held during that particular time slot."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "johan9se"
        },
        "content": "The cell entries which fall on the same time slot and hence the same row, are collected into an array and formatted into "
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "johan9se"
        },
        "content": "a string, before it is finally added to the `ArrayList` of timetable rows."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "johan9se"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "johan9se"
        },
        "content": "To ensure that the displayed timetable is easy to read and offers a quick view of the user’s schedule, especially that "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "johan9se"
        },
        "content": "of the current day, the timetable is not made to be fixed. The display schedule commands must thus iterate through the "
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "johan9se"
        },
        "content": "entire `TaskList` every time it is called, in order to arrange the `Tasks` accordingly and update any changes."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Because of the way the timetable time slots increment on an hourly basis, functions were implemented to ensure the "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "johan9se"
        },
        "content": "timings of `Tasks` were rounded to the hour. This was an intentional design choice to keep the timetable neat and not "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "johan9se"
        },
        "content": "overloaded with too many details."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.9 Displaying Free Time and Sleep Time (Daniel)"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The `freeTime` command displays to the user their longest block of free time for that day. The `sleepTime`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " command displays to the user how much time they have available to sleep based on that day’s and the"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " next day’s schedule. Both commands are implemented similarly. They both find the longest uninterrupted block"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " of free time within a certain time period by checking if individual hour-long time blocks in this time period"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " are free. The commands then use the start and end time values found to calculate a duration, and pass all"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " three values to the `Ui` to display to the user. Figure 4.9-1 shows the sequence diagram for the `freeTimeCommand`,"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " and Figure 4.9-2 shows the sequence diagram for the `sleepTimeCommand`."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "![Figure 4.9-1](images/DeveloperGuide/Figure%204.9-1.png)  "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Figure 4.9-1: Sequence diagram for freeTimeCommand execution_"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "![Figure 4.9-2](images/DeveloperGuide/Figure%204.9-2.png)  "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Figure 4.9-2: Sequence diagram for sleepTimeCommand execution_"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Due to the fact that `Tasks` in the `TaskList` are unsorted, the  `freeTime` and `sleepTime` commands"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " must iterate through the entire list every time to check if a particular time slot has nothing scheduled."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " This corresponds to a time complexity of O(N). This was chosen as the way to implement this function as the"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " size of `TaskList` is relatively small. As such, the repeated iteration would not result in "
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " significant impacts on LifEasier\u0027s speed performance."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. The functions also only provide an accuracy resolution which is rounded to the hour. Similar to the `displaySchedule`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " command, this was an intentional design choice to not overload the user with too many unnecessary details. "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.10 Parsing Commands (Edmund)"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "The `Parser` determines what command is to be executed given by the user input. If the user input does not match any of "
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "the specified commands, an unknown command message would be returned."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "The type of command is determined by the parser through the first string of the input and passed through a switch "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "statement. If it matches with any of the cases, the corresponding `parse` command would be executed. Otherwise, it would "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "return an invalid command. The corresponding parsers would check whether all parameters are inputted before passing "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "them into their respective commands. This is done by checking the user input for any missing initials (/code, /from, etc.) "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "and appending any of these missing parameters into a new string with all the parameters present. With the required "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "parameters filled, the corresponding parser would pass them to their command functions.\t"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "The user cannot input an empty string as a parameter. This would avoid issues of invalid parameters passing on to the "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "commands, which can result in error in the program. As such, checks are to be done on the user input.  "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.11 Recurring Tasks and Auto Deletion (Daniel)"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Every time  a new task is added and when **LifEasier** starts up, it automatically updates the dates of recurring tasks, and deletes tasks that are "
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "in the past and no longer set to repeat. On startup, **LifEasier** performs this step after loading the tasks and notes from the"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "save files into NoteList and TaskList. It does so by iterating through the list, and checking the `start` variable"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " of each task. If the date of `start` is before the current date, the `recurrences` variable is checked. If "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " `recurrences \u003d 0`, the task is deleted. Else, the task\u0027s date is moved forward by 1 week and `recurrences` is "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "decremented by 1 until the date of `start` is on or after the current date, or `recurrences` hits 0."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. **LifEasier** only updates tasks on startup, and when new tasks are added. This was done intentionally to ensure"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "that each command does not take too much time to run. However, if a user keeps **LifEasier** open over the course of a"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "few days without adding any new tasks to their schedule, they might need to restart it to ensure that their tasks are updated."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 5.0 Product Scope"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "johan9se"
        },
        "content": "This section highlights the scope of **LifEasier**, particularly the features that characterise it and who it is made for."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 5.1 Target User Profile"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "johan9se"
        },
        "content": "NUS Computer Engineering students who:"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* struggle with keeping track of classes and deadlines"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* frequently juggle their time between school and personal interests"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* face difficulty keeping track of their school notes"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* are comfortable using the command line interface"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 5.2 Value Proposition"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "johan9se"
        },
        "content": "**LifEasier** is a timetabling application with added abilities to add their own reminders and social events designed to"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "johan9se"
        },
        "content": " help students keep track of everything that they need to do. The application could help them take down and organise "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "johan9se"
        },
        "content": " their notes as well."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "johan9se"
        },
        "content": " "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "johan9se"
        },
        "content": "This will make their lives easier as they can more accurately keep track of what they are supposed to do, and what they "
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "johan9se"
        },
        "content": "have already completed."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 6.0 User Stories"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v1.0|first time user|be able to access help to see what commands are available|learn to use the app|"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v1.0|student|be able to add additional classes to the timetable|create my timetable with the relevant information|"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v1.0|student|be able to take down notes and have them organised|have an easy way to take down notes during lecture|"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v1.0|forgetful student|be reminded of my upcoming deadlines|be on time for all my deadlines|"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v1.0|frequent user|know what I have going on for the day and when|I can have some motivation to start the day right|"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v1.0|frequent user|be reminded of my regular weekly activities|keep track of the time I need to prepare for classes/homework|"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v1.0|intermediate user|be able to enter detailed information into command|the app can help keep track of more details for me|"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v2.0|student|be able to tell how much free time I have in the day|time manage my activities better|"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v2.0|forgetful student|schedule one time events according to my timetable|avoid  manually deleting events from the calendar when they are over|"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v2.0|tired student|be able to tell how much sleep I can get|plan my sleep schedule and be less tired|"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v2.0|lazy user|edit my events and classes as they change|avoid having to delete and add them again|"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v2.0|disorganised user|have the application recommend me the time I can do my personal stuff|avoid spending too much time planning|"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v2.0|frequent user|have a way to edit the notes I have taken|update any additional information in the future|"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v2.0|frequent user|be able to have quick access to all related notes of a subject|will be able to revise more efficiently|"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v2.0|intermediate user|set recurring events / classes|avoid having to repeat multiple commands for the same thing|"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v2.0|long time user|be able to store/archive different semester schedule and notes|show it to my descendants|"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|v2.0|experienced user|have a way to delete unwanted tasks|remove clutter|"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 7.0 Non-Functional Requirements"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "johan9se"
        },
        "content": "1. The application should work on any mainstream OS that has Java 11 or above installed."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "johan9se"
        },
        "content": "1. The application has to be lightweight and can be used on a device with storage issues."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "johan9se"
        },
        "content": "1. The application does not end abruptly when invalid inputs are passed."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "johan9se"
        },
        "content": "1. The file size of the application is below 100MB."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 8.0 Documentation"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Apart from the User Guide and Developer Guide managed under the`/docs` folder, there are also separate PDF versions maintained."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "However, the versions available in the `/docs` folder. should be the most updated. The project uses GitHub Pages and Jekyll to generate formatted static websites to host the User Guide and Developer Guide."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 9.0 Testing / Logging"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The project makes use of Gradle and JUnit5 for testing. There are two ways that tests can be run, which are elaborated"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " below."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Using the IntelliJ JUnit test runner: To test the entire project, navigate to the `src/test/java/seedu.lifeasier` "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "folder and right click on it, and select `Run Tests in ‘seedu.life…’`. The option to run tests with coverage is also "
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "listed.To run tests on a particular subset, you can right click on any test package, test class, or test method and"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "select `Run`."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "2. Using Gradle: In the terminal, run the command `gradlew clean test` for Windows, or `./gradlew clean test` for Mac"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " and Linux. This will run all tests."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The project uses the `java.util.logging` package for logging. Each class uses its own `Logger` object to log the "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "necessary messages. Logging can be enabled or disabled through the use of the `logging boolean` when calling"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "the `LifEasier.run()` method. Setting `showLogging` to `true` will enable logging, and setting it to `false` will "
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "disable logging."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The project also has the option to make use of the `text-ui-test` folder to perform IO redirection tests."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "However, this option is not currently recommended due to the hassle of configuring these tests to work with save files which might change every iteration of testing."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 10.0 Dev Ops"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The project uses Gradle for build automation and dependency management. More information on how to use"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " Gradle can be found [here](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The project also uses Github Actions for Continuous Integration (CI). The configurations file can be found in"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "the `.github/workflows` folder. No actions regarding configuration are currently required, but this file can be"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "edited in future to change the configurations if necessary."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 11.0 Glossary"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The following section will give the definition of some commonly used words in **LifEasier**."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* _glossary item_ - Definition"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* _taskList_ - An array list of `Task` objects used by **LifEasier** to temporarily store lessons, events and deadlines while the program is running."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* _noteList_ - An array list of `Note` objects used by **LifEasier** to temporarily store current notes while the program is running."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "johan9se"
        },
        "content": "## Appendix A: Guidelines on Manual Testing"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Refer to the **LIfEasier User Guide** [here](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide), for the setting up/quick start guide and to view more detailed information of all usable commands. "
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "dojh111"
        },
        "content": "After launching the **LifEasier** app, the tester can run the `help` command to display the list of available commands."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The following are some sample commands to add new tasks and notes into **LifEasier**. Please note that some commands are _partial commands_, where incomplete command "
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "dojh111"
        },
        "content": "parameters are allowed. Please refer to the user guide linked above for more information on which commands support _partial commands_."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* `addLesson /code CS2113T /date 28-10-20 /time 14:00 /to 16:00 /repeats 10`"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* `addLesson /code CS2101`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* `addEvent CS2101 Presentation /date 30-10-20 /time 09:00 /to 12:00 /repeats 5`"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* `addDeadline Buy some Bread /by  31-01-20 22:00 /repeats 0`"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `addNotes`"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `addNotes Cats are the best!`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Use the following commands to test the display schedule function:"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `display week`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `display`"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "johan9se"
        },
        "content": "To view currently saved notes, you can use either of the following commands."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `showNotes`"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `showNotes Cats`"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "johan9se"
        },
        "content": "All tasks and notes are editable. Use the following sample commands to test the implemented edit feature."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `editLesson CS2113T`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `editEvent CS2101 Presentation`"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `editDeadline Buy some Bread`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `editNotes`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `editNotes Cats`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**LifEasier** sports an undo function, which allows you to undo edits and deletions made to tasks and notes."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "dojh111"
        },
        "content": "At any point, feel free to try out the undo command after an edit or delete has been made. Use the following sample commands to test the undo feature."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* `undo task`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* `undo note`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Once again, use the `display` and `showNotes` commands to view the updated tasks and notes contents."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "johan9se"
        },
        "content": "At any point, feel free to quit the app using `exit` and relaunch the app to view that **LifEasier** has saved all input data."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Test deletion of tasks and notes with the following commands."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `deleteTask /type lesson /CS2113T`"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `deleteTask /type event`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `deleteNotes`"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `deleteNotes Cats` "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Use the following command to archive all currently loaded notes."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `archive`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Now, when `showNotes` is used, there should be no notes listed. Navigate to the _LifEasierSaves_ directory created in the same folder as `LifEasier.jar` was run, to find the created _Archives_ directory. Your archived notes will be found in the created text file named corresponding to the date and time the archive command was run."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "johan9se"
        },
        "content": "To show free time and sleep time, use the following commands."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `freeTime`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `sleepTime`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Following the above path for manual testing will bring you through all the features implemented in the current version "
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "johan9se"
        },
        "content": "of **LifEasier**. Please feel free to try out other combinations of inputs to fully test the program."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "johan9se"
        },
        "content": "## Appendix B: Effort"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "johan9se"
        },
        "content": "On average, the development team met up twice a week to merge finished work, bug test, and do minor bug fixes before "
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "johan9se"
        },
        "content": "continuing to discuss design moving forward, new features to be implemented and handing out new issues. "
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Overall, the average individual effort was higher than that of the individual project. This is because we underestimated "
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "johan9se"
        },
        "content": "the difficulty of working in a team, and the amount of time needed to create the User Guide and Developer Guide. "
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 68,
      "daniellimzj": 239,
      "EdmundEXE": 82,
      "dojh111": 122,
      "johan9se": 189,
      "-": 28
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "# LifEasier"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "LifEasier helps Computer Engineering (CEG) students to manage their classes, social events, deadlines and school notes"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " through the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## Useful links:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [User Guide](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 7,
      "-": 3
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "# LifEasier User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [1.0 Introduction](#10-introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [2.0 Quick Start](#20-quick-start)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [3.0 User Features](#30-user-features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.1 Viewing Help: `help`](#31-viewing-help-help)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.2 Adding a Lesson: `addLesson`](#32-adding-a-lesson-addlesson)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.3 Adding an Event: `addEvent`](#33-adding-an-event-addevent)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.4 Adding a Deadline: `addDeadline`](#34-adding-a-deadline-adddeadline)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.5 Editing a Lesson: `editLesson`](#35-editing-a-lesson-editlesson)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.6 Editing an Event: `editEvent`](#36-editing-an-event-editevent)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.7 Editing a Deadline: `editDeadline`](#37-editing-a-deadline-editdeadline)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.8 Deleting a Task: `deleteTask`](#38-deleting-a-task-deletetask)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.9 Undoing an Edit or Deletion: `undo`](#39-undoing-an-edit-or-deletion--undo)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.10 Displaying Schedule: `display`](#310-displaying-schedule-display)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.11 Viewing Available Free Time: `freeTime`](#311-viewing-available-free-time-freetime)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.12 Viewing Available Sleep Time: `sleepTime`](#312-viewing-available-sleep-time-sleeptime)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.13 Adding a New Note: `addNotes`](#313-adding-a-new-note-addnotes)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.14 Showing Notes: `showNotes`](#314-showing-notes-shownotes)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.15 Deleting a Note: `deleteNotes`](#315-deleting-a-note-deletenotes)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.16 Editing a Note: `editNotes`](#316-editing-a-note-editnotes)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.17 Archiving Notes: `archive`](#317-archiving-notes-archive)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.18 Exiting: `exit`](#318-exiting-exit)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [4.0 Other Features](#40-other-features)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.1 Storing Data](#41-storing-data)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.2 Recurring Tasks and Auto Deletion](#42-recurring-tasks-and-auto-deletion)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [5.0 FAQ](#50-faq)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [6.0 Command Summary](#60-command-summary)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 1.0 Introduction"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "**LifEasier** helps Computer Engineering (CEG) students to manage their classes, social events, deadlines and school notes through the Command Line Interface (CLI). The CLI allows **LifEasier** to deliver this functionality through a lightweight and easy to use interface. If you can type fast, **LifEasier** can get your timetabling needs done faster than a traditional GUI app."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "This User Guide serves as an all-in-one document for users to set up and use **LifEasier**. To use this User Guide, simply refer to the Table of Contents to find what you are looking for. The Quick Start section gives instructions on how to set up and start using **LifEasier**. The Features section gives in-depth instructions on how to best use every feature **LifEasier** has to offer. The FAQ section answers some common queries that you might have. Lastly, the Command Summary provides a convenient summary of the commands you have available to use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "In order to get the best experience when using this User Guide, please refer to the legend below in Table 1-1."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Table 1-1: A summary of the special symbols and fonts used in this User Guide_"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Item | Meaning"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "-----|--------"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "![Notes](images/UserGuide/post-it.png) | Sections with this icon contain pointers you should take note of. You\u0027ll see these mostly in the Features section."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "`code snippets` | If you see words like this between blocks of normal text, they are probably related to more technical terms. If you see entire sections that appear in this font, they are usually examples of how to use LifEasier. You\u0027ll also see the latter mostly in the Features section."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 2.0 Quick Start"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": "This section describes the process of setting up **LifEasier** for use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": "1. Ensure you have the latest version of `Java 11` installed on your computer."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Download the latest version of  `LifEasier.jar` from here: https://github.com/AY2021S1-CS2113T-W13-4/tp/releases "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Copy the downloaded Jar file  to a suitable location in your computer. *(Note: **LifEasier** will create a folder for save files in the same folder you ran the jar file.)*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Open a new **terminal window**  and navigate to where your `LifEasier.jar` is located on your computer."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Enter the following command into the terminal window to launch the application:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": " `java -jar LifEasier.jar`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": "On successful launch, you will be greeted with a welcome screen as shown below in Figure 2-1."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Reading your save data. New saves will be created if no saves are found."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "  _      _  __ ______          _"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": " | |    (_)/ _|  ____|        (_)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": " | |     _| |_| |__   __ _ ___ _  ___ _ __"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": " | |    | |  _|  __| / _` / __| |/ _ \\ \u0027__|"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": " | |____| | | | |___| (_| \\__ \\ |  __/ |"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": " |______|_|_| |______\\__,_|___/_|\\___|_|"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Hello! What can I do for you today?"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": " -Type \u0027help\u0027 for a list the list of available commands"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johan9se"
        },
        "content": "```"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Figure 2-1: LifEasier’s welcome screen_"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. You are now ready to use **LifEasier.** Type commands into the terminal window and press enter to execute the command. E.g Type  help and press enter to bring up the list of  available commands."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Generally, green coloured text is displayed when commands have been completed successfully, or contains helpful information for you. Red coloured text is displayed when unexpected errors have occurred, or you have entered invalid information."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Refer to the Features section below to find more details on available commands."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 3.0 User Features"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "The following section expands on the features available for you to use in LifEasier. The explanation for each feature includes the format to be followed, at least one example, and some further explanation and notes if necessary."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on General Command Format:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* Words in `UPPER_CASE` are parameters to be supplied by the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* Items in square brackets are optional e.g `[TITLE]`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* **Some** commands can be filled in **partially** and still work. These commands will be stated in the detailed command information below."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Command parameters **must** follow the **order stated**, including partial commands. E.g if the command states `addEvent NAME /time START /to END`,  `addEvent NAME /to END /time START` will **NOT** be accepted."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* However, parameters can be missing, and LifEasier will prompt you for the missing parameters."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `DATE` parameters have the format of **DD-MM-YY**."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* `TIME` parameters follow a 24-hour clock, and have the format of **HH:mm**."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.1 Viewing Help: `help`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "This command shows you the available commands and their formats."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "An example of how to use the help command is shown below in Figure 3.1-1."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "````"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "help"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "These are the commands that are available:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "IMPORTANT INFORMATION:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * Words in UPPER_CASE are the parameters to be supplied by the user"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * Commands are CASE SENSITIVE"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * Command parameters have to be input in the order as stated"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * Items in square brackets are optional, e.g [DATE]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * Commands with the [P] can take partial commands"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "   e.g addLesson and addLesson /code CS2113 /to 18:00 are valid commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * All dates are in the DD-MM-YY and times in the HH:MM format"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "COMMANDS"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "*****************************************************************************************************"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "help -------------------------------------------------------------------- Displays available commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "addLesson /code MODULE_CODE /date DATE /time START /to END /repeats ---------------- [P]Adds a lesson"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "addEvent EVENT_NAME /date DATE /time START /to END /repeats ------------------------ [P]Adds an event"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "addDeadline DEADLINE_NAME /by DATETIME /repeats----------------------------------- [P]Adds a deadline"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "editLesson MODULE_CODE ------------------------------------------------------------ [P]Edits a lesson"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "editEvent EVENT_NAME -------------------------------------------------------------- [P]Edits an event"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "editDeadline DEADLINE_NAME ------------------------------------------------------ [P]Edits a deadline"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "deleteTask /type TYPE /name NAME ----------------------------------------------------- Deletes a task"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "addNotes TITLE ------------------------------------------------------------------- [P]Adds a new note"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "showNotes TITLE -------------------------------------------------------------- [P]Shows selected note"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "archive ----------------------------------------------------------------- Archives all existing notes"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "editNotes TITLE ------------------------------------------------------------ [P]Edits a selected note"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "deleteNotes TITLE -------------------------------------------------------- [P]Deletes a selected note"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "undo TYPE ------------------------------------------------ Undoes the last edit/deleted task or notes"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "display [WEEK] --------------------------------------------- Displays either weekly or daily schedule"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "freeTime -------------------------------------------- Tells you your longest block of free time today"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "sleepTime ------------------------------------------------- Tells you how much time you have to sleep"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "exit ------------------------------------------------------------------- Closes the LifEasier program"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "*****************************************************************************************************"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "For more detailed information, please visit the online user guide at:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "````"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "_Figure 3.1-1: An example of using the help command_"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.2 Adding a Lesson: `addLesson`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Adds a `Lesson` to your schedule. Use this command to add your `Lesson` to your schedule."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Format: `addLesson /code MODULE /date DATE /from START /to END /repeats TIMES`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on addLesson Command:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* System will not warn you if there are any clashes in timing with other Tasks. "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on addLesson Command Format:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* Adds a `Lesson` coded `MODULE`, that runs from `START` to `END`, and repeats weekly for `TIMES`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* The system will prompt you for parameters if they are not provided. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* Parameters `START`, `END` must be logical. The `END` time must not be before the `START` time. "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* This command accepts **partial commands**. E.g `addLesson /code CS2113 /to 18:00` is a valid command."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* The program will prompt for the remaining missing parameters when a partial command is input."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "###### Examples:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "An example of how to use the addLesson command is shown in Figure 3.2-1."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "addLesson /code CS2101 /date 22-10-20 /from 14:00 /to 16:00 /repeats 30"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Done! I\u0027ve added \"Lesson: CS2101 (22 Oct 2020, 14:00 to 22 Oct 2020, 16:00), repeats weekly 30 times\" to "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "your calendar"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "*Figure 3.2-1: An example of using the addLesson command*"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.3 Adding an Event: `addEvent`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Adds an `Event` to your schedule. Use this command to add your `Event` to your schedule."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Format: `addEvent NAME /date DATE /from START /to END /repeats TIMES`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on addEvent command:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* System will not warn you if there are any clashes in timing with other Tasks."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on addEvent Command Format:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* Adds an `Event` called `NAME`, that runs from `START` to `END`, and repeats weekly for `TIMES`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* The system will prompt you for parameters if they are not provided. "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* Parameters `START`, `END` must be logical. The `END` time must not be before the `START` time. "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* This command accepts **partial commands**. E.g `addEvent Concert /date 05-11-20` is a valid command."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* The program will prompt for the remaining missing parameters when a partial command is input."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "###### Examples:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "An example of how to use the addEvent command is shown in Figure 3.3-1."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "```"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "addEvent Concert /date 13-07-19 /from 17:00 /to 21:00 /repeats 0"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Done! I\u0027ve added \"Event: Concert (13 Jul 2019, 17:00 to 13 Jul 2019, 21:00), repeats weekly 0 times\" to "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "your calendar"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "```"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "*Figure 3.3-1: An example of using the addEvent command*"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.4 Adding a Deadline: `addDeadline`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Adds a `Deadline` to your schedule. Use this command to add your `Deadline` to your schedule."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on addDeadline command:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* System will not warn you if there are any clashes in timing with other Tasks."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Format: `addDeadline NAME /by DATETIME /repeats TIMES`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on addEvent Command Format:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* Adds a `Deadline` called `NAME`, that has to be completed by `DATETIME`, and repeats weekly for `TIMES`."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* The system will prompt you for parameters if they are not provided. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* `DATETIME` has the format of **DD-MM-YY HH:MM**, where the time is in 24-hour clock format. _E.g 7:30pm should be input as 19:30._ "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* This command accepts **partial commands**. E.g `addDeadline Return books` is a valid command."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* The program will prompt for the remaining missing parameters when a partial command is input."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "###### Examples:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "An example of how to use the addDeadline command is shown in Figure 3.4-1."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "```"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dojh111"
        },
        "content": "addDeadline Return books /by 31-12-20 23:59 /repeats 0"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Done! I\u0027ve added \"Deadline: Return books by (31 Dec 2020, 23:59), repeats weekly 0 times\" to "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "your calendar"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "```"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "*Figure 3.4-1: An example of using the addDeadline command*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.5 Editing a Lesson: `editLesson`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Edits a `Lesson` in your schedule. Use this command to fix mistakes like typos in the lessons you have already added."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Format: `editLesson [CODE]`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on editLesson Command Format:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* If `CODE` is provided, all lessons that contain the `CODE` will be printed."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* The system will prompt you to choose a lesson to be edited."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* The system will prompt you to choose to edit the `CODE` or the `START/END` time. "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* If you choose to edit time, System will prompt to input new `TIME` in the format of "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "“`/date DATE /from START /to END`”"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "###### Examples:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "An example of how to use the editLesson command is shown in Figure 3.5-1."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "```"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "editLesson CS2101"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dojh111"
        },
        "content": "4. Lesson: CS2101 (22 Oct 2020, 14:00 to 22 Oct 2020, 16:00), repeats weekly 30 times"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Please select the lesson you want to edit."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "4"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Please select the parameter you want to edit."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "1. Module Code"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "2. Time"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "2"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Please input your new time in this format: /date DATE /from START /to END"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "/date 22-10-20 /from 14:00 /to 15:45"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Your edit has been saved."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "```"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "*Figure 3.5-1: An example of using the editLesson command*"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.6 Editing an Event: `editEvent`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Edits an event in your schedule. Use this command to fix mistakes like typos in the events you have already added."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Format: `editEvent [NAME]`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on editEvent Command Format:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* If `NAME` is provided, all events that contain the `NAME` will be printed. Else, all events"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "will be printed."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* The system will prompt you to choose an `Event` to be edited."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* The system will prompt you to choose to edit the `NAME` or the `START/END` time. "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* If you choose to edit time, System will prompt to input new `TIME` in the format of "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "“`/date DATE /from START /to END`”"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "###### Examples:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "An example of how to use the editEvent command is shown in Figure 3.6-1."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "```"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "editEvent"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dojh111"
        },
        "content": "5. Event: Concert (13 Jul 2019, 17:00 to 13 Jul 2019, 21:00), repeats weekly 0 times"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Please select the event you want to edit."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "5"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Please select the parameter you want to edit."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "1. Event Name"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "2. Time"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "1"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Please input your new Event name"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "My favourite band\u0027s concert"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Your edit has been saved."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "```"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "*Figure 3.6-1: An example of using the editEvent command*"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.7 Editing a Deadline: `editDeadline`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Edits a `Deadline` in your schedule. Use this command to fix mistakes like typos in the deadlines you have already added."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Format: `editDeadline [NAME]`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on editDeadline Command Format:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* If `NAME` is provided, all deadlines that contain the `NAME` will be printed. Else, all deadlines"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "will be printed."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* The system will prompt you to choose an `Deadline` to be edited."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* The system will prompt you to choose to edit the `NAME` or the `BY` time. "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* If you choose to edit time, System will prompt to input new `BY` time in the format of "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "“`/by DATETIME`”."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "###### Examples:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "An example of how to use the editDeadline command is shown in Figure 3.7-1."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "```"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "editDeadline"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dojh111"
        },
        "content": "6. Deadline: Return books by (31 Dec 2020, 23:59), repeats weekly 0 times"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Please select the deadline you want to edit."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "6"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Please select the parameter you want to edit."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "1. Deadline Name"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "2. Time"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "2"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Please input your new time in this format: /by DATETIME"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "/by 24-12-20 23:59"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Your edit has been saved."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "```"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "*Figure 3.7-1: An example of using the editDeadline command*"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.8 Deleting a Task: `deleteTask`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Deletes a `Task` from your schedule. Use this command to delete any lessons you no "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "longer need to take note of."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on deleteTask command:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* Tasks refer to lessons, deadlines and events."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Format: `deleteTask /type TYPE /name NAME`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on deleteTask Command Format:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* If `NAME` is provided, all tasks that match the type and contain the `NAME` will be printed. "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Else, all `Task` that match the type will be printed."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "* The system will prompt you to choose a `Task` to be deleted."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "###### Examples:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "An example of how to use the deleteTask command is shown in Figure 3.8-1."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "```"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "deleteTask /type deadline /name homework"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Deadline: homework by (12 Dec 2012, 12:00), repeats weekly 2 times"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Please select the deadline you want to delete."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "2"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "The task you selected has been deleted."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "```"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "*Figure 3.8-1: An example of using the deleteTask command*"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.9 Undoing an Edit or Deletion:  `undo`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Undoes the most recent edits or deletions made on tasks or notes."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on undo Command:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* Tasks refer to lessons, deadlines and events."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* Multiple undos are allowed until a particular object is deleted. For example, if a particular object goes through "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "johan9se"
        },
        "content": "_edit1-edit2-delete1-edit3_, you will only be able to undo _edit3_ and _delete1_."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* The history of any edits and deletions are only available for the current session. Once the program is closed, all "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "johan9se"
        },
        "content": "history is discarded and you will not be able to undo those changes the next time you run the application."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Format: `undo TYPE`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on undo Command Format:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* The `TYPE` can either be `task` or `note`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* If not specified, the system will prompt you to enter `task` or `note`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "johan9se"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "An example of how to use the undo command is shown in Figure 3.9-1."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "johan9se"
        },
        "content": "```"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "johan9se"
        },
        "content": "undo"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "johan9se"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "johan9se"
        },
        "content": "To undo a change in tasks, please enter: task"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "johan9se"
        },
        "content": "To undo a change in notes, please enter: note"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "johan9se"
        },
        "content": "task"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "johan9se"
        },
        "content": "This task has been reverted back to its previous version!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Deadline: homework by (28 Oct 2020, 09:00), repeats weekly 0 times"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "johan9se"
        },
        "content": "```"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Figure 3.9-1: An example of using the undo command"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "johan9se"
        },
        "content": "### 3.10 Displaying Schedule: `display`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Displays your current schedule. Use this command to view what your schedule is like for today, tomorrow or for the "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "johan9se"
        },
        "content": "whole week."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Format: `display KEYWORD`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on display Command Format:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* The `KEYWORD` can either be `today`, `tomorrow` or `week`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* If not specified, the system will prompt you to enter `today`, `tomorrow` or `week`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* The `display week` command displays the schedule of the upcoming week, in 1 hour intervals. "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* The entire row with all tasks that fall in the current hour will be coloured in cyan for your ease of reference. "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "johan9se"
        },
        "content": "###### Examples:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "johan9se"
        },
        "content": "`display today` displays the schedule for today. An example of how to use the display command is shown below in Figure 3.10-1."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "johan9se"
        },
        "content": "```"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "johan9se"
        },
        "content": "display"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Here is your schedule for today:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "johan9se"
        },
        "content": "13:00-14:00  CS2113T"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "johan9se"
        },
        "content": "```"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "johan9se"
        },
        "content": "*Figure 3.10-1: An example of using the display command to view your daily schedule*"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "johan9se"
        },
        "content": "`display week` displays the schedule of the upcoming 7 days, including the current day. Another  example of how to use the edit lesson command is shown below in Figure 3.10-2."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "johan9se"
        },
        "content": "```"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "johan9se"
        },
        "content": "display week"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "johan9se"
        },
        "content": "+-----------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|TIME       | WEDNESDAY       | THURSDAY        | FRIDAY          | SATURDAY        | SUNDAY          | MONDAY          | TUESDAY         |"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "johan9se"
        },
        "content": "+-----------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|08:00-09:00|                 |                 |                 |                 |                 |                 |                 |"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "johan9se"
        },
        "content": "+-----------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|09:00-10:00|                 |                 |                 |                 |                 |                 |                 |"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "johan9se"
        },
        "content": "+-----------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|10:00-11:00|                 | CG1111          |                 |                 |                 |                 |                 |"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "johan9se"
        },
        "content": "+-----------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|11:00-12:00|                 | CG1111          |                 |                 |                 |                 |                 |"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "johan9se"
        },
        "content": "+-----------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|12:00-13:00|                 |                 | ST2334          |                 |                 |                 |                 |"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "johan9se"
        },
        "content": "+-----------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|13:00-14:00| CS2113T         |                 | ST2334          |                 |                 |                 |                 |"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "johan9se"
        },
        "content": "+-----------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|14:00-15:00|                 | CS2101          |                 |                 |                 |                 |                 |"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "johan9se"
        },
        "content": "+-----------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|15:00-16:00|                 | CS2101          | CS2113T         |                 |                 |                 |                 |"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "johan9se"
        },
        "content": "+-----------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|16:00-17:00|                 |                 | CS2113T         |                 |                 |                 |                 |"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "johan9se"
        },
        "content": "+-----------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "johan9se"
        },
        "content": "|17:00-18:00|                 |                 |                 |                 |                 |                 |                 |"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "johan9se"
        },
        "content": "+-----------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------+"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Here are your upcoming deadlines this week:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "johan9se"
        },
        "content": "1. Deadline: ABC Project by (3 Nov 2020, 14:00), repeats weekly 0 times"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "johan9se"
        },
        "content": "2. Deadline: weekly XYZ quiz by (5 Nov 2020, 13:00), repeats weekly 3 times"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "johan9se"
        },
        "content": "```"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "johan9se"
        },
        "content": "*Figure 3.10-2: An example of using the display week command to view your weekly schedule*"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.11 Viewing Available Free Time: `freeTime`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Displays your longest block of free time for that day based on the schedule."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Use this command to find out when is a good time to schedule something."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on freeTime Command:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "- The system only searches for free time between 7:00 and 24:00. This is to promote a healthy sleep cycle."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Format: `freeTime`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "An example of how to use the freeTime command is shown in Figure 3.11-1."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "```"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "freeTime"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "You have 10 hours of free time between 14:00 and 24:00!"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "You can try scheduling something in this time!"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "```"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Figure 3.11-1: An example of using the freeTime command._"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.12 Viewing Available Sleep Time: `sleepTime`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Displays how much time you have available to sleep based on your schedule for that day and the day after."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Use this command to find out if you can have a good rest after a long day."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on sleepTime Command:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* The system recommends 8 hours of sleep a day. Anything more, and the extra duration will not be displayed."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* The system will also count the hour before your first activity in the day as busy,"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "to give you time to wake up and get ready. E.g. if your first activity is at 9:00, "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "the system will tell you that you have nothing on only until 8:00."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Format: sleepTime"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "An example of how to use the sleepTime command is shown in Figure 3.12-1."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "```"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "sleepTime"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "You have nothing on from 14:00 today to 8:00 tomorrow!"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "You can sleep for the recommended 8 hours or longer!"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "```"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Figure 3.12-1: An example of using sleepTime command_"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.13 Adding a New Note: `addNotes`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Adds and stores a note. Use this command to take notes from your classes or events."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Format: addNotes [TITLE]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on addNotes Command Format:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "- Adds and stores a note tagged with  TITLE."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "- If TITLE is not provided, LifEasier will prompt you for a notes title."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "- The word limit of title or description follows the maximum length of String allowed in Java."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "An example of how to use the addNotes command is shown in Figure 3.13-1."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "```"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "addNotes Cats are the best!"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Alright! Please fill in your notes."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Cats are the cutest in the world :D"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Ok! I\u0027ve taken note of this note!"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "```"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Figure 3.13-1: An example of using the addNotes command_"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.14 Showing Notes: `showNotes`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Displays a note/list of notes. Use this command to view the notes you have taken before."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Format: showNotes [TITLE] "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on showNotes Command Format:"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* If TITLE is specified, the specific note is displayed. If not, a numbered list of all notes "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "will be displayed."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* TITLE can be a partial title. If there is one match, that note will be shown."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* If multiple notes with the same TITLE are found, all note titles containing the input will be "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "displayed in a list for selection. "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "An example of how to use the showNotes command is shown in Figure 3.14-1."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "```"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "showNotes Cats"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Title: Cats are the best!"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Cats are the cutest in the world :D"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "```"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Figure 3.14-1: An example of using the showNotes command_"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.15 Deleting a Note: `deleteNotes`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Deletes a note from the list. Use this command to remove the notes you no longer need."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Format: deleteNotes [TITLE] "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on deleteNotes Command Format:"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* If TITLE is specified, the specific note is displayed and confirmation of delete will be prompted. "
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "If no TITLE is inputed, a numbered list of all notes will be displayed."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* TITLE can be a partial title. If there is one match, that note will be shown."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* If multiple notes with the same TITLE are found, all note titles containing the input will be "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "displayed in a list for selection."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* Entering “Y” would delete the note from the list. Entering “N” would exit the command without deletion. "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "An example of how to use the deleteNotes command is shown in Figure 3.15-1."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "```"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "deleteNotes"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Please select the notes you want to delete:"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "1. Cats are the best!"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "1"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Title: Cats are the best!"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Cats are the cutest in the world :D"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Is this the note you want to delete? (Y/N)"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Y"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "OK! Note deleted!"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "```"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Figure 3.15-1: An example of using the deleteNotes command_"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.16 Editing a Note: `editNotes`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Edits a note from the list. Use this command to make changes to notes you have taken before."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Format: editNotes [TITLE] "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on editNotes Command Format:"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* If TITLE is specified, the specific note is displayed and confirmation of edit will be prompted. "
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "If no TITLE is inputed, a numbered list of all notes will be displayed."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* TITLE can be a partial title. If there is one match, that note will be shown."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* If multiple notes with the same TITLE are found, all note titles containing the input will be "
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "displayed in a list for selection."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* Entering “T” would show the current title and prompt for a new title. Entering “D” would "
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "show the current description and prompt for a new description."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "* The word limit of title or description follows the maximum length of String allowed in Java."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "An example of how to use the editNotes command is shown in Figure 3.16-1."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "```"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "editNotes Cats"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Title: Cats are the best!"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Cats are the cutest in the world :D"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Do you want to change the title or description? (T/D)"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "T for title and D for Description"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "D"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Current description:"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Cats are the cutest in the world :D"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Please input the description you want to change to:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "I really love cats!"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "OK! Your description is now: I really love cats!"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "```"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Figure 3.16-1: An example of using the editNotes command_"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.17 Archiving Notes: `archive`"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Archives all existing notes. Use this command to store all your notes in a separate save file. These notes will no "
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "dojh111"
        },
        "content": "longer be displayed anywhere."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Format: `archive`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### ![Notes](images/UserGuide/post-it.png) Notes on archive Command Format:"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* **All** current notes existing in **LifEasier** will be archived into the “Archives” folder found inside the "
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "dojh111"
        },
        "content": "“LifEasierSaves” save folder."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Archive files are automatically named in the format of **DD-MM-YY HH:MM.txt** format."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Upon archiving, all saved notes will be **removed** and placed in the archive instead - Using the `showNotes` command "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "dojh111"
        },
        "content": "immediately after `archive` will result in **no notes** being shown."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* There is no way to undo this action, so use the `archive` command with care."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "dojh111"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "An example of how to use the archive command is shown in Figure 3.17-1."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "dojh111"
        },
        "content": "````"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "dojh111"
        },
        "content": "archive"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "dojh111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Starting archiving..."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Archiving successful!"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Note: All current notes have been archived and will no longer be read by the program"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "dojh111"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "dojh111"
        },
        "content": "````"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Figure 3.17-1: An example of using the archive command_"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "dojh111"
        },
        "content": "##### Future implementation of `archive`: Archiving individual notes _(Coming in v2.2)_"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The current implementation of `archive` only allows for archiving of **all** notes currently present in the program. In a "
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "dojh111"
        },
        "content": "future implementation, the ability for you to specifically choose which notes to be archived will be added."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.18 Exiting: `exit`"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Exits the programme. Use this command when you are done using LifEasier."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "dojh111"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "An example of how to use the exit command is shown in Figure 3.18-1."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "dojh111"
        },
        "content": "````"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "dojh111"
        },
        "content": "exit"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Goodbye, hope to see you again soon!"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "dojh111"
        },
        "content": "````"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "_Figure 3.18-1: An example of using the exit command_"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 4.0 Other Features"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "dojh111"
        },
        "content": "This section covers some of the features which do not rely on your input to be executed. Rather, they happen in the "
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "dojh111"
        },
        "content": "background without any input from you necessary."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.1 Storing Data"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "dojh111"
        },
        "content": "By default, **LifEasier** creates a save folder named “LifEasierSaves” in the same folder `LifEasier.jar` is run. "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**LifEasier** data is saved automatically to the hard disk when a new `event`, `deadline`, `lesson` or `note` is **added**, "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**deleted** or **edited**. Data is stored in text files, in plaintext. This allows you to edit your data directly through "
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "dojh111"
        },
        "content": "the save files if necessary."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "dojh111"
        },
        "content": "In the event of **corrupted data** arising from either system errors or incorrect formats from you while editing the save file,"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**LifEasier** will give you a general warning during startup, but will continue to load remaining uncorrupted data. If you execute"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "dojh111"
        },
        "content": "an **add, delete or edit** action, all corrupted data that has not been corrected will be **removed** from the save file. "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "dojh111"
        },
        "content": "If a successful `archive` command was executed, a folder called \"Archives\" will be created in the \"LifEasierSaves\" folder "
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "dojh111"
        },
        "content": "where you can access your archived files."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.2 Recurring Tasks and Auto Deletion"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "**LifEasier** automatically updates the dates of recurring tasks and deletes old tasks."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "It will load your save files and update your tasks automatically every time it starts up."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Here are some examples of what might happen if you start up **LifEasier** on 24th October:"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. If you had a lesson that last occurred on 22nd October, and it is set to repeat 3 more times, it will be updated to occur again on 29th October, and updated to repeat 2 more times."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "2. If you had an event that last occurred on 21st October, and it is set to repeat 0 more times, it will be deleted from your schedule."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 5.0 FAQ"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "johan9se"
        },
        "content": "**The following FAQ section answers some common questions that you may have about the LifEasier application.**"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "johan9se"
        },
        "content": "**Q: Can I use my LifEasier saves on another computer?**"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "johan9se"
        },
        "content": "**A:** Yes you can. You can transfer your files from one computer to another, and place them in a folder called “LifEasierSaves”. Then, run `LifEasier.jar` from the same folder as “LifEasierSaves”. Your saves should be loaded into LifEasier. As long as the “LifEasierSaves” folder is in the same folder as where the LifEasier.jar is being run, the program will read your saved information as per normal."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "johan9se"
        },
        "content": "**Q: Can I edit the information in the save files directly?**"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "johan9se"
        },
        "content": "**A:** Yes, it is possible but it is not recommended to do so. Directly modifying the save files may result in incorrectly formatted data to be passed into the **LifEasier** program on the next launch, resulting in missing data."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 6.0 Command Summary"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The below table summarises the commands available to the user, and how they can be used. Examples are also provided "
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "dojh111"
        },
        "content": "for reference."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Action | Format | Example"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "dojh111"
        },
        "content": "--------|-----------------|----------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "addLesson| `addLesson /code MODULE_CODE /date DATE /from START /to END /repeats TIMES` | `addLesson /code cg1111 /date 04-10-20 /from 09:00 /to 12:00 /repeats 10`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "addEvent| `addEvent EVENT_NAME /date DATE /from START /to END /repeats TIMES` | `addEvent HappyTime /date 04-10-20 /from 09:00 /to 12:00 /repeats 0`"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "dojh111"
        },
        "content": "addDeadline| `addDeadline DEADLINE_NAME /by DATETIME /repeats TIMES` | `addDeadline CryTime /by 04-10-20 09:00 /repeats 0`"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "dojh111"
        },
        "content": "editLesson| `editLesson [CODE]` | `editLesson CS2101`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "dojh111"
        },
        "content": "editEvent| `editEvent [NAME]` | `editEvent BlackPink Concert`"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "dojh111"
        },
        "content": "editDeadline| `editDeadline [NAME]` | `editDeadline Finish Work`"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "dojh111"
        },
        "content": "deleteTask| `deleteTask /type TYPE [/name NAME]` | `deleteTask /type event`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "dojh111"
        },
        "content": "addNotes| `addNotes [TITLE]` | `addNotes AngryTime`"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "dojh111"
        },
        "content": "showNotes| `showNotes [TITLE]` | `showNotes LaughTime`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "dojh111"
        },
        "content": "deleteNotes| `deleteNotes [TITLE]` | `deleteNotes SadTime`"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "dojh111"
        },
        "content": "editNotes| `editNotes [TITLE]` | `editNotes CryingTime`"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "dojh111"
        },
        "content": "undo| `undo TYPE` | `undo note OR undo task`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "dojh111"
        },
        "content": "archive| `archive` | `archive`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "dojh111"
        },
        "content": "display| `display [WEEK]` | `display day`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "dojh111"
        },
        "content": "freeTime| `freeTime` | `freeTime`"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "dojh111"
        },
        "content": "sleepTime| `sleepTime` | `sleepTime`"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "dojh111"
        },
        "content": "help| `help` | `help`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "dojh111"
        },
        "content": "exit| `exit` | `exit`"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 168,
      "daniellimzj": 223,
      "EdmundEXE": 90,
      "dojh111": 139,
      "johan9se": 118,
      "-": 19
    }
  },
  {
    "path": "docs/team/daniellimzj.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "# Project PortFolio Page: daniellimzj"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "**LifEasier** helps Computer Engineering (CEG) students to manage their classes, social events, deadlines and school notes through the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The following describes my personal contributions to the project, and what specific features and enhancements I implemented. It also contains a record of the documentation I helped to contribute."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The following section provides a summary of what I have contributed to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "A summary of my contributions generated by RepoSense can be found [here](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003ddaniellimzj\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003ddaniellimzj\u0026tabRepo\u003dAY2021S1-CS2113T-W13-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "In total, I have contributed over 2000 lines of code to the project. Approximately half of this is functional code, contributing to the features and the enhancements to the project."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The remaining half is split roughly equally between documentation and test code."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### Enhancements Implemented"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "I contributed the following functionalities to the project:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. The sleepTime command. This command allows users to find out how much time they have to sleep based on their schedules."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. The freeTime command. This command allows users to find out how much free time they have in their day based on their schedules."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Recurring tasks and auto deletion of expired tasks. I implemented the functionality to allow users to add recurring tasks. I also implemented the functionality to update tasks based on their remaining recurrences, and to also delete tasks that are expired in the past."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Handling of duplicate tasks. I implemented the functionality to stop users from adding duplicate tasks or very similar tasks into their schedule."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Overhauling of User Interface. I overhauled the user interface of the project for v2.1 of the project. This was after user feedback that it was quite difficult to differentiate inputs and different types of outputs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Initial parsing functionality. I worked on the initial parsing of commands for v1.0 of the project. However, this was later overhauled by other group members to greatly improve the user-friendliness of the project."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "In the User Guide, I wrote the sections related to the features and enhancements I implemented."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Namely, these are [Section 3.11](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#311-viewing-available-free-time-freetime),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "[Section 3.12](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#312-viewing-available-sleep-time-sleeptime)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " and [Section 4.2](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#42-recurring-tasks-and-auto-deletion)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "In the Developer Guide, I also wrote the sections related to the features and enhancements I implemented. The UML diagrams in these sections were also contributed by me."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "These can be found in [Section 4.9](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#49-displaying-free-time-and-sleep-time-daniel) and [Section 4.11](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#411-recurring-tasks-and-auto-deletion-daniel)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "I also contributed [Section 3.2](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#32-components)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### Contributions to Team-Based Tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "In terms of contribution to team based tasks, I feel I contributed most significantly in the following areas:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. I set up the GitHub team organisation and repository at the initial stages of the project."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. I performed the initial setup of the tools that we used, such as GitHub Pages, GitHub Actions, and Gradle."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. I was largely in charge of maintaining the issue tracker, though the rest of the team did contribute to this as well."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. I was in charge of release management for v1.0."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. I contributed greatly to non-specific areas in the User Guide and Developer Guide. For example, I helped in writing many of the last few sections in the Developer Guide. I also contributed to the overall formatting of both the User and Developer Guide."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### Review / Mentoring Contributions"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Throughout the project, I tried to ensure that the overall high level architecture of the project remained neat. This was difficult as our team added many features, and it was difficult to ensure the components remained neatly organised."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "I also tried to give comments in my teammates\u0027 Pull Requests to ensure the overall code quality standard remained high."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### Contributions Beyond the Project Team"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Throughout the project, I kept updated on the forum to ensure that I knew of the issues other groups were facing, and how these might apply to our project."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "I also took peer review exercises seriously in order to give sincere and meaningful feedback to other teams."
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 59
    }
  },
  {
    "path": "docs/team/dojh111.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "# Project PortFolio Page: dojh111"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "**LifEasier** helps Computer Engineering (CEG) students to manage their classes, social events, deadlines and school notes "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "through the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The following describes my personal contributions to the project, and what specific features and enhancements I "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "implemented. It also contains a record of the documentation I helped to contribute."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The following sections summarise my contributions for **LifEasier**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "#### Code Contributed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "In total, I have contributed over 2200 total lines of code, with around 1500 lines of **functional code**, and the rest "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "being split between **test code** and **documentation**. To view my code contributions, please visit the link [here](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003ddojh111\u0026tabRepo\u003dAY2021S1-CS2113T-W13-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "#### Enhancements Implemented"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "For enhancements, I implemented the following features:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Handling of **LifEasier** saves and storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Note Archiving"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Worked on undo command with another team member, where we discussed implementation and algorithms to use"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "* Initial skeleton code for team to start working off (Overhauled in later versions)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "While a basic saving and storage handling system is rather easy to implement, due to the functionality of **LifEasier** "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "different types of data had to be stored and read in separate ways, leading to a more complicated file reading and writing system."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "On top of that, as users are able to edit the save files directly, a robust system to detect and handle corrupted/wrongly formatted "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "save files had to be implemented."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "#### Contributions to Documentation (UG)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "For the user guide, I contributed mainly to the features I implemented, which are sections [3.17](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#317-archiving-notes-archive) "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "and [4.1](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#41-storing-data). Apart from that, I also contributed to the "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Section **2.0 Quick Start**, **5.0 FAQ** and the **6.0 Command Summary**, which can be found from the user guide [here](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "#### Contributions to the DG"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Similar to the UG, I contributed UML diagrams and content related to storage and archiving, which falls under section "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "[4.7 Storing and Archiving Notes](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#47-storing-and-archiving-notes-danzel), "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "and the architecture diagram in [3.1 Architecture](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#31-architecture). Finally, I also contributed to "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "[Appendix B: Guidelines on Manual Testing](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#appendix-b-guidelines-on-manual-testing). "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "The developer guide can be found [here](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "#### Contributions to Team-Based Tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Overall, I generally helped with maintaining some of the issues on the issue tracker through `v2.0` and `v2.1`, along with managing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "the release of `v2.0`. I also helped introduce the `Jansi` third-party library into the project, allowing coloured windows terminal outputs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "#### Review/Mentoring Contributions"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Throughout the development process, I helped review the pull requests of the other members, as well as helping them solve "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "some issues that they had faced during development of features."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "#### Contributions beyond the Project Team"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "Outside the project team, I kept myself constantly updated on the forum posts, to keep updated on any potential issues posted that "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "may affect our project team, as well as potential third party libraries that we could adopt. Apart from that, I had a discussion with "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "another developer from another team on the enabling of color in the windows command terminal."
      }
    ],
    "authorContributionMap": {
      "dojh111": 51
    }
  },
  {
    "path": "docs/team/edmundexe.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "# Edmund Tan - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "**LifEasier** helps Computer Engineering (CEG) students to manage their classes, social events, deadlines and "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "school notes through the Command Line Interface (CLI). The following describes my personal contributions to "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "the project, and what specific features and enhancements I implemented. It also contains a record of the "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "documentation I helped to contribute."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "The following section provides a summary of what I have contributed to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "I have contributed over 1200 lines of code, split among documentation, functional, and test code. My code"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "contributions can be found via the link [here](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dEdmundEXE\u0026tabRepo\u003dAY2021S1-CS2113T-W13-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "I have contributed the features to the project as shown below:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "1. The **Notes** and **NoteList** classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "1. The relevant commands related to notes, such as **AddNotesCommand**, **ShowNotesCommand**, **EditNotesCommand** and **DeleteNotesCommand**."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "1. Handling of incomplete/empty user commands in the **Parser**."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "I have written sections that were relevant to what enhancements I have implemented in the project. These sections are"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "[Section 3.13](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#313-adding-a-new-note-addnotes),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "[Section 3.14](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#314-showing-notes-shownotes),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "[Section 3.15](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#315-deleting-a-note-deletenotes),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "[Section 3.16](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#316-editing-a-note-editnotes)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "I have written sections that were relevant to what enhancements I have implemented in the project, including related UML diagrams."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "These includes the Sequence diagram found in [Section 3.1](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#31-architecture),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "contents in [Section 4.4](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#44-adding-notes-edmund), "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "contents in [Section 4.5](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#45-editing-and-deleting-notes-edmund),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "contents in [Section 4.10](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#410-parsing-commands-edmund)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "### Contributions to Team-Based Tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "In terms of contributions, I felt that I have played a part in improving the code quality and in minor non-specific areas in UG/DG such as"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "Setting Up and the Command Summary alongside with my team members."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "### Review/Mentoring Contributions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "In terms of contributions, I felt that I have reviewed some PRs of teammates and provided assistance to members who needed help."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "### Contributions Beyond the Project Team"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "I have participated in the peer review excercises and gave advice and constructive feedback to other groups."
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 53
    }
  },
  {
    "path": "docs/team/johan9se.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johan9se"
        },
        "content": "# Project PortFolio Page: johan9se"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "**LifEasier** helps Computer Engineering (CEG) students to manage their classes, social events, deadlines and school "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": "notes through the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "The following describes my personal contributions to the project, and what specific features and enhancements I "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "implemented. It also contains a record of the documentation I helped to contribute."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "The following section provides a summary of what I have contributed to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": "A summary of my contributions generated by RepoSense can be found [here](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djohan9se\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djohan9se\u0026tabRepo\u003dAY2021S1-CS2113T-W13-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": "In total, I have contributed a little over 1200 lines of code to the project. About 70% of this is **functional code**, "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "contributing to the features and the enhancements to the project."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "The rest is split between **documentation** and **test code**."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "### Enhancements Implemented"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "For enhancements, I implemented the following functionalities:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* The displaySchedule command: allows users to display their schedule for today, tomorrow or the week."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* The UI for timetable display"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": "* Undo command, coordinated with another team member to discuss implementation and algorithm to use"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "In the User Guide, I wrote the sections related to the features and enhancements I implemented."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "These sections are [Section 3.9](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#39-undoing-an-edit-or-deletion--undo)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "and [Section 3.10](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#310-displaying-schedule-display)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "In the Developer Guide, I also wrote the sections related to the features and enhancements I implemented, as well as the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "corresponding UML diagrams of these sections."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "These can be found in [Section 4.6](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#46-undoing-changes-made-to-tasks-and-notes-johannine) "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "and [Section 4.8](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#48-displaying-schedule-johannine)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "### Contributions to Team-Based Tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "In terms of contribution to team based tasks, I feel I contributed in these areas:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "1. I contributed greatly to non-specific areas in the User Guide and Developer Guide. For example, I helped in writing "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": " the Project Requirements Appendix in the Developer Guide."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "### Review / Mentoring Contributions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": "Throughout the development process, I helped review some pull requests of the other members, as well as communicating "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "with them any suggestions as to how might improve their development of features."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johan9se"
        },
        "content": "#### Contributions beyond the Project Team"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": "I participated actively during peer review exercises and did my best to give constructive and meaningful feedback to "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "the other teams."
      }
    ],
    "authorContributionMap": {
      "johan9se": 55
    }
  },
  {
    "path": "docs/team/skyaxe97.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "# Project PortFolio Page: skyaxe97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "**LifEasier** helps Computer Engineering (CEG) students to manage their classes, social events, "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "deadlines and school notes through the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "The following describes my personal contributions to the project, and what specific features and "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "enhancements I implemented. It also contains a record of the documentation I helped to contribute."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "The following section provides a summary of what I have contributed to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "A summary of my contributions generated by RepoSense can be found [here](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dskyaxe97)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "In total, I have contributed over 1000 lines of code to the project. Around 800 of "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "these lines are **functional code**, contributing to the features and the enchancements to the project. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "The rest of the lines is split between **documentaion** and **test cases**."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "### Enhancements Implemented"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "I contributed the following functionalities to the project:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "1. The TaskList and Task classes. I worked on the initial creation of these classes, as well as the "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "implementation of most methods that were eventually needed for the other functionalities. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "1. The AddDeadline/Event/Lesson command. This command allows users to add their Task to the TaskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "1. The DeleteTask command. I implemented the functionality to allow users to delete any added Tasks. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "I also implemented the functionality that allows the program to prompt the User for a step-by-step procedure for deleting Tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "1. The EditDeadline/Event/Lesson command. I implemented the functionality to allow users to edit any added Tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "I also implemented the functionality that allows the program to prompt the User for a step-by-step procedure for editing Tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "In the User Guide, I contributed mainly to the features that I implemented as above."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Namely, these are "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "[Section 3.2](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#32-adding-a-lesson-addlesson), "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "[Section 3.3](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#33-adding-an-event-addevent), "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "[Section 3.4](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#34-adding-a-deadline-adddeadline),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "[Section 3.5](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#35-editing-a-lesson-editlesson),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "[Section 3.6](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#36-editing-an-event-editevent),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "[Section 3.7](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#37-editing-a-deadline-editdeadline) and"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "[Section 3.8](https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide#38-deleting-a-task-deletetask)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "In the Developer Guide, I also wrote the sections related to the features and enhancements I implemented. The UML diagrams in these sections were also contributed by me."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "These can be found in "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "[Section 4.1](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#41-adding-lessons-events-deadlines-fairuz), "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "[Section 4.2](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#42-editing-lessons-events-deadlines-fairuz) and "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "[Section 4.3](https://ay2021s1-cs2113t-w13-4.github.io/tp/DeveloperGuide#43-deleting-of-lessons-events-deadlines-fairuz). "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "### Contributions to Team-Based Tasks"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Overall, I contributed to prompt reporting of issues/bugs faced during development and managed some issues on the issue "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "tracker, some examples being [#42](https://github.com/AY2021S1-CS2113T-W13-4/tp/issues/42) "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "and [#65](https://github.com/AY2021S1-CS2113T-W13-4/tp/issues/65). "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "### Review / Mentoring Contributions"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "Over the course of development, I helped review some of the pull requests of other team members, "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "and also helped to suggest any changes to improve their features."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "### Contributions Beyond the Project Team"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "I actively participated in peer review exercises and worked to give constructive and relevant "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "advice/feedback to other groups."
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 70
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/LifEasier.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.ui.ScheduleUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * LifEasier is a CLI application that allows busy CEG students to schedule their day."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * If you can type fast, LifEasier will get your scheduling done faster than traditional GUI calender apps."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class LifEasier {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileStorage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private ScheduleUi scheduleUi;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteHistory noteHistory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskHistory taskHistory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public LifEasier(String fileNameTasks, String fileNameNotes) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        notes \u003d new NoteList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        scheduleUi \u003d new ScheduleUi();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        noteHistory \u003d new NoteHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        taskHistory \u003d new TaskHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage \u003d new FileStorage(fileNameTasks, fileNameNotes, ui, notes, tasks, noteHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Runs the LifEasier program infinitely until termination by the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void run(boolean showLogging) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (!showLogging) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.readSaveFiles();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.updateTasks(LocalDate.now());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        showStartupSequence();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        boolean isFinished \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        while (!isFinished) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                Command userCommand \u003d parser.parseCommand(fullCommand, ui);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                userCommand.execute(ui, notes, tasks, storage, parser, noteHistory, taskHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                isFinished \u003d userCommand.isFinished();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            } catch (ParserException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showParseUnknownCommandError();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showGoodbyeMessage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showStartupSequence() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showLogo();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showGreetingMessage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Main entry-point for the LifEasier application."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        new LifEasier(\"saveFileTasks.txt\", \"saveFileNotes.txt\").run(false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 35,
      "EdmundEXE": 2,
      "dojh111": 39,
      "johan9se": 14,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/AddDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskDuplicateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskPastException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(AddDeadlineCommand.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private int recurrences;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public AddDeadlineCommand(String description, LocalDateTime by, int recurrences) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.recurrences \u003d recurrences;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Adds a Deadline to the schedule if the Deadline is not in the past and does not already exist in the schedule."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param notes NoteList containing user\u0027s notes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList containing user\u0027s tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param storage Storage object to save tasks and notes to memory."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param parser Parser object to parse user\u0027s inputs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param noteHistory NoteHistory object to store history of edited and deleted notes."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param taskHistory TaskHistory object to store history of edited and deleted tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Adding deadline to taskList...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            Task task \u003d tasks.addDeadline(description, by, recurrences);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showAddConfirmationMessage(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            tasks.updateTasks(LocalDate.now());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            logger.log(Level.INFO, \"Saving updated taskList to storage...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            storage.saveTasks();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (TaskDuplicateException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            logger.log(Level.INFO, \"Task is a duplicate! Showing error...\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showDuplicateTaskError(Ui.PARAM_DEADLINE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (TaskPastException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            logger.log(Level.INFO, \"Task is in the past! Showing error...\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showPastTaskError(Ui.PARAM_DEADLINE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 8,
      "daniellimzj": 56,
      "EdmundEXE": 1,
      "dojh111": 3
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskDuplicateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskPastException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(AddEventCommand.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private int recurrences;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public AddEventCommand(String description, LocalDateTime start, LocalDateTime end, int recurrences) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.recurrences \u003d recurrences;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Adds an Event to the schedule if the Event is not in the past and does not already exist in the schedule."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param notes NoteList containing user\u0027s notes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList containing user\u0027s tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param storage Storage object to save tasks and notes to memory."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param parser Parser object to parse user\u0027s inputs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param noteHistory NoteHistory object to store history of edited and deleted notes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param taskHistory TaskHistory object to store history of edited and deleted tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Adding event to taskList...\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            Task task \u003d tasks.addEvent(description, start, end, recurrences);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            tasks.updateTasks(LocalDate.now());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showAddConfirmationMessage(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            logger.log(Level.INFO, \"Saving updated taskList to storage...\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            storage.saveTasks();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (TaskDuplicateException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            logger.log(Level.INFO, \"Task is a duplicate! Showing error...\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showDuplicateTaskError(Ui.PARAM_EVENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (TaskPastException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            logger.log(Level.INFO, \"Task is in the past! Showing error...\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showPastTaskError(Ui.PARAM_EVENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 7,
      "daniellimzj": 59,
      "EdmundEXE": 1,
      "dojh111": 2
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/AddLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskDuplicateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskPastException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class AddLessonCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(AddLessonCommand.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private int recurrences;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public AddLessonCommand(String moduleCode, LocalDateTime start, LocalDateTime end, int recurrences) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.recurrences \u003d recurrences;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Adds a Lesson to the schedule if the Lesson is not in the past and does not already exist in the schedule."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param notes NoteList containing user\u0027s notes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList containing user\u0027s tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param storage Storage object to save tasks and notes to memory."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param parser Parser object to parse user\u0027s inputs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param noteHistory NoteHistory object to store history of edited and deleted notes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param taskHistory TaskHistory object to store history of edited and deleted tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Adding lesson to taskList...\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            Task task \u003d tasks.addLesson(moduleCode, start, end, recurrences);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            tasks.updateTasks(LocalDate.now());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showAddConfirmationMessage(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            logger.log(Level.INFO, \"Saving updated taskList to storage...\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            storage.saveTasks();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (TaskDuplicateException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            logger.log(Level.INFO, \"Task is a duplicate! Showing error...\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showDuplicateTaskError(Ui.PARAM_LESSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (TaskPastException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            logger.log(Level.INFO, \"Task is in the past! Showing error...\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showPastTaskError(Ui.PARAM_LESSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 7,
      "daniellimzj": 62,
      "EdmundEXE": 1,
      "dojh111": 2
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/AddNotesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class AddNotesCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(AddNotesCommand.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isEmpty \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public AddNotesCommand(String title) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String checkForEmpty(Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for checking empty description inputs\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (input.trim().length() \u003e 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            isEmpty \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showEmptyDescriptionError();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of checking empty description inputs\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String isValidTitle(Ui ui, String title) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String noteTitle \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (title.trim().length() \u003e 0) {        // title is already inputted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            isEmpty \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            noteTitle \u003d title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNoteTitlePrompt();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            while (isEmpty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                noteTitle \u003d checkForEmpty(ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return noteTitle;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of AddNotesCommand\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String noteDescription \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for assigning noteTitle\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        final String noteTitle \u003d isValidTitle(ui, title);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End for assigning noteTitle\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isEmpty \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"IsEmpty set back to true\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showNoteDescriptionPrompt();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for assigning noteDescription\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (isEmpty) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            noteDescription \u003d checkForEmpty(ui);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End for assigning noteDescription\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        notes.add(new Note(noteTitle,noteDescription));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Note is added\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.showNoteAddedMessage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.saveNote();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 23,
      "EdmundEXE": 49,
      "dojh111": 6
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/ArchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.archiveData();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 4,
      "EdmundEXE": 1,
      "dojh111": 13
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " * The Command class will handle all the commands input from the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    protected boolean isTerminated;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.isTerminated \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Executes the user command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public abstract void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                                 NoteHistory noteHistory, TaskHistory taskHistory);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns status of whether the program has been terminated."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public boolean isFinished() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return isTerminated;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 14,
      "EdmundEXE": 2,
      "dojh111": 17,
      "johan9se": 1
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/DeleteNotesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.EmptyNoteListException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteCommandFunctions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.TitleNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class DeleteNotesCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(DeleteNotesCommand.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isEmpty \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private int arraySize \u003d 10000;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public DeleteNotesCommand(String title) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void findTitle(Ui ui, NoteList notes, String title, NoteHistory noteHistory) throws TitleNotFoundException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for finding title in note list\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int[] noteMatches \u003d new int [arraySize];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int matchNumber \u003d NoteCommandFunctions.checkNumberOfNoteMatches(notes, title);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int noteNumber \u003d NoteCommandFunctions.findNoteNumber(notes, title);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End for finding title in note list\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        switch (matchNumber) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        case 0:     // no matches"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"No matches for title\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            throw new TitleNotFoundException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"One match found\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(notes.get(noteNumber).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showConfirmDeletePrompt();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            String input \u003d checkConfirmationMessage(ui, ui.readCommand());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            checkIfDelete(ui, notes, noteNumber, input, noteHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Multiple matches found\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showMultipleMatchesFoundPrompt();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Start of printing all matching notes\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            noteMatches \u003d ui.showMultipleNoteMatchesMessage(notes, title, noteMatches);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"End of printing all matching notes\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            noteNumber \u003d Integer.parseInt(ui.readCommand()) - 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            NoteCommandFunctions.checkForIndexOutOfBounds(notes, noteNumber + 1, noteMatches);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(notes.get(noteNumber).toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showConfirmDeletePrompt();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d checkConfirmationMessage(ui, ui.readCommand());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            checkIfDelete(ui, notes, noteNumber, input, noteHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void checkIfDelete(Ui ui, NoteList notes, int noteNumber, String input, NoteHistory noteHistory) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (input.trim().equals(\"Y\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Temporarily hold details of this Note\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Note oldCopyOfNote \u003d noteHistory.getCurrCopyOfNoteToDelete(notes, noteNumber);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            notes.remove(noteNumber);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNoteDeletedMessage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            noteHistory.pushOldCopy(oldCopyOfNote);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Push old copy of Note into noteHistory\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNoteNotDeletedMessage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String checkConfirmationMessage(Ui ui, String input) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start check for Y/N input\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (!input.trim().equals(\"Y\") \u0026\u0026 !input.trim().equals(\"N\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInvalidConfirmationPrompt();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End check for Y/N input\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Start of DeleteNotesCommand\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            NoteCommandFunctions.checkEmptyList(notes);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (title.trim().length() \u003e 0) {        // title is already inputted"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                findTitle(ui, notes, title, noteHistory);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showSelectWhichNoteToDeletePrompt();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                logger.log(Level.INFO, \"Start of printing all notes in the list\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showAllNotesMessage(notes);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                logger.log(Level.INFO, \"End of printing all notes in the list\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                int noteNumber \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                NoteCommandFunctions.checkForIndexBeyondSize(notes, noteNumber);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showNotesPrompt(notes.get(noteNumber - 1).toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showConfirmDeletePrompt();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                String input \u003d checkConfirmationMessage(ui, ui.readCommand());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                checkIfDelete(ui, notes, noteNumber -  1, input, noteHistory);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            storage.saveNote();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"End of DeleteNotesCommand\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input number is out of bounds\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (TitleNotFoundException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input title does not match any of the note titles\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNoTitleFoundError();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a number\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNumberFormatError();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (EmptyNoteListException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showEmptyNoteListMessage();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 28,
      "EdmundEXE": 94,
      "dojh111": 2,
      "johan9se": 11
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/DeleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(ShowNotesCommand.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public DeleteTaskCommand(String type, String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Prints a list of all Tasks that match the user\u0027s input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList from which Tasks will be searched."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param type Type of task to be searched for."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param name Name of task to be searched for."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @throws TaskNotFoundException If no matching tasks are found."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void printMatchingTasks(TaskList tasks, Ui ui, String type, String name) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.printMatchingTasks(type, name, ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private int readUserInput(Ui ui, Parser parser, TaskList tasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                int newIndex \u003d parser.checkIfValidNumber(ui, ui.readCommand()) - 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                tasks.checkForIndexOutOfBounds(newIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                return newIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                ui.showIndexOutOfBoundsMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Deletes the specified Task from the TaskList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList from which task is to be deleted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param index Index of task to be deleted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void deleteTask(TaskList tasks, Ui ui, int index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.deleteTask(index, ui);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Executes the delete task command and deletes the Task that the user specifies."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param notes NoteList containing user\u0027s notes."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList containing user\u0027s tasks."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param storage Storage object to save tasks and notes to memory."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param parser Parser object to parse user\u0027s inputs."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            if (type.equals(\"\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                throw new ParserException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Start of DeleteTaskCommand...\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Printing all matching tasks...\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            printMatchingTasks(tasks, ui, type, name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showSelectTaskToDeletePrompt(type);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Reading user input for choice of task to delete...\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int userIndex \u003d parser.parseUserInputForEditTaskChoice(ui, tasks);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Temporarily hold value of this Task\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            Task oldCopyOfTask \u003d taskHistory.getCurrCopyOfTaskToDelete(tasks, tasks.getActualIndex(userIndex));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Deleting task from taskList...\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            deleteTask(tasks, ui, userIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            taskHistory.pushOldCopy(oldCopyOfTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Push old copy of Task into taskHistory\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Saving updated taskList to storage...\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            storage.saveTasks();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showDeleteConfirmationMessage();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"User input is invalid\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInvalidCommandFormatMessage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (TaskNotFoundException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input \" + type + \" name does not match any of the existing \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                    + type + \" names.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNoMatchesError(type);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"User input is out of bounds\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showIndexOutOfBoundsMessage();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"End of DeleteTaskCommand\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 71,
      "daniellimzj": 35,
      "dojh111": 2,
      "johan9se": 6
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/DisplayScheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.ui.ScheduleUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class DisplayScheduleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private String displayKeyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final ScheduleUi scheduleUi \u003d new ScheduleUi();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public DisplayScheduleCommand(String toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.displayKeyword \u003d toDisplay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        switch (displayKeyword) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.printBlankLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.printThickSeparator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            scheduleUi.showHome(tasks, ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.printThickSeparator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.printBlankLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case \"today\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            displayScheduleFor(currDate, tasks, ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case \"tomorrow\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            displayScheduleFor(currDate.plus(1, ChronoUnit.DAYS), tasks, ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            ui.showInvalidDisplayKeywordError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void displayScheduleFor(LocalDate date, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int taskCountForThisDate \u003d scheduleUi.getTaskCountForDay(tasks, date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (taskCountForThisDate \u003e 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showDayScheduleMessage(displayKeyword);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            scheduleUi.displayDaySchedule(date, tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.printThickSeparator();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.printBlankLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            ui.showNothingScheduledMessage(displayKeyword);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 23,
      "dojh111": 2,
      "johan9se": 34
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/EditDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class EditDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final int DEADLINE_NUM_OF_TIME_ARGS \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(EditDeadlineCommand.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String deadlineName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public EditDeadlineCommand(String deadlineName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.deadlineName \u003d deadlineName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void printMatchingDeadlines(TaskList tasks, Ui ui, String code) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.printMatchingTasks(Ui.PARAM_DEADLINE, code, ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void editDeadlineName(TaskList tasks, int index, Ui ui) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.editTaskDescription(index, ui);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void editDeadlineTime(TaskList tasks, int index, Ui ui, Parser parser) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        LocalDateTime[] times \u003d parser.parseUserInputForEditDateTime(ui, DEADLINE_NUM_OF_TIME_ARGS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.editDeadlineTime(index, ui, times);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Start of EditDeadlineCommand\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Printing all matching deadlines...\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            printMatchingDeadlines(tasks, ui, deadlineName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showSelectTaskToEditPrompt(Ui.PARAM_DEADLINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Reading user input for choice of task to delete...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int userDeadlineChoice \u003d parser.parseUserInputForEditTaskChoice(ui, tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Temporarily hold value of this Deadline\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Task oldCopyOfDeadline \u003d taskHistory.getCurrCopyOfTaskToEdit(tasks, userDeadlineChoice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            selectParameterToEdit(parser, ui, tasks, userDeadlineChoice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            taskHistory.pushOldCopy(oldCopyOfDeadline);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Push old copy of Deadline into taskHistory\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            storage.saveTasks();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input number is out of bounds\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showIndexOutOfBoundsMessage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a number\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNumberFormatError();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (TaskNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input Deadline name does not match any of the existing Deadline names.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNoMatchesError(Ui.PARAM_DEADLINE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"End of EditDeadlineCommand\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void selectParameterToEdit(Parser parser, Ui ui, TaskList tasks, int userDeadlineChoice) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showSelectParameterToEditPrompt();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showEditableParametersMessage(Ui.PARAM_DEADLINE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Reading user input for choice of parameter to edit...\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int userParamChoice \u003d parser.parseValidUserInputForParameterEdit(ui);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        switch (userParamChoice) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case (1):"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInputPrompt(Ui.PARAM_DEADLINE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editDeadlineName(tasks, userDeadlineChoice, ui);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case (2):"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInputFormatPrompt(Ui.PARAM_DEADLINE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            editDeadlineTime(tasks, userDeadlineChoice, ui, parser);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 62,
      "daniellimzj": 14,
      "dojh111": 2,
      "johan9se": 22
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/EditEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final int EVENT_NUM_OF_TIME_ARGS \u003d 2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(EditEventCommand.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public EditEventCommand(String eventName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void printMatchingEvents(TaskList tasks,Ui ui, String code) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.printMatchingTasks(Ui.PARAM_EVENT, code, ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editEventName(TaskList tasks, int index, Ui ui) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.editTaskDescription(index, ui);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editEventTime(TaskList tasks, int index, Ui ui, Parser parser) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        LocalDateTime[] times \u003d parser.parseUserInputForEditDateTime(ui, EVENT_NUM_OF_TIME_ARGS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.editEventTime(index, ui, times);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Start of EditEventCommand\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Printing all matching events...\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            printMatchingEvents(tasks, ui, eventName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showSelectTaskToEditPrompt(Ui.PARAM_EVENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Reading user input for choice of event to edit...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int userEventChoice \u003d parser.parseUserInputForEditTaskChoice(ui, tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Temporarily hold value of this Event\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Task oldCopyOfEvent \u003d taskHistory.getCurrCopyOfTaskToEdit(tasks, userEventChoice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            selectParameterToEdit(parser, ui, tasks, userEventChoice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            taskHistory.pushOldCopy(oldCopyOfEvent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Push old copy of Event into taskHistory\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            storage.saveTasks();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input number is out of bounds\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a number\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNumberFormatError();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (TaskNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input event name does not match any of the existing event names.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNoMatchesError(Ui.PARAM_EVENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"End of EditEventCommand\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void selectParameterToEdit(Parser parser, Ui ui, TaskList tasks, int userEventChoice) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showSelectParameterToEditPrompt();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showEditableParametersMessage(Ui.PARAM_EVENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        logger.log(Level.INFO, \"Reading user input for choice of parameter to edit...\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int userParamChoice \u003d parser.parseValidUserInputForParameterEdit(ui);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        switch (userParamChoice) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case (1):"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInputPrompt(Ui.PARAM_EVENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editEventName(tasks, userEventChoice, ui);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case (2):"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInputFormatPrompt(Ui.PARAM_EVENT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            editEventTime(tasks, userEventChoice, ui, parser);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 59,
      "daniellimzj": 15,
      "dojh111": 2,
      "johan9se": 23
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/EditLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class EditLessonCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final int LESSON_NUM_OF_TIME_ARGS \u003d 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(EditLessonCommand.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public EditLessonCommand(String code) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void printLessonsMatchingCode(TaskList tasks,Ui ui, String code) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.printMatchingTasks(Ui.PARAM_LESSON, code, ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void editLessonModuleCode(TaskList tasks, int index, Ui ui, Parser parser) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String moduleCode \u003d ui.readCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!parser.checkIfValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            moduleCode \u003d parser.getValidModuleCode(ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        tasks.editModuleCode(index, ui, moduleCode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editLessonTime(TaskList tasks, int index, Ui ui, Parser parser) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        LocalDateTime[] times \u003d parser.parseUserInputForEditDateTime(ui, LESSON_NUM_OF_TIME_ARGS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.editLessonTime(index, ui, times);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Start of EditLessonCommand\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Printing all matching lessons...\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            printLessonsMatchingCode(tasks, ui, code);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showSelectTaskToEditPrompt(Ui.PARAM_LESSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Reading user input for choice of lesson to edit...\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int userLessonChoice \u003d parser.parseUserInputForEditTaskChoice(ui, tasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Temporarily hold value of this Event\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Task oldCopyOfLesson \u003d taskHistory.getCurrCopyOfTaskToEdit(tasks, userLessonChoice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            selectParameterToEdit(parser, ui, tasks, userLessonChoice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            taskHistory.pushOldCopy(oldCopyOfLesson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Push old copy of Event into taskHistory\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            storage.saveTasks();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input number is out of bounds\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a number\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNumberFormatError();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (TaskNotFoundException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input lesson name does not match any of the existing deadline names.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNoMatchesError(Ui.PARAM_LESSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"End of EditLessonCommand\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void selectParameterToEdit(Parser parser, Ui ui, TaskList tasks, int userLessonChoice) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showSelectParameterToEditPrompt();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showEditableParametersMessage(Ui.PARAM_LESSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Reading user input for choice of parameter to edit...\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int userParamChoice \u003d parser.parseValidUserInputForParameterEdit(ui);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        switch (userParamChoice) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case (1):"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInputPrompt(Ui.PARAM_LESSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            editLessonModuleCode(tasks, userLessonChoice, ui, parser);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case (2):"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInputFormatPrompt(Ui.PARAM_LESSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            editLessonTime(tasks, userLessonChoice, ui, parser);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 58,
      "daniellimzj": 15,
      "dojh111": 8,
      "johan9se": 21
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/EditNotesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteCommandFunctions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.EmptyNoteListException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.TitleNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class EditNotesCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(EditNotesCommand.class.getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private int arraySize \u003d 10000;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public EditNotesCommand(String title) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void findTitle(Ui ui, NoteList notes, Parser parser,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                           String title, NoteHistory noteHistory) throws TitleNotFoundException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for finding title in note list\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int[] noteMatches \u003d new int [arraySize];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int matchNumber \u003d NoteCommandFunctions.checkNumberOfNoteMatches(notes, title);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int noteNumber \u003d NoteCommandFunctions.findNoteNumber(notes, title);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End for finding title in note list\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        switch (matchNumber) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        case 0:     // no matches"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"No matches for title\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            throw new TitleNotFoundException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"One match found\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(notes.get(noteNumber).toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showEditWhichPartMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            changeTitleOrDescription(ui, parser, notes, noteNumber, ui.readCommand(), noteHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Multiple matches found\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showMultipleMatchesFoundPrompt();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Start of printing all matching notes\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            noteMatches \u003d ui.showMultipleNoteMatchesMessage(notes, title, noteMatches);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"End of printing all matching notes\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            noteNumber \u003d Integer.parseInt(ui.readCommand()) - 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            NoteCommandFunctions.checkForIndexOutOfBounds(notes, noteNumber + 1, noteMatches);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(notes.get(noteNumber).toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showEditWhichPartMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            changeTitleOrDescription(ui, parser, notes, noteNumber, ui.readCommand(), noteHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void changeTitleOrDescription(Ui ui, Parser parser, NoteList notes, int noteNumber, String input,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                                          NoteHistory noteHistory) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        logger.log(Level.INFO, \"Temporarily hold details of this Note\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        input \u003d parser.parseUserInputTOrD(input, ui);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        Note oldCopyOfNote \u003d noteHistory.getCurrCopyOfNoteToEdit(notes, noteNumber);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (input.trim().equals(\"T\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"T is inputted\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showCurrentTitlePrompt(notes.get(noteNumber).getTitle());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showEditTitlePrompt();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d parser.checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            notes.get(noteNumber).setTitle(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Title is changed\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showTitleChangedMessage(notes.get(noteNumber).getTitle());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"D is inputted\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showCurrentDescriptionPrompt(notes.get(noteNumber).getDescription());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showEditDescriptionPrompt();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d parser.checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            notes.get(noteNumber).setDescription(input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Description is changed\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showDescriptionChangedMessage(notes.get(noteNumber).getDescription());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        noteHistory.pushOldCopy(oldCopyOfNote);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        logger.log(Level.INFO, \"Push old copy of Note into noteHistory\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Start of EditNotesCommand\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            NoteCommandFunctions.checkEmptyList(notes);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (title.trim().length() \u003e 0) {        // title is already inputted"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                findTitle(ui, notes, parser, title, noteHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showSelectWhichNoteToEditPrompt();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                logger.log(Level.INFO, \"Start of printing all notes in the list\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showAllNotesMessage(notes);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                logger.log(Level.INFO, \"End of printing all notes in the list\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                int noteNumber \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                NoteCommandFunctions.checkForIndexBeyondSize(notes, noteNumber);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showNotesPrompt(notes.get(noteNumber - 1).toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                ui.showEditWhichPartMessage();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                changeTitleOrDescription(ui, parser, notes, noteNumber - 1, ui.readCommand(), noteHistory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            storage.saveNote();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"End of EditNotesCommand\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input number is out of bounds\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (TitleNotFoundException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input title does not match any of the note titles\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNoTitleFoundError();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a number\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNumberFormatError();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (EmptyNoteListException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showEmptyNoteListMessage();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 24,
      "EdmundEXE": 95,
      "dojh111": 2,
      "johan9se": 14
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.isTerminated \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 18,
      "EdmundEXE": 1,
      "dojh111": 3
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/FreeTimeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class FreeTimeCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(FreeTimeCommand.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final int PARAM_START \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final int PARAM_END \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final int HOUR_EARLIEST \u003d 7;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final int HOUR_LATEST \u003d 24;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Executes the free time command and displays to the user their longest block of free time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param notes NoteList containing user\u0027s notes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList containing user\u0027s tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param storage Storage object to save tasks and notes to memory."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param parser Parser object to parse user\u0027s inputs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param noteHistory NoteHistory object to store history of edited and deleted notes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param taskHistory TaskHistory object to store history of edited and deleted tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Getting tasks from today...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasksFromToday \u003d tasks.getTasksFromOneDay(LocalDate.now());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Getting longest block of free time...\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int[] longestFreeTime \u003d getLongestFreeTime(tasksFromToday);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int startHour \u003d longestFreeTime[PARAM_START];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int endHour \u003d longestFreeTime[PARAM_END];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int duration \u003d endHour - startHour;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (duration \u003e 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            logger.log(Level.INFO, \"Showing free time message...\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showFreeTimeMessage(startHour, endHour, duration);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            logger.log(Level.INFO, \"Showing no free time error...\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNoFreeTimeError();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns true if there is nothing scheduled for a particular hour slot in a day."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param hour The time to be checked."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks An ArrayList containing the tasks scheduled for that day."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return True if there is nothing scheduled."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    boolean isFreeTime(int hour, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (!(task instanceof Deadline) \u0026\u0026 task.isWithinTimeSlot(hour)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns the longest block of free time in the day\u0027s schedule."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks An ArrayList containing the tasks scheduled for that day."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return An integer array where the first index is the start of the block, and the second index is the end."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    int[] getLongestFreeTime(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int[] longestFreeTime \u003d new int[2];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int tempStartOfFreeTime \u003d HOUR_EARLIEST;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int tempEndOfFreeTime \u003d HOUR_EARLIEST;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assert (0 \u003c HOUR_LATEST \u0026\u0026 HOUR_LATEST \u003c 25) : \"The latest hour checked must be between 0 and 24\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assert (0 \u003c\u003d HOUR_EARLIEST \u0026\u0026 HOUR_EARLIEST \u003c HOUR_LATEST) :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"The earliest hour must be between 0 and the latest hour\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (int hour \u003d HOUR_EARLIEST; hour \u003c HOUR_LATEST; hour++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (isFreeTime(hour, tasks)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                tempEndOfFreeTime \u003d hour + 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                tempStartOfFreeTime \u003d hour + 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            int durationOfTempFreeTimeBlock \u003d tempEndOfFreeTime - tempStartOfFreeTime;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            int durationOfLongestFreeTimeBlock \u003d longestFreeTime[PARAM_END] - longestFreeTime[PARAM_START];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (durationOfTempFreeTimeBlock \u003e\u003d durationOfLongestFreeTimeBlock) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                longestFreeTime[PARAM_START] \u003d tempStartOfFreeTime;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                longestFreeTime[PARAM_END] \u003d tempEndOfFreeTime;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return longestFreeTime;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 119,
      "dojh111": 2
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Executes the help command and displays the help message to users."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param notes NoteList containing user\u0027s notes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList containing user\u0027s tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param storage Storage object to save tasks and notes to memory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param parser Parser object to parse user\u0027s inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param noteHistory NoteHistory object to store history of edited and deleted notes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param taskHistory TaskHistory object to store history of edited and deleted tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showHelpMenu();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 25,
      "EdmundEXE": 1,
      "dojh111": 3
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/InvalidCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 16,
      "dojh111": 2
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/ShowNotesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.EmptyNoteListException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteCommandFunctions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.TitleNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class ShowNotesCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(ShowNotesCommand.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private int arraySize \u003d 10000;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public ShowNotesCommand(String title) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private void findTitle(Ui ui, NoteList notes, String title) throws TitleNotFoundException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for finding title in note list\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int[] noteMatches \u003d new int [arraySize];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int matchNumber \u003d NoteCommandFunctions.checkNumberOfNoteMatches(notes, title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int noteNumber \u003d NoteCommandFunctions.findNoteNumber(notes, title);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End for finding title in note list\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        switch (matchNumber) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        case 0:     // no matches"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"No matches for title\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            throw new TitleNotFoundException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"One match found\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNotesMessage(notes.get(noteNumber).toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Multiple matches found\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showMultipleMatchesFoundPrompt();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Start of printing all matching notes\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            noteMatches \u003d ui.showMultipleNoteMatchesMessage(notes, title, noteMatches);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"End of printing all matching notes\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            noteNumber \u003d Integer.parseInt(ui.readCommand()) - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            NoteCommandFunctions.checkForIndexOutOfBounds(notes, noteNumber + 1, noteMatches);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNotesMessage(notes.get(noteNumber).toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Start of ShowNotesCommand\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            NoteCommandFunctions.checkEmptyList(notes);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (title.trim().length() \u003e 0) {        // title is already inputted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                findTitle(ui, notes, title);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showSelectWhichNoteToViewPrompt();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                logger.log(Level.INFO, \"Start of printing all notes in the list\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showAllNotesMessage(notes);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                logger.log(Level.INFO, \"End of printing all notes in the list\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                int noteNumber \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                NoteCommandFunctions.checkForIndexBeyondSize(notes, noteNumber);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showNotesMessage(notes.get(noteNumber - 1).toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"End of ShowNotesCommand\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input number is out of bounds\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (TitleNotFoundException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input title does not match any of the note titles\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNoTitleFoundError();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a number\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNumberFormatError();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (EmptyNoteListException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Note List is empty\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showEmptyNoteListMessage();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 39,
      "EdmundEXE": 55,
      "dojh111": 3,
      "johan9se": 2
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/SleepTimeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class SleepTimeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(SleepTimeCommand.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final int HOUR_EARLIEST \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final int HOUR_LATEST \u003d 24;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final int RECOMMENDED_SLEEP_DURATION \u003d 9;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Executes the sleep time command and displays to the user how long they can sleep."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param notes NoteList containing user\u0027s notes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList containing user\u0027s tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param storage Storage object to save tasks and notes to memory."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param parser Parser object to parse user\u0027s inputs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param noteHistory NoteHistory object to store history of edited and deleted notes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param taskHistory TaskHistory object to store history of edited and deleted tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Getting tasks from today...\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasksFromToday \u003d tasks.getTasksFromOneDay(LocalDate.now());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Getting tasks from tomorrow...\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasksFromTomorrow \u003d tasks.getTasksFromOneDay(LocalDate.now().plusDays(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Getting earliest sleep time...\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int earliestSleepTime \u003d getLatestBusyTime(tasksFromToday) + 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Getting latest wake time...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int latestWakeTime \u003d getEarliestBusyTime(tasksFromTomorrow) - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int duration \u003d (HOUR_LATEST - earliestSleepTime) + latestWakeTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Showing sleep time message...\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (earliestSleepTime \u003d\u003d HOUR_EARLIEST \u0026\u0026 latestWakeTime \u003d\u003d HOUR_LATEST) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            ui.showNothingScheduledMessage(\"today and tomorrow\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showAvailableSleepTimeMessage(earliestSleepTime, latestWakeTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (duration \u003c RECOMMENDED_SLEEP_DURATION) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showSleepDurationMessage(duration);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showExcessSleepDurationMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns true if there is something scheduled for a particular hour slot in a day."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param hour The time to be checked."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks An ArrayList containing the tasks scheduled for that day."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return True if there is something scheduled."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    boolean isBusyTime(int hour, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (!(task instanceof Deadline) \u0026\u0026 task.isWithinTimeSlot(hour)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns the latest hour slot in which there is something scheduled in a day."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks An ArrayList containing the tasks scheduled for that day."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return Integer representing the latest hour slot in which there is something scheduled for the day."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    int getLatestBusyTime(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assert (0 \u003c HOUR_LATEST \u0026\u0026 HOUR_LATEST \u003c 25) : \"The latest hour checked must be between 0 and 24\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (int hour \u003d HOUR_LATEST - 1; hour \u003e 0; hour--) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (isBusyTime(hour, tasks)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return hour;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns the earliest hour slot in which there is something scheduled in a day."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks An ArrayList containing the tasks scheduled for that day."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return Integer representing the earliest hour slot in which there is something scheduled for the day."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    int getEarliestBusyTime(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assert (0 \u003c\u003d HOUR_EARLIEST \u0026\u0026 HOUR_EARLIEST \u003c HOUR_LATEST) :"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"The earliest hour must be between 0 and the latest hour\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (int hour \u003d HOUR_EARLIEST; hour \u003c HOUR_LATEST; hour++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (isBusyTime(hour, tasks)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return hour;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return 25;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 126,
      "dojh111": 2,
      "johan9se": 1
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/UndoNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class UndoNoteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DEFAULT_EDIT_NUMBER \u003d -999999;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (noteHistory.getChangeCount() \u003e 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Note oldCopyOfNote \u003d noteHistory.getLastNote();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            int lastNoteEditNumber \u003d oldCopyOfNote.getEditNumber();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (lastNoteEditNumber \u003e 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    int editNumOfCurrNote \u003d  notes.get(i).getEditNumber();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    if (editNumOfCurrNote \u003d\u003d lastNoteEditNumber) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                        notes.setNote(i, oldCopyOfNote);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                ui.showUndoNoteEditMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            } else if (lastNoteEditNumber \u003c 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                Note noteToRestore \u003d new Note(oldCopyOfNote, DEFAULT_EDIT_NUMBER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                notes.add(noteToRestore);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                ui.showUndoNoteDeleteMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showOldNoteMessage(noteHistory);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            noteHistory.popLastNote();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            storage.saveNote();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInvalidUndoActionError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 7,
      "dojh111": 11,
      "johan9se": 27
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/UndoTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class UndoTaskCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DEFAULT_EDIT_NUMBER \u003d -999999;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (taskHistory.getChangeCount() \u003e 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Task oldCopyOfTask \u003d taskHistory.getLastTask();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            int lastTaskEditNumber \u003d oldCopyOfTask.getEditNumber();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (lastTaskEditNumber \u003e 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    int editNumOfCurrTask \u003d  tasks.getTask(i).getEditNumber();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    if (editNumOfCurrTask \u003d\u003d lastTaskEditNumber) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                        tasks.setTask(i, oldCopyOfTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                ui.showUndoTaskEditMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            } else if (lastTaskEditNumber \u003c 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                Task taskToRestore \u003d taskHistory.copyTask(oldCopyOfTask, DEFAULT_EDIT_NUMBER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                tasks.addTask(taskToRestore);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                ui.showUndoTaskDeleteMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showOldTaskMessage(taskHistory);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            taskHistory.popLastTask();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            storage.saveTasks();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInvalidUndoActionError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 7,
      "dojh111": 13,
      "johan9se": 25
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/notes/EmptyNoteListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class EmptyNoteListException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "EdmundEXE": 3
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/notes/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    protected int editNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DEFAULT_EDIT_NUMBER \u003d -999999;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public Note(String title, String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.editNumber \u003d DEFAULT_EDIT_NUMBER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Note(Note note, int editNumber) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.title \u003d note.title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.description \u003d note.description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        setEditNumber(editNumber);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return \"Title: \" + title + \"\\n\\n\" + description + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getEditNumber() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return editNumber;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void setEditNumber(int editNumber) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.editNumber \u003d editNumber;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "EdmundEXE": 30,
      "johan9se": 18
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/notes/NoteCommandFunctions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class NoteCommandFunctions {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public static void checkEmptyList(NoteList notes) throws EmptyNoteListException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (notes.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            throw new EmptyNoteListException();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public static void checkForIndexBeyondSize(NoteList notes, int noteNumber) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (noteNumber - 1 \u003e notes.size()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public static void checkForIndexOutOfBounds(NoteList notes, int noteNumber, int[] arr) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (int j : arr) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (noteNumber \u003d\u003d j) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public static int checkNumberOfNoteMatches(NoteList notes, String title) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int matchNumber \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (notes.get(i).getTitle().contains(title)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                matchNumber++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return matchNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public static int findNoteNumber(NoteList notes, String title) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int noteNumber \u003d -1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (notes.get(i).getTitle().contains(title)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                noteNumber \u003d i;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return noteNumber;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 3,
      "EdmundEXE": 42
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/notes/NoteHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": " * The NoteHistory class represents the list of changes made to Note objects,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": " * edits or deletions in particular."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class NoteHistory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private int changeCount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private int editCount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private int deleteCount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private ArrayList\u003cNote\u003e noteHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DEFAULT_EDIT_NUMBER \u003d -999999;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public NoteHistory() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.changeCount \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.editCount \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.deleteCount \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.noteHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Resets all noteHistory after archive command is called."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void clearNoteHistory() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteHistory.clear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        changeCount \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        editCount \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        deleteCount \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Note getLastNote() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return noteHistory.get(changeCount - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getChangeCount() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return changeCount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getEditCount() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return editCount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getDeleteCount() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return deleteCount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void incrementChangeCount() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.changeCount++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void decrementChangeCount() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (changeCount \u003e 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            this.changeCount--;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void pushOldCopy(Note oldCopyOfNote) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        noteHistory.add(oldCopyOfNote);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        incrementChangeCount();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void popLastNote() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int indexOfLastNote \u003d changeCount - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int editNumOfLastNote \u003d noteHistory.get(indexOfLastNote).getEditNumber();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (!containsSameEditNumber(editNumOfLastNote)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (editNumOfLastNote \u003e 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                editCount--;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                deleteCount++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        noteHistory.remove(indexOfLastNote);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        decrementChangeCount();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean containsSameEditNumber(int editNumOfLastTask) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return noteHistory.stream().anyMatch(t -\u003e t.getEditNumber() \u003d\u003d editNumOfLastTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Returns a copy of the Note object before it is edited."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param notes represents the NoteList object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param noteIndex the index of the Note object the user wants to edit."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Note getCurrCopyOfNoteToEdit(NoteList notes, int noteIndex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Note note \u003d notes.get(noteIndex);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int noteEditNumber \u003d note.getEditNumber();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int editID;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (noteEditNumber \u003d\u003d DEFAULT_EDIT_NUMBER) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editCount++;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editID \u003d getEditCount();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            note.setEditNumber(editID);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editID \u003d noteEditNumber;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return new Note(note, editID);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Returns a copy of the Note object before it is deleted."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param notes represents the NoteList object."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param noteIndex the index of the Note object the user wants to delete."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Note getCurrCopyOfNoteToDelete(NoteList notes, int noteIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Note note \u003d notes.get(noteIndex);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        deletePrevCopiesOfThisNote(note);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int deleteID \u003d getDeleteCount() - 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        note.setEditNumber(deleteID);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        deleteCount--;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return new Note(note, deleteID);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void deletePrevCopiesOfThisNote(Note noteToDelete) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int editNumber \u003d noteToDelete.getEditNumber();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Iterator\u003cNote\u003e iterator \u003d noteHistory.iterator();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Note note \u003d iterator.next();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (note.getEditNumber() \u003d\u003d editNumber) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                decrementChangeCount();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "dojh111": 21,
      "johan9se": 121
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/notes/NoteList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class NoteList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private final ArrayList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public NoteList(ArrayList\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public NoteList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public Note get(int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return notes.get(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void setNote(int i, Note oldCopyOfCurrNote) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        notes.set(i, oldCopyOfCurrNote);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void add(Note note) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public ArrayList\u003cNote\u003e getNotes() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return notes.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        notes.remove(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "EdmundEXE": 31,
      "dojh111": 4,
      "johan9se": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/notes/TitleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class TitleNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "EdmundEXE": 3
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/tasks/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final String PARAM_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private String type \u003d PARAM_DEADLINE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Deadline(String description, LocalDateTime by, int recurrences) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.recurrences \u003d recurrences;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Deadline(Task task, int editNumber) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        super(task, editNumber);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.by \u003d ((Deadline) task).by;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getBy() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getBy();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void setStart(LocalDateTime start) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.by \u003d start;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void setEnd(LocalDateTime end) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return \"Deadline: \" + super.toString() + \" by (\" + by.format(format) + \"), \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"repeats weekly \" + recurrences + \" times\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Moves a recurring deadline 7 days forward, and decrements remaining recurrences by 1."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void moveAndUpdateRecurrences(LocalDate day) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        while (this.by.toLocalDate().isBefore(day)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            decrementRecurrences(1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            by \u003d by.plusDays(7);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns true if a similar or duplicate Deadline already exists in the schedule."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param description Description of Deadline to be checked."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param by By DateTime of Deadline to be checked."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param recurrences Recurrences of Deadline to be checked."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return True if a similar or duplicate Deadline already exists in the schedule."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public boolean isDuplicate(String description, LocalDateTime by, int recurrences) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalTime existingBy \u003d this.by.toLocalTime();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        DayOfWeek existingDay \u003d this.by.getDayOfWeek();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalTime newBy \u003d by.toLocalTime();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        DayOfWeek newDay \u003d by.getDayOfWeek();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return (this.description.equals(description)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \u0026\u0026 existingBy \u003d\u003d newBy"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \u0026\u0026 existingDay \u003d\u003d newDay"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \u0026\u0026 ((this.recurrences \u003e 0 \u0026\u0026 recurrences \u003e 0) || this.by.equals(by)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 35,
      "daniellimzj": 45,
      "dojh111": 5,
      "johan9se": 14
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/tasks/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final String PARAM_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime start;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime end;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private String type \u003d PARAM_EVENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Event(String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Event(String description, LocalDateTime start, LocalDateTime end, int recurrences) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.recurrences \u003d recurrences;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Event(Task task, int editNumber) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        super(task, editNumber);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.start \u003d ((Event) task).start;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.end \u003d ((Event) task).end;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void setStart(LocalDateTime start) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void setEnd(LocalDateTime end) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return \"Event: \" + super.toString() + \" (\" + start.format(format) + \" to \" +  end.format(format) + \"), \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"repeats weekly \" + recurrences + \" times\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Moves a recurring event 7 days forward, and decrements remaining recurrences by 1."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void moveAndUpdateRecurrences(LocalDate day) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        while (this.start.toLocalDate().isBefore(day)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            decrementRecurrences(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            start \u003d start.plusDays(7);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            end \u003d end.plusDays(7);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns true if a similar or duplicate Event already exists in the schedule."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param description Description of Event to be checked."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param start Start DateTime of Event to be checked."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param end End DateTime of Event to be checked."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param recurrences Recurrences of Event to be checked."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return True if a similar or duplicate Event already exists in the schedule."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public boolean isDuplicate(String description, LocalDateTime start, LocalDateTime end, int recurrences) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalTime existingStartTime \u003d this.start.toLocalTime();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalTime existingEndTime \u003d this.end.toLocalTime();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        DayOfWeek existingDay \u003d this.start.getDayOfWeek();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalTime newStartTime \u003d start.toLocalTime();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalTime newEndTime \u003d end.toLocalTime();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        DayOfWeek newDay \u003d start.getDayOfWeek();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return (this.description.equals(description)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \u0026\u0026 existingStartTime \u003d\u003d newStartTime"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \u0026\u0026 existingEndTime \u003d\u003d newEndTime"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \u0026\u0026 existingDay \u003d\u003d newDay"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \u0026\u0026 ((this.recurrences \u003e 0 \u0026\u0026 recurrences \u003e 0) || this.start.equals(start)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 40,
      "daniellimzj": 52,
      "dojh111": 7,
      "johan9se": 6
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/tasks/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class Lesson extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final String PARAM_LESSON \u003d \"lesson\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime start;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime end;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private String type \u003d PARAM_LESSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Lesson(String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Lesson(String description, LocalDateTime start, LocalDateTime end, int recurrences) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.recurrences \u003d recurrences;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Lesson(Task task, int editNumber) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        super(task, editNumber);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.start \u003d ((Lesson) task).start;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.end \u003d ((Lesson) task).end;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void setStart(LocalDateTime start) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void setEnd(LocalDateTime end) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return \"Lesson: \" + super.toString() + \" (\" + start.format(format) + \" to \" + end.format(format) + \"), \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"repeats weekly \" + recurrences + \" times\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Moves a recurring lesson 7 days forward, and decrements remaining recurrences by 1."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void moveAndUpdateRecurrences(LocalDate day) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        while (this.start.toLocalDate().isBefore(day)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            decrementRecurrences(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            start \u003d start.plusDays(7);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            end \u003d end.plusDays(7);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns true if a similar or duplicate Lesson already exists in the schedule."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param moduleCode Module code of Lesson to be checked."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param start Start DateTime of Lesson to be checked."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param end End DateTime of Lesson to be checked."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param recurrences Recurrences of Lesson to be checked."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return True if a similar or duplicate Lesson already exists in the schedule."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public boolean isDuplicate(String moduleCode, LocalDateTime start, LocalDateTime end, int recurrences) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalTime existingStartTime \u003d this.start.toLocalTime();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalTime existingEndTime \u003d this.end.toLocalTime();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        DayOfWeek existingDay \u003d this.start.getDayOfWeek();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalTime newStartTime \u003d start.toLocalTime();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalTime newEndTime \u003d end.toLocalTime();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        DayOfWeek newDay \u003d start.getDayOfWeek();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return (this.description.equals(moduleCode)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \u0026\u0026 existingStartTime \u003d\u003d newStartTime"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \u0026\u0026 existingEndTime \u003d\u003d newEndTime"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \u0026\u0026 existingDay \u003d\u003d newDay"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \u0026\u0026 ((this.recurrences \u003e 0 \u0026\u0026 recurrences \u003e 0) || this.start.equals(start)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 43,
      "daniellimzj": 50,
      "dojh111": 6,
      "johan9se": 6
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/tasks/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    protected int recurrences;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected int editNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String TIME_FORMAT \u003d \"%02d:00\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final int DEFAULT_EDIT_NUMBER \u003d -999999;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.recurrences \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.editNumber \u003d DEFAULT_EDIT_NUMBER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Task(Task task, int editNumber) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.description \u003d task.description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.recurrences \u003d task.recurrences;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        setEditNumber(editNumber);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void setEditNumber(int number) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.editNumber \u003d number;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getEditNumber() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return editNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public int getRecurrences() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return recurrences;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void decrementRecurrences(int by) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        recurrences \u003d recurrences - by;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public abstract LocalDateTime getStart();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public abstract LocalDateTime getEnd();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public abstract void setStart(LocalDateTime start);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public abstract void setEnd(LocalDateTime end);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public abstract void moveAndUpdateRecurrences(LocalDate day);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean isWithinTimeSlot(int timeSlotStartHour) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return startsBeforeOrAt(timeSlotStartHour) \u0026\u0026 endsAtOrAfter(timeSlotStartHour + 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean startsBeforeOrAt(int hour) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getRoundedDownStartHour(getStart().toLocalTime()) \u003c\u003d hour;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getRoundedDownStartHour(LocalTime startTime) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return startTime.getHour();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean endsAtOrAfter(int hour) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getRoundedUpEndHour(getEnd().toLocalTime()) \u003e\u003d hour;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getRoundedUpEndHour(LocalTime endTime) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int endHour \u003d endTime.getHour();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalTime adjustedEndTime \u003d LocalTime.parse(String.format(TIME_FORMAT, endHour));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (endTime.equals(adjustedEndTime)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return endHour;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return endHour + 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean isHappeningOn(LocalDate date) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getStart().toLocalDate().equals(date);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean isHappeningBefore(LocalDate date) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getStart().toLocalDate().isBefore(date);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean happensAfter(LocalDateTime now) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getStart().isAfter(now);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 20,
      "daniellimzj": 17,
      "dojh111": 12,
      "johan9se": 57
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/tasks/TaskDuplicateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class TaskDuplicateException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/tasks/TaskHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": " * The TaskHistory class represents the list of changes made to Task objects,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": " * edits or deletions in particular."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class TaskHistory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private int changeCount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private int editCount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private int deleteCount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private ArrayList\u003cTask\u003e taskHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DEFAULT_EDIT_NUMBER \u003d -999999;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public TaskHistory() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.changeCount \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.editCount \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.deleteCount \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.taskHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Task getLastTask() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return taskHistory.get(changeCount - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getChangeCount() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return changeCount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getEditCount() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return editCount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getDeleteCount() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return deleteCount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void incrementChangeCount() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.changeCount++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void decrementChangeCount() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (changeCount \u003e 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            this.changeCount--;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void pushOldCopy(Task oldCopyOfTask) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        taskHistory.add(oldCopyOfTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        incrementChangeCount();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void popLastTask() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int indexOfLastTask \u003d changeCount - 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int editNumOfLastTask \u003d taskHistory.get(indexOfLastTask).getEditNumber();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (!containsSameEditNumber(editNumOfLastTask)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (editNumOfLastTask \u003e 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                editCount--;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                deleteCount++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        taskHistory.remove(indexOfLastTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        decrementChangeCount();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean containsSameEditNumber(int editNumOfLastTask) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return taskHistory.stream().anyMatch(t -\u003e t.getEditNumber() \u003d\u003d editNumOfLastTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Returns a copy of the Task object before it is edited."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param tasks represents the TaskList object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param userIndexChoice the index of the Task object the user wants to edit."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Task getCurrCopyOfTaskToEdit(TaskList tasks, int userIndexChoice) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task task \u003d tasks.getTask(userIndexChoice);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int taskEditNumber \u003d task.getEditNumber();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int editID;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (taskEditNumber \u003d\u003d DEFAULT_EDIT_NUMBER) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editCount++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editID \u003d getEditCount();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            task.setEditNumber(editID);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editID \u003d taskEditNumber;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return copyTask(task, editID);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Returns a copy of the Task object before it is deleted."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param tasks represents the TaskList object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param userIndexChoice the index of the Task object the user wants to delete."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Task getCurrCopyOfTaskToDelete(TaskList tasks, int userIndexChoice) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task task \u003d tasks.getTask(userIndexChoice);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        deletePrevCopiesOfThisTask(task);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int deleteID \u003d getDeleteCount() - 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        task.setEditNumber(deleteID);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        deleteCount--;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return copyTask(task, deleteID);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void deletePrevCopiesOfThisTask(Task taskToDelete) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int editNumber \u003d taskToDelete.getEditNumber();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Iterator\u003cTask\u003e iterator \u003d taskHistory.iterator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Task task \u003d iterator.next();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (task.getEditNumber() \u003d\u003d editNumber) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                decrementChangeCount();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Task copyTask(Task task, int editID) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return new Deadline(task, editID);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return new Event(task, editID);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return new Lesson(task, editID);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void printTaskHistory() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (Task t : taskHistory) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            System.out.println(t.toString() + \" \" + t.getEditNumber());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "dojh111": 10,
      "johan9se": 138
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/tasks/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.commands.ShowNotesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final int INDEX_START \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final int INDEX_END \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(ShowNotesCommand.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected static ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private int displayIndexOfLastMatch \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    HashMap\u003cInteger,Integer\u003e taskMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getTaskCount() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void setTask(int index, Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        taskList.set(index, task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public int getActualIndex(int i) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return taskMap.get(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * Add new event to taskList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param description description of event."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param start start date/time of event."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param end end date/time of event."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param recurrences number of times to repeat."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Task addEvent(String description, LocalDateTime start, LocalDateTime end, int recurrences)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            throws TaskDuplicateException, TaskPastException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (start.toLocalDate().isBefore(today)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            throw new TaskPastException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (task instanceof Event \u0026\u0026 (((Event) task).isDuplicate(description, start, end, recurrences))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                throw new TaskDuplicateException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assert start.isBefore(end) : \"Start not before end!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Event event \u003d new Event(description, start, end, recurrences);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        addTask(event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * Add new Lesson to taskList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param moduleCode module code of lesson."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param start start date/time of lesson."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param end end date/time of lesson."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param recurrences number of times to repeat."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Task addLesson(String moduleCode, LocalDateTime start, LocalDateTime end, int recurrences)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            throws TaskDuplicateException, TaskPastException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (start.toLocalDate().isBefore(today)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            throw new TaskPastException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (task instanceof Lesson \u0026\u0026 (((Lesson) task).isDuplicate(moduleCode, start, end, recurrences))) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                throw new TaskDuplicateException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assert start.isBefore(end) : \"Start not before end!\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Lesson lesson \u003d new Lesson(moduleCode, start, end, recurrences);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        addTask(lesson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return lesson;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * Adds a new Deadline to taskList."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param by deadline of task."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param recurrences number of times to repeat."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Task addDeadline(String description, LocalDateTime by, int recurrences)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            throws TaskDuplicateException, TaskPastException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (by.toLocalDate().isBefore(today)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            throw new TaskPastException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (task instanceof Deadline \u0026\u0026 (((Deadline) task).isDuplicate(description, by, recurrences))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                throw new TaskDuplicateException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, by, recurrences);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        addTask(deadline);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editTaskDescription(int index, Ui ui) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String newDescription;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            newDescription \u003d ui.readCommand();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            if (newDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showEmptyNewDescriptionPrompt();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        getTask(index).setDescription(newDescription);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        ui.showEditConfirmationMessage();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void editModuleCode(int index, Ui ui, String moduleCode) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int actualIndex \u003d taskMap.get(index);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        getTask(actualIndex).setDescription(moduleCode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        ui.showEditConfirmationMessage();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editLessonTime(int displayIndex, Ui ui, LocalDateTime[] times) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int actualIndex \u003d taskMap.get(displayIndex);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        getTask(actualIndex).setStart(times[INDEX_START]);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        getTask(actualIndex).setEnd(times[INDEX_END]);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        ui.showEditConfirmationMessage();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editEventTime(int displayIndex, Ui ui, LocalDateTime[] times) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int actualIndex \u003d taskMap.get(displayIndex);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        getTask(actualIndex).setStart(times[INDEX_START]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        getTask(actualIndex).setEnd(times[INDEX_END]);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        ui.showEditConfirmationMessage();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editDeadlineTime(int displayIndex, Ui ui, LocalDateTime[] times) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int actualIndex \u003d taskMap.get(displayIndex);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        getTask(actualIndex).setStart(times[0]);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        ui.showEditConfirmationMessage();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void deleteTask(int displayIndex, Ui ui) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int actualIndex \u003d taskMap.get(displayIndex);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            taskList.remove(actualIndex);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Index provided out of bounds\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a valid number\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNumberFormatError();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void printMatchingTasks(String type, String description, Ui ui) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showMatchingTasksPrompt(type);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Start of printing all matching \" + type);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        displayIndexOfLastMatch \u003d 0;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int firstDisplayIndex \u003d 0;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        boolean noMatches \u003d true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        for (int i \u003d 0; i \u003c getTaskCount(); i++) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            if (checkMatchingTasks(i, type, description)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                firstDisplayIndex++;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                String task \u003d getTask(i).toString();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                ui.printMatchingTask(firstDisplayIndex, task);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                displayIndexOfLastMatch \u003d firstDisplayIndex;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                taskMap.put(firstDisplayIndex, i);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                noMatches \u003d false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        if (noMatches) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"No matching tasks found\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Start of printing all matching \" + type);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private boolean checkMatchingTasks(int index, String type, String description) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return (getTask(index).getType().equals(type)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                \u0026\u0026 getTask(index).getDescription().contains(description));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void checkForIndexOutOfBounds(int userInput) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        if (userInput \u003e displayIndexOfLastMatch || userInput \u003c\u003d 0) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Index provided out of bounds\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns an ArrayList of Tasks from one specific day."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param day Day to get tasks from."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return ArrayList of Tasks from one specific day."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasksFromOneDay(LocalDate day) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return (ArrayList\u003cTask\u003e) taskList.stream()"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                .filter((t) -\u003e t.getStart().toLocalDate().equals(day))"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        taskList.sort(Comparator.comparing(Task::getStart));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Cleans up the taskList."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Deletes tasks if they have no more recurrences and are in the past."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Updates tasks\u0027 dates if they have more recurrences and are in the past."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param day Day behind which tasks will be updated and deleted."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void updateTasks(LocalDate day) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasksToBeRemoved \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if ((task.isHappeningBefore(day)) \u0026\u0026 (task.getRecurrences() \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                tasksToBeRemoved.add(task);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            } else if ((task.isHappeningBefore(day)) \u0026\u0026 (task.getRecurrences() \u003e 0)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                task.moveAndUpdateRecurrences(day);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                if (task.getRecurrences() \u003c 0) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                    tasksToBeRemoved.add(task);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (Task task : tasksToBeRemoved) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            taskList.remove(task);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 153,
      "daniellimzj": 105,
      "dojh111": 5,
      "johan9se": 13
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/tasks/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class TaskNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 3,
      "daniellimzj": 1
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/model/tasks/TaskPastException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class TaskPastException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/parser/MissingParam.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package seedu.lifeasier.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public enum MissingParam {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    MODULE_CODE, DESCRIPTION, DATE, START_TIME, END_TIME, COMPLETED, RECURRENCES"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "EdmundEXE": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.AddNotesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.commands.DeleteNotesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.DisplayScheduleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.commands.EditDeadlineCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.commands.EditEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.commands.EditLessonCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.commands.EditNotesCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.FreeTimeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.InvalidCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.ShowNotesCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.SleepTimeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.commands.UndoNoteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.commands.UndoTaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_ADD_LESSON \u003d \"addLesson\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_ADD_EVENT \u003d \"addEvent\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_ADD_DEADLINE \u003d \"addDeadline\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_ADD_NOTES \u003d \"addNotes\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_SHOW_NOTES \u003d \"showNotes\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public static final String PARAM_DELETE_NOTES \u003d \"deleteNotes\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public static final String PARAM_EDIT_NOTES \u003d \"editNotes\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_DISPLAY \u003d \"display\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_FREE_TIME \u003d \"freeTime\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_SLEEP_TIME \u003d \"sleepTime\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String PARAM_ARCHIVE \u003d \"archive\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_EDIT_LESSON \u003d \"editLesson\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_EDIT_DEADLINE \u003d \"editDeadline\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_EDIT_EVENT \u003d \"editEvent\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_DELETE_TASK \u003d \"deleteTask\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String PARAM_UNDO \u003d \"undo\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_CODE \u003d \"/code\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_FROM \u003d \"/from\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_TO \u003d \"/to\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_BY \u003d \"/by\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_TYPE \u003d \"/type\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_REPEATS \u003d \"/repeats\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_LESSON \u003d \"lesson\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_NOTE \u003d \"note\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_TASK \u003d \"task\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final int INDEX_START \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final int INDEX_END \u003d 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final int MAXIMUM_CODE_LENGTH \u003d 8;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final int MINIMUM_CODE_LENGTH \u003d 6;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final int MAXIMUM_SUFFIX_CHARACTER \u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isParametersEmpty \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isModuleCodeEmpty \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isDescriptionEmpty \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isDateEmpty \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isStartTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isEndTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isDateTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private boolean isRecurrencesEmpty \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yy HH:mm\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns the first word entered from the user\u0027s input, which represents the command type."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return The first word that the user input."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String getCommandType(String input) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Getting command type...\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int indexOfFirstSpace \u003d input.indexOf(\" \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (indexOfFirstSpace \u003e 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            return input.substring(0, indexOfFirstSpace);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            return input;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the addLesson command that the user inputs."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Also prompts user for missing parameters if there are any."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return AddLessonCommand with the parameters input by the user."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    Command parseAddLessonCommand(Ui ui, String input) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing addLesson command...\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start check for missing parameters.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (isParametersEmpty) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            MissingParam param \u003d checkMissingLessonParameters(input);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            switch (param) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case MODULE_CODE:   // module code is missing"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addModuleCodeParam(ui, input);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isModuleCodeEmpty \u003d false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case DATE:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addDateParam(ui, input);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDateEmpty \u003d false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case START_TIME:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addStartTimeParam(ui, input);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isStartTimeEmpty \u003d false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case END_TIME:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addEndTimeParam(ui, input + \" \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isEndTimeEmpty \u003d false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case RECURRENCES:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                input \u003d addRecurrencesParam(ui, input);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                isRecurrencesEmpty \u003d false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isParametersEmpty \u003d false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isModuleCodeEmpty \u003d true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDateEmpty \u003d true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isStartTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isEndTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End check for missing parameters\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfCodeCommand \u003d input.indexOf(PARAM_CODE) + PARAM_CODE.length();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfDateCommand \u003d input.indexOf(PARAM_DATE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfDateCommand \u003d firstIndexOfDateCommand + PARAM_DATE.length();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int firstIndexOfTimeCommand \u003d input.indexOf(PARAM_FROM);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int lastIndexOfTimeCommand \u003d firstIndexOfTimeCommand + PARAM_FROM.length();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfToCommand \u003d input.indexOf(PARAM_TO);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfToCommand \u003d firstIndexOfToCommand + PARAM_TO.length();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfRepeatsCommand \u003d input.indexOf(PARAM_REPEATS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfRepeatsCommand \u003d firstIndexOfRepeatsCommand + PARAM_REPEATS.length();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String tempModuleCode \u003d input.substring(lastIndexOfCodeCommand, firstIndexOfDateCommand).trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String tempDate \u003d input.substring(lastIndexOfDateCommand, firstIndexOfTimeCommand).trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String tempStartTime \u003d input.substring(lastIndexOfTimeCommand, firstIndexOfToCommand).trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String tempEndTime \u003d  input.substring(lastIndexOfToCommand, firstIndexOfRepeatsCommand).trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String tempRecurrencesString \u003d  input.substring(lastIndexOfRepeatsCommand).trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String moduleCode \u003d fillIfEmptyParam(ui, tempModuleCode, PARAM_CODE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String date \u003d fillIfEmptyParam(ui, tempDate, PARAM_DATE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String startTime \u003d fillIfEmptyParam(ui, tempStartTime, PARAM_FROM);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String endTime \u003d  checkForMidnightEndTime(fillIfEmptyParam(ui, tempEndTime, PARAM_TO));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String recurrencesString \u003d fillIfEmptyParam(ui, tempRecurrencesString, PARAM_REPEATS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(date + \" \" + startTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(date + \" \" + endTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (start.compareTo(end) \u003e 0) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showInvalidTimeLogicMessage();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            resetBoolean();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int recurrences \u003d checkIfValidNumber(ui, recurrencesString);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        resetBoolean();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new AddLessonCommand(moduleCode, start, end, recurrences);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the addEvent command that the user inputs."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Also prompts user for missing parameters if there are any."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return AddEventCommand with the parameters input by the user."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private Command parseAddEventCommand(Ui ui, String input) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing addEvent command...\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start check for missing parameters.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (isParametersEmpty) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            MissingParam param \u003d checkMissingEventParameters(input);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            switch (param) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case DESCRIPTION:   // description is missing"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addEventDescriptionParam(ui, input);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDescriptionEmpty \u003d false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case DATE:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addDateParam(ui, input);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDateEmpty \u003d false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case START_TIME:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addStartTimeParam(ui, input);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isStartTimeEmpty \u003d false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case END_TIME:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addEndTimeParam(ui, input + \" \");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isEndTimeEmpty \u003d false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case RECURRENCES:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                input \u003d addRecurrencesParam(ui, input);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                isRecurrencesEmpty \u003d false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isParametersEmpty \u003d false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDescriptionEmpty \u003d true;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDateEmpty \u003d true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isStartTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isEndTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End check for missing parameters.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfAddEventCommand \u003d input.indexOf(PARAM_ADD_EVENT) + PARAM_ADD_EVENT.length();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfDateCommand \u003d input.indexOf(PARAM_DATE);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfDateCommand \u003d firstIndexOfDateCommand + PARAM_DATE.length();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int firstIndexOfTimeCommand \u003d input.indexOf(PARAM_FROM);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int lastIndexOfTimeCommand \u003d firstIndexOfTimeCommand + PARAM_FROM.length();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfToCommand \u003d input.indexOf(PARAM_TO);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfToCommand \u003d firstIndexOfToCommand + PARAM_TO.length();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfRepeatsCommand \u003d input.indexOf(PARAM_REPEATS);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfRepeatsCommand \u003d firstIndexOfRepeatsCommand + PARAM_REPEATS.length();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String tempDate \u003d input.substring(lastIndexOfDateCommand, firstIndexOfTimeCommand).trim();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String tempStartTime \u003d input.substring(lastIndexOfTimeCommand, firstIndexOfToCommand).trim();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String tempEndTime \u003d input.substring(lastIndexOfToCommand, firstIndexOfRepeatsCommand).trim();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String tempRecurrencesString \u003d input.substring(lastIndexOfRepeatsCommand).trim();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d input.substring(lastIndexOfAddEventCommand, firstIndexOfDateCommand).trim();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String date \u003d fillIfEmptyParam(ui, tempDate, PARAM_DATE);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String startTime \u003d fillIfEmptyParam(ui, tempStartTime, PARAM_FROM);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String endTime \u003d  checkForMidnightEndTime(fillIfEmptyParam(ui, tempEndTime, PARAM_TO));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String recurrencesString \u003d  fillIfEmptyParam(ui, tempRecurrencesString, PARAM_REPEATS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(date + \" \" + startTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(date + \" \" + endTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (start.compareTo(end) \u003e 0) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showInvalidTimeLogicMessage();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            resetBoolean();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int recurrences \u003d checkIfValidNumber(ui, recurrencesString);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        resetBoolean();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new AddEventCommand(description, start, end, recurrences);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the addDeadline command that the user inputs."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Also prompts user for missing parameters if there are any."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return AddDeadlineCommand with the parameters input by the user."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    Command parseAddDeadlineCommand(Ui ui, String input) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing addDeadline command...\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start check for missing parameters.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (isParametersEmpty) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            MissingParam param \u003d checkMissingDeadlineParameters(input);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            switch (param) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case DESCRIPTION:   // description is missing"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addDeadlineDescriptionParam(ui, input);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDescriptionEmpty \u003d false;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case END_TIME:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addByDateTime(ui, input + \" \");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isEndTimeEmpty \u003d false;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case RECURRENCES:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                input \u003d addRecurrencesParam(ui, input);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                isRecurrencesEmpty \u003d false;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isParametersEmpty \u003d false;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDescriptionEmpty \u003d true;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isEndTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End check for missing parameters.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfAddDeadlineCommand \u003d input.indexOf(PARAM_ADD_DEADLINE) + PARAM_ADD_DEADLINE.length();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfByCommand \u003d input.indexOf(PARAM_BY);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfByCommand \u003d firstIndexOfByCommand + PARAM_BY.length();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfRepeatsCommand \u003d input.indexOf(PARAM_REPEATS);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfRepeatsCommand \u003d firstIndexOfRepeatsCommand + PARAM_REPEATS.length();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String tempByInput \u003d input.substring(lastIndexOfByCommand, firstIndexOfRepeatsCommand).trim();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String tempRecurrencesString \u003d input.substring(lastIndexOfRepeatsCommand).trim();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d input.substring(lastIndexOfAddDeadlineCommand, firstIndexOfByCommand).trim();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String byInput \u003d fillIfEmptyParam(ui, tempByInput, PARAM_BY);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime by \u003d LocalDateTime.parse(byInput, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String recurrencesString \u003d fillIfEmptyParam(ui, tempRecurrencesString, PARAM_REPEATS);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int recurrences \u003d checkIfValidNumber(ui, recurrencesString);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        resetBoolean();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new AddDeadlineCommand(description, by, recurrences);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the addNotes command that the user inputs."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return AddNotesCommand with the parameters input by the user."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Command parseAddNotesCommand(String input) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing addNotes command...\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfAddNotesCommand \u003d input.indexOf(PARAM_ADD_NOTES) + PARAM_ADD_NOTES.length();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String title \u003d input.substring(lastIndexOfAddNotesCommand).trim();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new AddNotesCommand(title);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private Command parseEditLessonCommand(String input) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Parsing editLesson command...\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int lastIndexOfAddNotesCommand \u003d input.indexOf(PARAM_EDIT_LESSON) + PARAM_EDIT_LESSON.length();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String code \u003d input.substring(lastIndexOfAddNotesCommand).trim();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return new EditLessonCommand(code);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private Command parseEditEventCommand(String input) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Parsing editEvent command...\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int lastIndexOfAddNotesCommand \u003d input.indexOf(PARAM_EDIT_EVENT) + PARAM_EDIT_EVENT.length();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String eventName \u003d input.substring(lastIndexOfAddNotesCommand).trim();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return new EditEventCommand(eventName);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private Command parseEditDeadlineCommand(String input) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Parsing editDeadline command...\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int lastIndexOfAddNotesCommand \u003d input.indexOf(PARAM_EDIT_DEADLINE) + PARAM_EDIT_DEADLINE.length();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String deadlineName \u003d input.substring(lastIndexOfAddNotesCommand).trim();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return new EditDeadlineCommand(deadlineName);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private Command parseDeleteTaskCommand(String input) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String type \u003d \"\";"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Parsing deleteTask command...\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int firstIndexOfTypeCommand \u003d input.indexOf(PARAM_TYPE);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int lastIndexOfTypeCommand \u003d input.indexOf(PARAM_TYPE) + PARAM_TYPE.length();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            if (firstIndexOfTypeCommand \u003d\u003d -1) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                logger.log(Level.SEVERE, \"deleteTask command missing TYPE keyword\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                throw new ParserException();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int firstIndexOfNameCommand \u003d input.indexOf(PARAM_NAME);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            if (firstIndexOfNameCommand \u003d\u003d -1) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                type \u003d input.substring(lastIndexOfTypeCommand).trim();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                name \u003d \"\";"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                int lastIndexOfNameCommand \u003d input.indexOf(PARAM_NAME) + PARAM_NAME.length();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                type \u003d input.substring(lastIndexOfTypeCommand, firstIndexOfNameCommand).trim();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                checkValidType(type);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                name \u003d input.substring(lastIndexOfNameCommand).trim();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Invalid command...\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return new DeleteTaskCommand(type, name);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void checkValidType(String type) throws ParserException {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        if (!type.equals(PARAM_DEADLINE) \u0026\u0026 !type.equals(PARAM_EVENT)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                \u0026\u0026 !type.equals(PARAM_LESSON)) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            throw new ParserException();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime[] parseNewTimeInput(Ui ui, String input, int numOfTimeArgs) throws ParserException {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Parsing newTimeInput from user...\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        LocalDateTime[] times \u003d new LocalDateTime[2];"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        switch (numOfTimeArgs) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (1):"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int firstIndexOfByCommand \u003d input.indexOf(PARAM_BY);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int lastIndexOfByCommand \u003d firstIndexOfByCommand + PARAM_BY.length();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            if (firstIndexOfByCommand \u003d\u003d -1) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                logger.log(Level.SEVERE, \"Input missing BY keyword\");"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                throw new ParserException();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            String byInput \u003d input.substring(lastIndexOfByCommand).trim();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            LocalDateTime by \u003d LocalDateTime.parse(byInput, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            times[INDEX_START] \u003d by;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            return times;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (2):"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int firstIndexOfDateCommand \u003d input.indexOf(PARAM_DATE);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int lastIndexOfDateCommand \u003d firstIndexOfDateCommand + PARAM_DATE.length();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int firstIndexOfTimeCommand \u003d input.indexOf(PARAM_FROM);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int lastIndexOfTimeCommand \u003d firstIndexOfTimeCommand + PARAM_FROM.length();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int firstIndexOfToCommand \u003d input.indexOf(PARAM_TO);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int lastIndexOfToCommand \u003d firstIndexOfToCommand + PARAM_TO.length();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            checkValidTimeKeywords(firstIndexOfDateCommand, firstIndexOfTimeCommand, firstIndexOfToCommand);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            String date \u003d input.substring(lastIndexOfDateCommand, firstIndexOfTimeCommand).trim();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            String startTime \u003d input.substring(lastIndexOfTimeCommand, firstIndexOfToCommand).trim();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            String endTime \u003d checkForMidnightEndTime(input.substring(lastIndexOfToCommand).trim());"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            LocalDateTime start \u003d LocalDateTime.parse(date + \" \" + startTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            LocalDateTime end \u003d LocalDateTime.parse(date + \" \" + endTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            times[INDEX_START] \u003d start;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            times[INDEX_END] \u003d end;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            return times;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return times;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void checkValidTimeKeywords(int firstIndexOfDateCommand, int firstIndexOfTimeCommand,"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                                        int firstIndexOfToCommand) throws ParserException {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        if (firstIndexOfDateCommand \u003d\u003d -1 || firstIndexOfTimeCommand \u003d\u003d -1 || firstIndexOfToCommand \u003d\u003d -1) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            throw new ParserException();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the showNotes command that the user inputs."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return ShowNotesCommand with the parameters input by the user."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Command parseShowNotesCommand(String input) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing showNotes command...\");"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfShowNotesCommand \u003d input.indexOf(PARAM_SHOW_NOTES) + PARAM_SHOW_NOTES.length();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String title \u003d input.substring(lastIndexOfShowNotesCommand).trim();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new ShowNotesCommand(title);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Parses the deleteNotes command that the user inputs."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return ShowNotesCommand with the parameters input by the user."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private Command parseDeleteNotesCommand(String input) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing deleteNotes command...\");"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int lastIndexOfDeleteNotesCommand \u003d input.indexOf(PARAM_DELETE_NOTES) + PARAM_DELETE_NOTES.length();"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String title \u003d input.substring(lastIndexOfDeleteNotesCommand).trim();"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return new DeleteNotesCommand(title);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Parses the editNotes command that the user inputs."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return ShowNotesCommand with the parameters input by the user."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private Command parseEditNotesCommand(String input) {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing editNotes command...\");"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int lastIndexOfEditNotesCommand \u003d input.indexOf(PARAM_EDIT_NOTES) + PARAM_EDIT_NOTES.length();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String title \u003d input.substring(lastIndexOfEditNotesCommand).trim();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return new EditNotesCommand(title);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the display command that the user inputs."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return DisplayScheduleCommand with the parameters input by the user."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private Command parseDisplayScheduleCommand(Ui ui, String input) throws ParserException {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing display command...\");"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfDisplayScheduleCommand \u003d input.indexOf(PARAM_DISPLAY) + PARAM_DISPLAY.length();"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String displayKeyword \u003d input.substring(lastIndexOfDisplayScheduleCommand).trim();"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (displayKeyword.isEmpty()) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.WARNING, \"Missing parameter, proceed to prompt\");"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            displayKeyword \u003d handleMissingDisplayParam(ui);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (isValidDisplayParam(displayKeyword)) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return new DisplayScheduleCommand(displayKeyword);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.SEVERE, \"Error determining undo command type\");"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            throw new ParserException();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private String handleMissingDisplayParam(Ui ui) {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        boolean isValidField \u003d false;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        while (!isValidField) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showEnterDisplayKeywordPrompt();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            userInput \u003d ui.readCommand();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (isValidDisplayParam(userInput)) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                isValidField \u003d true;"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                ui.showInvalidDisplayKeywordError();"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private boolean isValidDisplayParam(String userInput) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return userInput.equals(\"week\") || userInput.equals(\"today\") || userInput.equals(\"tomorrow\");"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Parses the undo command that the user inputs."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Either UndoNoteCommand or UndoTaskCommand depending on the parsed parameter."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Command parseUndoCommand(String input) throws ParserException {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Parsing undo command...\");"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String undoType;"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String[] splitInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            undoType \u003d splitInput[1];"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Missing parameter, proceed to prompt\");"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            undoType \u003d handleMissingUndoParam(ui);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        switch (undoType) {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case PARAM_TASK:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return new UndoTaskCommand();"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case PARAM_NOTE:"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return new UndoNoteCommand();"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Error determining undo command type\");"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throw new ParserException();"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String handleMissingUndoParam(Ui ui) {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        boolean isValidField \u003d false;"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        while (!isValidField) {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showEnterUndoTypePrompt();"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            userInput \u003d ui.readCommand();"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            if (userInput.equals(PARAM_TASK) || userInput.equals(PARAM_NOTE)) {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                isValidField \u003d true;"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showInvalidUndoTypeError();"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Parses the user T/D inputs."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A \"T\" or \"D\" string."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String parseUserInputTOrD(String input, Ui ui) {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start check for T/D input\");"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (!input.trim().equals(\"T\") \u0026\u0026 !input.trim().equals(\"D\")) {"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInvalidTitleDescriptionConfirmationPrompt();"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End check for T/D input\");"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Checks for an empty string and prompts the user if empty."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param string The string to be checked."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A non-empty string."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String checkIfEmpty(Ui ui, String string) {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start check for empty string\");"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (string.trim().length() \u003d\u003d 0) {     // empty string"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showEmptyDescriptionError();"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            string \u003d ui.readCommand();"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End check for empty string\");"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return string;"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Checks the condition of whether the input is empty."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input The string to be checked."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param index1 The starting index."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param index2 The ending index."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param factor Status of the factor."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A non-empty string."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isMissingDescription(String input, int index1, int index2, boolean factor) {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input.substring(index1, index2).trim().length() \u003d\u003d 0 \u0026\u0026 factor;"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Reset all boolean variables to true."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private void resetBoolean() {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isParametersEmpty \u003d true;"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isModuleCodeEmpty \u003d true;"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isDescriptionEmpty \u003d true;"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isDateEmpty \u003d true;"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isStartTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isEndTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isDateTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        isRecurrencesEmpty \u003d true;"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Checks the addLesson input for missing parameters."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing user\u0027s input."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return An enumeration of the missing parameter."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private MissingParam checkMissingLessonParameters(String input) {"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (!input.contains(PARAM_REPEATS) \u0026\u0026 isRecurrencesEmpty) {"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            return MissingParam.RECURRENCES;"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else if (!input.contains(PARAM_TO) \u0026\u0026 isEndTimeEmpty) {"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.END_TIME;"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } else if (!input.contains(PARAM_FROM) \u0026\u0026 isStartTimeEmpty) {"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.START_TIME;"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else if (!input.contains(PARAM_DATE) \u0026\u0026 isDateEmpty) {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.DATE;"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else if (!input.contains(PARAM_CODE) \u0026\u0026 isModuleCodeEmpty) {"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.MODULE_CODE;"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.COMPLETED;"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Checks the addEvent input for missing parameters."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return An enumeration of the missing parameter."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private MissingParam checkMissingEventParameters(String input) {"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int lastIndexOfAddEventCommand \u003d input.indexOf(PARAM_ADD_EVENT) + PARAM_ADD_EVENT.length();"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int firstIndexOfDateCommand \u003d input.indexOf(PARAM_DATE);"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (!input.contains(PARAM_REPEATS) \u0026\u0026 isRecurrencesEmpty) {"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            return MissingParam.RECURRENCES;"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else if (!input.contains(PARAM_TO) \u0026\u0026 isEndTimeEmpty) {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.END_TIME;"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } else if (!input.contains(PARAM_FROM) \u0026\u0026 isStartTimeEmpty) {"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.START_TIME;"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else if (!input.contains(PARAM_DATE) \u0026\u0026 isDateEmpty) {"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.DATE;"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else if (isMissingDescription(input, lastIndexOfAddEventCommand, firstIndexOfDateCommand,"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDescriptionEmpty)) {"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.DESCRIPTION;"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.COMPLETED;"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Checks the addDeadline input for missing parameters."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return An enumeration of the missing parameter."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private MissingParam checkMissingDeadlineParameters(String input) {"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int lastIndexOfAddDeadlineCommand \u003d input.indexOf(PARAM_ADD_DEADLINE) + PARAM_ADD_DEADLINE.length();"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int firstIndexOfByCommand \u003d input.indexOf(PARAM_BY);"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (!input.contains(PARAM_REPEATS) \u0026\u0026 isRecurrencesEmpty) {"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            return MissingParam.RECURRENCES;"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else if (!input.contains(PARAM_BY) \u0026\u0026 isDateTimeEmpty) {"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.END_TIME;"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else if (isMissingDescription(input, lastIndexOfAddDeadlineCommand, firstIndexOfByCommand,"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDescriptionEmpty)) {"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.DESCRIPTION;"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.COMPLETED;"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    "
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Checks if the end time for Lessons and Events inputted by user is 24:00"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * and adjust it to become 23:59."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param endTimeString String containing the end time from user\u0027s input."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @return A string with the corrected end time."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private String checkForMidnightEndTime(String endTimeString) {"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (endTimeString.equals(\"24:00\")) {"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return \"23:59\";"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return endTimeString;"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Adds the event description to the string."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A string with description added."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String addEventDescriptionParam(Ui ui, String input) {"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding Event description to string.\");"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showAddDescriptionPrompt();"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String description \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String[] temp \u003d input.split(PARAM_DATE);"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        input \u003d temp[0] + description + \" \" + PARAM_DATE + temp[1];"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of adding Event description to string.\");"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Adds the deadline description to the string."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A string with description added."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String addDeadlineDescriptionParam(Ui ui, String input) {"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding Deadline description to string.\");"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showAddDescriptionPrompt();"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String description \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String[] temp \u003d input.split(PARAM_BY);"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        input \u003d temp[0] + description + \" \" + PARAM_BY + temp[1];"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of adding Deadline description to string.\");"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Adds the module code to the string."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A string with module code added."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String addModuleCodeParam(Ui ui, String input) {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding Module Code to string.\");"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showAddModuleCodePrompt();"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String moduleCode \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!checkIfValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            moduleCode \u003d getValidModuleCode(ui);"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String[] temp \u003d input.split(PARAM_DATE);"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        input \u003d temp[0] + PARAM_CODE + moduleCode + \" \" + PARAM_DATE + temp[1];"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of adding Module Code to string.\");"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Adds the date to the string."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A string with date added."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String addDateParam(Ui ui, String input) {"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding Date to string.\");"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showAddDatePrompt();"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String date \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String[] temp1 \u003d input.split(PARAM_FROM);"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        input \u003d temp1[0] + PARAM_DATE + \" \" + date + \" \"  + PARAM_FROM + temp1[1];"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of adding Date to string.\");"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Adds the start time to the string."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A string with start time added."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String addStartTimeParam(Ui ui, String input) {"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding Start Time to string.\");"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showAddStartTimePrompt();"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String startTime \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String[] temp2 \u003d input.split(PARAM_TO);"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        input \u003d temp2[0] + PARAM_FROM + \" \" + startTime + \" \" + PARAM_TO + temp2[1];"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of adding Start Time to string.\");"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Adds the end time to the string."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A string with end time added."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String addEndTimeParam(Ui ui, String input) {"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding End Time to string.\");"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showAddEndTimePrompt();"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String endTime \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String[] temp3 \u003d input.split(PARAM_REPEATS);"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        input \u003d temp3[0] + \" \" + PARAM_TO + \" \" + endTime + PARAM_REPEATS + temp3[1];"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of adding End Time to string.\");"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Adds the recurrences to the string."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return String with the recurrences added."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String addRecurrencesParam(Ui ui, String input) {"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding recurrences to string.)\");"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showAddRecurrencesPrompt();"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String recurrences \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        input \u003d input + \" \" + PARAM_REPEATS + \" \" + recurrences;"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"End of adding recurrences to string.)\");"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Adds the date and time to the string."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A string with date and time added."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String addByDateTime(Ui ui, String input) {"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding By Time to string.\");"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showAddDateTimePrompt();"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String byDateTime \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String[] temp4 \u003d input.split(PARAM_REPEATS);"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        input \u003d temp4[0] + \" \" + PARAM_BY + \" \" + byDateTime + \" \" + PARAM_REPEATS + temp4[1];"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of adding By Time to string.\");"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String fillIfEmptyParam(Ui ui, String input, String param) {"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showEmptyParamPrompt(param);"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check for valid module code"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (param.equals(PARAM_CODE)) {"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (!checkIfValidModuleCode(input)) {"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                input \u003d getValidModuleCode(ui);"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public int checkIfValidNumber(Ui ui, String input) {"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        while (isNotNumeric(input) || Integer.parseInt(input) \u003c 0) {"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showRecurrencesNumberFormatPrompt();"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return Integer.parseInt(input);"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public int checkIfValidInput(Ui ui, String input) {"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        while (isNotNumeric(input)) {"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return Integer.parseInt(input);"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private boolean isNotNumeric(String input) {"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            int number \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Checks if the input module code is in a valid format."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param moduleCode The module code to be checked."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return true if the module code is determined to be valid."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public boolean checkIfValidModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Starting module code verification for: \" + moduleCode);"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        moduleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        char[] moduleCodeElements \u003d moduleCode.toCharArray();"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check if input for module code is within valid length of 8"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (moduleCodeElements.length \u003e MAXIMUM_CODE_LENGTH || moduleCodeElements.length \u003c MINIMUM_CODE_LENGTH) {"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Invalid module code length\");"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int consecutiveLetterCount \u003d getConsecutiveLetterCount(moduleCodeElements);"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (consecutiveLetterCount \u003c 2 || consecutiveLetterCount \u003e 3) {"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Invalid prefix length\");"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int consecutiveNumberCount \u003d getConsecutiveNumberCount(moduleCodeElements, consecutiveLetterCount);"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (consecutiveNumberCount !\u003d 4) {"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Invalid numeric code length\");"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Checking for existence of postfix"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int totalCharacterCount \u003d consecutiveLetterCount + consecutiveNumberCount;"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        boolean isFinalLength \u003d totalCharacterCount \u003d\u003d moduleCodeElements.length;"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (isFinalLength) {"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Check done - Valid module code\");"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Possible postfix, check for valid postfix"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int numberOfPostfixCharacters \u003d moduleCodeElements.length - totalCharacterCount;"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (numberOfPostfixCharacters \u003e MAXIMUM_SUFFIX_CHARACTER) {"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Invalid postfix length\");"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Checking for module postfix letter\");"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int lastIndex \u003d moduleCodeElements.length - 1;"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (Character.isLetter(moduleCodeElements[lastIndex])) {"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Check done - Valid module code\");"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Invalid module code postfix\");"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Counts the number of consecutive numbers for the module code."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param moduleCodeElements Array of characters from module code."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param letterCount Starting index from the number of prefix characters."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return The number of consecutive numbers."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected int getConsecutiveNumberCount(char[] moduleCodeElements, int letterCount) {"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assert letterCount !\u003d 0 : \"LetterCount should not be 0 at this state\";"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Start numeric code count\");"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int numberCount \u003d 0;"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (int i \u003d letterCount; i \u003c moduleCodeElements.length; i++) {"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (Character.isDigit(moduleCodeElements[i])) {"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                numberCount++;"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return numberCount;"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Counts the number of consecutive letters for the module code prefix within the first 4 elements of array."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param moduleCodeElements Array of characters from module code."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return The number of consecutive letters."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected int getConsecutiveLetterCount(char[] moduleCodeElements) {"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Start prefix letter count\");"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int letterCount \u003d 0;"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (int i \u003d 0; i \u003c 4; i++) {"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (Character.isLetter(moduleCodeElements[i])) {"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                letterCount++;"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return letterCount;"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Repeatedly prompts for valid module code until a valid one is input."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Valid module code."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getValidModuleCode(Ui ui) {"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        boolean isModuleCodeValid \u003d false;"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        while (!isModuleCodeValid) {"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showInvalidModuleCodePrompt();"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            moduleCode \u003d ui.readCommand();"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            isModuleCodeValid \u003d checkIfValidModuleCode(moduleCode);"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void checkValidIndexOfParameter(int userInput) {"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        if (userInput !\u003d 1 \u0026\u0026 userInput !\u003d 2) {"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public int parseValidUserInputForParameterEdit(Ui ui) {"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int userParamChoice;"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                userParamChoice \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                checkValidIndexOfParameter(userParamChoice);"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                ui.showIndexOutOfBoundsMessage();"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return userParamChoice;"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public int parseUserInputForEditTaskChoice(Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                int newIndex \u003d checkIfValidInput(ui, ui.readCommand());"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                tasks.checkForIndexOutOfBounds(newIndex);"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                return newIndex;"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                ui.showIndexOutOfBoundsMessage();"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime[] parseUserInputForEditDateTime(Ui ui, int numOfTimeArgs) {"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        LocalDateTime[] times;"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                times \u003d parseNewTimeInput(ui, ui.readCommand(), numOfTimeArgs);"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                logger.log(Level.SEVERE, \"Time input is not in the correct format\");"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                if (numOfTimeArgs \u003d\u003d 1) {"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                    ui.showInvalidInputToEditDeadlineTime();"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                    ui.showInvalidInputToEditTime();"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            } catch (ParserException e) {"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                if (numOfTimeArgs \u003d\u003d 1) {"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                    ui.showInvalidInputToEditDeadlineTime();"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                    ui.showInvalidInputToEditTime();"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            return times;"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the user\u0027s input into a Command object that can later be executed."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return Command that the user inputs."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Command parseCommand(String input, Ui ui) throws ParserException {"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing user input for command...\");"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            String commandType \u003d getCommandType(input);"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_ADD_LESSON):"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                return parseAddLessonCommand(ui, input);"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_ADD_EVENT):"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                return parseAddEventCommand(ui, input);"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_ADD_DEADLINE):"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                return parseAddDeadlineCommand(ui, input);"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_ADD_NOTES):"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return parseAddNotesCommand(input);"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_SHOW_NOTES):"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return parseShowNotesCommand(input);"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case (PARAM_DELETE_NOTES):"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                return parseDeleteNotesCommand(input);"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case(PARAM_EDIT_NOTES):"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                return parseEditNotesCommand(input);"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_DISPLAY):"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                return parseDisplayScheduleCommand(ui, input);"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_HELP):"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_FREE_TIME):"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return new FreeTimeCommand();"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_SLEEP_TIME):"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return new SleepTimeCommand();"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case (PARAM_ARCHIVE):"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                return new ArchiveCommand();"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_EXIT):"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            case (PARAM_EDIT_LESSON):"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                return parseEditLessonCommand(input);"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            case (PARAM_EDIT_EVENT):"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                return parseEditEventCommand(input);"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            case (PARAM_EDIT_DEADLINE):"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                return parseEditDeadlineCommand(input);"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            case (PARAM_DELETE_TASK):"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                return parseDeleteTaskCommand(input);"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case (PARAM_UNDO):"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                return parseUndoCommand(input);"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                logger.log(Level.SEVERE, \"User input command is invalid\");"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                throw new ParserException();"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            resetBoolean();"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"User input command is invalid\");"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showParseIncorrectCommandFormatError();"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            resetBoolean();"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Time input is invalid\");"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showParseIncorrectDateTimeError();"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            resetBoolean();"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"/repeats input is an invalid number\");"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNumberFormatError();"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new InvalidCommand();"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 250,
      "daniellimzj": 302,
      "EdmundEXE": 416,
      "dojh111": 181,
      "johan9se": 55
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/parser/ParserException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class ParserException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/FileArchive.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * Handles file archiving in LifEasier."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class FileArchive {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(NoteStorage.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String NOTE_SEPARATOR \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            \"-------------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public FileArchive(NoteList notes, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates new archive save file in archive directory and clears notes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param archiveFilePath File path to the save directory."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void handleDataArchiving(String archiveFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cNote\u003e notesList \u003d notes.getNotes();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Boolean isNotesEmpty \u003d checkForEmptyNotes(notesList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Check notes empty status: isNotesEmpty\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (isNotesEmpty) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showNoDataToArchiveMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Notes empty\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Notes not empty\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File archiveDirectory \u003d new File(archiveFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assert archiveDirectory.exists() : \"Archive directory must exist\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String archiveSaveFilePath \u003d archiveFilePath + getCurrentDateTime() + \"Archive.txt\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File archiveSave \u003d new File(archiveSaveFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createArchiveSaveFile(archiveSave);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            writeDataToArchiveSaveFile(archiveSaveFilePath, notesList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            clearNoteList(notesList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileArchiveError();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showArchiveEndMessage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showArchiveEndInformationMessage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Finish archiving process\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Handles writing all data from current note list onto archive save file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param archiveSaveFilePath File path of where to save archive data."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param notesList ArrayList of notes to be archived."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws IOException When an error is encountered writing to the archive file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void writeDataToArchiveSaveFile(String archiveSaveFilePath, ArrayList\u003cNote\u003e notesList)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(archiveSaveFilePath, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assert notesList.size() \u003e 0 : \"NotesList cannot be empty when archiving\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Start archive file write\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (Note note : notesList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String noteTitle \u003d getNoteTitle(note);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String noteBody \u003d getNoteBody(note);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(NOTE_SEPARATOR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(noteTitle);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(noteBody);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(NOTE_SEPARATOR);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Archive written for: \" + noteTitle);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"End archive file write\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String getNoteBody(Note note) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return note.getDescription().trim() + System.lineSeparator();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String getNoteTitle(Note note) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return note.getTitle().trim() + System.lineSeparator();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates a new archive save file if one does not exist yet."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param archiveSave Current file path of the archive save file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws IOException When an error is encountered writing to the archive file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void createArchiveSaveFile(File archiveSave) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new save if none exist"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!archiveSave.exists()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Creating new archive save\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (!archiveSave.createNewFile()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.WARNING, \"Archive save file creation failed\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Archive save created\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected Boolean checkForEmptyNotes(ArrayList\u003cNote\u003e notesList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return notesList.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Gets the current date and time and formats it for return."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Formatted date time string."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String getCurrentDateTime() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String formattedDateTime \u003d currentDateTime.format(FileCommand.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return formattedDateTime.replaceAll(\" \", \"T\").replace(\":\", \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Removes all notes from the current noteList after archiving."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param notesList ArrayList where all notes are to be removed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void clearNoteList(ArrayList\u003cNote\u003e notesList) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Clearing notes\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notesList.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 2,
      "dojh111": 140
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/FileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The FileCommand class will house similar commands used by both NoteStorage and TaskStorage classes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class FileCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yy HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"31-12-99 00:00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TIME_DELIMITER \u003d \"T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String WHITE_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String SAVE_DELIMITER \u003d \"\u003d-\u003d\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(FileCommand.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public FileCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Clears all data from the specified save file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param filePath File path to which file to clear information."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void clearSaveFile(String filePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Clearing save file\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileClear \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileClear.write(BLANK_STRING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileClear.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileWriteError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Error encountered clearing save file\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Save file cleared\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Converts the saved raw string text in the save file into LocalDateTime objects."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param dateTimeInformation String which is to be parsed into LocalDateTime object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Input string parsed into LocalDateTime object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public LocalDateTime convertToLocalDateTime(String dateTimeInformation) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime taskDateTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            dateTimeInformation \u003d dateTimeInformation.replace(TIME_DELIMITER, WHITE_SPACE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskDateTime \u003d LocalDateTime.parse(dateTimeInformation, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showParseIncorrectDateTimeError();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Error encountered parsing LocalDateTime from save file\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Set as default time"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskDateTime \u003d LocalDateTime.parse(DEFAULT_DATETIME, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assert taskDateTime !\u003d null : \"taskDateTime must never be null\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskDateTime;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Counts the number of save delimiters found in the read save file line."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param string String with which to count the number of save delimiters."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param baseDelimiterCount Base value to compare with."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return true when the count in given string matches baseDelimiterCount."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public boolean checkForDelimiterCount(String string, int baseDelimiterCount) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        boolean isStillContainingDelimiter;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int delimiterCount \u003d 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            isStillContainingDelimiter \u003d string.contains(SAVE_DELIMITER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (isStillContainingDelimiter) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                delimiterCount++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                string \u003d string.replaceFirst(SAVE_DELIMITER, BLANK_STRING);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } while (isStillContainingDelimiter);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return delimiterCount \u003d\u003d baseDelimiterCount;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 2,
      "dojh111": 97,
      "johan9se": 1
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/FileStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The FileStorage class is the main entry point to actions related to the reading, writing and creation of the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * LifEasier save files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class FileStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String DIRECTORY_PATH \u003d \"LifEasierSaves/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String ARCHIVE_PATH \u003d DIRECTORY_PATH + \"Archives/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(FileStorage.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String filePathTasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String filePathNotes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteStorage noteStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskStorage taskStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileArchive fileArchive;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteHistory noteHistory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public FileStorage(String fileNameTasks, String fileNameNotes, Ui ui, NoteList notes, TaskList tasks,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            NoteHistory noteHistory) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.filePathTasks \u003d DIRECTORY_PATH + fileNameTasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.filePathNotes \u003d DIRECTORY_PATH + fileNameNotes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.noteStorage \u003d new NoteStorage(notes, filePathNotes);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.taskStorage \u003d new TaskStorage(tasks, filePathTasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileArchive \u003d new FileArchive(notes, ui);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.noteHistory \u003d noteHistory;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Acts as main entry point into data archiving for LifEasier."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void archiveData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File archiveDirectory \u003d new File(ARCHIVE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showArchiveStartMessage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Start archiving process\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create archive directory if non existent"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!directoryExists(archiveDirectory)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNewDirectory(archiveDirectory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileArchive.handleDataArchiving(ARCHIVE_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Clear notes save file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileCommand.clearSaveFile(filePathNotes);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteHistory.clearNoteHistory();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Reads and loads the stored information on the save file. If save files are missing, the method will create a new"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * save file and directory."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void readSaveFiles() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File saveFileTasks \u003d new File(filePathTasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File saveFileNotes \u003d new File(filePathNotes);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Start processing read saves\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showDataLoadingMessage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check if both saves present. If they are, proceed to read data, else determine which saves to create"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!checkIfBothFilesExists(saveFileTasks, saveFileNotes)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save files missing, create save files\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNewSaves(saveFileTasks, saveFileNotes);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assert checkIfBothFilesExists(saveFileTasks, saveFileNotes) : \"Both saves are supposed to exist\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save files found, read save files\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            noteStorage.readNotesSave();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.readTasksSave();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Startup file read end\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Checks if both save files exist."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileTasks File object with file path to the save file which contains saved task information."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileNotes File object with file path to the save file which contains saved note information."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return True when both files exist."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private boolean checkIfBothFilesExists(File saveFileTasks, File saveFileNotes) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return saveFileTasks.exists() \u0026\u0026 saveFileNotes.exists();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Handles the creation of new save directories and save files."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileTasks File object with file path to the save file which contains saved task information."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileNotes File object with file path to the save file which contains saved note information."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void createNewSaves(File saveFileTasks, File saveFileNotes) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File fileDirectory \u003d new File(DIRECTORY_PATH);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (directoryExists(fileDirectory)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Directory exists, check individual save files and create the missing files."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save directory found\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            handleExistingSaveDirectory(saveFileTasks, saveFileNotes);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assert !directoryExists(fileDirectory) : \"Directory should not exist\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Directory missing, create new directory"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save directory missing, proceed to create\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            handleMissingSaveDirectory(fileDirectory, saveFileTasks, saveFileNotes);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Determines which save files exist and which do not when the save directory exists."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileTasks File object with file path to the save file which contains saved task information."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileNotes File object with file path to the save file which contains saved note information."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void handleExistingSaveDirectory(File saveFileTasks, File saveFileNotes) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        checkForTasksSaveFile(saveFileTasks);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        checkForNotesSaveFile(saveFileNotes);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Checks if the notes save file exists and creates the save file if it is missing."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileNotes File object with file path to the save file which contains saved note information."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void checkForNotesSaveFile(File saveFileNotes) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Checking for notes save file\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new save file if task save file does not exist"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!saveFileNotes.exists()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNewSaveFile(saveFileNotes);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Read note save file"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteStorage.readNotesSave();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Checks if the tasks save file exists and creates the save file if it is missing."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileTasks File object with file path to the save file which contains saved task information."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void checkForTasksSaveFile(File saveFileTasks) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Checking for task save file\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new notes save file if notes save file does not exist"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!saveFileTasks.exists()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNewSaveFile(saveFileTasks);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Read task save file"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskStorage.readTasksSave();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private boolean directoryExists(File fileDirectory) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return fileDirectory.exists();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates the missing save directory and the save files for use."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param fileDirectory File object with the save directory path."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileTasks File object with file path to the save file which contains saved task information."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileNotes File object with file path to the save file which contains saved note information."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void handleMissingSaveDirectory(File fileDirectory, File saveFileTasks, File saveFileNotes) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Attempt creation of new save directory to hold save files"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Creating save directory\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (createNewDirectory(fileDirectory)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                createNewSaveFile(saveFileTasks);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                createNewSaveFile(saveFileNotes);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showDirectoryCreationFailedError();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Save directory creation failed\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private boolean createNewDirectory(File fileDirectory) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return fileDirectory.mkdir();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates a save file depending on the file path passed."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFile File object containing the file path of the save file that is to be created."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void createNewSaveFile(File saveFile) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Creating save file\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            saveFile.createNewFile();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save file created\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileCreationError();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Save file creation failed\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Saves all notes in the current task list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void saveNote() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteStorage.writeToNoteSaveFile();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Saves all tasks in the current task list."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void saveTasks() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskStorage.writeToTaskSaveFile();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 2,
      "dojh111": 226
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/NoteStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.SaveDelimiterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The NoteStorage class handles the reading and writing of the save file for notes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class NoteStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(NoteStorage.class.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String SAVE_DELIMITER \u003d \"\u003d-\u003d\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String filePathNotes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public NoteStorage(NoteList notes, String filePathNotes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.filePathNotes \u003d filePathNotes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Handles reading saved note information."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void readNotesSave() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Read Notes save file start\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File saveFile \u003d new File(filePathNotes);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assert saveFile.exists() : \"Save file is supposed to exist\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNoteList(fileScanner);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileReadError();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Encountered error reading Notes save file\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Read Notes save file end\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Reads and adds all saved notes in the save file back into program."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param fileScanner Scanner object to read file information."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void createNoteList(Scanner fileScanner) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Rebuilding notes from save\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String noteInformation \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (!fileCommand.checkForDelimiterCount(noteInformation, 1)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    throw new SaveDelimiterException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String[] noteComponents \u003d noteInformation.split(SAVE_DELIMITER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String noteTitle \u003d noteComponents[0];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String noteDescription \u003d noteComponents[1];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (noteTitle.equals(BLANK_STRING)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                notes.add(new Note(noteTitle, noteDescription));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.INFO, \"New Note added: \" + noteTitle);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showSaveDataMissingError();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showReadErrorHandlerError();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.SEVERE, \"Missing data from save file\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (SaveDelimiterException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showSaveDelimiterError();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showReadErrorHandlerError();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.SEVERE, \"Detected additional/missing save delimiters\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Notes rebuilt\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Writes information from the notes onto the notes save file for storage when there is a change to the notes."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void writeToNoteSaveFile() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Write to Notes save start\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePathNotes, true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(filePathNotes);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ArrayList\u003cNote\u003e noteList \u003d notes.getNotes();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Append note information into save file for notes"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            for (Note note : noteList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String noteToSave \u003d convertNoteToString(note);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fileWriter.write(noteToSave);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.INFO, \"New Note saved\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileWriteError();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Unable to write to notes save file\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Write to Notes save end\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Converts the raw information from a note object into a save format in plain text."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param note Note object which data is to be converted into a save format."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return String data in the save format."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String convertNoteToString(Note note) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return note.getTitle().trim() + SAVE_DELIMITER + note.getDescription().trim() + System.lineSeparator();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 2,
      "dojh111": 137
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/StorageException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class StorageException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/TaskStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Lesson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.SaveDelimiterException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The TaskStorage class handles the reading and writing of the save file for tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class TaskStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(TaskStorage.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String SAVE_DELIMITER \u003d \"\u003d-\u003d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEFAULT_DATA \u003d \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String filePathTasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public TaskStorage(TaskList tasks, String filePathTasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.filePathTasks \u003d filePathTasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Handles saved task information."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void readTasksSave() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Read Tasks save file start\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File saveFile \u003d new File(filePathTasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assert saveFile.exists() : \"Save file is supposed to exist\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createTaskList(fileScanner);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileReadError();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Encountered error reading Tasks save file\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Read Tasks save file end\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Reads and adds all saved task information back into the program."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param fileScanner Scanner object to read file information."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void createTaskList(Scanner fileScanner) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Rebuilding tasks list from save file\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskInformation \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String[] taskComponents \u003d taskInformation.split(SAVE_DELIMITER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                checkForMissingDataInSave(taskComponents, taskInformation);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskType \u003d taskComponents[0];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskDescription \u003d taskComponents[1];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    rebuildDeadline(taskComponents, taskList, taskDescription);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    rebuildEvent(taskComponents, taskList, taskDescription);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"lesson\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    rebuildLesson(taskComponents, taskList, taskDescription);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    throw new StorageException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.INFO, \"Rebuilt task: \" + taskType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showSaveDataMissingError();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showReadErrorHandlerError();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.WARNING, \"Missing data from save file\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showIndeterminableRecurrenceError();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showReadErrorHandlerError();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.WARNING, \"Unable to read recurrence field\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (StorageException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showIndeterminableTaskError();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.SEVERE, \"Read task type failed\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (SaveDelimiterException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showSaveDelimiterError();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showReadErrorHandlerError();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.SEVERE, \"Detected additional/missing save delimiters\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Checks for missing information in each line of saved data read, as well as the number of delimiters."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskComponents String array of read save data after separator has been removed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException When data is missing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void checkForMissingDataInSave(String[] taskComponents, String taskInformation)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws ArrayIndexOutOfBoundsException, StorageException, SaveDelimiterException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (String information : taskComponents) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (information.equals(BLANK_STRING)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        boolean isValidSaveDelimiter;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String taskType \u003d taskComponents[0];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            isValidSaveDelimiter \u003d fileCommand.checkForDelimiterCount(taskInformation, 3);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Fallthrough to lesson"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        case \"lesson\":"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            isValidSaveDelimiter \u003d fileCommand.checkForDelimiterCount(taskInformation, 4);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throw new StorageException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!isValidSaveDelimiter) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throw new SaveDelimiterException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates a new lesson object based on the save data read and adds it into the program."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskComponents String array of read save data after separator has been removed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskList List of tasks which the created object will be added into."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException When data is missing."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void rebuildLesson(String[] taskComponents, ArrayList\u003cTask\u003e taskList, String description)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws ArrayIndexOutOfBoundsException, NumberFormatException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime lessonStartTime \u003d fileCommand.convertToLocalDateTime(taskComponents[2]);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime lessonEndTime \u003d fileCommand.convertToLocalDateTime(taskComponents[3]);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int recurrence \u003d Integer.parseInt(taskComponents[4]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new event in tasks"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.add(new Lesson(description, lessonStartTime, lessonEndTime, recurrence));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates a new lesson object based on the save data read and adds it into the program."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskComponents String array of read save data after separator has been removed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskList List of tasks which the created object will be added into."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException When data is missing."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void rebuildEvent(String[] taskComponents, ArrayList\u003cTask\u003e taskList, String description)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws ArrayIndexOutOfBoundsException, NumberFormatException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime eventStartTime \u003d fileCommand.convertToLocalDateTime(taskComponents[2]);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime eventEndTime \u003d fileCommand.convertToLocalDateTime(taskComponents[3]);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int recurrence \u003d Integer.parseInt(taskComponents[4]);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new event in tasks"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.add(new Event(description, eventStartTime, eventEndTime, recurrence));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates a new lesson object based on the save data read and adds it into the program."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskComponents String array of read save data after separator has been removed."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskList List of tasks which the created object will be added into."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException When data is missing."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void rebuildDeadline(String[] taskComponents, ArrayList\u003cTask\u003e taskList, String description)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws ArrayIndexOutOfBoundsException, NumberFormatException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime deadlineTimeInfo \u003d fileCommand.convertToLocalDateTime(taskComponents[2]);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        int recurrence \u003d Integer.parseInt(taskComponents[3]);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new deadline in tasks"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.add(new Deadline(description, deadlineTimeInfo, recurrence));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Writes information of TaskList onto the save file for storage whenever there is a change."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void writeToTaskSaveFile() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePathTasks, true);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(filePathTasks);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String dataToSave;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Append each tasks information into save file for tasks"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskType \u003d task.getType();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                int recurrence \u003d task.getRecurrences();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    dataToSave \u003d convertDeadlineToString(task, taskType, recurrence);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    dataToSave \u003d convertEventToString(task, taskType, recurrence);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"lesson\":"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    dataToSave \u003d convertLessonToString(task, taskType, recurrence);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    dataToSave \u003d DEFAULT_DATA;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    fileWriter.write(dataToSave);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    throw new StorageException();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fileWriter.write(dataToSave);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.INFO, \"Write task to save: \" + taskType);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileWriteError();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Unable to write to save file\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showInvalidCastError();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Wrong class type passed, unable to cast\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showIndeterminableTaskError();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Read task type failed\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Converts a lesson object into a save format."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param task Task object to be converted into a save format."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskType The type of task being converted."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Formatted string in the save format."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws ClassCastException When the wrong class type is passed in and cannot be casted correctly."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String convertLessonToString(Task task, String taskType, int recurrence) throws ClassCastException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Lesson lesson \u003d (Lesson) task;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskType + SAVE_DELIMITER + task.getDescription() + SAVE_DELIMITER"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + lesson.getStart().format(FileCommand.DATE_TIME_FORMATTER) + SAVE_DELIMITER"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + lesson.getEnd().format(FileCommand.DATE_TIME_FORMATTER) + SAVE_DELIMITER + recurrence"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Converts an event object into a save format."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param task Task object to be converted into a save format."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskType The type of task being converted."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Formatted string in the save format."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws ClassCastException When the wrong class type is passed in and cannot be casted correctly."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String convertEventToString(Task task, String taskType, int recurrence) throws ClassCastException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskType + SAVE_DELIMITER + task.getDescription() + SAVE_DELIMITER"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + event.getStart().format(FileCommand.DATE_TIME_FORMATTER) + SAVE_DELIMITER"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + event.getEnd().format(FileCommand.DATE_TIME_FORMATTER) + SAVE_DELIMITER + recurrence"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Converts a deadline object into a save format."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param task Task object to be converted into a save format."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskType The type of task being converted."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Formatted string in the save format."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws ClassCastException When the wrong class type is passed in and cannot be casted correctly."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String convertDeadlineToString(Task task, String taskType, int recurrence) throws ClassCastException {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskType + SAVE_DELIMITER + task.getDescription() + SAVE_DELIMITER"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + deadline.getBy().format(FileCommand.DATE_TIME_FORMATTER) + SAVE_DELIMITER + recurrence"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 9,
      "dojh111": 290
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/ui/SaveDelimiterException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class SaveDelimiterException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/ui/ScheduleUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johan9se"
        },
        "content": "package seedu.lifeasier.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johan9se"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": " * The ScheduleUi class handles all schedule-related displays."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": "public class ScheduleUi {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final TimetableUi timetable \u003d TimetableUi.getInstance();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Displays the home screen to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showHome(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showCurrHourIndicationMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        timetable.showTimetable(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        displayUpcomingDeadlines(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void displayUpcomingDeadlines(TaskList tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalDate dateAfterOneWeek \u003d LocalDate.now().plus(1, ChronoUnit.WEEKS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(\"Here are your upcoming deadlines this week:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int id \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (task instanceof Deadline \u0026\u0026 task.happensAfter(LocalDateTime.now())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    \u0026\u0026 task.isHappeningBefore(dateAfterOneWeek)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                System.out.println(id + \". \" + task.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                id++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (id \u003d\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            System.out.println(\"None\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void displayDaySchedule(LocalDate date, TaskList tasks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        tasks.sort();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            LocalDateTime startDateTime \u003d task.getStart();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            LocalDateTime endDateTime \u003d task.getEnd();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (startDateTime.toLocalDate().equals(date)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                printWithScheduleFormat(task, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void printWithScheduleFormat(Task task, LocalDateTime startDateTime, LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String startDateTimeString \u003d getTimeStamp(startDateTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String endDateTimeString \u003d (endDateTime \u003d\u003d null) ? \"      \" : (\"-\" + getTimeStamp(endDateTime));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(startDateTimeString + endDateTimeString + \"  \" + task.getDescription());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static String getDayOfWeek(LocalDateTime datePointer) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return datePointer.getDayOfWeek().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String getTimeStamp(LocalDateTime timedItem) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return timedItem.toLocalTime().toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getTaskCountForDay(TaskList tasks, LocalDate date) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (task.getStart().toLocalDate().equals(date)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 4,
      "johan9se": 76
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/ui/TimetableUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johan9se"
        },
        "content": "package seedu.lifeasier.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": " * The TimetableUi class handles the displaying of the schedule in a tabulated format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "public class TimetableUi {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String TIME_COLUMN_NAME \u003d \"TIME\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String TIME_FORMAT \u003d \"%02d:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DEFAULT_START_HOUR \u003d 8;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DEFAULT_END_HOUR \u003d 18;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DAYS_COLUMN_COUNT \u003d 7;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int MAX_COLUMN_WIDTH \u003d 15;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String ROW_FORMAT \u003d \"|%-11s| %-15s | %-15s | %-15s | %-15s | %-15s | %-15s | %-15s |\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String ROW_SEPARATOR \u003d \"+-----------+\" + \"-----------------+\".repeat(DAYS_COLUMN_COUNT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static TimetableUi timetableUi \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static ArrayList\u003cString\u003e timetableRows;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private TimetableUi() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        timetableRows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static TimetableUi getInstance() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (timetableUi \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            timetableUi \u003d new TimetableUi();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return timetableUi;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showTimetable(TaskList tasks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        generateTimetable(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalTime currentTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(ROW_SEPARATOR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (String row: timetableRows) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (determineIfCurrentHour(row, currentTime)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                System.out.println(ui.colourTextCyan(row));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                System.out.println(row);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            System.out.println(ROW_SEPARATOR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Fills the timetable with the contents of the TaskList."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void generateTimetable(TaskList tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        timetableRows.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        timetableRows.add(getColumnTitlesString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalTime[] timeRange \u003d getTimetableTimeRange(tasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int firstHour \u003d timeRange[0].getHour();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int lastHour \u003d timeRange[1].getHour();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int currHour \u003d firstHour;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        while (currHour \u003c\u003d lastHour) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            timetableRows.add(generateRowString(currHour, tasks));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            currHour++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Formats and returns the table header with the days of the week,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * starting from the current day."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String getColumnTitlesString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String[] columnTitles \u003d new String[8];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        columnTitles[0] \u003d TIME_COLUMN_NAME;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            LocalDateTime datePointer \u003d LocalDateTime.now().plus(i, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            columnTitles[i + 1] \u003d ScheduleUi.getDayOfWeek(datePointer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return String.format(ROW_FORMAT, (Object[]) columnTitles);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Formats the contents of a table row."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String generateRowString(int hour, TaskList tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String[] rowContents \u003d generateRowContents(hour, tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return String.format(ROW_FORMAT, (Object[]) rowContents);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Returns the contents of each row of the timetable into an array."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Each row represents the tasks that fall within a certain time slot."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String[] generateRowContents(int hour, TaskList tasks) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String[] rowContents \u003d new String[8];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        rowContents[0] \u003d getTimeSlotString(hour);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (int dayIncrement \u003d 0; dayIncrement \u003c 7; dayIncrement++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            LocalDate currDate \u003d todayDate.plus(dayIncrement, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            rowContents[dayIncrement + 1] \u003d getCellString(currDate, hour, tasks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return rowContents;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private String getTimeSlotString(int startHour) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String startHourString \u003d String.format(TIME_FORMAT, startHour);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String endHourString \u003d String.format(TIME_FORMAT, (startHour + 1) % 24);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return startHourString + \"-\" + endHourString;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Returns the contents of each cell of the timetable."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private String getCellString(LocalDate date, int hour, TaskList tasks) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ArrayList\u003cString\u003e cellContents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (!(task instanceof Deadline) \u0026\u0026 task.isHappeningOn(date) \u0026\u0026 task.isWithinTimeSlot(hour)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                cellContents.add(task.getDescription());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return trimToFitTimetableCell(cellContents.toString().replace(\"[\", \"\").replace(\"]\", \"\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String trimToFitTimetableCell(String fullString) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (fullString.length() \u003e MAX_COLUMN_WIDTH) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return fullString.substring(0, MAX_COLUMN_WIDTH - 3) + \"...\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return fullString;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Iterates through the TaskList to determine the earliest and"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * latest time that has a certain Task scheduled, so that the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * timetable can display all Tasks within that range."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public LocalTime[] getTimetableTimeRange(TaskList tasks) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int earliestHour \u003d DEFAULT_START_HOUR;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int latestHour \u003d DEFAULT_END_HOUR;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (int hour \u003d 0; hour \u003c 24; hour++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            for (Task task: tasks.getTaskList()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                if (!(task instanceof Deadline) \u0026\u0026 task.isWithinTimeSlot(hour)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    int currTaskStartHour \u003d task.getStart().toLocalTime().getHour();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    int currTaskEndHour \u003d task.getEnd().toLocalTime().getHour();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    earliestHour \u003d getEarlierTime(earliestHour, currTaskStartHour, currTaskEndHour);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    latestHour \u003d getLaterTime(latestHour, currTaskStartHour, currTaskEndHour);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalTime earliestTime \u003d LocalTime.parse(String.format(TIME_FORMAT, earliestHour));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalTime latestTime \u003d LocalTime.parse(String.format(TIME_FORMAT, latestHour));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return new LocalTime[] {earliestTime, latestTime};"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getEarlierTime(int referenceHour, int taskStartHour, int taskEndHour) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return Math.min(Math.min(referenceHour, taskStartHour),Math.min(referenceHour, taskEndHour));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getLaterTime(int referenceHour, int taskStartHour, int taskEndHour) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return Math.max(Math.max(referenceHour, taskStartHour),Math.max(referenceHour, taskEndHour));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Determines if the current time falls within the current time slot in the time table."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param row String with information of current row."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param currentTime Current time from LocalTime object."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return true when current time falls within the timetable slot."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private boolean determineIfCurrentHour(String row, LocalTime currentTime) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] rowComponents \u003d row.split(\"\\\\|\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] timeRange \u003d rowComponents[1].split(\"-\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (timeRange.length \u003c 2) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(timeRange[0]);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            boolean isAfterStartTime \u003d currentTime.compareTo(startTime) \u003e 0;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(timeRange[1]);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            LocalTime midnight \u003d LocalTime.parse(\"00:00\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            boolean isBeforeEndTime \u003d false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (endTime.equals(midnight)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String[] timeComponents \u003d timeRange[1].split(\":\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                int hour \u003d Integer.parseInt(timeComponents[0]);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (hour \u003c 24) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    isBeforeEndTime \u003d true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                isBeforeEndTime \u003d currentTime.compareTo(endTime) \u003c 0;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Current time is within hourly range"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (isAfterStartTime \u0026\u0026 isBeforeEndTime) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(ui.colourTextRed(\"There was an error parsing the times\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(ui.colourTextRed(\"There was an error getting the time ranges\"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(ui.colourTextRed(\"There was an error converting the hour\"));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "johan9se"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 3,
      "dojh111": 57,
      "johan9se": 168
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The Ui class deals with all interactions with the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ANSI_RESET \u003d \"\\u001B[0m\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ANSI_RED \u003d \"\\u001B[31;1m\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ANSI_GREEN \u003d \"\\u001B[32;1m\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ANSI_YELLOW \u003d \"\\u001B[33;1m\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ANSI_BLUE \u003d \"\\u001B[34;1m\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ANSI_PURPLE \u003d \"\\u001B[35;1m\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ANSI_CYAN \u003d \"\\u001B[36;1m\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String THICK_SEPARATOR \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String THIN_SEPARATOR  \u003d \"--------------------------------------------------------------------\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"-------------------------------------------\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_LESSON \u003d \"lesson\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String LOGO \u003d \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"  _      _  __ ______          _\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" | |    (_)/ _|  ____|        (_)\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" | |     _| |_| |__   __ _ ___ _  ___ _ __\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" | |    | |  _|  __| / _` / __| |/ _ \\\\ \u0027__|\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" | |____| | | | |___| (_| \\\\__ \\\\ |  __/ |\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" |______|_|_| |______\\\\__,_|___/_|\\\\___|_|\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //Error messages"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String ERROR_INVALID_COMMAND \u003d \"Oh no, I do not understand this command! Type \u0027help\u0027 for \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"a list of available commands\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //General UI messages"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_GOODBYE \u003d \"Goodbye, hope to see you again soon!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_GREETING \u003d \"Hello! What can I do for you today?\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_HELP_COMMAND \u003d \" -Type \u0027help\u0027 for a list the list of available commands\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //Help message"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"These are the commands that are available:\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_PURPLE + \"IMPORTANT INFORMATION:\\n\" + ANSI_RESET"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" * Words in UPPER_CASE are the parameters to be supplied by the user\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" * Commands are CASE SENSITIVE\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" * Command parameters have to be input in the order as stated\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" * Items in square brackets are optional, e.g [DATE]\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" * Commands with the \" + ANSI_CYAN + \"[P]\" + ANSI_RESET +  \" can take partial commands\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"   e.g \" + ANSI_YELLOW + \"addLesson\" + ANSI_RESET + \" and \" + ANSI_YELLOW"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"addLesson /code CS2113 /to 18:00\" + ANSI_RESET + \" are valid commands\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" * All dates are in the \" + ANSI_CYAN + \"DD-MM-YY\" + ANSI_RESET + \" and times in the \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_CYAN + \"HH:MM\" + ANSI_RESET + \" format\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_CYAN + \"COMMANDS\\n\" + ANSI_RESET"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"******************************************************************************************************\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"*********\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"help ------------------------------------------------------------------------------ \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"Displays available commands\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"addLesson /code MODULE_CODE /date DATE /from START /to END /repeats TIMES -------------------- \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_CYAN + \"[P]\" + ANSI_RESET + \"Adds a lesson\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"addEvent EVENT_NAME /date DATE /from START /to END /repeats TIMES ---------------------------- \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_CYAN + \"[P]\" + ANSI_RESET + \"Adds an event\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"addDeadline DEADLINE_NAME /by DATETIME /repeats TIMES -------------------------------------- \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_CYAN + \"[P]\" + ANSI_RESET + \"Adds a deadline\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"editLesson MODULE_CODE ---------------------------------------------------------------------- \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_CYAN + \"[P]\" + ANSI_RESET + \"Edits a lesson\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"editEvent EVENT_NAME ------------------------------------------------------------------------ \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_CYAN + \"[P]\" + ANSI_RESET + \"Edits an event\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"editDeadline DEADLINE_NAME ---------------------------------------------------------------- \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_CYAN + \"[P]\" + ANSI_RESET + \"Edits a deadline\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"deleteTask /type TYPE /name NAME --------------------------------------------------------------- \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"Deletes a task\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"addNotes TITLE ----------------------------------------------------------------------------- \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_CYAN + \"[P]\" + ANSI_RESET + \"Adds a new note\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"showNotes TITLE ------------------------------------------------------------------------ \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_CYAN + \"[P]\" + ANSI_RESET + \"Shows selected note\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"archive ---------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \" Archives all existing notes\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"editNotes TITLE ---------------------------------------------------------------------- \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_CYAN + \"[P]\" + ANSI_RESET + \"Edits a selected note\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"deleteNotes TITLE ------------------------------------------------------------------ \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_CYAN + \"[P]\" + ANSI_RESET + \"Deletes a selected note\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"undo TYPE ----------------------------------------------------------\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \" Undoes the last edit/deleted task or notes\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"display KEYWORD ------------------------------------------------------\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \" Displays either weekly or daily schedule\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"freeTime ------------------------------------------------------\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \" Tells you your longest block of free time today\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"sleepTime -----------------------------------------------------------\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \" Tells you how much time you have to sleep\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"exit -----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \" Closes the LifEasier program\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"******************************************************************************************************\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"*********\\n\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_GREEN + \"For more detailed information, please visit the online user guide at:\\n\" + ANSI_RESET"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"https://ay2021s1-cs2113t-w13-4.github.io/tp/UserGuide\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    //Input format messages"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String NEW_DEADLINE_TIME_INPUT_FORMAT \u003d \"/by DATETIME\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String NEW_EVENT_TIME_INPUT_FORMAT \u003d \"/date DATE /from START /to END\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String NEW_LESSON_TIME_INPUT_FORMAT \u003d \"/date DATE /from START /to END\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Scanner conversation;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.conversation \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void printThickSeparator() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(THICK_SEPARATOR);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void printThinSeparator() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(THIN_SEPARATOR);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void printBlankLine() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Colours input string to a green colour."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param string String to be coloured."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Green coloured string."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String colourTextGreen(String string) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return ANSI_GREEN + string + ANSI_RESET;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Colours input string to a red colour."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param string String to be coloured."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Red coloured string."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String colourTextRed(String string) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return ANSI_RED + string + ANSI_RESET;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Colours input string to a cyan colour."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param string String to be coloured"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Cyan coloured string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String colourTextCyan(String string) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return ANSI_CYAN + string + ANSI_RESET;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Colours input string to a yellow colour."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param string String to be coloured"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Yellow coloured string."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String colourTextYellow(String string) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return ANSI_YELLOW + string + ANSI_RESET;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showLogo() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showGreetingMessage() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextCyan(MESSAGE_GREETING));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(MESSAGE_HELP_COMMAND));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showAddConfirmationMessage(Task task) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextGreen(\"Done! I\u0027ve added\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextGreen(\"\\\"\" + task + \"\\\" \"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextGreen(\"to your schedule!\"));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void printLogo() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextCyan(LOGO));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showHelpMenu() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(HELP_MESSAGE);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Prompts continually for user command and checks if save delimiter has been added to prevent errors."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return User command without save delimiters."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        boolean isCommandWithDelimiter \u003d true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            userInput \u003d conversation.nextLine();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (userInput.contains(\"\u003d-\u003d\")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    throw new SaveDelimiterException();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                isCommandWithDelimiter \u003d false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } catch (SaveDelimiterException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                System.out.println(colourTextRed(\"Inputs cannot contain the character sequence: \u003d-\u003d\"));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                System.out.println(colourTextCyan(\"Please re-enter your input:\"));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } while (isCommandWithDelimiter);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showSelectTaskToEditPrompt(String type) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Please select the \" + type + \" you want to edit:\"));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showSelectParameterToEditPrompt() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Please select the parameter you want to edit:\"));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showSelectTaskToDeletePrompt(String type) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Please select the \" + type + \" you want to delete:\"));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showInputFormatPrompt(String type) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_EVENT):"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(colourTextCyan(\"Please input your new time in this format: \""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                    + NEW_EVENT_TIME_INPUT_FORMAT));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_DEADLINE):"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(colourTextCyan(\"Please input your new time in this format: \""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                    + NEW_DEADLINE_TIME_INPUT_FORMAT));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_LESSON):"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(colourTextCyan(\"Please input your new time in this format: \""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                    + NEW_LESSON_TIME_INPUT_FORMAT));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showInputPrompt(String type) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_LESSON):"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            System.out.println(colourTextCyan(\"Please input your new Module Code:\"));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_DEADLINE):"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            System.out.println(colourTextCyan(\"Please input your new Deadline name:\"));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_EVENT):"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            System.out.println(colourTextCyan(\"Please input your new Event name:\"));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showEditableParametersMessage(String type) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_LESSON):"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            System.out.println(\"1. Module Code\\n2. Time\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_DEADLINE):"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            System.out.println(\"1. Deadline Name\\n2. Time\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_EVENT):"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            System.out.println(\"1. Event Name\\n2. Time\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showEditConfirmationMessage() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"Your edit has been saved.\"));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showDeleteConfirmationMessage() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"The task you selected has been deleted.\"));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showInvalidCommandFormatMessage() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed(\"The format of the command is incorrect! Please double check!\"));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showGoodbyeMessage() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextCyan(MESSAGE_GOODBYE));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showNoteTitlePrompt() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Please put in a title:\"));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showNoteDescriptionPrompt() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Alright! Please fill in your notes:\"));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showFileCreationError() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Something went wrong... Save file creation failed...\"));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showDataLoadingMessage() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"Reading your save data. New saves will be created \""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \"if no saves are found.\"));"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showNoDataToArchiveMessage() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"You do not have any data available for archiving.\"));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showFileArchiveError() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"There was an error archiving your data\"));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showArchiveStartMessage() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"Starting archiving...\"));"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showArchiveEndMessage() {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"Archiving successful!\"));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showFileReadError() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Something went wrong, unable to read from save file...\"));"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showFileWriteError() {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Something went wrong while saving your data...\"));"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showDirectoryCreationFailedError() {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Directory creation failed...\"));"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showInvalidNumberError() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        System.out.println(colourTextRed(\"The number you inputted is invalid! Please try again.\"));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showNoTitleFoundError() {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"The title you inputted is not found...\"));"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showNumberFormatError() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed(\"Oops! The input must be a number!\"));"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showInvalidCastError() {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Something went wrong, mismatching task types\"));"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showSaveDataMissingError() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Encountered an error while reading from the save file \""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \"- Data missing/corrupted\"));"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showInvalidInputToEditDeadlineTime() {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        System.out.println(colourTextRed(\"Your input is invalid. Please input in this format: /by dd-mm-yy hh:mm\"));"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showInvalidInputToEditTime() {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        System.out.println(colourTextRed(\"Your input is invalid. Please input in this format: \""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                + \"/date dd-mm-yy /from hh:mm /to hh:mm\"));"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showIndeterminableTaskError() {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Something went wrong while determining the tasks\"));"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showParseUnknownCommandError() {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed(ERROR_INVALID_COMMAND));"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showParseIncorrectCommandFormatError() {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"I\u0027m sorry! Please double check the input of your format!\"));"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed(\"Use the help command for formats of all the commands!\"));"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showParseIncorrectDateTimeError() {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed(\"I\u0027m sorry! Something\u0027s wrong with your date or time!\"));"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed(\"Please ensure your dates are in the format dd-mm-yy,\""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"and your times are in the format hh:mm!\"));"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed(\"Also ensure your dates and times are valid numbers!\"));"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showEmptyDescriptionError() {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed(\"Empty description! \u003dO\"));"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showNoMatchesError(String type) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Sorry! There is no \" + type + \" matching your query. Please \""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \"re-enter your command.\"));"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNoteAddedMessage() {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"Ok! I\u0027ve taken note of this note!\"));"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showMultipleMatchesFoundPrompt() {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextCyan(\"Multiple matches found! Please select the one you are looking \""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"for:\"));"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showSelectWhichNoteToViewPrompt() {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Please select the notes you want to view:\"));"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showFreeTimeMessage(int startHour, int endHour, int duration) {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"You have \" + duration + \" hours of free time between \""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + startHour + \":00 and \" + endHour + \":00!\"));"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextGreen(\"You can try scheduling something in this time!\"));"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showNoFreeTimeError() {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Unfortunately you have no free time today!\"));"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed(\"You might want to relax a little!\"));"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showNothingScheduledMessage(String dayKeyword) {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(colourTextGreen(String.format(\"You have nothing on for %s!\", dayKeyword)));"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showAvailableSleepTimeMessage(int earliestSleepTime, int latestWakeTime) {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"You have nothing on from \" + earliestSleepTime + \":00 today to \""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + latestWakeTime + \":00 tomorrow!\"));"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showSleepDurationMessage(int duration) {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"You can sleep for up to \" + duration + \" hours!\"));"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showExcessSleepDurationMessage() {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"You can sleep for the recommended 8 hours or longer!\"));"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showSelectWhichNoteToDeletePrompt() {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Please select the notes you want to delete:\"));"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showConfirmDeletePrompt() {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Is this the note you want to delete? (Y/N)\"));"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showInvalidConfirmationPrompt() {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Y for Yes and N for No:\"));"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNoteNotDeletedMessage() {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"OK! Note not deleted!\"));"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNoteDeletedMessage() {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"OK! Note deleted!\"));"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showEditWhichPartMessage() {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Do you want to change the title or description? (Enter T/D)\"));"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showInvalidTitleDescriptionConfirmationPrompt() {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"T for title and D for Description:\"));"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showEditTitlePrompt() {"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Please input the title you want to change to:\"));"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showEditDescriptionPrompt() {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Please input the description you want to change to:\"));"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showSelectWhichNoteToEditPrompt() {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Please select the notes you want to edit:\"));"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showEmptyNoteListMessage() {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"There\u0027s no Notes!\"));"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showAddModuleCodePrompt() {"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Please input the module code:\"));"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showAddDatePrompt() {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(colourTextCyan(\"What is the date? (Enter in the format: DD-MM-YY)\"));"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showAddStartTimePrompt() {"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(colourTextCyan(\"What is the start time? (Enter in the format: HH:MM)\"));"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showAddEndTimePrompt() {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(colourTextCyan(\"What is the end time? (Enter in the format: HH:MM)\"));"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showAddDescriptionPrompt() {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(colourTextCyan(\"Please enter the description here:\"));"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showAddDateTimePrompt() {"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(colourTextCyan(\"What is the date and time? (Enter in the format: DD-MM-YY HH:MM\"));"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showAddRecurrencesPrompt() {"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(colourTextCyan(\"How many times do you want this to be repeated?\"));"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public int[] showMultipleNoteMatchesMessage(NoteList notes, String title, int[] arr) {"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (notes.get(i).getTitle().contains(title)) {"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                System.out.println(i + 1 + \". \" + notes.get(i).getTitle() + \"\\n\");"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                arr[j] \u003d i + 1;"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return arr;"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showAllNotesMessage(NoteList notes) {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            System.out.println((i + 1) + \". \" + notes.get(i).getTitle());"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showEnterUndoTypePrompt() {"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextCyan(\"To undo a change in tasks, please enter: \") + \"task\");"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"To undo a change in notes, please enter: \") + \"note\");"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showInvalidUndoTypeError() {"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Invalid undo type, please try again!\"));"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showInvalidUndoActionError() {"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed(\"Nothing to undo!\"));"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showUndoTaskEditMessage() {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"This task has been reverted back to its previous version!\"));"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showUndoTaskDeleteMessage() {"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"This deleted task has been successfully restored!\"));"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showOldTaskMessage(TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(taskHistory.getLastTask().toString());"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showUndoNoteEditMessage() {"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"This note has been reverted back to its previous version!\"));"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showUndoNoteDeleteMessage() {"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"This deleted note has been successfully restored!\"));"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showOldNoteMessage(NoteHistory noteHistory) {"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(noteHistory.getLastNote());"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showEmptyParamPrompt(String param) {"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"We detected that you did not fill in the field of \" + param"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \". Please fill it in:\"));"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showIndeterminableRecurrenceError() {"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"There was an error reading the task recurrence\"));"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showRecurrencesNumberFormatPrompt() {"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"The input for /repeats is not a valid number! Please try again:\"));"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void printMatchingTask(int index, String task) {"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        System.out.println(index + \". \" + task);"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showIndexOutOfBoundsMessage() {"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"The number you have input is out of bounds!\");"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showInvalidTimeLogicMessage() {"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed(\"Start time must be before end time!\"));"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showMatchingTasksPrompt(String type) {"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Here are all your matching \" + type + \"s:\"));"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showEmptyNewDescriptionPrompt() {"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Your new description cannot be empty. Please try again!\"));"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showInvalidRecurrencesError() {"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed(\"Recurrences must be a positive integer!\"));"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showArchiveEndInformationMessage() {"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextYellow(\"Note: All current notes have been archived and will no longer be \""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \"read by the program\"));"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showReadErrorHandlerError() {"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"LifEasier will continue to run, but the current data will not be \""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \"read. The rest of your data will continue to be loaded\"));"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"This is done to protect your stored data\\n\"));"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"If you have made changes directly to the save file, you are \""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \"recommended to undo those changes\"));"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showSaveDelimiterError() {"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"LifEasier has detected either missing or additional save delimiters\""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \" in the save file\"));"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showLocalDateTimeParseError() {"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Encountered a problem reading the date and time of the task\\n\"));"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextCyan(\"The task will continue to be added with a default date to \""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \"preserve your data\"));"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextCyan(\"You can edit the date and times directly from the save file\"));"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"---------------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showInvalidModuleCodePrompt() {"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"The entered module code has an invalid format, please re-enter a \""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \"valid module code:\"));"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Examples of valid formats: CS1010 / CS2113T / GER1000 / CSS1000X\"));"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showEnterDisplayKeywordPrompt() {"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"To see your schedule, please enter: \") + \"week/today/tomorrow:\");"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showInvalidDisplayKeywordError() {"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed("
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"Invalid display parameter! Try \u0027week\u0027, \u0027today\u0027 or \u0027tomorrow\u0027 instead!\"));"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showCurrHourIndicationMessage() {"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextYellow(\"NOTE: The row corresponding to the current hour \""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                + \"is coloured for easy reference!\"));"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showDuplicateTaskError(String type) {"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed("
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"This \" + type + \" or something very similar already exists in your schedule!\"));"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showPastTaskError(String type) {"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextRed(\"The timing of this \" + type + \" is already in the past!\"));"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showCurrentTitlePrompt(String currentTitle) {"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Current Title: \"));"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(currentTitle);"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showTitleChangedMessage(String title) {"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextGreen(\"OK! Your title is now: \\\"\" + title + \"\\\"\"));"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showCurrentDescriptionPrompt(String currentDescription) {"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextCyan(\"Current Description: \"));"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(currentDescription);"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showDescriptionChangedMessage(String description) {"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextGreen(\"OK! Your description is now: \\\"\" + description + \"\\\"\"));"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showDayScheduleMessage(String displayKeyword) {"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"Here is your schedule for \" + displayKeyword + \":\");"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showNotesMessage(String note) {"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(colourTextGreen(\"Here is your note:\"));"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(note);"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThickSeparator();"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showNotesPrompt(String note) {"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printBlankLine();"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printThinSeparator();"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(note);"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 93,
      "daniellimzj": 474,
      "EdmundEXE": 81,
      "dojh111": 258,
      "johan9se": 39
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/LifEasierTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "class LifEasierTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/commands/FreeTimeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskDuplicateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskPastException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "class FreeTimeCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void isFreeTime_busyHour_false() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FreeTimeCommand command \u003d new FreeTimeCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d \"Some very long activity\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.of(2020, 10, 17, 11, 10);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.of(2020, 10, 17, 12, 59);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.add(new Event(description, start, end));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        boolean isFreeTime \u003d command.isFreeTime(11, tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertFalse(isFreeTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void isFreeTime_freeHour_true() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FreeTimeCommand command \u003d new FreeTimeCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        boolean isFreeTime \u003d command.isFreeTime(11, tasks);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(isFreeTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void getLongestFreeTime_busyDay_twoHoursFree() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FreeTimeCommand command \u003d new FreeTimeCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description1 \u003d \"Some very long activity\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start1 \u003d LocalDateTime.of(2020, 10, 17, 11,0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end1 \u003d LocalDateTime.of(2020, 10, 17, 17, 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.add(new Event(description1, start1, end1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description2 \u003d \"Another very long activity\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start2 \u003d LocalDateTime.of(2020, 10, 17, 18, 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end2 \u003d LocalDateTime.of(2020, 10, 17, 23, 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.add(new Event(description2, start2, end2));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int[] longestFreeTime \u003d command.getLongestFreeTime(tasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(4, (longestFreeTime[1] - longestFreeTime[0]));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void executeFreeTimeCommand_freeDay_6HoursFree() throws TaskDuplicateException, TaskPastException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        setUpStreams();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        NoteList notes \u003d new NoteList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        NoteHistory noteHistory \u003d new NoteHistory();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FileStorage storage \u003d new FileStorage(\"saveFileTasks.txt\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                \"saveFileNotes.txt\", ui, notes, tasks, noteHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskHistory taskHistory \u003d new TaskHistory();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FreeTimeCommand command \u003d new FreeTimeCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start1 \u003d today.atTime(10, 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end1 \u003d today.atTime(12, 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start2 \u003d today.atTime(18, 0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end2 \u003d today.atTime(23, 0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.addEvent(\"first event\", start1, end1, 0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.addEvent(\"second event\", start2, end2, 0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        command.execute(ui, notes, tasks, storage, parser, noteHistory, taskHistory);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals((System.lineSeparator()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + ui.colourTextGreen(\"You have 6 hours of free time between 12:00 and 18:00!\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + ui.colourTextGreen(\"You can try scheduling something in this time!\") + System.lineSeparator()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator() + System.lineSeparator()), outContent.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        restoreStreams();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void executeFreeTimeCommand_busyDay_0HoursFree() throws TaskDuplicateException, TaskPastException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        setUpStreams();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        NoteList notes \u003d new NoteList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        NoteHistory noteHistory \u003d new NoteHistory();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FileStorage storage \u003d new FileStorage(\"saveFileTasks.txt\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                \"saveFileNotes.txt\", ui, notes, tasks, noteHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskHistory taskHistory \u003d new TaskHistory();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FreeTimeCommand command \u003d new FreeTimeCommand();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start1 \u003d today.atTime(6, 0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end1 \u003d today.atTime(13, 30);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start2 \u003d today.atTime(14, 0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end2 \u003d today.atTime(23, 30);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.addEvent(\"first event\", start1, end1, 0);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.addEvent(\"second event\", start2, end2, 0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        command.execute(ui, notes, tasks, storage, parser, noteHistory, taskHistory);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals((System.lineSeparator()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + ui.colourTextRed(\"Unfortunately you have no free time today!\") + System.lineSeparator()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + ui.colourTextRed(\"You might want to relax a little!\") + System.lineSeparator()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator() + System.lineSeparator()), outContent.toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        restoreStreams();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 159,
      "dojh111": 7
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/commands/ShowNotesCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package test.java.seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "class ShowNotesCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private NoteList notes \u003d new NoteList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    void testShowCommandInputs_inputSizeMatchesActualSize() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        notes.add(new Note(\"cat\", \"i like cats\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        notes.add(new Note(\"dog\", \"i like dogs\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        assertEquals(2, notes.size());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 2,
      "EdmundEXE": 16
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/commands/SleepTimeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskDuplicateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskPastException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "class SleepTimeCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void isBusyTime_busyHour_true() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d \"Some long activity\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.of(2020, 10, 17, 10, 10);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.of(2020, 10, 17, 12, 59);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.add(new Event(description, start, end));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        boolean isBusyTime \u003d command.isBusyTime(11, tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(isBusyTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void isBusyTime_freeHour_false() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d \"Some long activity\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.of(2020, 10, 17, 11, 10);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.of(2020, 10, 17, 12, 59);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.add(new Event(description, start, end));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        boolean isBusyTime \u003d command.isBusyTime(22, tasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertFalse(isBusyTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void getLatestBusyTime_busyAllDay_22() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d \"Some super long activity\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.of(2020, 10, 17, 13, 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.of(2020, 10, 17, 23, 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.add(new Event(description, start, end));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int latestBusyTime \u003d command.getLatestBusyTime(tasks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(22, latestBusyTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void getLatestBusyTime_noTasks_minus1() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int latestBusyTime \u003d command.getLatestBusyTime(tasks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(-1, latestBusyTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void getEarliestBusyTime_notBusy_18() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d \"Some super long activity\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.of(2020, 10, 17, 18, 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.of(2020, 10, 17, 20, 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.add(new Event(description, start, end));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int earliestBusyTime \u003d command.getEarliestBusyTime(tasks);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(18, earliestBusyTime);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void getEarliestBusyTime_noTasks_25() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int earliestBusyTime \u003d command.getEarliestBusyTime(tasks);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(25, earliestBusyTime);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void executeSleepTimeCommand_busyDay_6HoursSleep() throws TaskDuplicateException, TaskPastException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        setUpStreams();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        NoteList notes \u003d new NoteList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        NoteHistory noteHistory \u003d new NoteHistory();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskHistory taskHistory \u003d new TaskHistory();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FileStorage storage \u003d new FileStorage(\"saveFileTasks.txt\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                \"saveFileNotes.txt\", ui, notes, tasks, noteHistory);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDate tomorrow \u003d today.plusDays(1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start1 \u003d today.atTime(10, 0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end1 \u003d today.atTime(23, 0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start2 \u003d tomorrow.atTime(6, 0);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end2 \u003d tomorrow.atTime(12, 0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.addEvent(\"first event\", start1, end1, 0);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.addEvent(\"second event\", start2, end2, 0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        command.execute(ui, notes, tasks, storage, parser, noteHistory, taskHistory);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(System.lineSeparator()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + (ui.colourTextGreen(\"You have nothing on from 23:00 today to 5:00 tomorrow!\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + System.lineSeparator() + ui.colourTextGreen(\"You can sleep for up to 6 hours!\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator() + System.lineSeparator()),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                outContent.toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        restoreStreams();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void executeSleepTimeCommand_freeDay_16HoursSleep() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        setUpStreams();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        NoteList notes \u003d new NoteList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        NoteHistory noteHistory \u003d new NoteHistory();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskHistory taskHistory \u003d new TaskHistory();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FileStorage storage \u003d new FileStorage(\"saveFileTasks.txt\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                \"saveFileNotes.txt\", ui, notes, tasks, noteHistory);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        command.execute(ui, notes, tasks, storage, parser, noteHistory, taskHistory);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(System.lineSeparator()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + (ui.colourTextGreen(\"You have nothing on for today and tomorrow!\") + System.lineSeparator()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                +  ui.colourTextGreen(\"You can sleep for the recommended 8 hours or longer!\")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator() + System.lineSeparator()),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                outContent.toString());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        restoreStreams();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 180,
      "dojh111": 8
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/commands/UndoTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johan9se"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.model.notes.NoteHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.model.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.model.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.model.tasks.Lesson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "class UndoTaskCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final TaskHistory testTaskHistory \u003d new TaskHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static final String TEST_FILEPATH \u003d \"testSave.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final LocalDateTime sampleTime1 \u003d LocalDateTime.parse(\"2020-11-11T11:11\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final LocalDateTime sampleTime2 \u003d LocalDateTime.parse(\"2020-12-12T12:12\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final Deadline testDeadlineToEdit \u003d new Deadline(\"testDeadline\", sampleTime1, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final Event testEventToDelete \u003d new Event(\"testEvent\", sampleTime1, sampleTime2, 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final Lesson testLessonToEdit \u003d new Lesson(\"testLesson\", sampleTime1, sampleTime2, 3);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void setUpTaskList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskList.addTask(testDeadlineToEdit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskList.addTask(testEventToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskList.addTask(testLessonToEdit);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void resetTaskList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskList.getTaskList().clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void resetTaskHistory() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        while (testTaskHistory.getChangeCount() \u003e 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            testTaskHistory.popLastTask();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void execute_emptyTaskHistory_invalidUndoAction() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        setUpStreams();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        NoteList notes \u003d new NoteList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        NoteHistory noteHistory \u003d new NoteHistory();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        FileStorage storage \u003d new FileStorage(TEST_FILEPATH, TEST_FILEPATH, ui, notes, testTaskList, noteHistory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        UndoTaskCommand command \u003d new UndoTaskCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(0, testTaskHistory.getChangeCount());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        command.execute(ui, notes, testTaskList, storage, parser, noteHistory, testTaskHistory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(System.lineSeparator()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + ui.colourTextRed(\"Nothing to undo!\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator() + System.lineSeparator(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                outContent.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        restoreStreams();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void executeAndGetLastTask_TaskHistoryWithThreeTasks_LastTaskIsEvent() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        setUpStreams();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        setUpTaskList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task copyTestDeadline \u003d testTaskHistory.getCurrCopyOfTaskToEdit(testTaskList, 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task copyTestEvent \u003d testTaskHistory.getCurrCopyOfTaskToDelete(testTaskList, 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task copyTestLesson \u003d testTaskHistory.getCurrCopyOfTaskToEdit(testTaskList, 2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskHistory.pushOldCopy(copyTestDeadline);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskHistory.pushOldCopy(copyTestEvent);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskHistory.pushOldCopy(copyTestLesson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        NoteList notes \u003d new NoteList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        NoteHistory noteHistory \u003d new NoteHistory();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        FileStorage storage \u003d new FileStorage(TEST_FILEPATH, TEST_FILEPATH, ui, notes, testTaskList, noteHistory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        UndoTaskCommand command \u003d new UndoTaskCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(3, testTaskHistory.getChangeCount());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(copyTestLesson, testTaskHistory.getLastTask());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        command.execute(ui, notes, testTaskList, storage, parser, noteHistory, testTaskHistory);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(2, testTaskHistory.getChangeCount());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(copyTestEvent, testTaskHistory.getLastTask());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        resetTaskHistory();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        resetTaskList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        restoreStreams();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "johan9se"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 5,
      "johan9se": 121
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/model/notes/NoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package test.java.seedu.lifeasier.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "class NoteTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    void testGetTitle() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        assertEquals(\"cat\", new Note(\"cat\", \"i like cats\").getTitle());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    void testGetDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        assertEquals(\"i like cats\", new Note(\"cat\", \"i like cats\").getDescription());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        assertEquals(\"Title: cat\\n\\ni like cats\\n\", new Note(\"cat\", \"i like cats\").toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "EdmundEXE": 23
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/model/tasks/TaskHistoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johan9se"
        },
        "content": "package seedu.lifeasier.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johan9se"
        },
        "content": "class TaskHistoryTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final TaskHistory testTaskHistory \u003d new TaskHistory();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final LocalDateTime sampleTime1 \u003d LocalDateTime.parse(\"2020-11-11T11:11\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final LocalDateTime sampleTime2 \u003d LocalDateTime.parse(\"2020-12-12T12:12\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final Deadline testDeadline \u003d new Deadline(\"testDeadline\", sampleTime1, 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final Event testEvent \u003d new Event(\"testEvent\", sampleTime1, sampleTime2, 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final Lesson testLesson \u003d new Lesson(\"testLesson\", sampleTime1, sampleTime2, 3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void setUpTaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskList.addTask(testDeadline);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskList.addTask(testEvent);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskList.addTask(testLesson);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void resetTaskHistory() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        while (testTaskHistory.getChangeCount() \u003e 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            testTaskHistory.popLastTask();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void getLastTask_emptyTaskHistory_IndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, testTaskHistory::getLastTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void getChangeCount_emptyTaskHistory_0() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(0, testTaskHistory.getChangeCount());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void getLastTask_TaskHistoryWithOneItem_Deadline() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        setUpTaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task copyTestDeadline \u003d testTaskHistory.getCurrCopyOfTaskToEdit(testTaskList, 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int testEditNumber \u003d copyTestDeadline.editNumber;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskHistory.pushOldCopy(copyTestDeadline);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task lastTask \u003d testTaskHistory.getLastTask();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(1, testEditNumber);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(copyTestDeadline, lastTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        resetTaskHistory();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void getEditNumber_TaskHistoryWithDistinctEditedItems_PositiveInts() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        setUpTaskList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task copyTestDeadline \u003d testTaskHistory.getCurrCopyOfTaskToEdit(testTaskList, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task copyTestEvent \u003d testTaskHistory.getCurrCopyOfTaskToEdit(testTaskList, 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task copyTestLesson \u003d testTaskHistory.getCurrCopyOfTaskToEdit(testTaskList, 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        final int testEditNumber1 \u003d copyTestDeadline.getEditNumber();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        final int testEditNumber2 \u003d copyTestEvent.getEditNumber();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        final int testEditNumber3 \u003d copyTestLesson.getEditNumber();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskHistory.pushOldCopy(copyTestDeadline);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskHistory.pushOldCopy(copyTestEvent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskHistory.pushOldCopy(copyTestLesson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task lastTask \u003d testTaskHistory.getLastTask();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Assertions.assertAll("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            () -\u003e assertEquals(copyTestLesson, lastTask),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            () -\u003e assertEquals(1, testEditNumber1),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            () -\u003e assertEquals(2, testEditNumber2),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            () -\u003e assertEquals(3, testEditNumber3)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        resetTaskHistory();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void getEditNumber_TaskHistoryWithDistinctDeletedItems_NegativeInts() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        setUpTaskList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task copyTestDeadline \u003d testTaskHistory.getCurrCopyOfTaskToDelete(testTaskList, 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task copyTestEvent \u003d testTaskHistory.getCurrCopyOfTaskToDelete(testTaskList, 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task copyTestLesson \u003d testTaskHistory.getCurrCopyOfTaskToDelete(testTaskList, 2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        final int testEditNumber1 \u003d copyTestDeadline.getEditNumber();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        final int testEditNumber2 \u003d copyTestEvent.getEditNumber();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        final int testEditNumber3 \u003d copyTestLesson.getEditNumber();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskHistory.pushOldCopy(copyTestDeadline);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskHistory.pushOldCopy(copyTestEvent);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskHistory.pushOldCopy(copyTestLesson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task lastTask \u003d testTaskHistory.getLastTask();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Assertions.assertAll("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            () -\u003e assertEquals(copyTestLesson, lastTask),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            () -\u003e assertEquals(-1, testEditNumber1),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            () -\u003e assertEquals(-2, testEditNumber2),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            () -\u003e assertEquals(-3, testEditNumber3)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        );"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        resetTaskHistory();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void getEditNumber_TaskHistoryWithNonDistinctEditedItems_sameEditNumber() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        setUpTaskList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task copyTestDeadline \u003d testTaskHistory.getCurrCopyOfTaskToEdit(testTaskList, 0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task copyTestDeadline2 \u003d testTaskHistory.getCurrCopyOfTaskToEdit(testTaskList, 0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int testEditNumber1 \u003d copyTestDeadline.getEditNumber();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int testEditNumber1again \u003d copyTestDeadline2.getEditNumber();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskHistory.pushOldCopy(copyTestDeadline);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        testTaskHistory.pushOldCopy(copyTestDeadline2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task lastTask \u003d testTaskHistory.getLastTask();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Assertions.assertAll("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            () -\u003e assertEquals(copyTestDeadline2, lastTask),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            () -\u003e assertEquals(1, testEditNumber1),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            () -\u003e assertEquals(1, testEditNumber1again)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        );"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        resetTaskHistory();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "johan9se"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johan9se": 138
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/model/tasks/TaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yy HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final LocalDateTime SAMPLE1 \u003d LocalDateTime.parse(\"12-12-20 12:00\", DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private static final LocalDateTime SAMPLE2 \u003d LocalDateTime.parse(\"12-12-20 13:00\", DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void name() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void getTaskCount_returnTaskCountAsInt() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList.addTask(new Event(\"EXAMPLE\", SAMPLE1, SAMPLE2));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertEquals(1, taskList.getTaskCount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void getTask_outOfBoundIndex_throwsException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList.addTask(new Event(\"EXAMPLE\", SAMPLE1, SAMPLE2));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e taskList.getTask(2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void getTask_invalidIndex_throwsException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList.addTask(new Event(\"EXAMPLE\", SAMPLE1, SAMPLE2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e taskList.getTask(-1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void updateTasks_outdatedRecurringLesson_movedOneWeek() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String moduleCode \u003d \"cg1111\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.of(20, 11, 27, 12, 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.of(20, 11, 27, 13, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int recurrences \u003d 11;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Lesson lesson \u003d new Lesson(moduleCode, start, end, recurrences);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addTask(lesson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.updateTasks(LocalDate.of(20, 11, 29));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDate expected \u003d LocalDate.of(20, 12, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(((lesson.isHappeningOn(expected)) \u0026\u0026 (lesson.getRecurrences() \u003d\u003d 10)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void updateTasks_outdatedTasks_deleted() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String moduleCode \u003d \"cg1111\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start1 \u003d LocalDateTime.of(21, 11, 27, 12, 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end1 \u003d LocalDateTime.of(21, 11, 27, 13, 0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int recurrences \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String eventDescription \u003d \"my event\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start2 \u003d LocalDateTime.of(21, 11, 28, 22, 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end2 \u003d LocalDateTime.of(21, 11, 28, 23, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String deadlineDescription \u003d \"my deadline\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime by \u003d LocalDateTime.of(21, 11, 28, 23, 59);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Lesson lesson \u003d new Lesson(moduleCode, start1, end1, recurrences);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Event event \u003d new Event(moduleCode, start2, end2, recurrences);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Deadline deadline \u003d new Deadline(moduleCode, by, recurrences);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addTask(lesson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.updateTasks(LocalDate.of(21, 11, 29));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(taskList.getTaskList().isEmpty());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void getTasksFromOneDay_sameDayTasks_returned() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String moduleCode \u003d \"cg1111\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start1 \u003d LocalDateTime.of(20, 11, 27, 12, 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end1 \u003d LocalDateTime.of(20, 11, 27, 13, 0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int recurrences \u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String eventDescription \u003d \"my event\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start2 \u003d LocalDateTime.of(20, 11, 27, 22, 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end2 \u003d LocalDateTime.of(20, 11, 27, 23, 0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String deadlineDescription \u003d \"my deadline\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime by \u003d LocalDateTime.of(20, 11, 27, 23, 59);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Lesson lesson \u003d new Lesson(moduleCode, start1, end1, recurrences);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Event event \u003d new Event(moduleCode, start2, end2, recurrences);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Deadline deadline \u003d new Deadline(moduleCode, by, recurrences);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addTask(lesson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasksFromOneDay \u003d taskList.getTasksFromOneDay(LocalDate.of(20, 11, 27));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(3, tasksFromOneDay.size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void getTaskList_returnsFullTaskList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList.addTask(new Event(\"EXAMPLE\", SAMPLE1, SAMPLE2));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertNotNull(taskList.getTaskList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void addEvent() throws TaskDuplicateException, TaskPastException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addEvent(\"Event\", SAMPLE1, SAMPLE2, 0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        Task event \u003d new Event(\"Event\", SAMPLE1, SAMPLE2);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertEquals(taskList.getTask(0).toString(), event.toString());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void addLesson() throws TaskDuplicateException, TaskPastException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addLesson(\"Lesson\", SAMPLE1, SAMPLE2, 0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        Task lesson \u003d new Lesson(\"Lesson\", SAMPLE1, SAMPLE2);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertEquals(taskList.getTask(0).toString(), lesson.toString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void addDeadline() throws TaskDuplicateException, TaskPastException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addEvent(\"Event\", SAMPLE1, SAMPLE2, 0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        Task event \u003d new Event(\"Event\", SAMPLE1, SAMPLE2);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertEquals(taskList.getTask(0).toString(), event.toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void editTaskDescription() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void editLessonTime() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void editEventTime() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void editDeadlineTime() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void deleteTask() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void printMatchingTasks() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void checkForIndexOutOfBounds() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void getTasksFromOneDay() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void sort() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 102,
      "daniellimzj": 90
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.AddEventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.FreeTimeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.InvalidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.SleepTimeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputHelp_HelpCommand() throws ParserException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand(\"help\", ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof HelpCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputAddLesson_AddLessonCommand() throws ParserException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                \"addLesson /code cg1111 /date 10-10-20 /from 10:00 /to 20:00 /repeats 0\", ui);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof AddLessonCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputFreeTime_FreeTimeCommand() throws ParserException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"freeTime\", ui);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof FreeTimeCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputSleepTime_SleepTimeCommand() throws ParserException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"sleepTime\", ui);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof SleepTimeCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputExit_ExitCommand() throws ParserException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"exit\", ui);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof ExitCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputInvalidAddLesson_InvalidCommand() throws ParserException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                \"addLesson /code cg1111 /date 10-13-20 /from 24:60 /to 26:76 /repeats 0\", ui);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof InvalidCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputInvalidCommand_ParserException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertThrows(ParserException.class, () -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            parser.parseCommand(\"I want to add a lesson\", ui);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseAddDeadlineCommand_inputInvalidDateTime_ParserException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            parser.parseAddDeadlineCommand(ui, \"addDeadline do homework /by 10-30-40 24:67 /repeats 4\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputAddEvent_AddEventCommand() throws ParserException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                \"addEvent my event /date 10-10-20 /from 10:00 /to 20:00 /repeats 1\", ui);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof AddEventCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputAddDeadline_AddDeadlineCommand() throws ParserException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"addDeadline my deadline /by 10-10-20 10:00 /repeats 0\", ui);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void checkIfValidModuleCode_validModuleCodes_true() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Assertions.assertAll("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertTrue(parser.checkIfValidModuleCode(\"CS1010\")),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertTrue(parser.checkIfValidModuleCode(\"CS2113T\")),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertTrue(parser.checkIfValidModuleCode(\"GET1023\")),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertTrue(parser.checkIfValidModuleCode(\"ACC1000X\"))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        );"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void checkIfValidModuleCode_invalidModuleCodes_false() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Assertions.assertAll("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertFalse(parser.checkIfValidModuleCode(\"\")),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertFalse(parser.checkIfValidModuleCode(\"addLesson /code CS1231\")),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertFalse(parser.checkIfValidModuleCode(\"         \")),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertFalse(parser.checkIfValidModuleCode(\"G1000\")),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertFalse(parser.checkIfValidModuleCode(\"G1000S\")),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertFalse(parser.checkIfValidModuleCode(\"GERT1000\")),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertFalse(parser.checkIfValidModuleCode(\"#GE1000\")),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertFalse(parser.checkIfValidModuleCode(\"GES00000\")),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertFalse(parser.checkIfValidModuleCode(\"GERT1000X\")),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertFalse(parser.checkIfValidModuleCode(\"C9S1000X\")),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertFalse(parser.checkIfValidModuleCode(\"RE10TX\")),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertFalse(parser.checkIfValidModuleCode(\"CS9S000E\")),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertFalse(parser.checkIfValidModuleCode(\"CS2101XD\")),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            () -\u003e assertFalse(parser.checkIfValidModuleCode(\"CS2101#\"))"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        );"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 3,
      "daniellimzj": 108,
      "EdmundEXE": 1,
      "dojh111": 34
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/storage/FileArchiveTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "class FileArchiveTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TEST_FILEPATH \u003d \"testSave.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String NOTE_SEPARATOR \u003d \"-------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileArchive fileArchive;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public FileArchiveTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.notes \u003d new NoteList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileArchive \u003d new FileArchive(notes, new Ui());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void writeDataToArchiveSaveFile_testData_writeSuccess() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note testNote \u003d new Note(\"Cats are cute!\", \"I Love Cats\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.getNotes().clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.add(testNote);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileCommand.clearSaveFile(TEST_FILEPATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileArchive.writeDataToArchiveSaveFile(TEST_FILEPATH, notes.getNotes());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File testFile \u003d new File(TEST_FILEPATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileReader \u003d new Scanner(testFile);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ArrayList\u003cString\u003e fileContents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fileContents.add(fileReader.nextLine());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Assertions.assertAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                () -\u003e assertEquals(NOTE_SEPARATOR, fileContents.get(0)),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                () -\u003e assertEquals(\"Cats are cute!\", fileContents.get(1)),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                () -\u003e assertEquals(\"I Love Cats\", fileContents.get(2)),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                () -\u003e assertEquals(NOTE_SEPARATOR, fileContents.get(3))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Testing error - There was an error writing to the file\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void getNoteBody_inputWithWhiteSpace_correctReturn() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note testNote \u003d new Note(\"Test 1     \", \" Test Body  \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(\"Test Body\" + System.lineSeparator(), fileArchive.getNoteBody(testNote));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void getNoteTitle_inputWithWhiteSpace_correctReturn() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note testNote \u003d new Note(\"Test 1     \", \" Test Body  \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(\"Test 1\" + System.lineSeparator(), fileArchive.getNoteTitle(testNote));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void checkForEmptyNotes_noExistingNotes_true() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note testNote \u003d new Note(\"Cats are cute!\", \"I Love Cats\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.add(testNote);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.getNotes().clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cNote\u003e noteList \u003d notes.getNotes();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertTrue(fileArchive.checkForEmptyNotes(noteList));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void checkForEmptyNotes_existingNotes_false() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note testNote \u003d new Note(\"Cats are cute!\", \"I Love Cats\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.getNotes().clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.add(testNote);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cNote\u003e noteList \u003d notes.getNotes();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertFalse(fileArchive.checkForEmptyNotes(noteList));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void clearNoteList_existingNotes_notesCleared() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.getNotes().clear();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note testNote \u003d new Note(\"Cats are cute!\", \"I Love Cats\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.add(testNote);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileArchive.clearNoteList(notes.getNotes());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(0, notes.getNotes().size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 2,
      "dojh111": 103
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/storage/FileCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "class FileCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TEST_FILEPATH \u003d \"testSave.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yy HH:mm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public FileCommandTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertToLocalDateTime_inputValidDateTime_correctOutput() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String formattedDateTime \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fileCommand.convertToLocalDateTime(\"09-04-21T18:00\").format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(\"09-04-21 18:00\", formattedDateTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertToLocalDateTIme_invalidDateTime_defaultDateTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String formattedDateTime \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fileCommand.convertToLocalDateTime(\"09-23-21T18:00\").format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(\"31-12-99 00:00\", formattedDateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void clearSaveFile_testFilePath_emptyFile() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter testFileWriter \u003d new FileWriter(TEST_FILEPATH, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            testFileWriter.write(\"This is a test\" + System.lineSeparator());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            testFileWriter.write(\"All this should not exist after file clearing\" + System.lineSeparator());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            testFileWriter.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(TEST_FILEPATH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File testFile \u003d new File(TEST_FILEPATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(testFile);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String documentInformation \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                documentInformation \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            testFile.deleteOnExit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assertNull(documentInformation);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Failed creating test save file\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void checkForDelimiterCount_stringWithDelimiters_true() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String testString \u003d \"lesson\u003d-\u003dCS1231\u003d-\u003d05-11-20 12:00\u003d-\u003d05-11-20 16:00\u003d-\u003d25\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        boolean isCorrectNumber \u003d fileCommand.checkForDelimiterCount(testString, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertTrue(isCorrectNumber);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void checkForDelimiterCount_stringWithDelimiters_false() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String testString \u003d \"lesson\u003d-\u003dCS1231\u003d-\u003d05\u003d-\u003d11-20 12:00\u003d-\u003d05-11-20 16:00\u003d-\u003d25\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        boolean isCorrectNumber \u003d fileCommand.checkForDelimiterCount(testString, 4);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertFalse(isCorrectNumber);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 81
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/storage/NoteStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.notes.NoteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "class NoteStorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String EXPECTED_STRING_OUTPUT_NOTES \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            \"Cats are awesome!\u003d-\u003dCats are so cute, they are the best :D\" + System.lineSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String EXPECTED_STRING_NOTES_READ \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            \"Cats are awesome!\u003d-\u003dCats are so cute, they are the best :D\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String TEST_FILEPATH \u003d \"testSave.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteStorage noteStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public NoteStorageTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.notes \u003d new NoteList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.noteStorage \u003d new NoteStorage(notes, TEST_FILEPATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.note \u003d new Note(\"Cats are awesome!  \", \"  Cats are so cute, they are the best :D  \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertNoteToString_newNote_correctStringOutput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String output \u003d noteStorage.convertNoteToString(note);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(EXPECTED_STRING_OUTPUT_NOTES, output);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void writeToNoteSaveFile_newNote_writtenToFile() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.getNotes().clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteStorage.writeToNoteSaveFile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File testFile \u003d new File(TEST_FILEPATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String saveFileContents \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Scanner fileReader \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileReader \u003d new Scanner(testFile);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Testing error - File not found\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assert fileReader !\u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            saveFileContents \u003d fileReader.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        testFile.deleteOnExit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(EXPECTED_STRING_NOTES_READ, saveFileContents);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void readNotesSave_newNote_notesRebuilt() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.getNotes().clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteStorage.writeToNoteSaveFile();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.getNotes().clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteStorage.readNotesSave();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note readNote \u003d new Note(null, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            readNote \u003d notes.get(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Testing error - Note out of bounds\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String noteTitle \u003d readNote.getTitle();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String noteDescription \u003d readNote.getDescription();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Boolean correctTitle \u003d noteTitle.equals(\"Cats are awesome!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Boolean correctDescription \u003d noteDescription.equals(\"Cats are so cute, they are the best :D\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Boolean correctNoteListLength \u003d notes.getNotes().size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertTrue(correctTitle \u0026\u0026 correctDescription \u0026\u0026 correctNoteListLength);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Tests when save data is corrupted and missing fields, all previous save data to that point is still read"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * onto the program and the program continues to run instead of crashing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void createNoteList_missingData_limitedSaveRead() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File testFile \u003d new File(TEST_FILEPATH);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (!testFile.exists()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (testFile.createNewFile()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    System.out.println(\"New test save file created\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Clear save file if written on from previous tests"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileCommand fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(TEST_FILEPATH);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            notes.getNotes().clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Write test data onto test file"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(TEST_FILEPATH, true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"Test Note 1\u003d-\u003dFirst Test case\" + System.lineSeparator());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"Test Note 2\u003d-\u003dSecond Test case\" + System.lineSeparator());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"\u003d-\u003dThis test is missing information\" + System.lineSeparator());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"Test Note 3\u003d-\u003dThis should not be written\" + System.lineSeparator());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileReader \u003d new Scanner(testFile);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            noteStorage.createNoteList(fileReader);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assertEquals(3, notes.getNotes().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Testing error - Could not write to save file\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 2,
      "dojh111": 123
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/storage/TaskStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Lesson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.SaveDelimiterException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "class TaskStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String SAVE_DELIMITER \u003d \"\u003d-\u003d\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TEST_FILEPATH \u003d \"testSave.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXPECTED_LESSON \u003d \"lesson\" + SAVE_DELIMITER + \"CS2113T\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + SAVE_DELIMITER + \"09-04-21 18:00\" + SAVE_DELIMITER + \"09-04-21 18:00\" + SAVE_DELIMITER + \"0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + System.lineSeparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXPECTED_EVENT \u003d \"event\" + SAVE_DELIMITER + \"Concert\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + SAVE_DELIMITER + \"09-04-21 18:00\" + SAVE_DELIMITER + \"09-04-21 18:00\" + SAVE_DELIMITER + \"0\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + System.lineSeparator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXPECTED_DEADLINE \u003d \"deadline\" + SAVE_DELIMITER"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"Return Books\" + SAVE_DELIMITER + \"09-04-21 18:00\" + SAVE_DELIMITER + \"0\" + System.lineSeparator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskStorage taskStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public TaskStorageTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.taskStorage \u003d new TaskStorage(tasks, TEST_FILEPATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        startTime \u003d fileCommand.convertToLocalDateTime(\"09-04-21T18:00\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        endTime \u003d fileCommand.convertToLocalDateTime(\"09-04-21T18:00\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void readTasksSave_saveFileTasks_tasksRebuilt() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File testSaveFile \u003d new File(TEST_FILEPATH);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (!testSaveFile.exists()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (testSaveFile.createNewFile()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    System.out.println(\"Save file for testing created\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(TEST_FILEPATH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(TEST_FILEPATH, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"deadline\u003d-\u003dGo Home\u003d-\u003d16-10-20 23:59\u003d-\u003d0\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            tasks.getTaskList().clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.readTasksSave();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Task testTask \u003d tasks.getTask(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Boolean isCorrectType \u003d testTask.getType().equals(\"deadline\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Boolean isCorrectDescription \u003d testTask.getDescription().equals(\"Go Home\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Boolean isCorrectRecurrence \u003d testTask.getRecurrences() \u003d\u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Boolean isCorrectSize \u003d tasks.getTaskList().size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assertTrue(isCorrectType \u0026\u0026 isCorrectDescription \u0026\u0026 isCorrectRecurrence \u0026\u0026 isCorrectSize);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Testing error - Could not read/write to file\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void createTaskList_saveDataCorrupted_limitedSavesRead() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File testSave \u003d new File(TEST_FILEPATH);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (!testSave.exists()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (testSave.createNewFile()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    System.out.println(\"New save created for testing\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(TEST_FILEPATH);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(TEST_FILEPATH, true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"lesson\u003d-\u003dCS1231\u003d-\u003d17-10-20 09:00\u003d-\u003d17-10-20 12:00\u003d-\u003d0\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    + System.lineSeparator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"deadline\u003d-\u003dGo Home\u003d-\u003d16-10-20 23:59\u003d-\u003d0\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    + System.lineSeparator());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"event\u003d-\u003dAnother Concert 16-10-20 22:00\u003d-\u003d16-10-20 23:59\u003d-\u003d0\" //Corrupted save"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    + System.lineSeparator());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"lesson\u003d-\u003d\u003d-\u003d20-10-20 09:00\u003d-\u003d20-10-20 12:00\u003d-\u003d0\" //Corrupted save"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    + System.lineSeparator());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Still creates with default date time"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"lesson\u003d-\u003dCS2101\u003d-\u003d200-10-20 09:00\u003d-\u003d20-10-20 12:00\u003d-\u003d0\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    + System.lineSeparator());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            tasks.getTaskList().clear();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(testSave);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.createTaskList(fileScanner);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Only first 3 tasks will be added. Upon detected missing data, file reading will stop"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assertEquals(3, tasks.getTaskList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Testing error - Unable to read/write to file\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void writeToTaskSaveFile_allTaskTypes_writeSuccess() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File testSave \u003d new File(TEST_FILEPATH);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (!testSave.exists()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (testSave.createNewFile()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    System.out.println(\"New save created for testing\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(TEST_FILEPATH);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskList.clear();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String[] eventComponents \u003d {\"event\", \"Concert\", \"09-04-21 09:00\", \"09-04-21 12:00\", \"0\"};"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String[] deadlineComponents \u003d {\"deadline\", \"Go home\", \"09-04-21 09:00\", \"0\"};"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String[] lessonComponents \u003d {\"lesson\", \"CS1231\", \"09-04-21 09:00\", \"09-04-21 12:00\", \"0\"};"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.rebuildEvent(eventComponents, taskList, eventComponents[1]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.rebuildDeadline(deadlineComponents, taskList, deadlineComponents[1]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.rebuildLesson(lessonComponents, taskList, lessonComponents[1]);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.writeToTaskSaveFile();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskList.clear();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.readTasksSave();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assertEquals(3, taskList.size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Testing error - Unable to read/write to file\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void rebuildEvent_validInputs_eventAdded() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] taskComponents \u003d {\"event\", \"Concert\", \"09-04-21 09:00\", \"09-04-21 12:00\", \"0\"};"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskStorage.rebuildEvent(taskComponents, taskList, taskComponents[1]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertTrue(taskList.size() \u003d\u003d 1 \u0026\u0026 taskList.get(0).getType().equals(\"event\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void rebuildDeadline_validInputs_deadlineAdded() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] taskComponents \u003d {\"deadline\", \"Go home\", \"09-04-21 09:00\", \"0\"};"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskStorage.rebuildDeadline(taskComponents, taskList, taskComponents[1]);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertTrue(taskList.size() \u003d\u003d 1 \u0026\u0026 taskList.get(0).getType().equals(\"deadline\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void rebuildLesson_validInputs_lessonAdded() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] taskComponents \u003d {\"lesson\", \"CS1231\", \"09-04-21 09:00\", \"09-04-21 12:00\", \"0\"};"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskStorage.rebuildLesson(taskComponents, taskList, taskComponents[1]);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertTrue(taskList.size() \u003d\u003d 1 \u0026\u0026 taskList.get(0).getType().equals(\"lesson\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertDeadlineToString_invalidClass_ClassCastException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Event testEvent \u003d new Event(\"Test event\", startTime, endTime, 0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertThrows(ClassCastException.class, () -\u003e {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.convertDeadlineToString(testEvent, \"deadline\", 0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertEventToString_invalidClass_ClassCastException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(\"Test Deadline\", startTime, 0);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertThrows(ClassCastException.class, () -\u003e {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.convertEventToString(testDeadline, \"event\", 0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertLessonToString_invalidClass_ClassCastException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(\"Test Deadline\", startTime, 0);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertThrows(ClassCastException.class, () -\u003e {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.convertLessonToString(testDeadline, \"lesson\", 0);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertLessonToString_validInput_conversionPasses() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Lesson testLesson \u003d new Lesson(\"CS2113T\", startTime, endTime, 0);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String convertedString \u003d taskStorage.convertLessonToString(testLesson, \"lesson\", 0);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(EXPECTED_LESSON, convertedString);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertEventToString_validInput_conversionPasses() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Event testEvent \u003d new Event(\"Concert\", startTime, endTime, 0);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String convertedString \u003d taskStorage.convertEventToString(testEvent, \"event\", 0);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(EXPECTED_EVENT, convertedString);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertDeadlineToString_validInput_conversionPasses() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(\"Return Books\", startTime, 0);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String convertedString \u003d taskStorage.convertDeadlineToString(testDeadline, \"deadline\", 0);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(EXPECTED_DEADLINE, convertedString);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void checkForMissingDataInSave_missingData_exceptionThrown() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] taskComponents \u003d {\"lesson\", \"\", \"15-11-20 12:00\", \"15-11-20 16:00\", \"20\"};"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String taskString \u003d \"lesson\u003d-\u003dCS2113T\u003d-\u003dCS2111\u003d-\u003d15-11-20 12:00\u003d-\u003d15-11-20 16:00\u003d-\u003d20\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertThrows(ArrayIndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.checkForMissingDataInSave(taskComponents, taskString);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void checkForMissingDataInSave_extraDelimiter_exceptionThrown() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] taskComponents \u003d {\"lesson\", \"CS2113T\", \"15-11-20 12:00\", \"15-11-20 16:00\", \"20\"};"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String taskString \u003d \"lesson\u003d-\u003dCS2113T\u003d-\u003dCS2111\u003d-\u003d15-11-20 12:00\u003d-\u003d15-11-20 16:00\u003d-\u003d20\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertThrows(SaveDelimiterException.class, () -\u003e {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.checkForMissingDataInSave(taskComponents, taskString);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 5,
      "dojh111": 245
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/ui/ScheduleUiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johan9se"
        },
        "content": "package seedu.lifeasier.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskDuplicateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.model.tasks.TaskPastException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import static seedu.lifeasier.ui.ScheduleUi.getDayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": "class ScheduleUiTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static final TaskList EMPTY_TASK_LIST \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static final TaskList NONEMPTY_TASK_LIST \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final LocalDateTime SAMPLE_DATETIME \u003d LocalDateTime.parse(\"2020-12-17T09:00\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static final LocalDate SAMPLE_DATE \u003d SAMPLE_DATETIME.toLocalDate();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final ScheduleUi scheduleUiTest \u003d new ScheduleUi();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void getTaskCountForToday_emptyTaskList_Zero() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int taskCount \u003d scheduleUiTest.getTaskCountForDay(ScheduleUiTest.EMPTY_TASK_LIST, SAMPLE_DATE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(0, taskCount);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void getTaskCountForToday_TaskListWithFiveItems_Five() throws TaskDuplicateException, TaskPastException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            NONEMPTY_TASK_LIST.addDeadline(\"test\" + i, SAMPLE_DATETIME, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int taskCount \u003d scheduleUiTest.getTaskCountForDay(ScheduleUiTest.NONEMPTY_TASK_LIST, SAMPLE_DATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(5, taskCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void getTimeStamp_SampleDateTime_TimeString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String timeString \u003d scheduleUiTest.getTimeStamp(SAMPLE_DATETIME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(\"09:00\", timeString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void getDayOfWeek_SampleDateTime_Thursday() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String dayOfWeek \u003d getDayOfWeek(SAMPLE_DATETIME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(\"THURSDAY\", dayOfWeek);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 6,
      "johan9se": 43
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "bye"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 3
    }
  }
]
