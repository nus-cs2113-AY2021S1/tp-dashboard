[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    compile group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00271.18\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    mainClassName \u003d \"seedu.lifeasier.LifEasier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    archiveBaseName \u003d \"lifeasier\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "dojh111": 3,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Danzel Ong | [Github](https://github.com/dojh111) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Edmund Tan | [Github](https://github.com/EdmundEXE) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Johannine | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Daniel Lim | [Github](https://github.com/daniellimzj) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "EdmundEXE": 1,
      "dojh111": 1,
      "johan9se": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "# LifEasier Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [1.0 Introduction](#10-introduction)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [2.0 Setting Up](#20-setting-up)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [3.0 Design](#30-design)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.1 Architecture](#31-architecture)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.2 Components](#32-components)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        * [3.2.1 LifEasier Component](#321-lifeasier-component)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        * [3.2.2 UI Component](#322-ui-component)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        * [3.2.3 Parser Component](#323-parser-component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        * [3.2.4 Command Component](#324-command-component)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        * [3.2.5 TaskList Component](#325-tasklist-component)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        * [3.2.6 NoteList Component](#326-notelist-component)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        * [3.2.7 Storage Component](#327-storage-component)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [4.0 Implementation](#40-implementation)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.1 Adding Lessons, Events, Deadlines (Fairuz)](#41-adding-lessons-events-deadlines-fairuz)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.2 Editing and Deleting Lessons, Events, Deadlines (Fairuz)](#42-editing-and-deleting-lessons-events-deadlines-fairuz)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.3 Adding Notes (Edmund)](#43-adding-notes-edmund)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.4 Editing and Deleting Notes (Edmund)](#44-editing-and-deleting-notes-edmund)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.5 Storing and Archiving Notes (Danzel)](#45-storing-and-archiving-notes-danzel)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.6 Displaying Schedule (Johannine)](#46-displaying-schedule-johannine)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.7 Displaying Free Time and Sleep Time (Daniel)](#47-displaying-free-time-and-sleep-time-daniel)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.8 Parsing Commands (Edmund / Daniel?)](#48-parsing-commands-edmund--daniel)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [5.0 Product Scope](#50-product-scope)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [5.1 Target user profile](#51-target-user-profile)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [5.2 Value proposition](#52-value-proposition)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [6.0 User Stories](#60-user-stories)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [7.0 Non-Functional Requirements](#70-non-functional-requirements)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [8.0 Documentation](#80-documentation)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [9.0 Testing / Logging](#90-testing--logging)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [10.0 Dev Ops](#100-dev-ops)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [11.0 Glossary](#110-glossary)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 1.0 Introduction"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 2.0 Setting Up"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 3.0 Design"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.1 Architecture"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.2 Components"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "This section expands on the various components that were first seen in the Architecture section."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "#### 3.2.1 LifEasier Component"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The LifEasier component is the main class of the application. It initialises all other components,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " and is used as the centre of all other components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "#### 3.2.2 UI Component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The UI component reads the user’s inputs and displays messages and content to the user. It consists of a main Ui,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " a ScheduleUi and a TimetableUi. The ScheduleUi handles all outputs to do with displaying a user’s schedule."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "  To do this, it uses the TimetableUi to display a specialised timetable view of the weekly schedule. "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "  The main Ui handles everything else, such as displaying general messages and reading the user’s inputs. "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "#### 3.2.3 Parser Component"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The Parser component takes the user’s inputs from the Ui component, and makes sense of these commands. If the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " commands are incomplete, it calls the Ui component to prompt the user for more input until the commands have "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " the parameters required to execute. Once this condition is fulfilled, it returns a Command object to LifEasier"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "  for the commands to be executed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "  "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "#### 3.2.4 Command Component"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The Command component consists of an abstract Command class and the many different commands that inherit the "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Command class. What is important to note is that each type of command class (e.g. addLessonCommand, showNotesCommand)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " implements an abstract execute() method that carries out the command. Figure 3.2.4-1 below shows the classes that "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " inherit from the Command class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " *Figure 3.2.4-1: The classes that inherit from the Command class*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "#### 3.2.5 TaskList Component"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The TaskList component handles the instantiation and modifications to the overall list of tasks. Specifically,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " it handles any addition, edition, deletion on the TaskList. This component will heavily interact with the Command "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " component as most commands will include modifications to the overall TaskList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "#### 3.2.6 NoteList Component"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The NoteList component contains all the users notes. Similar to the TaskList component, it interacts heavily with "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "the Command component to modify the user’s notes."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "#### 3.2.7 Storage Component"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The Storage component handles saving of the users’ notes and tasks to persistent storage."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " It does this after every addition, change, or deletion to the TaskList component or NoteList component. "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " It also handles the moving of the stored notes to a separate archive file if instructed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 4.0 Implementation"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.1 Adding Lessons, Events, Deadlines (Fairuz)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.2 Editing and Deleting Lessons, Events, Deadlines (Fairuz)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.3 Adding Notes (Edmund)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.4 Editing and Deleting Notes (Edmund)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.5 Storing and Archiving Notes (Danzel)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.6 Displaying Schedule (Johannine)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.7 Displaying Free Time and Sleep Time (Daniel)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The freeTime command displays to the user their longest block of free time for that day, while the "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " command displays to the user how much time they have available to sleep based on that day’s and the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " next day’s schedule. Both commands are implemented similarly. They both find the longest uninterrupted block"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " of free time within a certain time period by checking if individual hour-long time blocks in this time period"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " are free. The commands then use the start and end time values found to calculate a duration, and pass all"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " three values to the Ui to display to the user. Figure 4.8-1 shows the sequence diagram for the freeTimeCommand,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " and Figure 4.8-2 shows the sequence diagram for the sleepTimeCommand."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "*Figure 4.8-1: Sequence diagram for freeTimeCommand execution*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "*Figure 4.8-2: Sequence diagram for sleepTimeCommand execution*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Because of the way that the TaskList stores Tasks in an unsorted way, the  freeTime and sleepTime commands"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " must iterate through the entire list every time to check if a particular time slot has nothing scheduled."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " This corresponds to a time complexity of O(N). This was chosen as the way to implement this function as the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " size of TaskList can be said to be relatively small. As such, the repeated iteration would not result in "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " significant impacts on the timing performance."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "2. The functions also only provide an accuracy resolution which is rounded to the hour. Similar to the displaySchedule"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " command, this was an intentional design choice to not overload the user with too much unnecessary details. "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.8 Parsing Commands (Edmund / Daniel)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 5.0 Product Scope"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 5.1 Target user profile"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the target user profile}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 5.2 Value proposition"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 6.0 User Stories"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 7.0 Non-Functional Requirements"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 8.0 Documentation"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Apart from PDF versions of our User Guide and Developer Guide, separate versions are also managed under the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " `/docs` folder. The versions under these folders should be the most updated. GitHub Pages and Jekyll are used "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " to generate formatted static websites to host the User Guide and Developer Guide."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 9.0 Testing / Logging"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The project makes use of Gradle and JUnit5 for testing. There are two ways that tests can be run, which are elaborated"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " below."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "1. Using the IntelliJ JUnit test runner: To test the entire project, navigate to the `src/test/java/seedu.lifeasier` "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "folder and right click on it, and select `Run Tests in ‘seedu.life…’`. The option to run tests with coverage is also "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "listed.To run tests on a particular subset, you can right click on any test package, test class, or test method and"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "select `Run`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "2. Using Gradle: In the terminal, run the command `gradlew clean test` for Windows, or `./gradlew clean test` for Mac"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " and Linux. This will run all tests."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The project uses the `java.util.logging` package for logging. Each class uses its own `Logger` object to log the "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "necessary messages. Logging can be enabled or disabled through the use of the `logging boolean` when calling"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "the `LifEasier.run()` method. Setting `showLogging` to `true` will enable logging, and setting it to `false` will "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "disable logging."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 10.0 Dev Ops"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The project uses Gradle for build automation and dependency management. More information on how to use"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " Gradle can be found [here](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "The project also uses Github Actions for Continuous Integration (CI). The configurations file can be found in"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " the `.github/workflows` folder. No actions regarding configuration are currently required, but this file can be"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "  edited in future to change the configurations if necessary."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 11.0 Glossary"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* *glossary item* - Definition"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 152,
      "-": 23
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "# LifEasier User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [1.0 Introduction](#10-introduction)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [2.0 Quick Start](#20-quick-start)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [3.0 User Features](#30-user-features)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.1 Viewing Help: `help`](#31-viewing-help-help)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.2 Adding a Lesson: `addLesson`](#32-adding-a-lesson-addlesson)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.3 Adding an Event: `addEvent`](#33-adding-an-event-addevent)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.4 Adding a Deadline: `addDeadline`](#34-adding-a-deadline-adddeadline)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.5 Editing a Lesson: `editLesson`](#35-editing-a-lesson-editlesson)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.6 Editing an Event: `editEvent`](#36-editing-an-event-editevent)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.7 Editing a Deadline: `editDeadline`](#37-editing-a-deadline-editdeadline)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.8 Deleting a Task: `deleteTask`](#38-deleting-a-task-deletetask)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.9 Displaying Schedule: `display`](#39-displaying-schedule-display)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.10 Viewing Available Free Time: `freeTime`](#310-viewing-available-free-time-freetime)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.11 Viewing Available Sleep Time: `sleepTime`](#311-viewing-available-sleep-time-sleeptime)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.12 Adding a New Note: `addNotes`](#312-adding-a-new-note-addnotes)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.13 Showing Notes: `showNotes`](#313-showing-notes-shownotes)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.14 Deleting a Note: `deleteNotes`](#314-deleting-a-note-deletenotes)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.15 Editing a Note: `editNotes`](#315-editing-a-note-editnotes)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.16 Archiving Notes: `archive`](#316-archiving-notes-archive)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [3.17 Exiting: `exit`](#317-exiting-exit)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [4. Other Features](#40-other-features)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.1 Storing Data](#41-storing-data)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    * [4.2 Recurring Tasks and Auto Deletion](#42-recurring-tasks-and-auto-deletion)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [5. FAQ](#50-faq)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "* [6. Command Summary](#60-command-summary)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 1.0 Introduction"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 2.0 Quick Start"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 3.0 User Features"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.1 Viewing Help: `help`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.2 Adding a Lesson: `addLesson`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.3 Adding an Event: `addEvent`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.4 Adding a Deadline: `addDeadline`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.5 Editing a Lesson: `editLesson`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.6 Editing an Event: `editEvent`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.7 Editing a Deadline: `editDeadline`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.8 Deleting a Task: `deleteTask`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.9 Displaying Schedule: `display`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.10 Viewing Available Free Time: `freeTime`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Displays your longest block of free time for that day based on the schedule."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Use this command to find out when is a good time to schedule something."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### Notes on freeTime Command:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "- The system only searches for free time between 7:00 and 24:00. This is to promote a healthy sleep cycle."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Format: `freeTime`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "An example of how to use the freeTime command is shown in Figure 3.10-1."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "freeTime"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "You have 10 hours of free time between 14:00 and 24:00!"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "You can try scheduling something in this time!"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "*Figure 3.10-1: An example of using the freeTime command.*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.11 Viewing Available Sleep Time: `sleepTime`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Displays how much time you have available to sleep based on your schedule for that day and the day after."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Use this command to find out if you can have a good rest after a long day."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "##### Notes on sleepTime Command:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "- The system recommends 8 hours of sleep a day. Anything more, and the extra duration will not be displayed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "- The system will also count the hour before your first activity in the day as busy,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "to give you time to wake up and get ready. E.g. if your first activity is at 9:00, "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "the system will tell you that you have nothing on only until 8:00."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "Format: sleepTime"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "An example of how to use the sleepTime command is shown in Figure 3.11-1."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "sleepTime"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "You have nothing on from 14:00 today to 8:00 tomorrow!"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "You can sleep for the recommended 8 hours or longer!"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "*Figure 3.11-1: An example of using sleepTime command*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.12 Adding a New Note: `addNotes`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.13 Showing Notes: `showNotes`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.14 Deleting a Note: `deleteNotes`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.15 Editing a Note: `editNotes`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.16 Archiving Notes: `archive`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 3.17 Exiting: `exit`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 4.0 Other Features"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.1 Storing Data"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "### 4.2 Recurring Tasks and Auto Deletion"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " **LifEasier** automatically shifts the date for any tasks 7 days forward if their original date is past, "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " and they are set to repeat. **LifEasier** does this for every task in your schedule every time it starts up."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " E.g. If you start up **LifEasier** on the 24th of October, and you had a repeating class that last occurred "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " on the 23rd of October, the lesson will be moved 7 days forward to the 30th of October. This ensures your"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " repeating lessons, events and deadlines will always be moved forward as long as they are meant to repeat."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " If it is past the date of your task, and if the task does not repeat, it will automatically be removed instead."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " By automatically deleting those tasks that have already been completed, **LifEasier** ensures your save files do "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " not become unnecessarily large."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 5.0 FAQ"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "## 6.0 Command Summary"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 113
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/LifEasier.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.ui.ScheduleUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * LifEasier is a CLI application that allows busy CEG students to schedule their day."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * If you can type fast, LifEasier will get your scheduling done faster than traditional GUI calender apps."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class LifEasier {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileStorage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private ScheduleUi scheduleUi;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteHistory noteHistory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskHistory taskHistory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public LifEasier(String fileNameTasks, String fileNameNotes) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        notes \u003d new NoteList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage \u003d new FileStorage(fileNameTasks, fileNameNotes, ui, notes, tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        scheduleUi \u003d new ScheduleUi();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        noteHistory \u003d new NoteHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        taskHistory \u003d new TaskHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Runs the LifEasier program infinitely until termination by the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void run(boolean showLogging) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (!showLogging) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.readSaveFiles();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.updateTasks(LocalDate.now());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        showStartupSequence();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        boolean isFinished \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        while (!isFinished) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                Command userCommand \u003d parser.parseCommand(fullCommand, ui);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                userCommand.execute(ui, notes, tasks, storage, parser, noteHistory, taskHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                isFinished \u003d userCommand.isFinished();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            } catch (ParserException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                ui.showParseUnknownCommandMessage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showGoodbyeMessage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showStartupSequence() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showLogo();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        //scheduleUi.showHome(tasks);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showGreetingMessage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Main entry-point for the LifEasier application."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        new LifEasier(\"saveFileTasks.txt\", \"saveFileNotes.txt\").run(false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 32,
      "EdmundEXE": 2,
      "dojh111": 42,
      "johan9se": 15,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/AddDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(AddDeadlineCommand.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private int recurrences;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public AddDeadlineCommand(String description, LocalDateTime by, int recurrences) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.recurrences \u003d recurrences;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Adding deadline to taskList...\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Task task \u003d tasks.addDeadline(description, by, recurrences);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Saving updated taskList to storage...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.saveTasks();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showAddConfirmationMessage(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 10,
      "daniellimzj": 25,
      "EdmundEXE": 1,
      "dojh111": 6
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(AddEventCommand.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private int recurrences;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public AddEventCommand(String description, LocalDateTime start, LocalDateTime end, int recurrences) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.recurrences \u003d recurrences;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Adding event to taskList...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Task task \u003d tasks.addEvent(description, start, end, recurrences);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Saving updated taskList to storage...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.saveTasks();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showAddConfirmationMessage(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 9,
      "daniellimzj": 27,
      "EdmundEXE": 1,
      "dojh111": 6
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/AddLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class AddLessonCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(AddLessonCommand.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private int recurrences;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public AddLessonCommand(String moduleCode, LocalDateTime start, LocalDateTime end, int recurrences) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.recurrences \u003d recurrences;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Adding lesson to taskList...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Task task \u003d tasks.addLesson(moduleCode, start, end, recurrences);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Saving updated taskList to storage...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.saveTasks();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showAddConfirmationMessage(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 9,
      "daniellimzj": 28,
      "EdmundEXE": 1,
      "dojh111": 6
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/AddNotesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class AddNotesCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(AddNotesCommand.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isEmpty \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public AddNotesCommand(String title) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String checkForEmpty(Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for checking empty description inputs\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (input.trim().length() \u003e 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            isEmpty \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showEmptyDescriptionMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of checking empty description inputs\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String isValidTitle(Ui ui, String title) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String noteTitle \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (title.trim().length() \u003e 0) {        // title is already inputted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            isEmpty \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            noteTitle \u003d title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNoteTitleMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            while (isEmpty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                noteTitle \u003d checkForEmpty(ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return noteTitle;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of AddNotesCommand\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String noteDescription \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for assigning noteTitle\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.printSeparator();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        final String noteTitle \u003d isValidTitle(ui, title);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End for assigning noteTitle\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isEmpty \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"IsEmpty set back to true\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.showNoteDescriptionMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for assigning noteDescription\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (isEmpty) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            noteDescription \u003d checkForEmpty(ui);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End for assigning noteDescription\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        notes.add(new Note(noteTitle,noteDescription));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Note is added\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.showNoteAddedMessage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.printSeparator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.saveNote();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 18,
      "EdmundEXE": 54,
      "dojh111": 8
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/ArchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        storage.archiveData();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 1,
      "dojh111": 17
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": " * The Command class will handle all the commands input from the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    protected boolean isTerminated;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.isTerminated \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Executes the user command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public abstract void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                                 NoteHistory noteHistory, TaskHistory taskHistory);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns status of whether the program has been terminated."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public boolean isFinished() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return isTerminated;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 12,
      "EdmundEXE": 2,
      "dojh111": 19,
      "johan9se": 1
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/DeleteNotesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.EmptyNoteListException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.NoteCommandFunctions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.TitleNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class DeleteNotesCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(DeleteNotesCommand.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isEmpty \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public DeleteNotesCommand(String title) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void findTitle(Ui ui, NoteList notes, String title, NoteHistory noteHistory) throws TitleNotFoundException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for finding title in note list\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int matchNumber \u003d NoteCommandFunctions.checkNumberOfNoteMatches(notes, title);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int noteNumber \u003d NoteCommandFunctions.findNoteNumber(notes, title);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End for finding title in note list\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        switch (matchNumber) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        case 0:     // no matches"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"No matches for title\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            throw new TitleNotFoundException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"One match found\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(notes.get(noteNumber).toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showConfirmDeleteMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            String input \u003d checkConfirmationMessage(ui, ui.readCommand());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            checkIfDelete(ui, notes, noteNumber, input, noteHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Multiple matches found\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showMultipleMatchesFoundMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Start of printing all matching notes\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.printMultipleNoteMatches(notes, title);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"End of printing all matching notes\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            noteNumber \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            NoteCommandFunctions.checkForIndexOutOfBounds(notes, noteNumber);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(notes.get(noteNumber - 1).toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showConfirmDeleteMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d checkConfirmationMessage(ui, ui.readCommand());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            checkIfDelete(ui, notes, noteNumber, input, noteHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void checkIfDelete(Ui ui, NoteList notes, int noteNumber, String input, NoteHistory noteHistory) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (input.trim().equals(\"Y\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Temporarily hold details of this Note\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Note oldCopyOfNote \u003d noteHistory.getCurrCopyOfNoteToDelete(notes, noteNumber);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            notes.remove(noteNumber);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNoteDeletedMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            noteHistory.pushOldCopy(oldCopyOfNote, ui);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Push old copy of Note into noteHistory\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNoteNotDeletedMessage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String checkConfirmationMessage(Ui ui, String input) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start check for Y/N input\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (!input.trim().equals(\"Y\") \u0026\u0026 !input.trim().equals(\"N\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showInvalidConfirmationMessage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End check for Y/N input\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Start of DeleteNotesCommand\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.printSeparator();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            NoteCommandFunctions.checkEmptyList(notes);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (title.trim().length() \u003e 0) {        // title is already inputted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                findTitle(ui, notes, title, noteHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                ui.showSelectWhichNoteToDeleteMessage();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                logger.log(Level.INFO, \"Start of printing all notes in the list\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                ui.printAllNotes(notes);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                logger.log(Level.INFO, \"End of printing all notes in the list\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                int noteNumber \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                NoteCommandFunctions.checkForIndexOutOfBounds(notes, noteNumber);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                System.out.println(notes.get(noteNumber - 1).toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                ui.showConfirmDeleteMessage();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                String input \u003d checkConfirmationMessage(ui, ui.readCommand());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                checkIfDelete(ui, notes, noteNumber -  1, input, noteHistory);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            storage.saveNote();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.printSeparator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"End of DeleteNotesCommand\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input number is out of bounds\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showInvalidNumberMessage();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (TitleNotFoundException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input title does not match any of the note titles\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNoTitleFoundMessage();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a number\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNumberFormatMessage();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (EmptyNoteListException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showEmptyNoteListMessage();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 110,
      "dojh111": 3,
      "johan9se": 17
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/DeleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.tasks.TaskNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(ShowNotesCommand.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public DeleteTaskCommand(String type, String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Prints a list of all Tasks that match the user\u0027s input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList from which Tasks will be searched."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param type Type of task to be searched for."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param name Name of task to be searched for."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @throws TaskNotFoundException If no matching tasks are found."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void printMatchingTasks(TaskList tasks, Ui ui, String type, String name) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.printMatchingTasks(type, name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void checkForIndexOutOfBounds(TaskList tasks, int userInput) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.checkForIndexOutOfBounds(userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Deletes the specified Task from the TaskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList from which task is to be deleted."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param index Index of task to be deleted."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void deleteTask(TaskList tasks, Ui ui, int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.deleteTask(index, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Executes the delete task command and deletes the Task that the user specifies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param notes NoteList containing user\u0027s notes."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList containing user\u0027s tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param storage Storage object to save tasks and notes to memory."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param parser Parser object to parse user\u0027s inputs."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            if (type.equals(\"\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                throw new ParserException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Start of DeleteTaskCommand...\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Printing all matching tasks...\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            printMatchingTasks(tasks, ui, type, name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showSelectTaskToDelete(type);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Reading user input for choice of task to delete...\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int userTaskChoice \u003d ui.readSingleIntInput() - 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            checkForIndexOutOfBounds(tasks, userTaskChoice);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Temporarily hold value of this Task\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Task oldCopyOfTask \u003d taskHistory.getCurrCopyOfTaskToDelete(tasks, userTaskChoice);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Deleting task from taskList...\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            deleteTask(tasks, ui, userTaskChoice);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            taskHistory.pushOldCopy(oldCopyOfTask, ui);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Push old copy of Task into taskHistory\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Saving updated taskList to storage...\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            storage.saveTasks();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showDeleteConfirmationMessage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"User input is invalid\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showInvalidInputMessage();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (TaskNotFoundException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input \" + type + \" name does not match any of the existing \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                    + type + \" names.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showNoMatchesMessage(type);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"End of DeleteTaskCommand\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 66,
      "daniellimzj": 25,
      "dojh111": 4,
      "johan9se": 9
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/DisplayScheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.ui.ScheduleUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class DisplayScheduleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private boolean isDisplayWeek;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private final ScheduleUi scheduleUi \u003d new ScheduleUi();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String NO_TASKS_TODAY_MESSAGE \u003d \"You have nothing on for today!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public DisplayScheduleCommand(String toDisplay) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.isDisplayWeek \u003d toDisplay.equals(\"week\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (isDisplayWeek) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            scheduleUi.showHome(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            taskHistory.printTaskHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            int taskCountForToday \u003d scheduleUi.getTaskCountForToday(tasks, currDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (taskCountForToday \u003e 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                System.out.println(\"Here is your schedule for today:\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                scheduleUi.displayDaySchedule(currDate, tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                System.out.println(NO_TASKS_TODAY_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 16,
      "EdmundEXE": 1,
      "dojh111": 5,
      "johan9se": 21
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/EditDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.tasks.TaskNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class EditDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(EditDeadlineCommand.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String deadlineName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public EditDeadlineCommand(String deadlineName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.deadlineName \u003d deadlineName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void printMatchingDeadlines(TaskList tasks,Ui ui, String code) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.printMatchingTasks(Ui.PARAM_DEADLINE, code);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editDeadlineName(TaskList tasks, int index, Ui ui) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.editTaskDescription(index, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editDeadlineTime(TaskList tasks, int index, Ui ui) throws ParserException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.editDeadlineTime(index, ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void checkForIndexOutOfBounds(TaskList tasks, int userInput) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.checkForIndexOutOfBounds(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Start of EditDeadlineCommand\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Printing all matching deadlines...\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            printMatchingDeadlines(tasks, ui, deadlineName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showSelectTaskToEdit(Ui.PARAM_DEADLINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int userDeadlineChoice \u003d Integer.parseInt(ui.readCommand()) - 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            checkForIndexOutOfBounds(tasks, userDeadlineChoice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Temporarily hold value of this Deadline\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Task oldCopyOfDeadline \u003d taskHistory.getCurrCopyOfTaskToEdit(tasks, userDeadlineChoice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            selectParameterToEdit(ui, tasks, userDeadlineChoice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            taskHistory.pushOldCopy(oldCopyOfDeadline, ui);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Push old copy of Deadline into taskHistory\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            storage.saveTasks();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input number is out of bounds\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showInvalidNumberMessage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a number\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showNumberFormatMessage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not in the correct format\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showInvalidInputMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (TaskNotFoundException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input Deadline name does not match any of the existing Deadline names.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showNoMatchesMessage(\"deadline\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"End of EditDeadlineCommand\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void selectParameterToEdit(Ui ui, TaskList tasks, int userDeadlineChoice) throws ParserException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showSelectParameterToEdit();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showEditableParametersMessage(Ui.PARAM_DEADLINE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int userParamChoice \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        switch (userParamChoice) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case (1):"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInputMessage(Ui.PARAM_DEADLINE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editDeadlineName(tasks, userDeadlineChoice, ui);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case (2):"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInputFormat(Ui.PARAM_DEADLINE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editDeadlineTime(tasks, userDeadlineChoice, ui);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 64,
      "daniellimzj": 5,
      "dojh111": 3,
      "johan9se": 29
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/EditEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.tasks.TaskNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(EditEventCommand.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public EditEventCommand(String eventName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void printMatchingEvents(TaskList tasks,Ui ui, String code) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.printMatchingTasks(Ui.PARAM_EVENT, code);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editEventName(TaskList tasks, int index, Ui ui) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.editTaskDescription(index, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editEventTime(TaskList tasks, int index, Ui ui) throws ParserException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.editEventTime(index, ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void checkForIndexOutOfBounds(TaskList tasks, int userInput) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.checkForIndexOutOfBounds(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Start of EditEventCommand\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Printing all matching events...\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            printMatchingEvents(tasks, ui, eventName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showSelectTaskToEdit(Ui.PARAM_EVENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Reading user input for choice of event to edit...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int userEventChoice \u003d ui.readSingleIntInput() - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            checkForIndexOutOfBounds(tasks, userEventChoice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showSelectParameterToEdit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showEditableParametersMessage(Ui.PARAM_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Reading user input for choice of parameter to edit...\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int userParamChoice \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Temporarily hold value of this Event\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Task oldCopyOfEvent \u003d taskHistory.getCurrCopyOfTaskToEdit(tasks, userEventChoice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            selectParameterToEdit(ui, tasks, userEventChoice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            taskHistory.pushOldCopy(oldCopyOfEvent, ui);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Push old copy of Event into taskHistory\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            storage.saveTasks();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input number is out of bounds\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showInvalidNumberMessage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a number\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showNumberFormatMessage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not in the correct format\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showInvalidInputMessage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (TaskNotFoundException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input event name does not match any of the existing event names.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNoMatchesMessage(Ui.PARAM_EVENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"End of EditEventCommand\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void selectParameterToEdit(Ui ui, TaskList tasks, int userEventChoice) throws ParserException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showSelectParameterToEdit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showEditableParametersMessage(Ui.PARAM_EVENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int userParamChoice \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        switch (userParamChoice) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case (1):"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInputMessage(Ui.PARAM_EVENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editEventName(tasks, userEventChoice, ui);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case (2):"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInputFormat(Ui.PARAM_EVENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editEventTime(tasks, userEventChoice, ui);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 70,
      "daniellimzj": 5,
      "dojh111": 4,
      "johan9se": 28
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/EditLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.tasks.TaskNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class EditLessonCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(EditLessonCommand.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public EditLessonCommand(String code) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void printLessonsMatchingCode(TaskList tasks,Ui ui, String code) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        tasks.printMatchingTasks(Ui.PARAM_LESSON, code);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editLessonModuleCode(TaskList tasks, int index, Ui ui) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.editTaskDescription(index, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editLessonTime(TaskList tasks, int index, Ui ui) throws ParserException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.editLessonTime(index, ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void checkForIndexOutOfBounds(TaskList tasks, int userInput) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        tasks.checkForIndexOutOfBounds(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Start of EditLessonCommand\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Printing all matching lessons...\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            printLessonsMatchingCode(tasks, ui, code);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showSelectTaskToEdit(Ui.PARAM_LESSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Reading user input for choice of lesson to edit...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int userLessonChoice \u003d ui.readSingleIntInput() - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            checkForIndexOutOfBounds(tasks, userLessonChoice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showSelectParameterToEdit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showEditableParametersMessage(Ui.PARAM_LESSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Temporarily hold value of this Event\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            Task oldCopyOfLesson \u003d taskHistory.getCurrCopyOfTaskToEdit(tasks, userLessonChoice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            selectParameterToEdit(ui, tasks, userLessonChoice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            taskHistory.pushOldCopy(oldCopyOfLesson, ui);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            logger.log(Level.INFO, \"Push old copy of Event into taskHistory\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            storage.saveTasks();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input number is out of bounds\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showInvalidNumberMessage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a number\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showNumberFormatMessage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not in the correct format\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showInvalidInputMessage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (TaskNotFoundException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input deadline name does not match any of the existing deadline names.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showNoMatchesMessage(\"deadline\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"End of EditLessonCommand\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void selectParameterToEdit(Ui ui, TaskList tasks, int userLessonChoice) throws ParserException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showSelectParameterToEdit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ui.showEditableParametersMessage(Ui.PARAM_LESSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int userParamChoice \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        switch (userParamChoice) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case (1):"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInputMessage(Ui.PARAM_LESSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editLessonModuleCode(tasks, userLessonChoice, ui);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        case (2):"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInputFormat(Ui.PARAM_LESSON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editLessonTime(tasks, userLessonChoice, ui);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 68,
      "daniellimzj": 3,
      "dojh111": 4,
      "johan9se": 29
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/EditNotesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.NoteCommandFunctions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.EmptyNoteListException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.TitleNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class EditNotesCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(EditNotesCommand.class.getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public EditNotesCommand(String title) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void findTitle(Ui ui, NoteList notes, Parser parser,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                           String title, NoteHistory noteHistory) throws TitleNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for finding title in note list\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int matchNumber \u003d NoteCommandFunctions.checkNumberOfNoteMatches(notes, title);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int noteNumber \u003d NoteCommandFunctions.findNoteNumber(notes, title);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End for finding title in note list\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        switch (matchNumber) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        case 0:     // no matches"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"No matches for title\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            throw new TitleNotFoundException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"One match found\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(notes.get(noteNumber).toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showConfirmEditMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            promptUserInput(ui, parser, notes, noteNumber, ui.readCommand(), noteHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Multiple matches found\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showMultipleMatchesFoundMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Start of printing all matching notes\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.printMultipleNoteMatches(notes, title);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"End of printing all matching notes\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            noteNumber \u003d Integer.parseInt(ui.readCommand()) - 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            NoteCommandFunctions.checkForIndexOutOfBounds(notes, noteNumber);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(notes.get(noteNumber).toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showConfirmEditMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            promptUserInput(ui, parser, notes, noteNumber, ui.readCommand(), noteHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void promptUserInput(Ui ui, Parser parser, NoteList notes, int noteNumber,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                                 String input, NoteHistory noteHistory) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (parser.parseUserInputYesOrNo(input, ui).equals(\"Y\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Y is inputted\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showEditWhichPartMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d parser.parseUserInputTOrD(input, ui);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            changeTitleOrDescription(ui, parser, notes, noteNumber, input, noteHistory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"N is inputted\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNoteNotEditedMessage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void changeTitleOrDescription(Ui ui, Parser parser, NoteList notes, int noteNumber, String input,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                                          NoteHistory noteHistory) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Note oldCopyOfNote \u003d noteHistory.getCurrCopyOfNoteToEdit(notes, noteNumber);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        logger.log(Level.INFO, \"Temporarily hold details of this Note\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (input.trim().equals(\"T\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"T is inputted\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(\"Current Title: \" + notes.get(noteNumber).getTitle());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showEditTitleMessage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d parser.checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            notes.get(noteNumber).setTitle(input);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Title is changed\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(\"OK! Your title is now: \" + notes.get(noteNumber).getTitle());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"D is inputted\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(\"Current description:\\n\" + notes.get(noteNumber).getDescription());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showEditDescriptionMessage();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d parser.checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            notes.get(noteNumber).setDescription(input);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Description is changed\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(\"OK! Your description is now: \" + notes.get(noteNumber).getDescription());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        noteHistory.pushOldCopy(oldCopyOfNote, ui);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        logger.log(Level.INFO, \"Push old copy of Note into noteHistory\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.printSeparator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Start of EditNotesCommand\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.printSeparator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            NoteCommandFunctions.checkEmptyList(notes);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (title.trim().length() \u003e 0) {        // title is already inputted"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                findTitle(ui, notes, parser, title, noteHistory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                ui.showSelectWhichNoteToEditMessage();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                logger.log(Level.INFO, \"Start of printing all notes in the list\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                ui.printAllNotes(notes);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                logger.log(Level.INFO, \"End of printing all notes in the list\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                int noteNumber \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                NoteCommandFunctions.checkForIndexOutOfBounds(notes, noteNumber);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                System.out.println(notes.get(noteNumber - 1).toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                ui.showConfirmEditMessage();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                promptUserInput(ui, parser, notes, noteNumber - 1, ui.readCommand(), noteHistory);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            storage.saveNote();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"End of EditNotesCommand\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input number is out of bounds\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showInvalidNumberMessage();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (TitleNotFoundException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input title does not match any of the note titles\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNoTitleFoundMessage();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a number\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNumberFormatMessage();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (EmptyNoteListException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showEmptyNoteListMessage();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 117,
      "dojh111": 3,
      "johan9se": 28
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.isTerminated \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 16,
      "EdmundEXE": 1,
      "dojh111": 5
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/FreeTimeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class FreeTimeCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(FreeTimeCommand.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final int PARAM_START \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final int PARAM_END \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final int HOUR_EARLIEST \u003d 7;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final int HOUR_LATEST \u003d 24;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Executes the free time command and displays to the user their longest block of free time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param notes NoteList containing user\u0027s notes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList containing user\u0027s tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param storage Storage object to save tasks and notes to memory."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param parser Parser object to parse user\u0027s inputs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Getting tasks from today...\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasksFromToday \u003d tasks.getTasksFromOneDay(LocalDate.now());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Getting longest block of free time...\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int[] longestFreeTime \u003d getLongestFreeTime(tasksFromToday);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int startHour \u003d longestFreeTime[PARAM_START];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int endHour \u003d longestFreeTime[PARAM_END];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int duration \u003d endHour - startHour;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Showing free time message...\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showFreeTimeMessage(startHour, endHour, duration);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns true if there is nothing scheduled for a particular hour slot in a day."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param hour The time to be checked."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks An ArrayList containing the tasks scheduled for that day."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return True if there is nothing scheduled."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    boolean isFreeTime(int hour, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (!(task instanceof Deadline) \u0026\u0026 task.isWithinTimeSlot(hour)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns the longest block of free time in the day\u0027s schedule."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks An ArrayList containing the tasks scheduled for that day."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return An integer array where the first index is the start of the block, and the second index is the end."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    int[] getLongestFreeTime(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int[] longestFreeTime \u003d new int[2];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int tempStartOfFreeTime \u003d HOUR_EARLIEST;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int tempEndOfFreeTime \u003d HOUR_EARLIEST;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assert (0 \u003c HOUR_LATEST \u0026\u0026 HOUR_LATEST \u003c 25) : \"The latest hour checked must be between 0 and 24\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assert (0 \u003c\u003d HOUR_EARLIEST \u0026\u0026 HOUR_EARLIEST \u003c HOUR_LATEST) :"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"The earliest hour must be between 0 and the latest hour\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (int hour \u003d HOUR_EARLIEST; hour \u003c HOUR_LATEST; hour++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (isFreeTime(hour, tasks)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                tempEndOfFreeTime \u003d hour + 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                tempStartOfFreeTime \u003d hour + 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            int durationOfTempFreeTimeBlock \u003d tempEndOfFreeTime - tempStartOfFreeTime;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            int durationOfLongestFreeTimeBlock \u003d longestFreeTime[PARAM_END] - longestFreeTime[PARAM_START];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (durationOfTempFreeTimeBlock \u003e\u003d durationOfLongestFreeTimeBlock) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                longestFreeTime[PARAM_START] \u003d tempStartOfFreeTime;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                longestFreeTime[PARAM_END] \u003d tempEndOfFreeTime;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return longestFreeTime;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 107,
      "dojh111": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Executes the help command and displays the help message to users."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param notes NoteList containing user\u0027s notes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList containing user\u0027s tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param storage Storage object to save tasks and notes to memory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param parser Parser object to parse user\u0027s inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showHelp();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 20,
      "EdmundEXE": 1,
      "dojh111": 6
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/InvalidCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 14,
      "dojh111": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/ShowNotesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.EmptyNoteListException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.NoteCommandFunctions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.TitleNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class ShowNotesCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(ShowNotesCommand.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public ShowNotesCommand(String title) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private void findTitle(Ui ui, NoteList notes, String title) throws TitleNotFoundException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start for finding title in note list\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int matchNumber \u003d NoteCommandFunctions.checkNumberOfNoteMatches(notes, title);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int noteNumber \u003d NoteCommandFunctions.findNoteNumber(notes, title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End for finding title in note list\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        switch (matchNumber) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        case 0:     // no matches"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"No matches for title\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            throw new TitleNotFoundException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"One match found\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(notes.get(noteNumber).toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Multiple matches found\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showMultipleMatchesFoundMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Start of printing all matching notes\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.printMultipleNoteMatches(notes, title);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"End of printing all matching notes\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            noteNumber \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            NoteCommandFunctions.checkForIndexOutOfBounds(notes, noteNumber);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println(notes.get(noteNumber - 1).toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"Start of ShowNotesCommand\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.printSeparator();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            NoteCommandFunctions.checkEmptyList(notes);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (title.trim().length() \u003e 0) {        // title is already inputted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                findTitle(ui, notes, title);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                ui.showSelectWhichNoteToViewMessage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                logger.log(Level.INFO, \"Start of printing all notes in the list\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                ui.printAllNotes(notes);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                logger.log(Level.INFO, \"End of printing all notes in the list\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                int noteNumber \u003d Integer.parseInt(ui.readCommand());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                NoteCommandFunctions.checkForIndexOutOfBounds(notes, noteNumber);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                System.out.println(notes.get(noteNumber - 1).toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.printSeparator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.INFO, \"End of ShowNotesCommand\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input number is out of bounds\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showInvalidNumberMessage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (TitleNotFoundException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input title does not match any of the note titles\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNoTitleFoundMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a number\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showNumberFormatMessage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } catch (EmptyNoteListException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            logger.log(Level.SEVERE, \"Note List is empty\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showEmptyNoteListMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 20,
      "EdmundEXE": 64,
      "dojh111": 4,
      "johan9se": 7
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/SleepTimeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class SleepTimeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(SleepTimeCommand.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final int HOUR_EARLIEST \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final int HOUR_LATEST \u003d 24;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final int RECOMMENDED_SLEEP_DURATION \u003d 9;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Executes the sleep time command and displays to the user how long they can sleep."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Ui object to display messages to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param notes NoteList containing user\u0027s notes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks TaskList containing user\u0027s tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param storage Storage object to save tasks and notes to memory."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param parser Parser object to parse user\u0027s inputs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Getting tasks from today...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasksFromToday \u003d tasks.getTasksFromOneDay(LocalDate.now());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Getting tasks from tomorrow...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasksFromTomorrow \u003d tasks.getTasksFromOneDay(LocalDate.now().plusDays(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Getting earliest sleep time...\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int earliestSleepTime \u003d getLatestBusyTime(tasksFromToday) + 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Getting latest wake time...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int latestWakeTime \u003d getEarliestBusyTime(tasksFromTomorrow) - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int duration \u003d (HOUR_LATEST - earliestSleepTime) + latestWakeTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Showing sleep time message...\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (earliestSleepTime \u003d\u003d HOUR_EARLIEST \u0026\u0026 latestWakeTime \u003d\u003d HOUR_LATEST) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showNothingScheduledMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showAvailableSleepTimeMessage(earliestSleepTime, latestWakeTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (duration \u003c RECOMMENDED_SLEEP_DURATION) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showSleepDurationMessage(duration);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showExcessSleepDurationMessage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.printSeparator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns true if there is something scheduled for a particular hour slot in a day."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param hour The time to be checked."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks An ArrayList containing the tasks scheduled for that day."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return True if there is something scheduled."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    boolean isBusyTime(int hour, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (!(task instanceof Deadline) \u0026\u0026 task.isWithinTimeSlot(hour)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns the latest hour slot in which there is something scheduled in a day."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks An ArrayList containing the tasks scheduled for that day."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return Integer representing the latest hour slot in which there is something scheduled for the day."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    int getLatestBusyTime(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assert (0 \u003c HOUR_LATEST \u0026\u0026 HOUR_LATEST \u003c 25) : \"The latest hour checked must be between 0 and 24\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (int hour \u003d HOUR_LATEST - 1; hour \u003e 0; hour--) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (isBusyTime(hour, tasks)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return hour;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns the earliest hour slot in which there is something scheduled in a day."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param tasks An ArrayList containing the tasks scheduled for that day."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return Integer representing the earliest hour slot in which there is something scheduled for the day."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    int getEarliestBusyTime(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assert (0 \u003c\u003d HOUR_EARLIEST \u0026\u0026 HOUR_EARLIEST \u003c HOUR_LATEST) :"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"The earliest hour must be between 0 and the latest hour\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (int hour \u003d HOUR_EARLIEST; hour \u003c HOUR_LATEST; hour++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if (isBusyTime(hour, tasks)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return hour;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return 25;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 125,
      "dojh111": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/UndoNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class UndoNoteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            int lastNoteEditNumber \u003d noteHistory.getLastNote().getEditNumber();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                int editNumOfCurrNote \u003d  notes.get(i).getEditNumber();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                if (editNumOfCurrNote \u003d\u003d lastNoteEditNumber) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    Note oldCopyOfCurrNote \u003d noteHistory.getLastNote();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    notes.setNote(i, oldCopyOfCurrNote);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (lastNoteEditNumber \u003e 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                ui.showUndoNoteEditMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                ui.showUndoNoteDeleteMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            noteHistory.popLastNote();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            ui.showInvalidUndoAction();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 16,
      "johan9se": 23
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/commands/UndoTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class UndoTaskCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void execute(Ui ui, NoteList notes, TaskList tasks, FileStorage storage, Parser parser,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                        NoteHistory noteHistory, TaskHistory taskHistory) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            int lastTaskEditNumber \u003d taskHistory.getLastTask().getEditNumber();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                int editNumOfCurrTask \u003d  tasks.getTask(i).getEditNumber();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                if (editNumOfCurrTask \u003d\u003d lastTaskEditNumber) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    Task oldCopyOfCurrTask \u003d taskHistory.getLastTask();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    tasks.setTask(i, oldCopyOfCurrTask);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (lastTaskEditNumber \u003e 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                ui.showUndoTaskEditMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                ui.showUndoTaskDeleteMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            taskHistory.popLastTask();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            ui.showInvalidUndoAction();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 16,
      "johan9se": 23
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/notes/EmptyNoteListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package seedu.lifeasier.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class EmptyNoteListException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/notes/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package seedu.lifeasier.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    protected int editNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DEFAULT_EDIT_NUMBER \u003d -999999;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public Note(String title, String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.editNumber \u003d DEFAULT_EDIT_NUMBER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Note(Note note, int editNumber) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.title \u003d note.title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.description \u003d note.description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        setEditNumber(editNumber);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return \"Title: \" + title + \"\\n\\n\" + description + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getEditNumber() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return editNumber;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void setEditNumber(int editNumber) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.editNumber \u003d editNumber;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 31,
      "johan9se": 18
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/notes/NoteCommandFunctions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package seedu.lifeasier.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class NoteCommandFunctions {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public static void checkEmptyList(NoteList notes) throws EmptyNoteListException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (notes.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            throw new EmptyNoteListException();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public static void checkForIndexOutOfBounds(NoteList notes, int noteNumber) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (noteNumber - 1 \u003e notes.size()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public static int checkNumberOfNoteMatches(NoteList notes, String title) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int matchNumber \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (notes.get(i).getTitle().contains(title)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                matchNumber++;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return matchNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public static int findNoteNumber(NoteList notes, String title) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int noteNumber \u003d -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (notes.get(i).getTitle().contains(title)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                noteNumber \u003d i;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return noteNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 36
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/notes/NoteHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": " * The NoteHistory class represents the list of changes made to Note objects,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": " * edits or deletions in particular."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class NoteHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private int changeCount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private int editCount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private int deleteCount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private ArrayList\u003cNote\u003e noteHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DEFAULT_EDIT_NUMBER \u003d -999999;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public NoteHistory() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.changeCount \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.editCount \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.deleteCount \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.noteHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Note getLastNote() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return noteHistory.get(changeCount - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getEditCount() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return editCount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getDeleteCount() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return deleteCount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void incrementChangeCount() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.changeCount++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void decrementChangeCount() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.changeCount--;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void pushOldCopy(Note oldCopyOfNote, Ui ui) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        noteHistory.add(oldCopyOfNote);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        incrementChangeCount();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void popLastNote() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int indexOfLastNote \u003d changeCount - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        noteHistory.remove(indexOfLastNote);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        decrementChangeCount();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Returns a copy of the Note object before it is edited."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param notes represents the NoteList object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param noteIndex the index of the Note object the user wants to edit."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Note getCurrCopyOfNoteToEdit(NoteList notes, int noteIndex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Note note \u003d notes.get(noteIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int noteEditNumber \u003d note.getEditNumber();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int editID;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (noteEditNumber \u003d\u003d DEFAULT_EDIT_NUMBER) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editID \u003d getEditCount() + 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            notes.get(noteIndex).setEditNumber(editID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editID \u003d noteEditNumber;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        editCount++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return new Note(note, editID);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Returns a copy of the Note object before it is deleted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param notes represents the NoteList object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param noteIndex the index of the Note object the user wants to delete."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Note getCurrCopyOfNoteToDelete(NoteList notes, int noteIndex) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Note note \u003d notes.get(noteIndex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int noteEditNumber \u003d note.getEditNumber();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int deleteID;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (noteEditNumber \u003d\u003d DEFAULT_EDIT_NUMBER) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            deleteID \u003d getDeleteCount() - 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            notes.get(noteIndex).setEditNumber(deleteID);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            deleteID \u003d noteEditNumber;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        deleteCount--;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return new Note(note, deleteID);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 12,
      "johan9se": 94
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/notes/NoteList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package seedu.lifeasier.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class NoteList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private final ArrayList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public NoteList(ArrayList\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public NoteList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        this.notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public Note get(int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return notes.get(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void setNote(int i, Note oldCopyOfCurrNote) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        notes.set(i, oldCopyOfCurrNote);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void add(Note note) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public ArrayList\u003cNote\u003e getNotes() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return notes.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        notes.remove(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 32,
      "dojh111": 4,
      "johan9se": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/notes/TitleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package seedu.lifeasier.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public class TitleNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/parser/MissingParam.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package seedu.lifeasier.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "public enum MissingParam {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    MODULE_CODE, DESCRIPTION, DATE, START_TIME, END_TIME, COMPLETED, RECURRENCES"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "EdmundEXE": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.AddNotesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.commands.DeleteNotesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.DisplayScheduleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.commands.EditDeadlineCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.commands.EditEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.commands.EditLessonCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.commands.EditNotesCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.FreeTimeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.InvalidCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.commands.ShowNotesCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.SleepTimeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.commands.UndoNoteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.commands.UndoTaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_ADD_LESSON \u003d \"addLesson\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_ADD_EVENT \u003d \"addEvent\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_ADD_DEADLINE \u003d \"addDeadline\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_ADD_NOTES \u003d \"addNotes\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_SHOW_NOTES \u003d \"showNotes\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public static final String PARAM_DELETE_NOTES \u003d \"deleteNotes\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public static final String PARAM_EDIT_NOTES \u003d \"editNotes\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_DISPLAY \u003d \"display\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_FREE_TIME \u003d \"freeTime\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_SLEEP_TIME \u003d \"sleepTime\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String PARAM_ARCHIVE \u003d \"archive\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_EDIT_LESSON \u003d \"editLesson\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_EDIT_DEADLINE \u003d \"editDeadline\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_EDIT_EVENT \u003d \"editEvent\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_DELETE_TASK \u003d \"deleteTask\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String PARAM_UNDO \u003d \"undo\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_CODE \u003d \"/code\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_TIME \u003d \"/time\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_TO \u003d \"/to\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_BY \u003d \"/by\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_TYPE \u003d \"/type\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public static final String PARAM_REPEATS \u003d \"/repeats\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_LESSON \u003d \"lesson\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final int INDEX_START \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final int INDEX_END \u003d 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isParametersEmpty \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isModuleCodeEmpty \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isDescriptionEmpty \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isDateEmpty \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isStartTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isEndTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isDateTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private boolean isRecurrencesEmpty \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yy HH:mm\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns the first word entered from the user\u0027s input, which represents the command type."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return The first word that the user input."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String getCommandType(String input) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Getting command type...\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int indexOfFirstSpace \u003d input.indexOf(\" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (indexOfFirstSpace \u003e 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            return input.substring(0, indexOfFirstSpace);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            return input;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the addLesson command that the user inputs."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Also prompts user for missing parameters if there are any."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return AddLessonCommand with the parameters input by the user."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    Command parseAddLessonCommand(Ui ui, String input) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing addLesson command...\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start check for missing parameters.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (isParametersEmpty) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            MissingParam param \u003d checkMissingLessonParameters(input);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            switch (param) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case MODULE_CODE:   // module code is missing"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addModuleCodeParam(ui, input);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isModuleCodeEmpty \u003d false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case DATE:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addDateParam(ui, input);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDateEmpty \u003d false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case START_TIME:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addStartTimeParam(ui, input + \" \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isStartTimeEmpty \u003d false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case END_TIME:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addEndTimeParam(ui, input);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isEndTimeEmpty \u003d false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case RECURRENCES:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                input \u003d addRecurrencesParam(ui, input);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                isRecurrencesEmpty \u003d false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isParametersEmpty \u003d false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isModuleCodeEmpty \u003d true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDateEmpty \u003d true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isStartTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isEndTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End check for missing parameters\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfCodeCommand \u003d input.indexOf(PARAM_CODE) + PARAM_CODE.length();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfDateCommand \u003d input.indexOf(PARAM_DATE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfDateCommand \u003d firstIndexOfDateCommand + PARAM_DATE.length();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfTimeCommand \u003d input.indexOf(PARAM_TIME);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfTimeCommand \u003d firstIndexOfTimeCommand + PARAM_TIME.length();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfToCommand \u003d input.indexOf(PARAM_TO);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfToCommand \u003d firstIndexOfToCommand + PARAM_TO.length();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfRepeatsCommand \u003d input.indexOf(PARAM_REPEATS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfRepeatsCommand \u003d firstIndexOfRepeatsCommand + PARAM_REPEATS.length();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String tempModuleCode \u003d input.substring(lastIndexOfCodeCommand, firstIndexOfDateCommand).trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String tempDate \u003d input.substring(lastIndexOfDateCommand, firstIndexOfTimeCommand).trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String tempStartTime \u003d input.substring(lastIndexOfTimeCommand, firstIndexOfToCommand).trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String tempEndTime \u003d  input.substring(lastIndexOfToCommand, firstIndexOfRepeatsCommand).trim();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String recurrencesString \u003d  input.substring(lastIndexOfRepeatsCommand).trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String moduleCode \u003d fillIfEmptyParam(ui, tempModuleCode, \"/code\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String date \u003d fillIfEmptyParam(ui, tempDate, \"/date\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String startTime \u003d fillIfEmptyParam(ui, tempStartTime, \"/time\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String endTime \u003d  fillIfEmptyParam(ui, tempEndTime, \"/to\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(date + \" \" + startTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(date + \" \" + endTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int recurrences \u003d Integer.parseInt(recurrencesString);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        resetBoolean();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new AddLessonCommand(moduleCode, start, end, recurrences);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the addEvent command that the user inputs."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Also prompts user for missing parameters if there are any."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return AddEventCommand with the parameters input by the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private Command parseAddEventCommand(Ui ui, String input) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing addEvent command...\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start check for missing parameters.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (isParametersEmpty) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            MissingParam param \u003d checkEventParameters(input);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            switch (param) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case DESCRIPTION:   // description is missing"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addEventDescriptionParam(ui, input);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDescriptionEmpty \u003d false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case DATE:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addDateParam(ui, input);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDateEmpty \u003d false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case START_TIME:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addStartTimeParam(ui, input + \" \");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isStartTimeEmpty \u003d false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case END_TIME:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addEndTimeParam(ui, input);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isEndTimeEmpty \u003d false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case RECURRENCES:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                input \u003d addRecurrencesParam(ui, input);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                isRecurrencesEmpty \u003d false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isParametersEmpty \u003d false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDescriptionEmpty \u003d true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDateEmpty \u003d true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isStartTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isEndTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End check for missing parameters.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfAddEventCommand \u003d input.indexOf(PARAM_ADD_EVENT) + PARAM_ADD_EVENT.length();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfDateCommand \u003d input.indexOf(PARAM_DATE);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfDateCommand \u003d firstIndexOfDateCommand + PARAM_DATE.length();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfTimeCommand \u003d input.indexOf(PARAM_TIME);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfTimeCommand \u003d firstIndexOfTimeCommand + PARAM_TIME.length();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfToCommand \u003d input.indexOf(PARAM_TO);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfToCommand \u003d firstIndexOfToCommand + PARAM_TO.length();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfRepeatsCommand \u003d input.indexOf(PARAM_REPEATS);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfRepeatsCommand \u003d firstIndexOfRepeatsCommand + PARAM_REPEATS.length();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String tempDate \u003d input.substring(lastIndexOfDateCommand, firstIndexOfTimeCommand).trim();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String tempStartTime \u003d input.substring(lastIndexOfTimeCommand, firstIndexOfToCommand).trim();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String tempEndTime \u003d input.substring(lastIndexOfToCommand, firstIndexOfRepeatsCommand).trim();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d input.substring(lastIndexOfAddEventCommand, firstIndexOfDateCommand).trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String date \u003d fillIfEmptyParam(ui, tempDate, \"/date\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String startTime \u003d fillIfEmptyParam(ui, tempStartTime, \"/time\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String endTime \u003d  fillIfEmptyParam(ui, tempEndTime, \"/to\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String recurrencesString \u003d  input.substring(lastIndexOfRepeatsCommand).trim();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(date + \" \" + startTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(date + \" \" + endTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int recurrences \u003d Integer.parseInt(recurrencesString);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        resetBoolean();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new AddEventCommand(description, start, end, recurrences);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the addDeadline command that the user inputs."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Also prompts user for missing parameters if there are any."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return AddDeadlineCommand with the parameters input by the user."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    Command parseAddDeadlineCommand(Ui ui, String input) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing addDeadline command...\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start check for missing parameters.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (isParametersEmpty) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            MissingParam param \u003d checkDeadlineParameters(input);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            switch (param) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case DESCRIPTION:   // description is missing"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addDeadlineDescriptionParam(ui, input + \" \");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDescriptionEmpty \u003d false;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case END_TIME:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                input \u003d addByDateTime(ui, input);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isEndTimeEmpty \u003d false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case RECURRENCES:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                input \u003d addRecurrencesParam(ui, input);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                isRecurrencesEmpty \u003d false;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isParametersEmpty \u003d false;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDescriptionEmpty \u003d true;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isEndTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End check for missing parameters.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfAddDeadlineCommand \u003d input.indexOf(PARAM_ADD_DEADLINE) + PARAM_ADD_DEADLINE.length();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfByCommand \u003d input.indexOf(PARAM_BY);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfByCommand \u003d firstIndexOfByCommand + PARAM_BY.length();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int firstIndexOfRepeatsCommand \u003d input.indexOf(PARAM_REPEATS);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfRepeatsCommand \u003d firstIndexOfRepeatsCommand + PARAM_REPEATS.length();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String tempByInput \u003d input.substring(lastIndexOfByCommand, firstIndexOfRepeatsCommand).trim();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d input.substring(lastIndexOfAddDeadlineCommand, firstIndexOfByCommand).trim();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String byInput \u003d fillIfEmptyParam(ui, tempByInput, \"/by\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime by \u003d LocalDateTime.parse(byInput, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String recurrencesString \u003d  input.substring(lastIndexOfRepeatsCommand).trim();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int recurrences \u003d Integer.parseInt(recurrencesString);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        resetBoolean();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new AddDeadlineCommand(description, by, recurrences);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the addNotes command that the user inputs."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return AddNotesCommand with the parameters input by the user."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Command parseAddNotesCommand(String input) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing addNotes command...\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfAddNotesCommand \u003d input.indexOf(PARAM_ADD_NOTES) + PARAM_ADD_NOTES.length();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String title \u003d input.substring(lastIndexOfAddNotesCommand).trim();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new AddNotesCommand(title);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private Command parseEditLessonCommand(String input) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Parsing editLesson command...\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int lastIndexOfAddNotesCommand \u003d input.indexOf(PARAM_EDIT_LESSON) + PARAM_EDIT_LESSON.length();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String code \u003d input.substring(lastIndexOfAddNotesCommand).trim();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return new EditLessonCommand(code);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private Command parseEditEventCommand(String input) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Parsing editEvent command...\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int lastIndexOfAddNotesCommand \u003d input.indexOf(PARAM_EDIT_EVENT) + PARAM_EDIT_EVENT.length();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String eventName \u003d input.substring(lastIndexOfAddNotesCommand).trim();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return new EditEventCommand(eventName);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private Command parseEditDeadlineCommand(String input) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Parsing editDeadline command...\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        int lastIndexOfAddNotesCommand \u003d input.indexOf(PARAM_EDIT_DEADLINE) + PARAM_EDIT_DEADLINE.length();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String deadlineName \u003d input.substring(lastIndexOfAddNotesCommand).trim();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return new EditDeadlineCommand(deadlineName);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private Command parseDeleteTaskCommand(String input) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String type \u003d \"\";"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"Parsing deleteTask command...\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int firstIndexOfTypeCommand \u003d input.indexOf(PARAM_TYPE);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int lastIndexOfTypeCommand \u003d input.indexOf(PARAM_TYPE) + PARAM_TYPE.length();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            if (firstIndexOfTypeCommand \u003d\u003d -1) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                logger.log(Level.SEVERE, \"deleteTask command missing TYPE keyword\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                throw new ParserException();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            int firstIndexOfNameCommand \u003d input.indexOf(PARAM_NAME);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            if (firstIndexOfNameCommand \u003d\u003d -1) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                type \u003d input.substring(lastIndexOfTypeCommand).trim();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                name \u003d \"\";"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                int lastIndexOfNameCommand \u003d input.indexOf(PARAM_NAME) + PARAM_NAME.length();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                type \u003d input.substring(lastIndexOfTypeCommand, firstIndexOfNameCommand).trim();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                checkValidType(type);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                name \u003d input.substring(lastIndexOfNameCommand).trim();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Invalid command...\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return new DeleteTaskCommand(type, name);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void checkValidType(String type) throws ParserException {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        if (!type.equals(PARAM_DEADLINE) \u0026\u0026 !type.equals(PARAM_EVENT)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                \u0026\u0026 !type.equals(PARAM_LESSON)) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            throw new ParserException();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime[] parseNewTimeInput(Ui ui, String input, int numOfTimeArgs) throws ParserException {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Parsing newTimeInput from user...\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        LocalDateTime[] times \u003d new LocalDateTime[2];"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            switch (numOfTimeArgs) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            case (1):"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                int firstIndexOfByCommand \u003d input.indexOf(PARAM_BY);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                int lastIndexOfByCommand \u003d firstIndexOfByCommand + PARAM_BY.length();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                if (firstIndexOfByCommand \u003d\u003d -1) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                    logger.log(Level.SEVERE, \"Input missing BY keyword\");"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                    throw new ParserException();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                String byInput \u003d input.substring(lastIndexOfByCommand).trim();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                LocalDateTime by \u003d LocalDateTime.parse(byInput, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                times[INDEX_START] \u003d by;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                return times;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            case (2):"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                int firstIndexOfDateCommand \u003d input.indexOf(PARAM_DATE);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                int lastIndexOfDateCommand \u003d firstIndexOfDateCommand + PARAM_DATE.length();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                int firstIndexOfTimeCommand \u003d input.indexOf(PARAM_TIME);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                int lastIndexOfTimeCommand \u003d firstIndexOfTimeCommand + PARAM_TIME.length();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                int firstIndexOfToCommand \u003d input.indexOf(PARAM_TO);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                int lastIndexOfToCommand \u003d firstIndexOfToCommand + PARAM_TO.length();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                checkValidTimeKeywords(firstIndexOfDateCommand, firstIndexOfTimeCommand, firstIndexOfToCommand);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                String date \u003d input.substring(lastIndexOfDateCommand, firstIndexOfTimeCommand).trim();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                String startTime \u003d input.substring(lastIndexOfTimeCommand, firstIndexOfToCommand).trim();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                String endTime \u003d  input.substring(lastIndexOfToCommand).trim();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                LocalDateTime start \u003d LocalDateTime.parse(date + \" \" + startTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                LocalDateTime end \u003d LocalDateTime.parse(date + \" \" + endTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                times[INDEX_START] \u003d start;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                times[INDEX_END] \u003d end;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                return times;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Time input is not in the correct format\");"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showLocalDateTimeParseError();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return times;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private void checkValidTimeKeywords(int firstIndexOfDateCommand, int firstIndexOfTimeCommand,"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                                        int firstIndexOfToCommand) throws ParserException {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        if (firstIndexOfDateCommand \u003d\u003d -1 || firstIndexOfTimeCommand \u003d\u003d -1 || firstIndexOfToCommand \u003d\u003d -1) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            throw new ParserException();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the showNotes command that the user inputs."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return ShowNotesCommand with the parameters input by the user."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Command parseShowNotesCommand(String input) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing showNotes command...\");"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfShowNotesCommand \u003d input.indexOf(PARAM_SHOW_NOTES) + PARAM_SHOW_NOTES.length();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String title \u003d input.substring(lastIndexOfShowNotesCommand).trim();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new ShowNotesCommand(title);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Parses the deleteNotes command that the user inputs."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return ShowNotesCommand with the parameters input by the user."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private Command parseDeleteNotesCommand(String input) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing deleteNotes command...\");"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int lastIndexOfDeleteNotesCommand \u003d input.indexOf(PARAM_DELETE_NOTES) + PARAM_DELETE_NOTES.length();"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String title \u003d input.substring(lastIndexOfDeleteNotesCommand).trim();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return new DeleteNotesCommand(title);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Parses the editNotes command that the user inputs."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return ShowNotesCommand with the parameters input by the user."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private Command parseEditNotesCommand(String input) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing editNotes command...\");"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int lastIndexOfEditNotesCommand \u003d input.indexOf(PARAM_EDIT_NOTES) + PARAM_EDIT_NOTES.length();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String title \u003d input.substring(lastIndexOfEditNotesCommand).trim();"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return new EditNotesCommand(title);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the display command that the user inputs."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return DisplayScheduleCommand with the parameters input by the user."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Command parseDisplayScheduleCommand(String input) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing display command...\");"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int lastIndexOfDisplayScheduleCommand \u003d input.indexOf(PARAM_DISPLAY) + PARAM_DISPLAY.length();"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String toDisplay \u003d input.substring(lastIndexOfDisplayScheduleCommand).trim();"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new DisplayScheduleCommand(toDisplay);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Parses the undo command that the user inputs."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Either UndoNoteCommand or UndoTaskCommand depending on the parsed parameter."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Command parseUndoCommand(String input) {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Parsing undo command...\");"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String undoType;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String[] splitInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            undoType \u003d splitInput[1];"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Missing parameter, proceed to prompt\");"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            undoType \u003d handleMissingUndoParam(ui);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        switch (undoType) {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        case \"task\":"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return new UndoTaskCommand();"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        case \"note\":"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return new UndoNoteCommand();"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Error determining undo command type\");"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String handleMissingUndoParam(Ui ui) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        boolean isValidField \u003d false;"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        while (!isValidField) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showEnterUndoTypeMessage();"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            userInput \u003d ui.readCommand();"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (userInput.equals(\"task\") || userInput.equals(\"note\")) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                isValidField \u003d true;"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                ui.showInvalidUndoType();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Parses the user Y/N inputs."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A \"Y\" or \"N\" string."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String parseUserInputYesOrNo(String input, Ui ui) {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Start check for Y/N input\");"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (!input.trim().equals(\"Y\") \u0026\u0026 !input.trim().equals(\"N\")) {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showInvalidConfirmationMessage();"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"End check for Y/N input\");"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Parses the user T/D inputs."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A \"T\" or \"D\" string."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String parseUserInputTOrD(String input, Ui ui) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start check for T/D input\");"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (!input.trim().equals(\"T\") \u0026\u0026 !input.trim().equals(\"D\")) {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showInvalidTitleDescriptionConfirmationMessage();"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End check for T/D input\");"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Checks for an empty string and prompts the user if empty."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param string The string to be checked."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A non-empty string."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public String checkIfEmpty(Ui ui, String string) {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start check for empty string\");"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        while (string.trim().length() \u003d\u003d 0) {     // empty string"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.showEmptyDescriptionMessage();"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            string \u003d ui.readCommand();"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End check for empty string\");"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return string;"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Checks the condition of whether the input is empty."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input The string to be checked."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param index1 The starting index."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param index2 The ending index."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param factor Status of the factor."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A non-empty string."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private boolean isMissingDescription(String input, int index1, int index2, boolean factor) {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input.substring(index1, index2).trim().length() \u003d\u003d 0 \u0026\u0026 factor;"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Reset all boolean variables to true."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private void resetBoolean() {"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isParametersEmpty \u003d true;"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isModuleCodeEmpty \u003d true;"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isDescriptionEmpty \u003d true;"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isDateEmpty \u003d true;"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isStartTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isEndTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        isDateTimeEmpty \u003d true;"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        isRecurrencesEmpty \u003d true;"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Checks the addLesson input for missing parameters."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing user\u0027s input."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return An enumeration of the missing parameter."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private MissingParam checkMissingLessonParameters(String input) {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (!input.contains(PARAM_REPEATS) \u0026\u0026 isRecurrencesEmpty) {"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            return MissingParam.RECURRENCES;"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else if (!input.contains(PARAM_TO) \u0026\u0026 isEndTimeEmpty) {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.END_TIME;"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else if (!input.contains(PARAM_TIME) \u0026\u0026 isStartTimeEmpty) {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.START_TIME;"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else if (!input.contains(PARAM_DATE) \u0026\u0026 isDateEmpty) {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.DATE;"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else if (!input.contains(PARAM_CODE) \u0026\u0026 isModuleCodeEmpty) {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.MODULE_CODE;"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.COMPLETED;"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Checks the addEvent input for missing parameters."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return An enumeration of the missing parameter."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private MissingParam checkEventParameters(String input) {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int lastIndexOfAddEventCommand \u003d input.indexOf(PARAM_ADD_EVENT) + PARAM_ADD_EVENT.length();"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int firstIndexOfDateCommand \u003d input.indexOf(PARAM_DATE);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (!input.contains(PARAM_REPEATS) \u0026\u0026 isRecurrencesEmpty) {"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            return MissingParam.RECURRENCES;"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else if (!input.contains(PARAM_TO) \u0026\u0026 isEndTimeEmpty) {"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.END_TIME;"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else if (!input.contains(PARAM_TIME) \u0026\u0026 isStartTimeEmpty) {"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.START_TIME;"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else if (!input.contains(PARAM_DATE) \u0026\u0026 isDateEmpty) {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.DATE;"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else if (isMissingDescription(input, lastIndexOfAddEventCommand, firstIndexOfDateCommand,"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDescriptionEmpty)) {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.DESCRIPTION;"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.COMPLETED;"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Checks the addDeadline input for missing parameters."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return An enumeration of the missing parameter."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private MissingParam checkDeadlineParameters(String input) {"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int lastIndexOfAddDeadlineCommand \u003d input.indexOf(PARAM_ADD_DEADLINE) + PARAM_ADD_DEADLINE.length();"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        int firstIndexOfByCommand \u003d input.indexOf(PARAM_BY);"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (!input.contains(PARAM_REPEATS) \u0026\u0026 isRecurrencesEmpty) {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            return MissingParam.RECURRENCES;"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else if (!input.contains(PARAM_BY) \u0026\u0026 isDateTimeEmpty) {"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.END_TIME;"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else if (isMissingDescription(input, lastIndexOfAddDeadlineCommand, firstIndexOfByCommand,"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                isDescriptionEmpty)) {"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.DESCRIPTION;"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            return MissingParam.COMPLETED;"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Adds the event description to the string."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A string with description added."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String addEventDescriptionParam(Ui ui, String input) {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding Event description to string.\");"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.showAddDescriptionMessage();"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String description \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String[] temp \u003d input.split(\"/date\");"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        input \u003d temp[0] + description + \" /date\" + temp[1];"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of adding Event description to string.\");"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Adds the deadline description to the string."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A string with description added."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String addDeadlineDescriptionParam(Ui ui, String input) {"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding Deadline description to string.\");"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.showAddDescriptionMessage();"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String description \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String[] temp \u003d input.split(\"/by\");"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        input \u003d temp[0] + description + \" /by\" + temp[1];"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of adding Deadline description to string.\");"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Adds the module code to the string."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A string with module code added."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String addModuleCodeParam(Ui ui, String input) {"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding Module Code to string.\");"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.showAddModuleCodeMessage();"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String moduleCode \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String[] temp \u003d input.split(\"/date\");"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        input \u003d temp[0] + \"/code\" + moduleCode + \" /date\" + temp[1];"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of adding Module Code to string.\");"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Adds the date to the string."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A string with date added."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String addDateParam(Ui ui, String input) {"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding Date to string.\");"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.showAddDateMessage();"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String date \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String[] temp1 \u003d input.split(\"/time\");"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        input \u003d temp1[0] + \"/date \" + date + \" /time\" + temp1[1];"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of adding Date to string.\");"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Adds the start time to the string."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A string with start time added."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String addStartTimeParam(Ui ui, String input) {"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding Start Time to string.\");"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.showAddStartTimeMessage();"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String startTime \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String[] temp2 \u003d input.split(\"/to\");"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        input \u003d temp2[0] + \"/time \" + startTime + \" /to\" + temp2[1];"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of adding Start Time to string.\");"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Adds the end time to the string."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A string with end time added."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String addEndTimeParam(Ui ui, String input) {"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding End Time to string.\");"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.showAddEndTimeMessage();"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String endTime \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String[] temp3 \u003d input.split(PARAM_REPEATS);"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        input \u003d temp3[0] + \" /to \" + endTime + \"/repeats\" + temp3[1];"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of adding End Time to string.\");"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Adds the recurrences to the string."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return String with the recurrences added."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private String addRecurrencesParam(Ui ui, String input) {"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding recurrences to string.)\");"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ui.showAddRecurrencesMessage();"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String recurrences \u003d checkIfEmpty(ui, ui.readCommand()) + \" \";"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        input \u003d input + \" /repeats \" + recurrences;"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"End of adding recurrences to string.)\");"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * Adds the date and time to the string."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @return A string with date and time added."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String addByDateTime(Ui ui, String input) {"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"Start of adding By Time to string.\");"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        ui.showAddDateTimeMessage();"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        String byDateTime \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String[] temp4 \u003d input.split(PARAM_REPEATS);"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        input \u003d temp4[0] + \" /by \" + byDateTime + \" /repeats\" + temp4[1];"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        logger.log(Level.INFO, \"End of adding By Time to string.\");"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private String fillIfEmptyParam(Ui ui, String input, String param) {"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            ui.printEmptyParam(param);"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            input \u003d checkIfEmpty(ui, ui.readCommand());"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Parses the user\u0027s input into a Command object that can later be executed."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "     * @param ui Input and output interaction with the user."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param input String containing the user\u0027s input."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return Command that the user inputs."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Command parseCommand(String input, Ui ui) throws ParserException {"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        logger.log(Level.INFO, \"Parsing user input for command...\");"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            String commandType \u003d getCommandType(input);"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_ADD_LESSON):"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                return parseAddLessonCommand(ui, input);"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_ADD_EVENT):"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                return parseAddEventCommand(ui, input);"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_ADD_DEADLINE):"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                return parseAddDeadlineCommand(ui, input);"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_ADD_NOTES):"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return parseAddNotesCommand(input);"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_SHOW_NOTES):"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return parseShowNotesCommand(input);"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case (PARAM_DELETE_NOTES):"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                return parseDeleteNotesCommand(input);"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            case(PARAM_EDIT_NOTES):"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                return parseEditNotesCommand(input);"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_DISPLAY):"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return parseDisplayScheduleCommand(input);"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_HELP):"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_FREE_TIME):"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return new FreeTimeCommand();"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_SLEEP_TIME):"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return new SleepTimeCommand();"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case (PARAM_ARCHIVE):"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                return new ArchiveCommand();"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            case (PARAM_EXIT):"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            case (PARAM_EDIT_LESSON):"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                return parseEditLessonCommand(input);"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            case (PARAM_EDIT_EVENT):"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                return parseEditEventCommand(input);"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            case (PARAM_EDIT_DEADLINE):"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                return parseEditDeadlineCommand(input);"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            case (PARAM_DELETE_TASK):"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                return parseDeleteTaskCommand(input);"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            case (PARAM_UNDO):"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                return parseUndoCommand(input);"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                logger.log(Level.SEVERE, \"User input command is invalid\");"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                throw new ParserException();"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            resetBoolean();"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"User input command is invalid\");"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showParseIncorrectCommandFormatMessage();"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            resetBoolean();"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Time input is invalid\");"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            ui.showParseIncorrectDateTimeMessage();"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return new InvalidCommand();"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 158,
      "daniellimzj": 297,
      "EdmundEXE": 430,
      "dojh111": 68,
      "johan9se": 5
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/parser/ParserException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "public class ParserException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/FileArchive.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * Handles file archiving in LifEasier."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class FileArchive {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(NoteStorage.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String NOTE_SEPARATOR \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            \"-------------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public FileArchive(NoteList notes, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates new archive save file in archive directory and clears notes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param archiveFilePath File path to the save directory."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void handleDataArchiving(String archiveFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cNote\u003e notesList \u003d notes.getNotes();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Boolean isNotesEmpty \u003d checkForEmptyNotes(notesList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Check notes empty status: isNotesEmpty\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (isNotesEmpty) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showNoDataToArchiveMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Notes empty\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Notes not empty\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File archiveDirectory \u003d new File(archiveFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assert archiveDirectory.exists() : \"Archive directory must exist\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String archiveSaveFilePath \u003d archiveFilePath + getCurrentDateTime() + \"Archive.txt\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File archiveSave \u003d new File(archiveSaveFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createArchiveSaveFile(archiveSave);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            writeDataToArchiveSaveFile(archiveSaveFilePath, notesList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            clearNoteList(notesList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileArchiveError();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showArchiveEndMessage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Finish archiving process\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Handles writing all data from current note list onto archive save file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param archiveSaveFilePath File path of where to save archive data."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param notesList ArrayList of notes to be archived."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws IOException When an error is encountered writing to the archive file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void writeDataToArchiveSaveFile(String archiveSaveFilePath, ArrayList\u003cNote\u003e notesList)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(archiveSaveFilePath, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assert notesList.size() \u003e 0 : \"NotesList cannot be empty when archiving\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Start archive file write\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (Note note : notesList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String noteTitle \u003d getNoteTitle(note);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String noteBody \u003d getNoteBody(note);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(NOTE_SEPARATOR);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(noteTitle);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(noteBody);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(NOTE_SEPARATOR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Archive written for: \" + noteTitle);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"End archive file write\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String getNoteBody(Note note) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return note.getDescription().trim() + System.lineSeparator();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String getNoteTitle(Note note) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return note.getTitle().trim() + System.lineSeparator();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates a new archive save file if one does not exist yet."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param archiveSave Current file path of the archive save file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws IOException When an error is encountered writing to the archive file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void createArchiveSaveFile(File archiveSave) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new save if none exist"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!archiveSave.exists()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Creating new archive save\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (!archiveSave.createNewFile()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.WARNING, \"Archive save file creation failed\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Archive save created\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected Boolean checkForEmptyNotes(ArrayList\u003cNote\u003e notesList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return notesList.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Gets the current date and time and formats it for return."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Formatted date time string."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String getCurrentDateTime() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String formattedDateTime \u003d currentDateTime.format(FileCommand.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return formattedDateTime.replaceAll(\" \", \"T\").replace(\":\", \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Removes all notes from the current noteList after archiving."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param notesList ArrayList where all notes are to be removed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void clearNoteList(ArrayList\u003cNote\u003e notesList) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Clearing notes\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notesList.clear();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 141
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/FileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The FileCommand class will house similar commands used by both NoteStorage and TaskStorage classes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class FileCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yy HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"31-12-99 00:00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TIME_DELIMITER \u003d \"T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String WHITE_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(FileCommand.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public FileCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Clears all data from the specified save file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param filePath File path to which file to clear information."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void clearSaveFile(String filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Clearing save file\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileClear \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileClear.write(BLANK_STRING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileClear.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileWriteError();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Error encountered clearing save file\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Save file cleared\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Converts the saved raw string text in the save file into LocalDateTime objects."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param dateTimeInformation String which is to be parsed into LocalDateTime object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Input string parsed into LocalDateTime object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public LocalDateTime convertToLocalDateTime(String dateTimeInformation) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime taskDateTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            dateTimeInformation \u003d dateTimeInformation.replace(TIME_DELIMITER, WHITE_SPACE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskDateTime \u003d LocalDateTime.parse(dateTimeInformation, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showLocalDateTimeParseError();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Error encountered parsing LocalDateTime from save file\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Set as default time"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskDateTime \u003d LocalDateTime.parse(DEFAULT_DATETIME, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assert taskDateTime !\u003d null : \"taskDateTime must never be null\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskDateTime;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Converts a string to boolean form."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param string String to be parsed into a boolean."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Boolean true if string is \"true\", and false for all other cases."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public Boolean convertToBoolean(String string) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return Boolean.parseBoolean(string);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 86
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/FileStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The FileStorage class is the main entry point to actions related to the reading, writing and creation of the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * LifEasier save files."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class FileStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String DIRECTORY_PATH \u003d \"LifEasierSaves/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String ARCHIVE_PATH \u003d DIRECTORY_PATH + \"Archives/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(FileStorage.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String filePathTasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String filePathNotes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteStorage noteStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskStorage taskStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileArchive fileArchive;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public FileStorage(String fileNameTasks, String fileNameNotes, Ui ui, NoteList notes, TaskList tasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.filePathTasks \u003d DIRECTORY_PATH + fileNameTasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.filePathNotes \u003d DIRECTORY_PATH + fileNameNotes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.noteStorage \u003d new NoteStorage(notes, filePathNotes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.taskStorage \u003d new TaskStorage(tasks, filePathTasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileArchive \u003d new FileArchive(notes, ui);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Acts as main entry point into data archiving for LifEasier."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void archiveData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File archiveDirectory \u003d new File(ARCHIVE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showArchiveStartMessage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Start archiving process\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create archive directory if non existent"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!directoryExists(archiveDirectory)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNewDirectory(archiveDirectory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileArchive.handleDataArchiving(ARCHIVE_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Clear notes save file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileCommand.clearSaveFile(filePathNotes);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Reads and loads the stored information on the save file. If save files are missing, the method will create a new"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * save file and directory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void readSaveFiles() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File saveFileTasks \u003d new File(filePathTasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File saveFileNotes \u003d new File(filePathNotes);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Start processing read saves\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ui.showDataLoadingMessage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Check if both saves present. If they are, proceed to read data, else determine which saves to create"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!checkIfBothFilesExists(saveFileTasks, saveFileNotes)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save files missing, create save files\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNewSaves(saveFileTasks, saveFileNotes);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assert checkIfBothFilesExists(saveFileTasks, saveFileNotes) : \"Both saves are supposed to exist\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save files found, read save files\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            noteStorage.readNotesSave();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.readTasksSave();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Startup file read end\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Checks if both save files exist."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileTasks File object with file path to the save file which contains saved task information."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileNotes File object with file path to the save file which contains saved note information."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return True when both files exist."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private boolean checkIfBothFilesExists(File saveFileTasks, File saveFileNotes) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return saveFileTasks.exists() \u0026\u0026 saveFileNotes.exists();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Handles the creation of new save directories and save files."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileTasks File object with file path to the save file which contains saved task information."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileNotes File object with file path to the save file which contains saved note information."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void createNewSaves(File saveFileTasks, File saveFileNotes) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File fileDirectory \u003d new File(DIRECTORY_PATH);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (directoryExists(fileDirectory)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Directory exists, check individual save files and create the missing files."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save directory found\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            handleExistingSaveDirectory(saveFileTasks, saveFileNotes);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assert !directoryExists(fileDirectory) : \"Directory should not exist\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Directory missing, create new directory"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save directory missing, proceed to create\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            handleMissingSaveDirectory(fileDirectory, saveFileTasks, saveFileNotes);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Determines which save files exist and which do not when the save directory exists."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileTasks File object with file path to the save file which contains saved task information."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileNotes File object with file path to the save file which contains saved note information."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void handleExistingSaveDirectory(File saveFileTasks, File saveFileNotes) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        checkForTasksSaveFile(saveFileTasks);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        checkForNotesSaveFile(saveFileNotes);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Checks if the notes save file exists and creates the save file if it is missing."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileNotes File object with file path to the save file which contains saved note information."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void checkForNotesSaveFile(File saveFileNotes) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Checking for notes save file\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new save file if task save file does not exist"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!saveFileNotes.exists()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNewSaveFile(saveFileNotes);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Read note save file"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteStorage.readNotesSave();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Checks if the tasks save file exists and creates the save file if it is missing."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileTasks File object with file path to the save file which contains saved task information."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void checkForTasksSaveFile(File saveFileTasks) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Checking for task save file\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new notes save file if notes save file does not exist"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (!saveFileTasks.exists()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNewSaveFile(saveFileTasks);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Read task save file"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskStorage.readTasksSave();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private boolean directoryExists(File fileDirectory) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return fileDirectory.exists();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates the missing save directory and the save files for use."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param fileDirectory File object with the save directory path."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileTasks File object with file path to the save file which contains saved task information."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFileNotes File object with file path to the save file which contains saved note information."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void handleMissingSaveDirectory(File fileDirectory, File saveFileTasks, File saveFileNotes) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Attempt creation of new save directory to hold save files"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Creating save directory\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (createNewDirectory(fileDirectory)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                createNewSaveFile(saveFileTasks);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                createNewSaveFile(saveFileNotes);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showDirectoryCreationFailedError();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Save directory creation failed\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private boolean createNewDirectory(File fileDirectory) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return fileDirectory.mkdir();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates a save file depending on the file path passed."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param saveFile File object containing the file path of the save file that is to be created."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void createNewSaveFile(File saveFile) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Creating save file\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            saveFile.createNewFile();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.INFO, \"Save file created\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileCreationError();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Save file creation failed\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Saves all notes in the current task list."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void saveNote() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteStorage.writeToNoteSaveFile();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Saves all tasks in the current task list."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void saveTasks() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskStorage.writeToTaskSaveFile();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 223
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/NoteStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The NoteStorage class handles the reading and writing of the save file for notes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class NoteStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(NoteStorage.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String SAVE_DELIMITER \u003d \"\u003d-\u003d\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String filePathNotes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public NoteStorage(NoteList notes, String filePathNotes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.filePathNotes \u003d filePathNotes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Handles reading saved note information."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void readNotesSave() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Read Notes save file start\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File saveFile \u003d new File(filePathNotes);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assert saveFile.exists() : \"Save file is supposed to exist\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createNoteList(fileScanner);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileReadError();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Encountered error reading Notes save file\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Read Notes save file end\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Reads and adds all saved notes in the save file back into program."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param fileScanner Scanner object to read file information."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void createNoteList(Scanner fileScanner) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Rebuilding notes from save\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String noteInformation \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String[] noteComponents \u003d noteInformation.split(SAVE_DELIMITER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String noteTitle \u003d noteComponents[0];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String noteDescription \u003d noteComponents[1];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (noteTitle.equals(BLANK_STRING)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                notes.add(new Note(noteTitle, noteDescription));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.INFO, \"New Note added: \" + noteTitle);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showSaveDataMissingError();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Missing data from save file\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Notes rebuilt\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Writes information from the notes onto the notes save file for storage when there is a change to the notes."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void writeToNoteSaveFile() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Write to Notes save start\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePathNotes, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(filePathNotes);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ArrayList\u003cNote\u003e noteList \u003d notes.getNotes();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Append note information into save file for notes"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            for (Note note : noteList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String noteToSave \u003d convertNoteToString(note);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fileWriter.write(noteToSave);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.INFO, \"New Note saved\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileWriteError();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Unable to write to notes save file\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Write to Notes save end\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Converts the raw information from a note object into a save format in plain text."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param note Note object which data is to be converted into a save format."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return String data in the save format."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String convertNoteToString(Note note) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return note.getTitle().trim() + SAVE_DELIMITER + note.getDescription().trim() + System.lineSeparator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 127
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/StorageException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class StorageException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/storage/TaskStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.Lesson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The TaskStorage class handles the reading and writing of the save file for tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class TaskStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(TaskStorage.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String SAVE_DELIMITER \u003d \"\u003d-\u003d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String DEFAULT_DATA \u003d \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String filePathTasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public TaskStorage(TaskList tasks, String filePathTasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.filePathTasks \u003d filePathTasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Handles saved task information."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void readTasksSave() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Read Tasks save file start\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File saveFile \u003d new File(filePathTasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assert saveFile.exists() : \"Save file is supposed to exist\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            createTaskList(fileScanner);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileReadError();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Encountered error reading Tasks save file\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Read Tasks save file end\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Reads and adds all saved task information back into the program."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param fileScanner Scanner object to read file information."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void createTaskList(Scanner fileScanner) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        logger.log(Level.INFO, \"Rebuilding tasks list from save file\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskInformation \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String[] taskComponents \u003d taskInformation.split(SAVE_DELIMITER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                checkForMissingDataInSave(taskComponents);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskType \u003d taskComponents[0];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskDescription \u003d taskComponents[2];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                Boolean taskStatus \u003d fileCommand.convertToBoolean(taskComponents[1]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    rebuildDeadline(taskComponents, taskList, taskDescription, taskStatus);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    rebuildEvent(taskComponents, taskList, taskDescription, taskStatus);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"lesson\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    rebuildLesson(taskComponents, taskList, taskDescription, taskStatus);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    throw new StorageException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.INFO, \"Rebuilt task: \" + taskType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showSaveDataMissingError();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Missing data from save file\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showUndeterminableTaskError();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Read task type failed\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Checks for missing information in each line of saved data read."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskComponents String array of read save data after separator has been removed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException When data is missing."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void checkForMissingDataInSave(String[] taskComponents) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        for (String information : taskComponents) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (information.equals(BLANK_STRING)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates a new lesson object based on the save data read and adds it into the program."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskComponents String array of read save data after separator has been removed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskList List of tasks which the created object will be added into."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param status The current status of the task."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException When data is missing."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void rebuildLesson(String[] taskComponents, ArrayList\u003cTask\u003e taskList, String description, Boolean status)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime lessonStartTime \u003d fileCommand.convertToLocalDateTime(taskComponents[3]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime lessonEndTime \u003d fileCommand.convertToLocalDateTime(taskComponents[4]);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new event in tasks"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.add(new Lesson(description, lessonStartTime, lessonEndTime, status));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates a new lesson object based on the save data read and adds it into the program."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskComponents String array of read save data after separator has been removed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskList List of tasks which the created object will be added into."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param status The current status of the task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException When data is missing."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void rebuildEvent(String[] taskComponents, ArrayList\u003cTask\u003e taskList, String description, Boolean status)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime eventStartTime \u003d fileCommand.convertToLocalDateTime(taskComponents[3]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime eventEndTime \u003d fileCommand.convertToLocalDateTime(taskComponents[4]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new event in tasks"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.add(new Event(description, eventStartTime, eventEndTime, status));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Creates a new lesson object based on the save data read and adds it into the program."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskComponents String array of read save data after separator has been removed."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskList List of tasks which the created object will be added into."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param status The current status of the task."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException When data is missing."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected void rebuildDeadline(String[] taskComponents, ArrayList\u003cTask\u003e taskList, String description,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                                   Boolean status) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalDateTime deadlineTimeInfo \u003d fileCommand.convertToLocalDateTime(taskComponents[3]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        //Create new deadline in tasks"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.add(new Deadline(description, deadlineTimeInfo, status));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Writes information of TaskList onto the save file for storage whenever there is a change."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void writeToTaskSaveFile() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePathTasks, true);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(filePathTasks);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String dataToSave;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Append each tasks information into save file for tasks"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                String taskType \u003d task.getType();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    dataToSave \u003d convertDeadlineToString(task, taskType);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    dataToSave \u003d convertEventToString(task, taskType);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                case \"lesson\":"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    dataToSave \u003d convertLessonToString(task, taskType);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    dataToSave \u003d DEFAULT_DATA;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    fileWriter.write(dataToSave);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    throw new StorageException();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fileWriter.write(dataToSave);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                logger.log(Level.INFO, \"Write task to save: \" + taskType);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showFileWriteError();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.WARNING, \"Unable to write to save file\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showInvalidCastError();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Wrong class type passed, unable to cast\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ui.showUndeterminableTaskError();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            logger.log(Level.SEVERE, \"Read task type failed\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Converts a lesson object into a save format."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param task Task object to be converted into a save format."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskType The type of task being converted."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Formatted string in the save format."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws ClassCastException When the wrong class type is passed in and cannot be casted correctly."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String convertLessonToString(Task task, String taskType) throws ClassCastException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Lesson lesson \u003d (Lesson) task;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskType + SAVE_DELIMITER + task.getStatus() + SAVE_DELIMITER + task.getDescription() + SAVE_DELIMITER"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + lesson.getStart().format(FileCommand.DATE_TIME_FORMATTER) + SAVE_DELIMITER"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + lesson.getEnd().format(FileCommand.DATE_TIME_FORMATTER) + System.lineSeparator();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Converts an event object into a save format."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param task Task object to be converted into a save format."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskType The type of task being converted."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Formatted string in the save format."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws ClassCastException When the wrong class type is passed in and cannot be casted correctly."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String convertEventToString(Task task, String taskType) throws ClassCastException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskType + SAVE_DELIMITER + task.getStatus() + SAVE_DELIMITER + task.getDescription() + SAVE_DELIMITER"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + event.getStart().format(FileCommand.DATE_TIME_FORMATTER) + SAVE_DELIMITER"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + event.getEnd().format(FileCommand.DATE_TIME_FORMATTER) + System.lineSeparator();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Converts a deadline object into a save format."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param task Task object to be converted into a save format."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param taskType The type of task being converted."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Formatted string in the save format."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @throws ClassCastException When the wrong class type is passed in and cannot be casted correctly."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String convertDeadlineToString(Task task, String taskType) throws ClassCastException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return taskType + SAVE_DELIMITER + task.getStatus() + SAVE_DELIMITER + task.getDescription() + SAVE_DELIMITER"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + deadline.getBy().format(FileCommand.DATE_TIME_FORMATTER) + System.lineSeparator();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 260
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/tasks/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String type \u003d \"deadline\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Deadline(String description, LocalDateTime by, int recurrences) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.recurrences \u003d recurrences;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Deadline(String description, LocalDateTime by, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Deadline(Task task, int editNumber) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        super(task, editNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.by \u003d ((Deadline) task).by;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getBy() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getBy();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void setStart(LocalDateTime start) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.by \u003d start;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void setEnd(LocalDateTime end) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return \"Deadline: \" + super.toString() + \" by (\" + by.format(format) + \"), \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"repeats weekly \" + recurrences + \" times\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Moves a recurring deadline 7 days forward, and decrements remaining recurrences by 1."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void moveAndUpdateRecurrences() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        decrementRecurrences(1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        by \u003d by.plusDays(7);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 39,
      "daniellimzj": 18,
      "dojh111": 6,
      "johan9se": 15
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/tasks/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime start;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime end;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String type \u003d \"event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Event(String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Event(String description, LocalDateTime start, LocalDateTime end, int recurrences) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.recurrences \u003d recurrences;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Event(String description, LocalDateTime start, LocalDateTime end, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Event(Task task, int editNumber) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        super(task, editNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.start \u003d ((Event) task).start;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.end \u003d ((Event) task).end;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void setStart(LocalDateTime start) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void setEnd(LocalDateTime end) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return \"Event: \" + super.toString() + \" (\" + start.format(format) + \" to \" +  end.format(format) + \"), \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"repeats weekly \" + recurrences + \" times\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Moves a recurring event 7 days forward, and decrements remaining recurrences by 1."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void moveAndUpdateRecurrences() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        decrementRecurrences(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        start \u003d start.plusDays(7);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        end \u003d end.plusDays(7);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 44,
      "daniellimzj": 21,
      "dojh111": 9,
      "johan9se": 7
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/tasks/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class Lesson extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime start;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected LocalDateTime end;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private String type \u003d \"lesson\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Lesson(String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Lesson(String description, LocalDateTime start, LocalDateTime end, int recurrences) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.recurrences \u003d recurrences;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Lesson(String description, LocalDateTime start, LocalDateTime end, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Lesson(Task task, int editNumber) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        super(task, editNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.start \u003d ((Lesson) task).start;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.end \u003d ((Lesson) task).end;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void setStart(LocalDateTime start) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void setEnd(LocalDateTime end) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return \"Lesson: \" + super.toString() + \" (\" + start.format(format) + \" to \" + end.format(format) + \"), \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"repeats weekly \" + recurrences + \" times\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Moves a recurring lesson 7 days forward, and decrements remaining recurrences by 1."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void moveAndUpdateRecurrences() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        decrementRecurrences(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        start \u003d start.plusDays(7);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        end \u003d end.plusDays(7);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 47,
      "daniellimzj": 19,
      "dojh111": 8,
      "johan9se": 7
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/tasks/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    protected int recurrences;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected int editNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String TIME_FORMAT \u003d \"%02d:00\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final int DEFAULT_EDIT_NUMBER \u003d -999999;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.recurrences \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.editNumber \u003d DEFAULT_EDIT_NUMBER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Task(Task task, int editNumber) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.description \u003d task.description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        setEditNumber(editNumber);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void setEditNumber(int number) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.editNumber \u003d number;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getEditNumber() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return editNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public int getRecurrences() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return recurrences;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void decrementRecurrences(int by) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        recurrences \u003d recurrences - by;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public abstract LocalDateTime getStart();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public abstract LocalDateTime getEnd();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public abstract void setStart(LocalDateTime start);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public abstract void setEnd(LocalDateTime end);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public abstract void moveAndUpdateRecurrences();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean isWithinTimeSlot(int timeSlotStartHour) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return startsBeforeOrAt(timeSlotStartHour) \u0026\u0026 endsAtOrAfter(timeSlotStartHour + 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean startsBeforeOrAt(int hour) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getRoundedDownStartHour(getStart().toLocalTime()) \u003c\u003d hour;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getRoundedDownStartHour(LocalTime startTime) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return startTime.getHour();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean endsAtOrAfter(int hour) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getRoundedUpEndHour(getEnd().toLocalTime()) \u003e\u003d hour;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getRoundedUpEndHour(LocalTime endTime) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int endHour \u003d endTime.getHour();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalTime adjustedEndTime \u003d LocalTime.parse(String.format(TIME_FORMAT, endHour));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (endTime.equals(adjustedEndTime)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return endHour;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return endHour + 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean isHappeningOn(LocalDate date) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getStart().toLocalDate().equals(date);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public boolean isHappeningBefore(LocalDate date) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return getStart().toLocalDate().isBefore(date);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 21,
      "daniellimzj": 23,
      "dojh111": 12,
      "johan9se": 53
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/tasks/TaskHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": " * The TaskHistory class represents the list of changes made to Task objects,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": " * edits or deletions in particular."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class TaskHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private int changeCount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private int editCount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private int deleteCount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private ArrayList\u003cTask\u003e taskHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DEFAULT_EDIT_NUMBER \u003d -999999;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public TaskHistory() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.changeCount \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.editCount \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.deleteCount \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.taskHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Task getLastTask() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return taskHistory.get(changeCount - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getEditCount() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return editCount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getDeleteCount() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return deleteCount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void incrementChangeCount() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.changeCount++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void decrementChangeCount() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        this.changeCount--;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void pushOldCopy(Task oldCopyOfTask, Ui ui) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        taskHistory.add(oldCopyOfTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        incrementChangeCount();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void popLastTask() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int indexOfLastTask \u003d changeCount - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        taskHistory.remove(indexOfLastTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        decrementChangeCount();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Returns a copy of the Task object before it is edited."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param tasks represents the TaskList object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param userIndexChoice the index of the Task object the user wants to edit."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Task getCurrCopyOfTaskToEdit(TaskList tasks, int userIndexChoice) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task task \u003d tasks.getTask(userIndexChoice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int taskEditNumber \u003d task.getEditNumber();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int editID;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (taskEditNumber \u003d\u003d DEFAULT_EDIT_NUMBER) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editID \u003d getEditCount() + 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            tasks.getTask(userIndexChoice).setEditNumber(editID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            editID \u003d taskEditNumber;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        editCount++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return copyTask(tasks, userIndexChoice, task, editID);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Returns a copy of the Task object before it is deleted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param tasks represents the TaskList object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * @param userIndexChoice the index of the Task object the user wants to delete."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Task getCurrCopyOfTaskToDelete(TaskList tasks, int userIndexChoice) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        Task task \u003d tasks.getTask(userIndexChoice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int taskEditNumber \u003d task.getEditNumber();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int deleteID;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (taskEditNumber \u003d\u003d DEFAULT_EDIT_NUMBER) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            deleteID \u003d getDeleteCount() - 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            tasks.getTask(userIndexChoice).setEditNumber(deleteID);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            deleteID \u003d taskEditNumber;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        deleteCount--;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return copyTask(tasks, userIndexChoice, task, deleteID);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Task copyTask(TaskList tasks, int userIndexChoice, Task task, int editID) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return new Deadline(tasks.getTask(userIndexChoice), editID);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return new Event(tasks.getTask(userIndexChoice), editID);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return new Lesson(tasks.getTask(userIndexChoice), editID);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void printTaskHistory() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (Task t : taskHistory) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            System.out.println(t.toString() + \" \" + t.getEditNumber());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 11,
      "johan9se": 111
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/tasks/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.commands.ShowNotesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.parser.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final int INDEX_START \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final int INDEX_END \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(ShowNotesCommand.class.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    protected static ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private int indexOfLastMatch;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getTaskCount() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void setTask(int index, Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        taskList.set(index, task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * Add new event to taskList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param description description of event."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param start start date/time of event."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param end end date/time of event."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param recurrences number of times to repeat."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Task addEvent(String description, LocalDateTime start, LocalDateTime end, int recurrences) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Event event \u003d new Event(description, start, end, recurrences);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        addTask(event);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * Add new Lesson to taskList."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param moduleCode module code of lesson."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param start start date/time of lesson."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param end end date/time of lesson."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param recurrences number of times to repeat."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Task addLesson(String moduleCode, LocalDateTime start, LocalDateTime end, int recurrences) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Lesson lesson \u003d new Lesson(moduleCode, start, end, recurrences);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        addTask(lesson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return lesson;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * Adds a new Deadline to taskList."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     * @param by deadline of task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param recurrences number of times to repeat."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Task addDeadline(String description, LocalDateTime by, int recurrences) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, by, recurrences);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        addTask(deadline);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editTaskDescription(int index, Ui ui) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        String newDescription \u003d ui.readCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        getTask(index).setDescription(newDescription);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        ui.showEditConfirmationMessage();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editLessonTime(int index, Ui ui) throws ParserException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        LocalDateTime[] times \u003d parser.parseNewTimeInput(ui, ui.readCommand(), 2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        if (times[0] \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Time input is not in the correct format\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            throw new ParserException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        getTask(index).setStart(times[INDEX_START]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        getTask(index).setEnd(times[INDEX_END]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        ui.showEditConfirmationMessage();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editEventTime(int index, Ui ui) throws ParserException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        LocalDateTime[] times;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        times \u003d parser.parseNewTimeInput(ui, ui.readCommand(), 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        if (times[0] \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Time input is not in the correct format\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            throw new ParserException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        getTask(index).setStart(times[INDEX_START]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        getTask(index).setEnd(times[INDEX_END]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        ui.showEditConfirmationMessage();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void editDeadlineTime(int index, Ui ui) throws ParserException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        LocalDateTime[] times;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        times \u003d parser.parseNewTimeInput(ui, ui.readCommand(), 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        if (times[0] \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Time input is not in the correct format\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            throw new ParserException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        getTask(index).setStart(times[0]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        ui.showEditConfirmationMessage();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void deleteTask(int index, Ui ui) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            taskList.remove(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Index provided out of bounds\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showInvalidNumberMessage();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Input is not a valid number\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            ui.showNumberFormatMessage();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void printMatchingTasks(String type, String description) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Start of printing all matching \" + type);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        indexOfLastMatch \u003d 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        boolean noMatches \u003d true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        for (int i \u003d 0; i \u003c getTaskCount(); i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            if (checkMatchingTasks(i, type, description)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                System.out.println((i + 1) + \". \" + getTask(i).toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                indexOfLastMatch \u003d i;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                noMatches \u003d false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        if (noMatches) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.INFO, \"No matching tasks found\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        logger.log(Level.INFO, \"Start of printing all matching \" + type);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private boolean checkMatchingTasks(int index, String type, String description) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return (getTask(index).getType().equals(type)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "                \u0026\u0026 getTask(index).getDescription().contains(description));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void checkForIndexOutOfBounds(int userInput) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        if (userInput \u003e indexOfLastMatch || userInput \u003c 0) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            logger.log(Level.SEVERE, \"Index provided out of bounds\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Returns an ArrayList of Tasks from one specific day."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param day Day to get tasks from."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @return ArrayList of Tasks from one specific day."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasksFromOneDay(LocalDate day) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return (ArrayList\u003cTask\u003e) taskList.stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                .filter((t) -\u003e t.getStart().toLocalDate().equals(day))"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        taskList.sort(Comparator.comparing(Task::getStart));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Cleans up the taskList."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Deletes tasks if they have no more recurrences and are in the past."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * Updates tasks\u0027 dates if they have more recurrences and are in the past."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     * @param day Day behind which tasks will be updated and deleted."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void updateTasks(LocalDate day) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasksToBeRemoved \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            if ((task.isHappeningBefore(day)) \u0026\u0026 (task.getRecurrences() \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                tasksToBeRemoved.add(task);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            } else if ((task.isHappeningBefore(day)) \u0026\u0026 (task.getRecurrences() \u003e 0)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                task.moveAndUpdateRecurrences();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (Task task : tasksToBeRemoved) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            taskList.remove(task);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 149,
      "daniellimzj": 55,
      "dojh111": 4,
      "johan9se": 13
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/tasks/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "package seedu.lifeasier.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "public class TaskNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 4
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/ui/ScheduleUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johan9se"
        },
        "content": "package seedu.lifeasier.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johan9se"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": " * The ScheduleUi class handles all schedule-related displays."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": "public class ScheduleUi {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final TimetableUi timetable \u003d TimetableUi.getInstance();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Displays the home screen to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showHome(TaskList tasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        timetable.showTimetable(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        displayUpcomingDeadlines(tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(Ui.SEPARATOR);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private void displayUpcomingDeadlines(TaskList tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalDate dateAfterOneWeek \u003d LocalDate.now().plus(1, ChronoUnit.WEEKS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(\"Here are your upcoming deadlines this week:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int id \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (task instanceof Deadline \u0026\u0026 task.isHappeningBefore(dateAfterOneWeek)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                System.out.println(id + \". \" + task.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                id++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void displayDaySchedule(LocalDate date, TaskList tasks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        tasks.sort();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            LocalDateTime startDateTime \u003d task.getStart();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            LocalDateTime endDateTime \u003d task.getEnd();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (startDateTime.toLocalDate().equals(date)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                printWithScheduleFormat(task, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void printWithScheduleFormat(Task task, LocalDateTime startDateTime, LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String startDateTimeString \u003d getTimeStamp(startDateTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String endDateTimeString \u003d (endDateTime \u003d\u003d null) ? \"      \" : (\"-\" + getTimeStamp(endDateTime));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(startDateTimeString + endDateTimeString + \"  \" + task.getDescription());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static String getDayOfWeek(LocalDateTime datePointer) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return datePointer.getDayOfWeek().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String getTimeStamp(LocalDateTime timedItem) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return timedItem.toLocalTime().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getTaskCountForToday(TaskList tasks, LocalDate date) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (task.getStart().toLocalDate().equals(date)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "johan9se": 74
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/ui/TimetableUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johan9se"
        },
        "content": "package seedu.lifeasier.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": " * The TimetableUi class handles the displaying of the schedule in a tabulated format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "public class TimetableUi {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String TIME_COLUMN_NAME \u003d \"TIME\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String TIME_FORMAT \u003d \"%02d:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DEFAULT_START_HOUR \u003d 8;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DEFAULT_END_HOUR \u003d 18;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int DAYS_COLUMN_COUNT \u003d 7;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final int MAX_COLUMN_WIDTH \u003d 15;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String ROW_FORMAT \u003d \"|%-11s| %-15s | %-15s | %-15s | %-15s | %-15s | %-15s | %-15s |\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final String ROW_SEPARATOR \u003d \"+-----------+\" + \"-----------------+\".repeat(DAYS_COLUMN_COUNT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static TimetableUi timetableUi \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static ArrayList\u003cString\u003e timetableRows;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private TimetableUi() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        timetableRows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static TimetableUi getInstance() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (timetableUi \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            timetableUi \u003d new TimetableUi();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return timetableUi;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showTimetable(TaskList tasks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        generateTimetable(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        LocalTime currentTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(ROW_SEPARATOR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (String row: timetableRows) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (determineIfCurrentHour(row, currentTime)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                System.out.println(ui.colourTextCyan(row));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                System.out.println(row);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            System.out.println(ROW_SEPARATOR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Fills the timetable with the contents of the TaskList."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void generateTimetable(TaskList tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        timetableRows.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        timetableRows.add(getColumnTitlesString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalTime[] timeRange \u003d getTimetableTimeRange(tasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int firstHour \u003d timeRange[0].getHour();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int lastHour \u003d timeRange[1].getHour();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int currHour \u003d firstHour;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        while (currHour \u003c\u003d lastHour) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            timetableRows.add(generateRowString(currHour, tasks));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            currHour++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Formats and returns the table header with the days of the week,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * starting from the current day."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String getColumnTitlesString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String[] columnTitles \u003d new String[8];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        columnTitles[0] \u003d TIME_COLUMN_NAME;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            LocalDateTime datePointer \u003d LocalDateTime.now().plus(i, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            columnTitles[i + 1] \u003d ScheduleUi.getDayOfWeek(datePointer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return String.format(ROW_FORMAT, (Object[]) columnTitles);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Formats the contents of a table row."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String generateRowString(int hour, TaskList tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String[] rowContents \u003d generateRowContents(hour, tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return String.format(ROW_FORMAT, (Object[]) rowContents);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Returns the contents of each row of the timetable into an array."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Each row represents the tasks that fall within a certain time slot."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String[] generateRowContents(int hour, TaskList tasks) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String[] rowContents \u003d new String[8];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        rowContents[0] \u003d getTimeSlotString(hour);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (int dayIncrement \u003d 0; dayIncrement \u003c 7; dayIncrement++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            LocalDate currDate \u003d todayDate.plus(dayIncrement, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            rowContents[dayIncrement + 1] \u003d getCellString(currDate, hour, tasks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return rowContents;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private String getTimeSlotString(int startHour) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String startHourString \u003d String.format(TIME_FORMAT, startHour);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String endHourString \u003d String.format(TIME_FORMAT, (startHour + 1) % 24);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return startHourString + \"-\" + endHourString;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Returns the contents of each cell of the timetable."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private String getCellString(LocalDate date, int hour, TaskList tasks) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        ArrayList\u003cString\u003e cellContents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            if (!(task instanceof Deadline) \u0026\u0026 task.isHappeningOn(date) \u0026\u0026 task.isWithinTimeSlot(hour)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                cellContents.add(task.getDescription());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return trimToFitTimetableCell(cellContents.toString().replace(\"[\", \"\").replace(\"]\", \"\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public String trimToFitTimetableCell(String fullString) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        if (fullString.length() \u003e MAX_COLUMN_WIDTH) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            return fullString.substring(0, MAX_COLUMN_WIDTH - 3) + \"...\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return fullString;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * Iterates through the TaskList to determine the earliest and"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * latest time that has a certain Task scheduled, so that the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     * timetable can display all Tasks within that range."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "johan9se"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public LocalTime[] getTimetableTimeRange(TaskList tasks) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int earliestHour \u003d DEFAULT_START_HOUR;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int latestHour \u003d DEFAULT_END_HOUR;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (int hour \u003d 0; hour \u003c 24; hour++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            for (Task task: tasks.getTaskList()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                if (!(task instanceof Deadline) \u0026\u0026 task.isWithinTimeSlot(hour)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    int currTaskStartHour \u003d task.getStart().toLocalTime().getHour();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    int currTaskEndHour \u003d task.getEnd().toLocalTime().getHour();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    earliestHour \u003d getEarlierTime(earliestHour, currTaskStartHour, currTaskEndHour);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                    latestHour \u003d getLaterTime(latestHour, currTaskStartHour, currTaskEndHour);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "johan9se"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "johan9se"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalTime earliestTime \u003d LocalTime.parse(String.format(TIME_FORMAT, earliestHour));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        LocalTime latestTime \u003d LocalTime.parse(String.format(TIME_FORMAT, latestHour));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return new LocalTime[] {earliestTime, latestTime};"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getEarlierTime(int referenceHour, int taskStartHour, int taskEndHour) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return Math.min(Math.min(referenceHour, taskStartHour),Math.min(referenceHour, taskEndHour));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public int getLaterTime(int referenceHour, int taskStartHour, int taskEndHour) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        return Math.max(Math.max(referenceHour, taskStartHour),Math.max(referenceHour, taskEndHour));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Determines if the current time falls within the current time slot in the time table."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param row String with information of current row."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param currentTime Current time from LocalTime object."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return true when current time falls within the timetable slot."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private boolean determineIfCurrentHour(String row, LocalTime currentTime) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] rowComponents \u003d row.split(\"\\\\|\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] timeRange \u003d rowComponents[1].split(\"-\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (timeRange.length \u003c 2) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(timeRange[0]);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(timeRange[1]);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            boolean isAfterStartTime \u003d currentTime.compareTo(startTime) \u003e 0;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            boolean isBeforeEndTime \u003d currentTime.compareTo(endTime) \u003c 0;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Current time is within hourly range"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (isAfterStartTime \u0026\u0026 isBeforeEndTime) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(ui.colourTextRed(\"There was an error parsing the times\"));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(ui.colourTextRed(\"There was an error getting the time ranges\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "johan9se"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 44,
      "johan9se": 171
    }
  },
  {
    "path": "src/main/java/seedu/lifeasier/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": " * The Ui class deals with all interactions with the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ANSI_RESET \u003d \"\\u001B[0m\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ANSI_RED \u003d \"\\u001B[31;1m\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ANSI_GREEN \u003d \"\\u001B[32;1m\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ANSI_YELLOW \u003d \"\\u001B[33;1m\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ANSI_BLUE \u003d \"\\u001B[34;1m\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ANSI_PURPLE \u003d \"\\u001B[35;1m\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ANSI_CYAN \u003d \"\\u001B[36;1m\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String SEPARATOR \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_LESSON \u003d \"lesson\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String PARAM_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String LOGO \u003d \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"  _      _  __ ______          _\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" | |    (_)/ _|  ____|        (_)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" | |     _| |_| |__   __ _ ___ _  ___ _ __\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" | |    | |  _|  __| / _` / __| |/ _ \\\\ \u0027__|\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" | |____| | | | |___| (_| \\\\__ \\\\ |  __/ |\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" |______|_|_| |______\\\\__,_|___/_|\\\\___|_|\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //Error messages"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String ERROR_INVALID_COMMAND \u003d \"Oh no, I do not understand this command! Type \u0027help\u0027 for \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"a list of available commands\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String ERROR_INVALID_INPUT \u003d \"Oh no, I do not understand this input!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //General UI messages"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_GOODBYE \u003d \"Goodbye, hope to see you again soon!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_GREETING \u003d \"Hello! What can I do for you today?\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String MESSAGE_HELP_COMMAND \u003d \" -Type \u0027help\u0027 for a list the list of available commands\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    //Help message"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"These are the commands that are available:\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_PURPLE + \"Notes about the command format:\\n\" + ANSI_RESET"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" * Words in UPPER_CASE are the parameters to be supplied by the user\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \" * Items in square brackets are optional, e.g [DATE]\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_CYAN + \"COMMANDS\\n\" + ANSI_RESET"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"*************************************************************************\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"help ---------------------------------------- Displays available commands\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"addLesson /code MODULE_CODE /date DATE /time START /to END -- Adds lesson\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"addEvent EVENT_NAME /date DATE /time START /to END -------- Adds an event\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"addDeadline DEADLINE_NAME /by DATETIME ------------------ Adds a deadline\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            + \"editLesson MODULE_CODE ----------------------------------- Edits a lesson\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            + \"editEvent EVENT_NAME ------------------------------------- Edits an event\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            + \"editDeadline DEADLINE_NAME ----------------------------- Edits a deadline\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            + \"deleteTask /type TYPE /name NAME ------------------------- Deletes a task\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"addNotes TITLE ------------------------------------------ Adds a new note\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"showNotes TITLE ------------------------------------- Shows selected note\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"archive ------------------------------------- Archives all existing notes\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            + \"editNotes TITLE ----------------------------------- Edits a selected note\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            + \"deleteNotes TITLE ------------------------------- Deletes a selected note\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"display WEEK/DAY --------------- Displays either weekly or daily schedule\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"freeTime ------------------------ Tells you when you have free time today\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            + \"sleepTime --------------------- Tells you how much time you have to sleep\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"exit --------------------------------------- Closes the LifEasier program\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"*************************************************************************\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + ANSI_GREEN + \"For more detailed information, please visit the online user guide at:\\n\" + ANSI_RESET;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    //Input format messages"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String NEW_DEADLINE_TIME_INPUT_FORMAT \u003d \"/by DATETIME\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String NEW_EVENT_TIME_INPUT_FORMAT \u003d \"/date DATE /time START /to END\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public static final String NEW_LESSON_TIME_INPUT_FORMAT \u003d \"/date DATE /time START /to END\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private Scanner conversation;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        this.conversation \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void printSeparator() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Colours input string to a green colour."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param string String to be coloured."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Green coloured string."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String colourTextGreen(String string) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return ANSI_GREEN + string + ANSI_RESET;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Colours input string to a red colour."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param string String to be coloured."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Red coloured string."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String colourTextRed(String string) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return ANSI_RED + string + ANSI_RESET;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Colours input string to a cyan colour."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @param string String to be coloured"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * @return Cyan coloured string."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    protected String colourTextCyan(String string) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        return ANSI_CYAN + string + ANSI_RESET;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showLogo() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showGreetingMessage() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextCyan(MESSAGE_GREETING));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(MESSAGE_HELP_COMMAND));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showAddConfirmationMessage(Task task) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"Done! I\u0027ve added \\\"\" + task + \"\\\" to your calendar\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private void printLogo() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextCyan(LOGO));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showHelp() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(HELP_MESSAGE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Returns read user command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        return conversation.nextLine();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public int readSingleIntInput() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        return Integer.parseInt(readCommand());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showSelectTaskToEdit(String type) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        System.out.println(\"Please select the \" + type + \" you want to edit.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showSelectParameterToEdit() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        System.out.println(\"Please select the parameter you want to edit.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showSelectTaskToDelete(String type) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        System.out.println(\"Please select the \" + type + \" you want to delete.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showInputFormat(String type) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_EVENT):"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            System.out.println(\"Please input your new time in this format: \" + NEW_EVENT_TIME_INPUT_FORMAT);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_DEADLINE):"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            System.out.println(\"Please input your new time in this format: \" + NEW_DEADLINE_TIME_INPUT_FORMAT);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_LESSON):"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            System.out.println(\"Please input your new time in this format: \" + NEW_LESSON_TIME_INPUT_FORMAT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showInputMessage(String type) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_LESSON):"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            System.out.println(\"Please input your new Module Code\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_DEADLINE):"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            System.out.println(\"Please input your new Deadline name\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_EVENT):"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            System.out.println(\"Please input your new Event name\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showEditableParametersMessage(String type) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_LESSON):"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            System.out.println(\"1. Module Code\\n2. Time\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_DEADLINE):"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            System.out.println(\"1. Deadline Name\\n2. Time\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        case (PARAM_EVENT):"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            System.out.println(\"1. Event Name\\n2. Time\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showEditConfirmationMessage() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"Your edit has been saved.\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showDeleteConfirmationMessage() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"The task you selected has been deleted.\"));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showInvalidCommandError() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(ERROR_INVALID_COMMAND));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showInvalidInputMessage() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(ERROR_INVALID_INPUT));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showGoodbyeMessage() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextCyan(MESSAGE_GOODBYE));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNoteTitleMessage() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Please put in a title:\\n\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNoteDescriptionMessage() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Alright! Please fill in your notes.\\n\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showFileCreationError() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Something went wrong... Save file creation failed...\"));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showDataLoadingMessage() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"Reading your save data. New saves will be created \""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \"if no saves are found.\"));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showNoDataToArchiveMessage() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"You do not have any data available for archiving.\"));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showFileArchiveError() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"There was an error archiving your data\"));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showArchiveStartMessage() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"Starting archiving...\"));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showArchiveEndMessage() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextGreen(\"Archiving successful!\"));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showFileReadError() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Something went wrong, unable to read from save file...\"));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showFileWriteError() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Something went wrong while saving your data...\"));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showDirectoryCreationFailedError() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Directory creation failed...\"));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showInvalidNumberMessage() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"The number you inputted is invalid!\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNoTitleFoundMessage() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"The title you inputted is not found...\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNumberFormatMessage() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"\\nOpps! The input must be a number!\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showInvalidCastError() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Something went wrong, mismatching task types...\"));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showSaveDataMissingError() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Encountered an error while reading from the save file \""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                + \"- Data missing/corrupted\"));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showLocalDateTimeParseError() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Encountered a problem reading the date and time of the task...\"));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showUndeterminableTaskError() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"Something went wrong while determining the tasks...\"));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showParseUnknownCommandMessage() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(colourTextRed(\"I\u0027m sorry! I don\u0027t understand that command!\"));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showParseIncorrectCommandFormatMessage() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"I\u0027m sorry! Please double check the input of your format!\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"Use the help command for formats of all the commands!\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showParseIncorrectDateTimeMessage() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"I\u0027m sorry! Please ensure your dates are in the format dd-mm-yy,\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"and your times are in the format hh:mm!\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showEmptyDescriptionMessage() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Empty description! \u003dO\\n\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    public void showNoMatchesMessage(String type) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        System.out.println(\"Sorry! There is no \" + type + \" matching your query. Please re-enter your command.\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNoteAddedMessage() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Ok! I\u0027ve taken note of this note!\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showMultipleMatchesFoundMessage() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Multiple matches found! Please select the one you are looking for:\\n\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showSelectWhichNoteToViewMessage() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Please select the notes you want to view:\\n\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showFreeTimeMessage(int startHour, int endHour, int duration) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        if (duration \u003e 0) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            System.out.println(\"You have \" + duration + \" hours of free time between \" + startHour"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                    + \":00 and \" + endHour + \":00!\");"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            System.out.println(\"You can try scheduling something in this time!\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            System.out.println(\"Unfortunately you have no free time today!\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            System.out.println(\"You might want to relax a little!\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showNothingScheduledMessage() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"You have nothing on for today and tomorrow!\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showAvailableSleepTimeMessage(int earliestSleepTime, int latestWakeTime) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"You have nothing on from \" + earliestSleepTime + \":00 today to \" + latestWakeTime"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \":00 tomorrow!\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showSleepDurationMessage(int duration) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"You can sleep for up to \" + duration + \" hours!\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showExcessSleepDurationMessage() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"You can sleep for the recommended 8 hours or longer!\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showSelectWhichNoteToDeleteMessage() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Please select the notes you want to delete:\\n\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showConfirmDeleteMessage() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Is this the note you want to delete? (Y/N)\\n\");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showInvalidConfirmationMessage() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Y for Yes and N for No\\n\");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNoteNotDeletedMessage() {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"OK! Note not deleted!\");"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNoteDeletedMessage() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"OK! Note deleted!\");"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showConfirmEditMessage() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Is this the note you want to edit? (Y/N)\\n\");"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showEditWhichPartMessage() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Do you want to change the title or description? (T/D)\\n\");"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showNoteNotEditedMessage() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"OK! Note not edited!\");"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showInvalidTitleDescriptionConfirmationMessage() {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"T for title and D for Description\\n\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showEditTitleMessage() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Please input the title you want to change to:\\n\");"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showEditDescriptionMessage() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"\\nPlease input the description you want to change to:\\n\");"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showSelectWhichNoteToEditMessage() {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Please select the notes you want to edit:\\n\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showEmptyNoteListMessage() {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"There\u0027s no Notes!\");"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showAddModuleCodeMessage() {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Please input the module code:\");"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showAddDateMessage() {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Please input the date:\");"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showAddStartTimeMessage() {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Please input the start time:\");"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showAddEndTimeMessage() {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Please input the end time:\");"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showAddDescriptionMessage() {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Please input the description:\");"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void showAddDateTimeMessage() {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"Please input the Date Time:\");"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void showAddRecurrencesMessage() {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.out.println(\"Please input the number of times to repeat:\");"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void printMultipleNoteMatches(NoteList notes, String title) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            if (notes.get(i).getTitle().contains(title)) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "                System.out.println(i + 1 + \". \" + notes.get(i).getTitle() + \"\\n\");"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void printAllNotes(NoteList notes) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "            System.out.println((i + 1) + \". \" + notes.get(i).getTitle() + \"\\n\");"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showEnterUndoTypeMessage() {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"To undo a change in tasks, please enter: task\");"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"To undo a change in notes, please enter: note\");"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public void showInvalidUndoType() {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        System.out.println(\"Invalid undo type, please try again!\");"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showInvalidUndoAction() {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(\"Nothing to undo!\");"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showUndoTaskEditMessage() {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(\"This task has been reverted back to its previous version!\");"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showUndoTaskDeleteMessage() {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(\"This deleted task has been successfully restored!\");"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showUndoNoteEditMessage() {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(\"This note has been reverted back to its previous version!\");"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public void showUndoNoteDeleteMessage() {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        System.out.println(\"This deleted note has been successfully restored!\");"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    public void printEmptyParam(String param) {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        System.out.println(\"We detected that you did not fill in the field of \" + param + \". Please fill it in:\");"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 104,
      "daniellimzj": 65,
      "EdmundEXE": 134,
      "dojh111": 194,
      "johan9se": 29
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/LifEasierTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "class LifEasierTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/commands/FreeTimeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "class FreeTimeCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void isFreeTime_busyHour_false() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FreeTimeCommand command \u003d new FreeTimeCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d \"Some very long activity\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.of(2020, 10, 17, 11, 10);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.of(2020, 10, 17, 12, 59);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.add(new Event(description, start, end));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        boolean isFreeTime \u003d command.isFreeTime(11, tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertFalse(isFreeTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void isFreeTime_freeHour_true() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FreeTimeCommand command \u003d new FreeTimeCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        boolean isFreeTime \u003d command.isFreeTime(11, tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(isFreeTime);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void getLongestFreeTime_busyDay_twoHoursFree() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FreeTimeCommand command \u003d new FreeTimeCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description1 \u003d \"Some very long activity\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start1 \u003d LocalDateTime.of(2020, 10, 17, 11,0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end1 \u003d LocalDateTime.of(2020, 10, 17, 17, 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.add(new Event(description1, start1, end1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description2 \u003d \"Another very long activity\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start2 \u003d LocalDateTime.of(2020, 10, 17, 18, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end2 \u003d LocalDateTime.of(2020, 10, 17, 23, 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.add(new Event(description2, start2, end2));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int[] longestFreeTime \u003d command.getLongestFreeTime(tasks);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(4, (longestFreeTime[1] - longestFreeTime[0]));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void executeFreeTimeCommand_freeDay_6HoursFree() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        setUpStreams();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        NoteList notes \u003d new NoteList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FileStorage storage \u003d new FileStorage(\"saveFileTasks.txt\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"saveFileNotes.txt\", ui, notes, tasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        NoteHistory noteHistory \u003d new NoteHistory();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskHistory taskHistory \u003d new TaskHistory();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FreeTimeCommand command \u003d new FreeTimeCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start1 \u003d today.atTime(10, 0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end1 \u003d today.atTime(12, 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start2 \u003d today.atTime(18, 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end2 \u003d today.atTime(23, 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.addEvent(\"first event\", start1, end1, 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.addEvent(\"second event\", start2, end2, 0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        command.execute(ui, notes, tasks, storage, parser, noteHistory, taskHistory);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals((\"You have 6 hours of free time between 12:00 and 18:00!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                +  \"You can try scheduling something in this time!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                outContent.toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        restoreStreams();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void executeFreeTimeCommand_busyDay_0HoursFree() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        setUpStreams();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        NoteList notes \u003d new NoteList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FileStorage storage \u003d new FileStorage(\"saveFileTasks.txt\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"saveFileNotes.txt\", ui, notes, tasks);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        NoteHistory noteHistory \u003d new NoteHistory();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskHistory taskHistory \u003d new TaskHistory();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FreeTimeCommand command \u003d new FreeTimeCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start1 \u003d today.atTime(6, 0);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end1 \u003d today.atTime(13, 30);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start2 \u003d today.atTime(14, 0);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end2 \u003d today.atTime(23, 30);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.addEvent(\"first event\", start1, end1, 0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.addEvent(\"second event\", start2, end2, 0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        command.execute(ui, notes, tasks, storage, parser, noteHistory, taskHistory);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals((\"Unfortunately you have no free time today!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                +  \"You might want to relax a little!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                outContent.toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        restoreStreams();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 158
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/commands/ShowNotesCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package test.java.seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "class ShowNotesCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    private NoteList notes \u003d new NoteList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    void testShowCommandInputs_inputSizeMatchesActualSize() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        notes.add(new Note(\"cat\", \"i like cats\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        notes.add(new Note(\"dog\", \"i like dogs\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        assertEquals(2, notes.size());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 18
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/commands/SleepTimeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.storage.FileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "class SleepTimeCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void isBusyTime_busyHour_true() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d \"Some long activity\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.of(2020, 10, 17, 10, 10);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.of(2020, 10, 17, 12, 59);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.add(new Event(description, start, end));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        boolean isBusyTime \u003d command.isBusyTime(11, tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(isBusyTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void isBusyTime_freeHour_false() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d \"Some long activity\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.of(2020, 10, 17, 11, 10);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.of(2020, 10, 17, 12, 59);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.add(new Event(description, start, end));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        boolean isBusyTime \u003d command.isBusyTime(22, tasks);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertFalse(isBusyTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void getLatestBusyTime_busyAllDay_22() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d \"Some super long activity\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.of(2020, 10, 17, 13, 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.of(2020, 10, 17, 23, 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.add(new Event(description, start, end));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int latestBusyTime \u003d command.getLatestBusyTime(tasks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(22, latestBusyTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void getLatestBusyTime_noTasks_minus1() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int latestBusyTime \u003d command.getLatestBusyTime(tasks);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(-1, latestBusyTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void getEarliestBusyTime_notBusy_18() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String description \u003d \"Some super long activity\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.of(2020, 10, 17, 18, 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.of(2020, 10, 17, 20, 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.add(new Event(description, start, end));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int earliestBusyTime \u003d command.getEarliestBusyTime(tasks);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(18, earliestBusyTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void getEarliestBusyTime_noTasks_25() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int earliestBusyTime \u003d command.getEarliestBusyTime(tasks);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(25, earliestBusyTime);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void executeSleepTimeCommand_busyDay_6HoursSleep() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        setUpStreams();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        NoteList notes \u003d new NoteList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        NoteHistory noteHistory \u003d new NoteHistory();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskHistory taskHistory \u003d new TaskHistory();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FileStorage storage \u003d new FileStorage(\"saveFileTasks.txt\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"saveFileNotes.txt\", ui, notes, tasks);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDate tomorrow \u003d today.plusDays(1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start1 \u003d today.atTime(10, 0);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end1 \u003d today.atTime(23, 0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start2 \u003d tomorrow.atTime(6, 0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end2 \u003d tomorrow.atTime(12, 0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.addEvent(\"first event\", start1, end1, 0);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        tasks.addEvent(\"second event\", start2, end2, 0);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        command.execute(ui, notes, tasks, storage, parser, noteHistory, taskHistory);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals((\"You have nothing on from 23:00 today to 5:00 tomorrow!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                +  \"You can sleep for up to 6 hours!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                outContent.toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        restoreStreams();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void executeSleepTimeCommand_freeDay_16HoursSleep() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        setUpStreams();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        NoteList notes \u003d new NoteList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        NoteHistory noteHistory \u003d new NoteHistory();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        TaskHistory taskHistory \u003d new TaskHistory();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        FileStorage storage \u003d new FileStorage(\"saveFileTasks.txt\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"saveFileNotes.txt\", ui, notes, tasks);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        SleepTimeCommand command \u003d new SleepTimeCommand();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        command.execute(ui, notes, tasks, storage, parser, noteHistory, taskHistory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals((\"You have nothing on for today and tomorrow!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                +  \"You can sleep for the recommended 8 hours or longer!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" + System.lineSeparator()),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                outContent.toString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        restoreStreams();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 177
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/notes/NoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "package test.java.seedu.lifeasier.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "class NoteTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    void testGetTitle() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        assertEquals(\"cat\", new Note(\"cat\", \"i like cats\").getTitle());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    void testGetDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        assertEquals(\"i like cats\", new Note(\"cat\", \"i like cats\").getDescription());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        assertEquals(\"Title: cat\\n\\ni like cats\\n\", new Note(\"cat\", \"i like cats\").toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmundEXE": 24
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "package seedu.lifeasier.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.AddEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.FreeTimeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.InvalidCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.commands.SleepTimeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputHelp_HelpCommand() throws ParserException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand(\"help\", ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof HelpCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputAddLesson_AddLessonCommand() throws ParserException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"addLesson /code cg1111 /date 10-10-20 /time 10:00 /to 20:00 /repeats 0\", ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof AddLessonCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputFreeTime_FreeTimeCommand() throws ParserException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"freeTime\", ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof FreeTimeCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputSleepTime_SleepTimeCommand() throws ParserException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"sleepTime\", ui);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof SleepTimeCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputExit_ExitCommand() throws ParserException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"exit\", ui);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof ExitCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputInvalidAddLesson_InvalidCommand() throws ParserException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"addLesson /code cg1111 /date 10-13-20 /time 24:60 /to 26:76 /repeats 0\", ui);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof InvalidCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputInvalidCommand_ParserException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertThrows(ParserException.class, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            parser.parseCommand(\"I want to add a lesson\", ui);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseAddDeadlineCommand_inputInvalidDateTime_ParserException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmundEXE"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            parser.parseAddDeadlineCommand(ui, \"addDeadline do homework /by 10-30-40 24:67 /repeats 4\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputAddEvent_AddEventCommand() throws ParserException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"addEvent my event /date 10-10-20 /time 10:00 /to 20:00 /repeats 1\", ui);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof AddEventCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void parseCommand_inputAddDeadline_AddDeadlineCommand() throws ParserException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "                \"addDeadline my deadline /by 10-10-20 10:00 /repeats 0\", ui);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(command instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 111,
      "EdmundEXE": 1
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/storage/FileArchiveTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "class FileArchiveTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TEST_FILEPATH \u003d \"testSave.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String NOTE_SEPARATOR \u003d \"-------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileArchive fileArchive;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public FileArchiveTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.notes \u003d new NoteList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileArchive \u003d new FileArchive(notes, new Ui());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void writeDataToArchiveSaveFile_testData_writeSuccess() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note testNote \u003d new Note(\"Cats are cute!\", \"I Love Cats\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.getNotes().clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.add(testNote);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileCommand.clearSaveFile(TEST_FILEPATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileArchive.writeDataToArchiveSaveFile(TEST_FILEPATH, notes.getNotes());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File testFile \u003d new File(TEST_FILEPATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileReader \u003d new Scanner(testFile);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ArrayList\u003cString\u003e fileContents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fileContents.add(fileReader.nextLine());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Assertions.assertAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                () -\u003e assertEquals(NOTE_SEPARATOR, fileContents.get(0)),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                () -\u003e assertEquals(\"Cats are cute!\", fileContents.get(1)),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                () -\u003e assertEquals(\"I Love Cats\", fileContents.get(2)),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                () -\u003e assertEquals(NOTE_SEPARATOR, fileContents.get(3))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Testing error - There was an error writing to the file\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void getNoteBody_inputWithWhiteSpace_correctReturn() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note testNote \u003d new Note(\"Test 1     \", \" Test Body  \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(\"Test Body\" + System.lineSeparator(), fileArchive.getNoteBody(testNote));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void getNoteTitle_inputWithWhiteSpace_correctReturn() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note testNote \u003d new Note(\"Test 1     \", \" Test Body  \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(\"Test 1\" + System.lineSeparator(), fileArchive.getNoteTitle(testNote));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void checkForEmptyNotes_noExistingNotes_true() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note testNote \u003d new Note(\"Cats are cute!\", \"I Love Cats\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.add(testNote);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.getNotes().clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cNote\u003e noteList \u003d notes.getNotes();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertTrue(fileArchive.checkForEmptyNotes(noteList));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void checkForEmptyNotes_existingNotes_false() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note testNote \u003d new Note(\"Cats are cute!\", \"I Love Cats\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.getNotes().clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.add(testNote);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cNote\u003e noteList \u003d notes.getNotes();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertFalse(fileArchive.checkForEmptyNotes(noteList));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void clearNoteList_existingNotes_notesCleared() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.getNotes().clear();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note testNote \u003d new Note(\"Cats are cute!\", \"I Love Cats\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.add(testNote);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        fileArchive.clearNoteList(notes.getNotes());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(0, notes.getNotes().size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 105
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/storage/FileCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "class FileCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TEST_FILEPATH \u003d \"testSave.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yy HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public FileCommandTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertToLocalDateTime_inputValidDateTime_correctOutput() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String formattedDateTime \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fileCommand.convertToLocalDateTime(\"09-04-21T18:00\").format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(\"09-04-21 18:00\", formattedDateTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertToLocalDateTIme_invalidDateTime_defaultDateTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String formattedDateTime \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                fileCommand.convertToLocalDateTime(\"09-23-21T18:00\").format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(\"31-12-99 00:00\", formattedDateTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertToBoolean_validString_convertedToTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(true, fileCommand.convertToBoolean(\"True\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertToBoolean_invalidString_convertedToTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(false, fileCommand.convertToBoolean(\"True  \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void clearSaveFile_testFilePath_emptyFile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter testFileWriter \u003d new FileWriter(TEST_FILEPATH, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            testFileWriter.write(\"This is a test\" + System.lineSeparator());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            testFileWriter.write(\"All this should not exist after file clearing\" + System.lineSeparator());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            testFileWriter.close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(TEST_FILEPATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File testFile \u003d new File(TEST_FILEPATH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(testFile);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String documentInformation \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                documentInformation \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            testFile.deleteOnExit();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assertNull(documentInformation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Failed creating test save file\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 74
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/storage/NoteStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.notes.NoteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": "class NoteStorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String EXPECTED_STRING_OUTPUT_NOTES \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            \"Cats are awesome!\u003d-\u003dCats are so cute, they are the best :D\" + System.lineSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String EXPECTED_STRING_NOTES_READ \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            \"Cats are awesome!\u003d-\u003dCats are so cute, they are the best :D\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private static final String TEST_FILEPATH \u003d \"testSave.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteStorage noteStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private NoteList notes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public NoteStorageTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.notes \u003d new NoteList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.noteStorage \u003d new NoteStorage(notes, TEST_FILEPATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.note \u003d new Note(\"Cats are awesome!  \", \"  Cats are so cute, they are the best :D  \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertNoteToString_newNote_correctStringOutput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String output \u003d noteStorage.convertNoteToString(note);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(EXPECTED_STRING_OUTPUT_NOTES, output);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void writeToNoteSaveFile_newNote_writtenToFile() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.getNotes().clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteStorage.writeToNoteSaveFile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File testFile \u003d new File(TEST_FILEPATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String saveFileContents \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Scanner fileReader \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileReader \u003d new Scanner(testFile);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Testing error - File not found\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assert fileReader !\u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        if (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            saveFileContents \u003d fileReader.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        testFile.deleteOnExit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(EXPECTED_STRING_NOTES_READ, saveFileContents);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void readNotesSave_newNote_notesRebuilt() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.getNotes().clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteStorage.writeToNoteSaveFile();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        notes.getNotes().clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        noteStorage.readNotesSave();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Note readNote \u003d new Note(null, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            readNote \u003d notes.get(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Testing error - Note out of bounds\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String noteTitle \u003d readNote.getTitle();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String noteDescription \u003d readNote.getDescription();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Boolean correctTitle \u003d noteTitle.equals(\"Cats are awesome!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Boolean correctDescription \u003d noteDescription.equals(\"Cats are so cute, they are the best :D\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Boolean correctNoteListLength \u003d notes.getNotes().size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertTrue(correctTitle \u0026\u0026 correctDescription \u0026\u0026 correctNoteListLength);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * Tests when save data is corrupted and missing fields, all previous save data to that point is still read"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     * onto the program and the program continues to run instead of crashing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void createNoteList_missingData_limitedSaveRead() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File testFile \u003d new File(TEST_FILEPATH);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (!testFile.exists()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (testFile.createNewFile()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    System.out.println(\"New test save file created\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Clear save file if written on from previous tests"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileCommand fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(TEST_FILEPATH);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            notes.getNotes().clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Write test data onto test file"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(TEST_FILEPATH, true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"Test Note 1\u003d-\u003dFirst Test case\" + System.lineSeparator());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"Test Note 2\u003d-\u003dSecond Test case\" + System.lineSeparator());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"\u003d-\u003dThis test is missing information\" + System.lineSeparator());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"Test Note 3\u003d-\u003dThis should not be written\" + System.lineSeparator());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileReader \u003d new Scanner(testFile);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            noteStorage.createNoteList(fileReader);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assertEquals(2, notes.getNotes().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Testing error - Could not write to save file\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 125
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/storage/TaskStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dojh111"
        },
        "content": "package seedu.lifeasier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.Lesson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dojh111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dojh111"
        },
        "content": "class TaskStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String SAVE_DELIMITER \u003d \"\u003d-\u003d\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String TEST_FILEPATH \u003d \"testSave.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXPECTED_LESSON \u003d \"lesson\" + SAVE_DELIMITER + \"false\" + SAVE_DELIMITER + \"CS2113T\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + SAVE_DELIMITER + \"09-04-21 18:00\" + SAVE_DELIMITER + \"09-04-21 18:00\" + System.lineSeparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXPECTED_EVENT \u003d \"event\" + SAVE_DELIMITER + \"false\" + SAVE_DELIMITER + \"Concert\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + SAVE_DELIMITER + \"09-04-21 18:00\" + SAVE_DELIMITER + \"09-04-21 18:00\" + System.lineSeparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public static final String EXPECTED_DEADLINE \u003d \"deadline\" + SAVE_DELIMITER + \"false\" + SAVE_DELIMITER"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            + \"Return Books\" + SAVE_DELIMITER + \"09-04-21 18:00\" + System.lineSeparator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskStorage taskStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private FileCommand fileCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    public TaskStorageTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.taskStorage \u003d new TaskStorage(tasks, TEST_FILEPATH);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        this.fileCommand \u003d new FileCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        startTime \u003d fileCommand.convertToLocalDateTime(\"09-04-21T18:00\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        endTime \u003d fileCommand.convertToLocalDateTime(\"09-04-21T18:00\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void readTasksSave_saveFileTasks_tasksRebuilt() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            File testSaveFile \u003d new File(TEST_FILEPATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (!testSaveFile.exists()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (testSaveFile.createNewFile()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    System.out.println(\"Save file for testing created\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(TEST_FILEPATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(TEST_FILEPATH, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"deadline\u003d-\u003dfalse\u003d-\u003dGo Home\u003d-\u003d16-10-20 23:59\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            tasks.getTaskList().clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.readTasksSave();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Task testTask \u003d tasks.getTask(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Boolean isCorrectType \u003d testTask.getType().equals(\"deadline\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Boolean isCorrectDescription \u003d testTask.getDescription().equals(\"Go Home\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Boolean isCorrectSize \u003d tasks.getTaskList().size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assertTrue(isCorrectType \u0026\u0026 isCorrectDescription \u0026\u0026 isCorrectSize);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Testing error - Could not read/write to file\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void createTaskList_saveDataCorrupted_limitedSavesRead() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File testSave \u003d new File(TEST_FILEPATH);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (!testSave.exists()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (testSave.createNewFile()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    System.out.println(\"New save created for testing\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(TEST_FILEPATH);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(TEST_FILEPATH, true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"lesson\u003d-\u003dfalse\u003d-\u003dCS1231\u003d-\u003d17-10-20 09:00\u003d-\u003d17-10-20 12:00\" + System.lineSeparator());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"deadline\u003d-\u003dfalse\u003d-\u003dGo Home\u003d-\u003d16-10-20 23:59\" + System.lineSeparator());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"event\u003d-\u003dfalse\u003d-\u003dAnother Concert\u003d-\u003d16-10-20 22:00\u003d-\u003d16-10-20 23:59\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    + System.lineSeparator());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"lesson\u003d-\u003dfalse\u003d-\u003d\u003d-\u003d20-10-20 09:00\u003d-\u003d20-10-20 12:00\" + System.lineSeparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.write(\"lesson\u003d-\u003dfalse\u003d-\u003dCS2101\u003d-\u003d20-10-20 09:00\u003d-\u003d20-10-20 12:00\" + System.lineSeparator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            tasks.getTaskList().clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(testSave);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.createTaskList(fileScanner);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            //Only first 3 tasks will be added. Upon detected missing data, file reading will stop"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assertEquals(3, tasks.getTaskList().size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Testing error - Unable to read/write to file\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void writeToTaskSaveFile_allTaskTypes_writeSuccess() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        File testSave \u003d new File(TEST_FILEPATH);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            if (!testSave.exists()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                if (testSave.createNewFile()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                    System.out.println(\"New save created for testing\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dojh111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            fileCommand.clearSaveFile(TEST_FILEPATH);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskList.clear();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String[] eventComponents \u003d {\"event\", \"false\", \"Concert\", \"09-04-21 09:00\", \"09-04-21 12:00\"};"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String[] deadlineComponents \u003d {\"deadline\", \"false\", \"Go home\", \"09-04-21 09:00\"};"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            String[] lessonComponents \u003d {\"lesson\", \"false\", \"CS1231\", \"09-04-21 09:00\", \"09-04-21 12:00\"};"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.rebuildEvent(eventComponents, taskList, eventComponents[2], false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.rebuildDeadline(deadlineComponents, taskList, deadlineComponents[2], false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.rebuildLesson(lessonComponents, taskList, lessonComponents[2], false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.writeToTaskSaveFile();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskList.clear();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.readTasksSave();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            assertEquals(3, taskList.size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            System.out.println(\"Testing error - Unable to read/write to file\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void rebuildEvent_validInputs_eventAdded() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] taskComponents \u003d {\"event\", \"false\", \"Concert\", \"09-04-21 09:00\", \"09-04-21 12:00\"};"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Boolean taskStatus \u003d fileCommand.convertToBoolean(taskComponents[1]);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskStorage.rebuildEvent(taskComponents, taskList, taskComponents[2], taskStatus);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertTrue(taskList.size() \u003d\u003d 1 \u0026\u0026 taskList.get(0).getType().equals(\"event\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void rebuildDeadline_validInputs_deadlineAdded() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] taskComponents \u003d {\"deadline\", \"false\", \"Go home\", \"09-04-21 09:00\"};"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Boolean taskStatus \u003d fileCommand.convertToBoolean(taskComponents[1]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskStorage.rebuildDeadline(taskComponents, taskList, taskComponents[2], taskStatus);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertTrue(taskList.size() \u003d\u003d 1 \u0026\u0026 taskList.get(0).getType().equals(\"deadline\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void rebuildLesson_validInputs_lessonAdded() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String[] taskComponents \u003d {\"lesson\", \"false\", \"CS1231\", \"09-04-21 09:00\", \"09-04-21 12:00\"};"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Boolean taskStatus \u003d fileCommand.convertToBoolean(taskComponents[1]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        taskStorage.rebuildLesson(taskComponents, taskList, taskComponents[2], taskStatus);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertTrue(taskList.size() \u003d\u003d 1 \u0026\u0026 taskList.get(0).getType().equals(\"lesson\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertDeadlineToString_invalidClass_ClassCastException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Event testEvent \u003d new Event(\"Test event\", startTime, endTime);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertThrows(ClassCastException.class, () -\u003e {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.convertDeadlineToString(testEvent, \"deadline\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertEventToString_invalidClass_ClassCastException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(\"Test Deadline\", startTime);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertThrows(ClassCastException.class, () -\u003e {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.convertEventToString(testDeadline, \"event\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertLessonToString_invalidClass_ClassCastException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(\"Test Deadline\", startTime);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertThrows(ClassCastException.class, () -\u003e {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dojh111"
        },
        "content": "            taskStorage.convertLessonToString(testDeadline, \"lesson\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertLessonToString_validInput_conversionPasses() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Lesson testLesson \u003d new Lesson(\"CS2113T\", startTime, endTime);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String convertedString \u003d taskStorage.convertLessonToString(testLesson, \"lesson\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(EXPECTED_LESSON, convertedString);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertEventToString_validInput_conversionPasses() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Event testEvent \u003d new Event(\"Concert\", startTime, endTime);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String convertedString \u003d taskStorage.convertEventToString(testEvent, \"event\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(EXPECTED_EVENT, convertedString);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    void convertDeadlineToString_validInput_conversionPasses() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(\"Return Books\", startTime);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        String convertedString \u003d taskStorage.convertDeadlineToString(testDeadline, \"deadline\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dojh111"
        },
        "content": "        assertEquals(EXPECTED_DEADLINE, convertedString);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dojh111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dojh111"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dojh111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dojh111": 224
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/tasks/TaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "package seedu.lifeasier.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yy HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final LocalDateTime SAMPLE1 \u003d LocalDateTime.parse(\"12-12-20 12:00\", DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    private static final LocalDateTime SAMPLE2 \u003d LocalDateTime.parse(\"12-12-20 12:00\", DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void name() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void getTaskCount_returnTaskCountAsInt() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList.addTask(new Event(\"EXAMPLE\", SAMPLE1, SAMPLE2));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertEquals(1, taskList.getTaskCount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void getTask_outOfBoundIndex_throwsException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList.addTask(new Event(\"EXAMPLE\", SAMPLE1, SAMPLE2));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e taskList.getTask(2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void getTask_invalidIndex_throwsException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList.addTask(new Event(\"EXAMPLE\", SAMPLE1, SAMPLE2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e taskList.getTask(-1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void updateTasks_outdatedRecurringLesson_movedOneWeek() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String moduleCode \u003d \"cg1111\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.of(20, 10, 27, 12, 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.of(20, 10, 27, 13, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int recurrences \u003d 11;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        Lesson lesson \u003d new Lesson(moduleCode, start, end, recurrences);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addTask(lesson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.updateTasks(LocalDate.of(20, 10, 29));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDate expected \u003d LocalDate.of(20, 11, 3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(((lesson.isHappeningOn(expected)) \u0026\u0026 (lesson.getRecurrences() \u003d\u003d 10)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void updateTasks_outdatedTasks_deleted() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String moduleCode \u003d \"cg1111\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start1 \u003d LocalDateTime.of(20, 10, 27, 12, 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end1 \u003d LocalDateTime.of(20, 10, 27, 13, 0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int recurrences \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String eventDescription \u003d \"my event\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start2 \u003d LocalDateTime.of(20, 10, 28, 22, 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end2 \u003d LocalDateTime.of(20, 10, 28, 23, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String deadlineDescription \u003d \"my deadline\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime by \u003d LocalDateTime.of(20, 10, 28, 23, 59);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addLesson(moduleCode, start1, end1, recurrences);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addEvent(eventDescription, start2, end2, recurrences);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addDeadline(deadlineDescription, by, recurrences);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.updateTasks(LocalDate.of(20, 10, 29));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertTrue(taskList.getTaskList().isEmpty());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    void getTasksFromOneDay_sameDayTasks_returned() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String moduleCode \u003d \"cg1111\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start1 \u003d LocalDateTime.of(20, 10, 27, 12, 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end1 \u003d LocalDateTime.of(20, 10, 27, 13, 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        int recurrences \u003d 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String eventDescription \u003d \"my event\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime start2 \u003d LocalDateTime.of(20, 10, 27, 22, 0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime end2 \u003d LocalDateTime.of(20, 10, 27, 23, 0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        String deadlineDescription \u003d \"my deadline\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        LocalDateTime by \u003d LocalDateTime.of(20, 10, 27, 23, 59);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addLesson(moduleCode, start1, end1, recurrences);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addEvent(eventDescription, start2, end2, recurrences);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addDeadline(deadlineDescription, by, recurrences);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        ArrayList\u003cTask\u003e tasksFromOneDay \u003d taskList.getTasksFromOneDay(LocalDate.of(20, 10, 27));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        assertEquals(3, tasksFromOneDay.size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void getTaskList_returnsFullTaskList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList.addTask(new Event(\"EXAMPLE\", SAMPLE1, SAMPLE2));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertNotNull(taskList.getTaskList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void addEvent() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addEvent(\"Event\", SAMPLE1, SAMPLE2, 0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        Task event \u003d new Event(\"Event\", SAMPLE1, SAMPLE2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertEquals(taskList.getTask(0).toString(), event.toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void addLesson() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addLesson(\"Lesson\", SAMPLE1, SAMPLE2, 0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        Task lesson \u003d new Lesson(\"Lesson\", SAMPLE1, SAMPLE2);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertEquals(taskList.getTask(0).toString(), lesson.toString());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void addDeadline() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "        taskList.addEvent(\"Event\", SAMPLE1, SAMPLE2, 0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        Task event \u003d new Event(\"Event\", SAMPLE1, SAMPLE2);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "        assertEquals(taskList.getTask(0).toString(), event.toString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void editTaskDescription() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void editLessonTime() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void editEventTime() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void editDeadlineTime() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void deleteTask() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void printMatchingTasks() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void checkForIndexOutOfBounds() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void getTasksFromOneDay() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    void sort() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "skyaxe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "skyaxe97": 107,
      "daniellimzj": 77
    }
  },
  {
    "path": "src/test/java/seedu/lifeasier/ui/ScheduleUiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johan9se"
        },
        "content": "package seedu.lifeasier.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import seedu.lifeasier.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johan9se"
        },
        "content": "import static seedu.lifeasier.ui.ScheduleUi.getDayOfWeek;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johan9se"
        },
        "content": "class ScheduleUiTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static final TaskList EMPTY_TASK_LIST \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static final TaskList NONEMPTY_TASK_LIST \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static final LocalDateTime SAMPLE_DATETIME \u003d LocalDateTime.parse(\"2020-10-15T09:00\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    public static final LocalDate SAMPLE_DATE \u003d SAMPLE_DATETIME.toLocalDate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    private static final ScheduleUi scheduleUiTest \u003d new ScheduleUi();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void getTaskCountForToday_emptyTaskList_Zero() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int taskCount \u003d scheduleUiTest.getTaskCountForToday(ScheduleUiTest.EMPTY_TASK_LIST, SAMPLE_DATE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(0, taskCount);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void getTaskCountForToday_TaskListWithFiveItems_Five() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "            NONEMPTY_TASK_LIST.addDeadline(\"test\" + i, SAMPLE_DATETIME, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        int taskCount \u003d scheduleUiTest.getTaskCountForToday(ScheduleUiTest.NONEMPTY_TASK_LIST, SAMPLE_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(5, taskCount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void getTimeStamp_SampleDateTime_TimeString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String timeString \u003d scheduleUiTest.getTimeStamp(SAMPLE_DATETIME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(\"09:00\", timeString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johan9se"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    void getDayOfWeek_SampleDateTime_Thursday() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        String dayOfWeek \u003d getDayOfWeek(SAMPLE_DATETIME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johan9se"
        },
        "content": "        assertEquals(\"THURSDAY\", dayOfWeek);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johan9se"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johan9se"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 1,
      "johan9se": 46
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "bye"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimzj"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "daniellimzj": 3
    }
  }
]
