[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    compile group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00272.0.1\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    mainClassName \u003d \"fitr.Fitr\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    archiveBaseName \u003d \"fitr\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 4,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Fang Hui Hui | [Github](https://github.com/hui444) | [Portfolio](team/hui444.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Goh Song Han | [Github](https://github.com/gohsonghan98) | [Portfolio](team/gohsonghan98.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Harris Maung | [Github](https://github.com/sixletters) | [Portfolio](team/sixletters.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jericho Chua | [Github](https://github.com/jerichochua) | [Portfolio](team/jerichochua.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Mingbang | [Github](https://github.com/dmbclub) | [Portfolio](team/dmbclub.md)"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 5,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "# Fitr Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "**Fitr** is a command line application, helping university students keep track of your food intake and exercises."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "This developer guide documents the architecture, software design decisions and implementation of Fitr."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "This guide is targeted towards current and future developers, who wish to understand and work on this application, as well as designers and software testers."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "## 2. Setting Up "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "This section explains the prerequisites, and the steps to setting up Fitr on your computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "### 2.1 Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "* You must have **JDK 11** or above installed on your computer."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "* You must have a GitHub account."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "* You must have IntelliJ IDEA IDE installed on your computer."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "### 2.2 Setting up Fitr in your computer"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003e :exclamation: **Caution:** Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "This section provides a step-by-step procedure to set up Fitr in your computer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "1. **Fork** this [repository](https://github.com/AY2021S1-CS2113T-W13-2/tp)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "1. **Clone** the fork to your computer using [Sourcetree](https://sourcetreeapp.com/) or using any other _Git GUI_."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "1. Make sure your IDE is configured as **JDK 11**. If not, follow the steps below:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Ensure you have the correct JDK version installed in your computer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "        1. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "        1. Click `New...` and set it to the directory of the JDK."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "1. When prompted, **import** the project as a **Gradle project** (this can take a few minutes to complete). You can follow the following steps to import the project as a **Gradle Project**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    \u003e :exclamation: **Note:** Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. IntelliJ IDEA by default has the Gradle plugin installed. If you have disabled it, click `File` \u003e `Settings` \u003e `Plugins` to enable them."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Click `Import Project` (or `Open or Import` in newer version of IntelliJ)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Locate the `build.gradle` file (not the root folder as you would do in normal importing) and select it. Click `OK`. If asked, choose to `Open as Project`, not `Open as File`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Click `OK` to accept the default settings but do ensure that the selected version of `Gradle JVM` matches the JDK 11."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "### 2.3 Verifying Setup"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": " 1. Run Fitr and enter a few commands to ensure that the application functions are as expected. You may refer to the _User Guide_ [here](https://ay2021s1-cs2113t-w13-2.github.io/tp/UserGuide.html) or enter `help` to find out what commands are supported in Fitr."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": " 1. Run the tests to ensure that they all pass, by executing the command `gradlew build` in IntelliJ\u0027s terminal."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "This section provides an overview of the design of the Fitr application."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": "### 3.1 Architecture"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "This section illustrates the high-level architecture of Fitr, as well as an illustration of the components used in Fitr."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/ArchitectureDiagram.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 1: Architecture diagram of Fitr\u003c/p\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Figure 1 above explains the high-level design of Fitr. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hui444"
        },
        "content": "The main driver of the application is `Fitr` is responsible for mainly two phases:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hui444"
        },
        "content": "* At app launch: Initialises or loads the respective lists and user profile in the correct sequence and is in charge of connecting the various components with each other."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "The rest of the App consists of:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "* `Ui`: The user interface of the application."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hui444"
        },
        "content": "* `Parser`: Handles and parses user commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hui444"
        },
        "content": "* `Command`: Handles the various commands Fitr understands."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hui444"
        },
        "content": "* `User`: Contains and handles all information related to user data."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "* `StorageManager`: Reads data from and writes data back into a text file for future use."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "* `ListManager`: Handles all the list operations in Fitr."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "* `Recommender`: Handles the recommendation of the exercises."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Figure 2 below shows how the components work with one another, when a user enters the following command `food chicken rice /600 1`:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/AddFoodSequenceDiagram.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 2: Sequence diagram when adding a food into Fitr\u003c/p\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003e :information_source: **Note**: Take note that the lifeline should end at the destroy symbol. Due to a limitation of PlantUML, the lifeline continues after the delete symbol."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "In Figure 2 above, the `Ui` class reads the user\u0027s input, which is then parsed by the `Parser` class. Once parsed, it creates a new `AddFoodCommand` class, which is then returned to the `Fitr` class to be executed. The `Food` object is created, then added into `FoodList`. The `FoodList` is then saved to local storage by the `StorageManager` class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hui444"
        },
        "content": "### 3.2 Components"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hui444"
        },
        "content": "This section expands on the different components seen in the architecture section."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003c!-- @@author hui444 --\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hui444"
        },
        "content": "#### 3.2.1 Ui component"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hui444"
        },
        "content": "The `Ui` class handles all user inputs and system output."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hui444"
        },
        "content": "This component also listens to other components and outputs the desired messages in specified formats."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hui444"
        },
        "content": "#### 3.2.2 Parser component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hui444"
        },
        "content": "The Parser component takes in the user input from the `Ui` class and handles the various commands. If the command is invalid, it calls the `Ui` class to prompt the user until valid commands are entered."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hui444"
        },
        "content": "When a valid command is keyed in, the `Parser` class returns a `Command` object to execute the command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003c!-- @@author sixletters --\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sixletters"
        },
        "content": "#### 3.2.3 Command component"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The Command component consists of an abstract `Command` class and the various different commands that inherit the `Command` class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Each type of command class (e.g. `addFoodCommand`, `addExerciseCommand` etc) implements an abstract `execute()` method that carries out the command. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Referring to figure 3, `XYZCommand` \u003d HelpCommand, RecommendCommand etc."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/CommandClass.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 3: \u003ccode\u003eCommand\u003c/code\u003e class diagram\u003c/p\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003c!-- @@author gohsonghan98 --\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "#### 3.2.4 User component"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "The `User` class contains all information related to the user data (i.e. `name`, `age`, `height`, `weight`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "and `gender`) and handles all operations on these user data (i.e. `getBmi()`)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/UserClassDiagram.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 4: \u003ccode\u003eUser\u003c/code\u003e class diagram\u003c/p\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Figure 4 above shows the attributes and methods implemented in `User` class."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "The `User` class has two constructors and implementations differ based on the constructor used. "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "If a `User` object is instantiated without parameters (i.e. `User user \u003d new User()`), the `setup` method in the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " `user` object will be invoked, allowing users to go through a set of instructions to input their `name`, `age`, `gender`, `height`, `weight` and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " `fitnessLevel`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "If a `User` object is instantiated with defined parameters (i.e. `User user \u003d new User(name, age, height, weight"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ", gender)`), the values from the given parameters will be stored within the user class without going through"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " `setup()`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "On startup, the `Fitr` class instantiates a `Storage` object and calls its `loadUserProfile()` method. This method"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "returns a `User` type object and is referenced by a pre-declared `User` type variable, which is used throughout the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "running session. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003c!-- @@author jerichochua --\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "#### 3.2.5 StorageManager component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Under the `StorageManager` component, the `StorageManager` class handles the read and write operations of the various list classes available, such as `ExerciseList` and `FoodList`, through classes such as `ExerciseStorage` and `FoodStorage`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/StorageClassDiagram.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 5: \u003ccode\u003eStorageManager\u003c/code\u003e class diagram\u003c/p\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Figure 5 above shows the associations and dependencies present with the `StorageManager` class."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "On startup, the `Fitr` class creates a new `StorageManager` object. The `StorageManager` class will then create the various storage objects required to load that particular file into the program. "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "This will cause the various storage objects to retrieve the text files from the given file paths and loads the data into the program. "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "If the files do not exist, the various storage objects will create the files. For example, if the file that contains the user\u0027s exercise data does not exist, the `ExerciseStorage` object will create a new file to store the user\u0027s exercise data."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Each time there is a change in the `FoodList`, `ExerciseList` or `User` objects, or when the program is exiting, `writeExerciseList()`, `writeFoodList()` and `writeUserProfile()` methods in `StorageManager` are invoked. "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "This will save the data onto the respective text files on the hard disk."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "#### 3.2.6 ListManager component"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Under the `ListManager` component, the `ListManager` class handles operations on the exercise, food and goal lists"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ", such as adding or deleting an item and clearing the lists. Figure 6 below shows the associations and dependencies present with the `ListManager` class."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/ListManagerClassDiagram.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 6: \u003ccode\u003eListManager\u003c/code\u003e class diagram\u003c/p\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "On startup, the `Fitr` class creates a new `ListManager` object, with `StorageManager` as its parameter. The `ListManager` object then creates `ExerciseList`, `FoodList` and `GoalList` objects, and attempt to load the data into the lists through the `StorageManager` object. If no data is found, then an empty list will be created."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003c!-- @@author sixletters --\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sixletters"
        },
        "content": "#### 3.2.7 Recommender component"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The `Recommender` component handles the recommendation of the exercises. Based on the user inputs, it either returns a list of type `StandardExerciseList` full of general or specific workouts. For example, it either recommends a mix of exercises from the 4 different categories of aerobic, upperbody, lowerbody and stretch, or it chooses only workouts from each of the category."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sixletters"
        },
        "content": "When the `Recommend` class is instantiated, the constructor calls onto the `Storage` class to load multiple different `StandardExerciseList` instances as attributes. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The `recommend` method in the class then chooses and adds different permutations or combinations of `StandardExercise` instances from the multiple different `StandardExerciseList` instances to load into a new instance of `StandardExerciseList`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/RecommenderClassDiagram.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 7: \u003ccode\u003eRecommender\u003c/code\u003e class diagram\u003c/p\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sixletters"
        },
        "content": "#### 3.2.8 Common classes"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hui444"
        },
        "content": "Classes used by multiple components are in the `fitr.common` package."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hui444"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "This section describes how some of the features in Fitr are implemented."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003c!-- @@author sixletters --\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### 4.1 Add Exercise and Add Food Command"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The `AddFoodCommand` and `AddExerciseCommand` are similar in implementation. It simply adds the user input into either the `ExerciseList` or the `Foodlist` using the ListManager."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/AddExerciseSequence.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 8: Sequence diagram for \u003ccode\u003eAddExerciseCommand\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003c!-- @@author jerichochua --\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### 4.2 Edit command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "When the user enters an edit command, it first passes through `Parser`. Once the input is parsed as an edit command, it is then passed to `EditCommandParser`, where it further parses the user\u0027s input. As the user is able to edit either the individual profile characteristics, food or exercise entries, the `EditCommandParser` is able parse what the user intends to edit. For example, if the user intends to edit a food entry, the input is then passed to `EditEntryCommand`, which parses the remaining arguments, and performs the required edit."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Figure 9 below shows the sequence diagram when the user enters `edit exercise 25/10/2020 1 push ups /100`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/EditExerciseSequenceDiagram.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 9: Sequence diagram for \u003ccode\u003eedit\u003c/code\u003e command\u003c/p\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003c!-- @@author gohsonghan98 --\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "If an edit command is passed to change individual profile characteristics, the `EditCommandParser` will pass the"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " input to `EditProfileCommand` instead. Figure 10 below shows the sequence diagram when the user enters `edit name Tom`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/EditProfileSequenceDiagram.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 10: Sequence diagram for \u003ccode\u003eedit\u003c/code\u003e command\u003c/p\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003c!-- @@author hui444 --\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hui444"
        },
        "content": "### 4.3 Help command"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hui444"
        },
        "content": "When the user enters `help`, the `Ui` class reads it and passes it through `Parser`.  Once the input is parsed as a help command, the user input is passed to `HelpCommand`, which calls `Ui` to print the help message."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hui444"
        },
        "content": "Figure 11 below shows the sequence diagram when the user enters `help`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/HelpCommandSequenceDiagram.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 11: Sequence diagram for \u003ccode\u003ehelp\u003c/code\u003e command\u003c/p\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hui444"
        },
        "content": "### 4.4 View command"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hui444"
        },
        "content": "The view command allows user to view certain information available in the `User` class and `ListManager` class. When"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hui444"
        },
        "content": "the user enters a view command, the `Ui` class reads it and passes it through `Parser`. Once the input is parsed as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hui444"
        },
        "content": "a view command, it is then passed to `ViewCommand`, where it is handled based on the type of view command. "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hui444"
        },
        "content": "Then the respective view method is called to output the messages via the `Ui` class."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hui444"
        },
        "content": "For example, as illustrated in Figure 12, if you intend to view your goal entry with the command `view goal`, the input is passed to `ViewCommand`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hui444"
        },
        "content": ", which checks the arguments after \u0027view\u0027 and calls the `viewGoal()` method. It then performs the required steps to"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hui444"
        },
        "content": "retrieve the goal status for each entry and prints the results using the `printCustomMessage()` method in the `Ui` class."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/ViewGoalSequenceDiagram.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 12: Sequence diagram for \u003ccode\u003eview goal\u003c/code\u003e command\u003c/p\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003c!-- @@author gohsonghan98 --\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "The sequence diagram in Figure 13 below shows how the `ViewCommand` class can interact with the `User` class when the"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "user keys in `view profile`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/ViewProfileSequenceDiagram.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 13: Sequence diagram for \u003ccode\u003eview profile\u003c/code\u003e command\u003c/p\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003c!-- @@author jerichochua --\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### 4.5 Clear command"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "The `clear` command allows the user to clear either the exercise list, food list, or goal list, by specifying in the user\u0027s input as an argument (i.e. `clear exercise`, `clear food`, or `clear goal`). The user is also able to clear all the lists at the same time, if no argument is specified (i.e. `clear`)."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "The user\u0027s input is first parsed by the `Parser` class. It is then passed to the `ClearCommand` class, which is then executed. The arguments are parsed in the `ClearCommand` class, and the required list(s) is then cleared. After clearing, it then writes the new empty list(s) to local storage."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Figure 14 below shows the sequence diagram when the user inputs the `clear` command."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/ClearCommandSequenceDiagram.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 14: Sequence diagram for \u003ccode\u003eclear\u003c/code\u003e command\u003c/p\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "\u003c!-- @@author dmbclub --\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "### 4.6 Delete command"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "The `delete` command allows the user to delete an entry from either the exercise list, food list or goal list. The user can only delete one entry each time."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "The user\u0027s input is first parsed by the `Parser` class, which returns a `DeleteCommand` to `Fitr`. Then `DeleteCommand` is executed to delete the entry in the list (i.e. food list, exercise list or goal list) by calling `ListManager` and update the corresponding local data file by calling `StorageManager`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Figure 15 below shows the sequence diagram when the user inputs the `delete` command."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/DeleteCommandSequenceDiagram.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 15: Sequence diagram for \u003ccode\u003edelete\u003c/code\u003e command\u003c/p\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003c!-- @@author sixletters --\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### 4.7 Recommend command"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The `recommend` command allows the user to get either a general recommended workout or a workout to a specific body part or type. The commands that can follow recommend are `aerobic`, `upperbody`, `lowerbody` and `stretch`."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The user\u0027s input is first parsed by the `Parser` class, which returns a `RecommendCommand` to `Fitr`. The `RecommendCommand` is then executed to recommend workouts. The `RecommendCommand` calls on the `recommend` method in `Recommender`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The `Recommender` class then returns a list of type `StandardExerciseList`. The user input is then read in by the `Ui` class to determine which `StandardExercise` objects in the `StandardExerciseList` should be converted to `Exercise` and added to the exerciseList of type `ExerciseList`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/RecommendSequence.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 16: Sequence diagram for \u003ccode\u003erecommend\u003c/code\u003e command\u003c/p\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "\u003c!-- @@author dmbclub --\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "### 4.8 Tip of the day"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Fitr can give an interesting fact or a tip of exercise every time the user opens the app."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "When the user opens the program, a `TipList` is automatically created by `Fitr`, which loads the tipList from `StorageManger` and passes it to `Fitr`. Then `Fitr` creates a `TipManager` and passes the tipList to `TipManager` to generate a random tip. Finally, the tip is passed to `Ui` and printed in yellow using `printMessageInYellow()`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Figure 17 below shows the sequence diagram for giving a tip."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/TipCommandSequenceDiagram.png\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 17: Sequence diagram for giving a tip\u003c/p\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## Appendix A: Product Scope"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hui444"
        },
        "content": "Our target user profile is university students, at all fitness levels, who values an application that integrates the logging of food, exercises performed, the tracking of calories and goals in one application. "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "It is also aimed at those who prefer typing over mouse interactions and are reasonably comfortable with using command-line applications."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hui444"
        },
        "content": "Our application helps users to keep fit without needing them to do extensive research on healthy living or workout options. "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "We will be collecting user information such as age, weight, fitness level, and the application will recommend users preset exercises."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "_Table 1: User stories_"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "|v1.0|student|enter my food intake|log my calories|"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "|v1.0|student|view my past calories intake|track my calories|"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "|v1.0|student|store the food I consumed together with its calories in the application|add food that I previously consumed without having to enter the calories again|"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "|v1.0|new user|access the help function|I know what to do with the application|"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "|v1.0|student|print my past exercise records|see my workout progress|"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "|v1.0|student|enter my height and weight|the application can calculate my BMI|"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "|v1.0|student|save my past exercise and food records|access my past records at all times|"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hui444"
        },
        "content": "|v2.0|student|edit my previous food, exercise and goal entries|fix any mistakes I made previously|"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hui444"
        },
        "content": "|v2.0|student|clear my previous food, exercise and goal entries|declutter my exercise and food records|"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "|v2.0|student|indicate my fitness level|exercise based on the recommendations of the application|"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hui444"
        },
        "content": "|v2.0|student|edit my profile|update my information|"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hui444"
        },
        "content": "|v2.0|student|set goals|see if I am on track|"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hui444"
        },
        "content": "|v2.0|student|be recommended a set of workout|save time finding exercises to do|"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hui444"
        },
        "content": "|v2.0|student|set goals linked to my calories|know my goal status without calculating and comparing my calories|"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hui444"
        },
        "content": "|v2.0|student|view my food, exercise and goal entries on a specified date|find my entries easily"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## Appendix C: Non-functional Requirements"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "1. This application should work on any mainstream operating system, such as Windows or macOS, as long as Java 11 or above is installed."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "2. A user with above average typing speed for regular English text should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## Appendix D: Instructions for manual testing"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hui444"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Download the latest version of `Fitr` from [here](https://github.com/AY2021S1-CS2113T-W13-2/tp/releases)."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    1. Open Command Prompt / Terminal."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    1. Run the command `java -jar fitr.jar` (i.e., run the command in the same folder as the jar file)."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    1. If the setup is correct, you should see something like below:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hui444"
        },
        "content": "       ``` "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hui444"
        },
        "content": "        _______   __   __"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hui444"
        },
        "content": "       |    ___| |__| |  |_  .----."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hui444"
        },
        "content": "       |    ___| |  | |   _| |   _|"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hui444"
        },
        "content": "       |___|     |__| |____| |__|"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hui444"
        },
        "content": "       Hello! Welcome to Fitr. "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hui444"
        },
        "content": "       ```"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hui444"
        },
        "content": "1. Clear list feature"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Add a few food entries."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. View food entries, using the command `view food`."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Enter the command `clear food` to clear the food list."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. View food entries again to check if the list has been cleared (i.e empty)."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. If done correctly, you should see something like the following:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hui444"
        },
        "content": "       ```"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hui444"
        },
        "content": "       The food list is empty..."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hui444"
        },
        "content": "       ```"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hui444"
        },
        "content": "1. Saving your data feature"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Enter a few goal entries."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. View goal entries, using the command `view goal`."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Exit the application by entering `bye`."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Run Fitr again and view your goal entries with the same `view goal` command."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. If done correctly, you should see the same goals as previously shown."
      }
    ],
    "authorContributionMap": {
      "hui444": 120,
      "sixletters": 41,
      "jerichochua": 100,
      "dmbclub": 26,
      "-": 19,
      "gohsonghan98": 39
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "# Fitr"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Fitr is a command-line application, helping you keep track of your food intake and exercises."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 2,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "# Fitr User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "# 1. Introduction"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "**Fitr** is a command line application, helping you keep track of your food intake, exercises and goals. "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "Fitr is targeted at university students, who want a comprehensive application to track your food consumption, exercises and goals. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "You can enter your food intake and the exercises that you have done for the day, and track your net calories along the way. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "Moreover, you can set goals to keep yourself motivated and if you are unsure of what exercises to do, you can also ask Fitr for recommendations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "This user guide provides a detailed documentation on how to use Fitr and shows you how to get started using Fitr."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## 1.1 Prerequisites"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "You must have **Java 11** or above installed on your computer. You must also be comfortable using the command line or the terminal."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## 1.2 How to use this guide"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Note the formatting used in this guide:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- A command that you need to enter at the command line is formatted as `command`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Additional information is indicated with :bulb:."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Warnings are indicated with :warning:."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Words formatted as `UPPER_CASE` are to be supplied by you."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## 1.3 Quick start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "This quick start section provides a step-by-step procedure to get you started with Fitr."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "1. Download the latest version of `Fitr` from [here](https://github.com/AY2021S1-CS2113T-W13-2/tp/releases)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "2. Open the command prompt/terminal on your computer, and navigate to the location where you stored `fitr.jar`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "3. Run the command `java -jar {filename}.jar` e.g., `java -jar fitr.jar` (i.e., run the command in the same folder as the jar file)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "4. If you have performed the previous steps correctly, you should see a welcome screen, shown below in Figure 1."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "5. Follow the setup process by entering your name, age, height, weight, gender, and your fitness level. Note that the height is in metres and weight is in kilograms."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "6. Once done, you are ready to use Fitr. You can type `help` to find out what commands are supported in Fitr."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003e :bulb: **Additional information:** Please resize your window to ensure that the separator lines are not wrapped."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/Figure1.png\" width\u003d\"350\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003cp align\u003d\"center\"\u003eFigure 1: Welcome screen of Fitr for new users\u003c/p\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "# 2. Features"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "This section introduces the features available in Fitr, explaining how you can use each feature and its expected outcomes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## 2.1 Adding Commands"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "You can add various types of entries to Fitr, such as your food intake, exercise completed and goals you wish to achieve. These features are documented below."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003c!-- @@author sixletters --\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### 2.1.1 Adding a food entry"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sixletters"
        },
        "content": "You can add a food entry to keep track of what you have eaten, and the calories consumed from that food."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Format: `food NAME_OF_FOOD /NUMBER_OF_CALORIES` or `food NAME_OF_FOOD /NUMBER_OF_CALORIES AMOUNT_OF_FOOD`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003e :bulb: **Additional information:** "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003e * `NUMBER_OF_CALORIES` must be between 0 and 10,000 (inclusive)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003e * `AMOUNT_OF_FOOD` must be between 1 and 1000 (inclusive)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003e * If `AMOUNT_OF_FOOD` is omitted, the default amount of food is 1"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sixletters"
        },
        "content": "For example, you can enter `food apple /50` and this will be the result after the application records the food entry:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sixletters"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The following food has been added:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Name of Food: apple"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Calorie Consumed: 50"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sixletters"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### 2.1.2 Adding an exercise entry"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sixletters"
        },
        "content": "You can add an exercise entry to keep track of what exercise you have done, as well as the calories burnt from that exercise."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Format: `exercise NAME_OF_EXERCISE /CALORIES_BURNT`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003e :bulb: **Additional information:** "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003e * `CALORIES_BURNT` must be between 1 and 10,000 (inclusive)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sixletters"
        },
        "content": "For example, you can enter `exercise push ups /500` and this will be the result after the application records the exercise entry:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sixletters"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The following exercise has been added:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Name of Exercise: push ups"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Burnt Cal: 500"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sixletters"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003c!-- @@author hui444 --\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hui444"
        },
        "content": "### 2.1.3 Adding a food goal"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hui444"
        },
        "content": "You can add a food goal to the application to encourage yourself to eat more or less. "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hui444"
        },
        "content": "Format: `goal food GOAL_DESCRIPTION`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hui444"
        },
        "content": "For example, you can enter `goal food eat less food than yesterday` and this will be the result after the application records the food goal entry:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hui444"
        },
        "content": "Okay! The following goal has been added: "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hui444"
        },
        "content": "    [F] eat less food than yesterday"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hui444"
        },
        "content": "Tip: You may also add a smart food goal using the format "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hui444"
        },
        "content": "    \"goal food \u003c NUMBER_OF_CALORIES or goal food \u003e NUMBER_OF_CALORIES\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hui444"
        },
        "content": "#### 2.1.3.1 Adding a smart food goal"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hui444"
        },
        "content": "Fitr also understands particular keywords. If you would like to set a target for your calorie intake, you can key in your goal following the format below. By adding a smart food goal, Fitr will help you calculate your percentage completion and update it accordingly."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e :bulb: **Additional information:** "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e * Smart food goals are linked to your calorie intake of its created date"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e * The progress of smart goals are automatically updated by Fitr"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e * Target number of calories can only be between 0 (inclusive) and 100 000 for \u0027more than\u0027 goals"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e * Target number of calories can only be between 0 and 100 000 for \u0027less than\u0027 goals"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hui444"
        },
        "content": "Format: `goal food \u003e NUMBER_OF_CALORIES`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hui444"
        },
        "content": "        or `goal food \u003c NUMBER_OF_CALORIES`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hui444"
        },
        "content": "For example, if your goal is to consume less than 800 calories, you can enter `goal food \u003c 800` and the expected result after the application records the smart food goal entry should be as follows:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hui444"
        },
        "content": "Okay! The following goal has been added: "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hui444"
        },
        "content": "    [F] Eat less than 800 calories"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hui444"
        },
        "content": "### 2.1.4 Adding an exercise goal"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hui444"
        },
        "content": "You can add an exercise goal to the application to encourage yourself to exercise more or less. "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hui444"
        },
        "content": "Format: `goal exercise GOAL_DESCRIPTION`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hui444"
        },
        "content": "For example, you can enter `goal exercise do 50 push ups` and below shows the expected result after the application records the exercise goal entry:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hui444"
        },
        "content": "Okay! The following goal has been added: "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hui444"
        },
        "content": "    [E] do 50 push ups"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hui444"
        },
        "content": "Tip: You may also add a smart exercise goal using the format"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hui444"
        },
        "content": "    \"goal exercise \u003c CALORIES_BURNT or goal exercise \u003e CALORIES_BURNT\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hui444"
        },
        "content": "#### 2.1.4.1 Adding a smart exercise goal"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hui444"
        },
        "content": "Fitr also understands particular keywords. If you would like to set a target for your calorie burnt, you can key in your goal following the format below. By adding a smart exercise goal, Fitr will help you calculate your percentage completion and update it accordingly."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e :bulb: **Additional information:** "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e * Smart exercise goals are linked to your calories burnt of its created date"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e * The progress of smart goals are automatically updated by Fitr"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e * Target number of calories can only be between 0 (inclusive) and 100 000 for \u0027more than\u0027 goals"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e * Target number of calories can only be between 0 and 100 000 for \u0027less than\u0027 goals"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hui444"
        },
        "content": "Format: `goal exercise \u003e NUMBER_OF_CALORIES` "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hui444"
        },
        "content": "        or `goal exercise \u003c NUMBER_OF_CALORIES`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hui444"
        },
        "content": "For example, you can enter `goal exercise \u003e 3800` and you should expect the following:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hui444"
        },
        "content": "Okay! The following goal has been added: "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hui444"
        },
        "content": "    [E] Burn more than 3800 calories"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## 2.2 Viewing Commands"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "You can view various aspects of Fitr, such as commands the application supports and its usages, your profile details, previous food and exercise entries, and your goals. These features are documented below."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### 2.2.1 Viewing help"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "If you are unsure of what commands the application supports or the format and usage of them, you can use this command."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003c!-- @@author gohsonghan98 --\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "### 2.2.2 Viewing your profile\t"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "If you want to check your profile, you can use this command. The profile includes your name, age, gender, height, weight, and your fitness level.\t"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `view profile`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Example of an expected outcome is as follows:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "User profile:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Name: Tom"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Age: 20"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Gender: Male"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Height (in m): 2.00"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Weight (in kg): 60.00"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Your fitness level: Fit"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "### 2.2.3 Viewing your BMI\t"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Body mass index (BMI) is a value derived from the mass and height of a person (BMI \u003d mass (kg) / height (m) ^2). The BMI"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "is a convenient rule of thumb used to broadly categorize a person as underweight, normal weight, overweight, or obese. "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "You can view your BMI using this command.\t"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `view bmi`\t"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Example of an expected outcome is as follows:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Your BMI is: 15.00"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "### 2.2.4 Viewing food entries\t"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "You can view the past food entries you have previously added to Fitr. All food entries will be grouped by their dates and displayed in a list form within their groups.\t"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "To view all food entries, you may use the `view food` command.\t"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `view food`\t"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Example of an expected outcome is as follows:\t"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Here is the list of your food:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 23/10/2020"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[1] Food: Apple"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Quantity: 1"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Total Calorie(s): 52"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 28/10/2020"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[1] Food: Fish"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Quantity: 1"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Total Calorie(s): 300"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 31/10/2020"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[1] Food: Orange"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Quantity: 1"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Total Calorie(s): 52"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[2] Food: Sandwich"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Quantity: 1"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Total Calorie(s): 78"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 5/11/2020"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[1] Food: salad"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Quantity: 1"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Total Calorie(s): 600"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[2] Food: chicken"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Quantity: 5"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Total Calorie(s): 150"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Tip: You may also view food entries by day using the format \"view food dd/MM/yyyy\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "\u003c!-- @@author dmbclub --\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "#### 2.2.4.1 Viewing food entries on a specific date"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "To view food entries for a specific day, you may enter the date at the back of the `view food` command. "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Format: `view food dd/MM/yyyy`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "For example, if you would like to view your food entries on 31/10/2020, you may key in `view food 31/10/2020`. The expected outcome should be similar to below:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Here is the list of your food:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Date: 31/10/2020"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "[1] Food: Orange"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    Burnt Cal: 52"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "[2] Food: Sandwich"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    Burnt Cal: 78"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "```"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003c!-- @@author gohsonghan98 --\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "### 2.2.5 Viewing exercise entries"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "You can view the past exercise entries you have previously added to Fitr. All exercise entries will be grouped by their "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "dates and displayed in a list form within their groups."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "To view all exercise entries, you may use the `view exercise` command."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `view exercise`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Example of an expected outcome is as follows:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Here is the list of your exercises:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 23/10/2020"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[1] Exercise: Step ups"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 50"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[2] Exercise: Russian Twists"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 23"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[3] Exercise: Spinal rotations"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 6"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 27/10/2020"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[1] Exercise: Triceps dips"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 7"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[2] Exercise: Side Lunges"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 14"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[3] Exercise: Russian Twists"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 14"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[4] Exercise: Cobra stretch"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 6"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 31/10/2020"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[1] Exercise: Side Lying Leg lifts"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 23"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 5/11/2020"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[1] Exercise: jumping rope"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 30"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Tip: You may also view exercise entries by day using the format \"view exercise dd/MM/yyyy\""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "\u003c!-- @@author dmbclub --\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "#### 2.2.5.1 Viewing exercise entries on a specific date"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "To view exercises for a specific day, you may enter the date at the back of the `view exercise` command. "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Format: `view exercise dd/MM/yyyy`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "For example, if you would like to view your exercises on 31/10/2020, you may key in `view exercise 31/10/2020`. The expected outcome should be similar to below:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "```"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Here is the list of your exercises:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Date: 31/10/2020"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "[1] Exercise: Side Lying Leg lifts"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    Burnt Cal: 23"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "```"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003c!-- @@author hui444 --\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hui444"
        },
        "content": "### 2.2.6 Viewing goal entries"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hui444"
        },
        "content": "You can view the goals you have previously set for yourself and track your progress using this command. "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e :bulb: **Additional information:** The goal list is sorted by the progress of the goals, and its created date"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hui444"
        },
        "content": "The letter in the first square bracket denotes the goal type, `[F]` for food goals and `[E]` for exercise goals."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hui444"
        },
        "content": "The second square bracket shows the status of that goal, `[Y]` for completed goals, `[N]` for incompleted goals and percentages indicate the completeness of that goal."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hui444"
        },
        "content": " "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hui444"
        },
        "content": "Format: `view goal`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hui444"
        },
        "content": "Example of an expected outcome is as follows:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hui444"
        },
        "content": "Here is the list of your goals:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hui444"
        },
        "content": "1. [E][N] run more (created on: 4/11/2020)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hui444"
        },
        "content": "2. [E][N] Burn more than 4000 calories (created on: 4/11/2020)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hui444"
        },
        "content": "3. [E][1.7%] Burn more than 3000 calories (created on: 6/11/2020)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hui444"
        },
        "content": "4. [F][Y] Eat less than 2000 calories (created on: 5/11/2020)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003c!-- @@author gohsonghan98 --\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "### 2.2.7 Viewing calorie summary"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "If you want to see the calories you consumed from food or burnt from exercise, you can use this command. "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Note that positive net calorie does not mean you are gaining weight. It does not take calories burnt from performing "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "everyday tasks into account, and you may actually burn much more calories from performing everyday tasks than doing a"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "workout."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `view summary`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Example of an expected outcome is as follows:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 23/10/2020"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Total calorie consumed:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "52"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Total calorie burnt:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "79"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Net calorie:"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "-27"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 27/10/2020"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Total calorie consumed:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "0"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Total calorie burnt:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "41"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Net calorie:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "-41"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 31/10/2020"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Total calorie consumed:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "382"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Total calorie burnt:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "74"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Net calorie:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "308"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Tip: You may also view summary by day using the format \"view summary dd/MM/yyyy\""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "\u003c!-- @@author dmbclub --\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "#### 2.2.7.1 Viewing calorie summary of a specific date"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "You may also choose to view the summary for a specific day by specifying a date at the back of `view summary`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Format: `view summary dd/MM/yyyy`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "For example, if you would like to view your caloric summary on 31/10/2020, you may key in `view summary 31/10/2020`, and you should get an output similar to below:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "```"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Date: 31/10/2020"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Total calorie consumed:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "382"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Total calorie burnt:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "74"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Net calorie:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "308"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "```"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## 2.3 Editing Commands"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "You can edit various aspects of Fitr, such as your profile, previous food and exercise entries, and your goals. These features are documented below."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003c!-- @@author gohsonghan98 --\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "### 2.3.1 Editing your profile"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "You can edit your name, age, gender, height, weight, and fitness level in your profile using commands within sections 2.3.1.1 to 2.3.1.6."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "#### 2.3.1.1 Editing your name"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `edit name NEW_NAME`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "For example, you can enter the following input `edit name Tom`, and expect the following output:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Your current name is: Tom"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e :bulb: **Additional information:** Inputs given for `NEW_NAME` can only contain alphabets with or without spaces."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "#### 2.3.1.2 Editing your age"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `edit age NEW_AGE`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "For example, you can enter the following input `edit age 20`, and expect the following output:"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Your current age is: 20"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e :bulb: **Additional information:** Inputs given for `NEW_AGE` can only be integers ranging from 1 to 130."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "#### 2.3.1.3 Editing your gender"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `edit gender NEW_GENDER`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "For example, you can enter the following input `edit gender m`, and expect the following output:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Your current gender is: Male"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e :bulb: **Additional information:** "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e * Inputs given for `NEW_GENDER` can only be alphabetical `M` or `F`."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e * Inputs given are not case-sensitive."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "#### 2.3.1.4 Editing your height"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `edit height NEW_HEIGHT`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "For example, you can enter the following input `edit height 1.7`, and expect the following output:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Your current height (in m) is: 1.70"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e :bulb: **Additional information:** "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e * Inputs given for `NEW_HEIGHT` is in meters, and can only be given as an integer "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e or decimal number ranging from 0.50 to 4.00. "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e * Inputs will be rounded up to 2 decimal places."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "#### 2.3.1.5 Editing your weight"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `edit weight NEW_WEIGHT`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "For example, you can enter the following input `edit weight 60`, and expect the following output:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Your current weight (in kg) is: 60.00"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e :bulb: **Additional information:** "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e * Inputs given for `NEW_WEIGHT` is in kilograms, and can only be given as an integer or decimal number ranging from"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e 2.00 to 1000.00. "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e * Inputs will be rounded up to 2 decimal places."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "#### 2.3.1.6 Editing your fitness level"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `edit fitness NEW_FITNESS_LEVEL`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "For example, you can enter the following input `edit fitness 2`, and expect the following output:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Your current fitness level is: Fit"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e :bulb: **Additional information:** "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e * Inputs given for `NEW_FITNESS` can only be integers `0` for unfit, `1` for normal, or `2` for fit. "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "\u003e * The fitness level you set will change the intensity of the exercises recommended by the `recommend` command."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003c!-- @@author jerichochua --\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### 2.3.2 Editing a food entry"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "You can edit your previous food entries, for example, if you previously made a mistake when entering a food that you consumed."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Format: `edit food dd/MM/yyyy INDEX NAME_OF_FOOD /CALORIES_OF_FOOD QUANTITY`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003e :bulb: **Additional information:**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003e * `INDEX` must be a positive integer"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003e * `CALORIES_OF_FOOD` must be between 0 and 10,000 (inclusive)"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003e * `QUANTITY` must be between 1 and 1000 (inclusive)"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "For example, you can enter `edit food 31/10/2020 1 apple /100 1`, and you should expect to see the following output:"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Successfully edited food to: apple, calories (per qty): 100, amount: 1"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### 2.3.3 Editing an exercise entry"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "You can edit your previous exercise entries, for example, if you previously made a mistake when entering an exercise that you performed."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Format: `edit exercise dd/MM/yyyy INDEX NAME_OF_EXERCISE /CALORIES_BURNT`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003e :bulb: **Additional information:**"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003e * `INDEX` must be a positive integer"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003e * `CALORIES_BURNT` must be between 1 and 10,000 (inclusive)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "For example, you can enter `edit exercise 31/10/2020 1 Push ups /500`, and you should expect to see the following output:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Successfully edited exercise to: Push ups, calories burnt: 500"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003c!-- @@author hui444 --\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "hui444"
        },
        "content": "### 2.3.4 Editing a goal entry"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "hui444"
        },
        "content": "You can edit your previous goal entries, for example, if you previously made a mistake when entering the type or description of a goal."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "hui444"
        },
        "content": "Format: `edit goal INDEX TYPE_OF_GOAL GOAL_DESCRIPTION`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "hui444"
        },
        "content": "For example, you can enter `edit goal 1 exercise run 2.4km`, and you should expect to see the following output:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "hui444"
        },
        "content": "Successfully edited goal to: [E] run 2.4km"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e :bulb:  **Additional information:** "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e * As goals are ordered based on its created date and progress status, please view your goals before editing a goal"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e * By editing the goal entry, it will reset the status of the goal"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e * Smart goals will be automatically updated based on the created date\u0027s calorie intake and calories burnt"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## 2.4 Deleting Commands"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "If you would like to delete a particular entry, you can utilise the various delete commands as listed below. "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003e :warning: **Warning:** The delete action is irreversible."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003c!-- @@author sixletters --\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### 2.4.1 Deleting a food entry"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "sixletters"
        },
        "content": "You can delete a food entry using this command. You would need to know the index of that particular food entry as well as the date in which you wish to delete. You can try to use the view food command to find the index of the food before deleting."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Format: `delete food dd/MM/yyyy INDEX_OF_FOOD`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003e :bulb: **Additional information:**"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003e * `INDEX_OF_FOOD` must be a positive integer"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "sixletters"
        },
        "content": "For example, you can enter `delete food 31/10/2020 1`, and you should expect to see the following:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "sixletters"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The following food has been deleted for the 31/10/2020: apple"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "sixletters"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### 2.4.2 Deleting an exercise entry"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "sixletters"
        },
        "content": "You can delete an exercise entry using this command. You would need to know the index of that particular exercise entry as well as the date of its entry. You can try to use the view exercise command to find the index of the exercise before deleting."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Format: `delete exercise dd/MM/yyyy INDEX_OF_EXERCISE`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003e :bulb: **Additional information:**"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003e * `INDEX_OF_EXERCISE` must be a positive integer"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "sixletters"
        },
        "content": "For example, you can enter `delete exercise 31/10/2020 1`, and you should expect to see the following:"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "sixletters"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The following exercise has been deleted for the 31/10/2020: Triceps dips"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "sixletters"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### 2.4.3 Deleting a goal entry"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "sixletters"
        },
        "content": "To delete a particular goal entry, you can use this command. However, you would need to know the index of that particular goal entry to utilise this command."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Format: `delete goal INDEX`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003e :bulb:  **Additional information:** "
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003e * As goals are ordered based on its created date and progress status, please view your goals before deleting a goal"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003e * `INDEX` must be a positive integer"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "sixletters"
        },
        "content": "For example, you can enter `delete goal 1`, and you should expect to see the following:"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "sixletters"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The following has been deleted from the list of goals: Burn more than 30000 calories"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "sixletters"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## 2.5 Clearing Commands"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Want to start anew? Instead of deleting entries one by one, you can clear all your entries in just one command. These features are documented below."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003e :warning: **Warning:** The clear action is irreversible."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003c!-- @@author jerichochua --\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### 2.5.1 Clearing all food entries"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "If you wish to clear all your previous food entries, you can do so with this command."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Format: `clear food`"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Food list is cleared!"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### 2.5.2 Clearing all exercise entries"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "If you wish to clear all your previous exercise entries, you can do so with this command."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Format: `clear exercise`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Exercise list is cleared!"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003c!-- @@author hui444 --\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "hui444"
        },
        "content": "### 2.5.3 Clearing all goal entries"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "hui444"
        },
        "content": "If you do decide to reset your whole goal list (i.e. removing all goal entries stored), you can utilise this command."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "hui444"
        },
        "content": "Format: `clear goal`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "hui444"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "hui444"
        },
        "content": "Goal list is cleared!"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003c!-- @@author jerichochua --\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### 2.5.4 Clearing all entries"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "If you decide to clear all past entries made, regardless of the type (food, exercise or goal), you can utilise this command."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Food, exercise and goal lists are all cleared!"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## 2.6 Other Commands"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Other than the commands mentioned above, Fitr is also able to give you a workout to do, mark your goal as complete and if you have finished using the application, you can exit as well. The following documents the other commands available. "
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "sixletters"
        },
        "content": "\u003c!-- @@author sixletters --\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### 2.6.1 Getting a recommended workout"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "sixletters"
        },
        "content": "If you wish to be recommended a workout that is tailored to your fitness level, you can use this command. The command will recommend a workout and ask if you wish to accept this workout or reject it."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "sixletters"
        },
        "content": "You can either just type in `recommend`, or you can follow recommend with one of the specified exercise categories. "
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The four categories are `upperbody`, `lowerbody`, `aerobic` and `stretch`. For example, you can key in `recommend upperbody` and a workout that is just for your upperbody will be recommended"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "sixletters"
        },
        "content": "If you do accept it, it will automatically be added into your exercise entries, however you can also choose which exercises you want to add to your exercise entries by keying in the index, separated by spaces."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Format: `recommend` or `recommend WORKOUT_CATEGORY`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "sixletters"
        },
        "content": "For example, if you key in `recommend`, the expected outcome is as follows:"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "sixletters"
        },
        "content": "[1] Exercise: Triceps dips"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Intensity: 3 sets of 0.5 minutes"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Burnt Cal: 6"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "sixletters"
        },
        "content": "[2] Exercise: Side Lunges"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Intensity: 3 sets of 1.0 minutes"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Burnt Cal: 12"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "sixletters"
        },
        "content": "[3] Exercise: Jumping rope"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Intensity: 3 sets of 4.0 minutes"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Burnt Cal: 167"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "sixletters"
        },
        "content": "[4] Exercise: Mountain stretch"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Intensity: 4 sets of 0.5 minutes"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Burnt Cal: 5"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Will you be doing this workout?"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Type \u0027y\u0027 to add all 4 to your exercise list,"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "sixletters"
        },
        "content": "or you can type in the index of the exercises you want added to you exercise list (separated by a space)."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Any other input will be taken as a no."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "sixletters"
        },
        "content": "or if you key in `recommend upperbody`, the expected output is as follows:"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "sixletters"
        },
        "content": "[1] Exercise: Planks to Pushup"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Intensity: 3 sets of 0.5 minutes"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Burnt Cal: 8"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "sixletters"
        },
        "content": "[2] Exercise: Plank Rotations"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Intensity: 3 sets of 0.5 minutes"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Burnt Cal: 6"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "sixletters"
        },
        "content": "[3] Exercise: Inclined Pullups"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Intensity: 3 sets of 0.5 minutes"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Burnt Cal: 6"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "sixletters"
        },
        "content": "[4] Exercise: Pullups"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Intensity: 2 sets of 0.5 minutes"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Burnt Cal: 4"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Will you be doing this workout?"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Type \u0027y\u0027 to add all 4 to your exercise list,"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "sixletters"
        },
        "content": "or you can type in the index of the exercises you want added to you exercise list (separated by a space)."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Any other input will be taken as a no."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "sixletters"
        },
        "content": "If you follow this up with a `y`, you will then see the exercises added in as follows:"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "sixletters"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The following exercise has been added:"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "sixletters"
        },
        "content": "[1] Exercise: Triceps dips"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Burnt Cal: 6"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "sixletters"
        },
        "content": "[2] Exercise: Side Lunges"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Burnt Cal: 12"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "sixletters"
        },
        "content": "[3] Exercise: Jumping rope"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Burnt Cal: 167"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "sixletters"
        },
        "content": "[4] Exercise: Mountain stretch"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Burnt Cal: 5"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "sixletters"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "sixletters"
        },
        "content": "If you decide you only want exercise 2 and 4 to be added, you can key in `2 4` and you will see as follows:"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "sixletters"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "sixletters"
        },
        "content": "The following exercise has been added:"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "sixletters"
        },
        "content": "[1] Exercise: Side Lunges"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Burnt Cal: 12"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "sixletters"
        },
        "content": "[2] Exercise: Mountain stretch"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Burnt Cal: 5"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "sixletters"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "sixletters"
        },
        "content": "```"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003c!-- @@author hui444 --\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "hui444"
        },
        "content": "### 2.6.2 Marking a goal as complete"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e :warning: **Warning:** The marking goal as complete action is irreversible."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "hui444"
        },
        "content": "After completing a goal, you can mark it as complete. "
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "hui444"
        },
        "content": "If it is a smart goal, Fitr will automatically update the goal\u0027s status according to your calorie intake or calorie burnt."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "hui444"
        },
        "content": "Format: `complete goal INDEX`"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e :bulb:  **Additional information:**"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e * As goals are ordered based on its created date and progress status, please view your goals before marking a particular one as complete"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e * You are able to override the smart goal to mark them as complete"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "hui444"
        },
        "content": "\u003e * When you mark a goal as complete, it is moved to the bottom of the list"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "hui444"
        },
        "content": "For example, after marking a goal as complete with the command `complete goal 1` , you should expect something similar to below:"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "hui444"
        },
        "content": "Yay! You completed:"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "hui444"
        },
        "content": "    run more"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "hui444"
        },
        "content": "----------------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "hui444"
        },
        "content": "```"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "\u003c!-- @@author jerichochua --\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### 2.6.3 Exiting the application"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Once you are done with Fitr, you can exit the application by running the command below."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## 2.7 Saving your Data"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Your profile, food consumed and exercises done are saved automatically after any command that changes the data."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "There is no need to save manually. All your data will be saved in the same location as `fitr.jar`."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "\u003c!-- @@author dmbclub --\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "## 2.8 Displaying Tip of the Day"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Fitr will tell you a fun fact every time when you open the application. It can be an exercise tip or an interesting trivia, which can give you some motivation to do exercise! An example is shown below:"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"images/WelcomeScreen.png\" width\u003d\"800\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "# 3. FAQ"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "In this section, you can find answers to some of the frequently asked questions (FAQs)."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "**Q: How do I transfer my data to another computer?**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "A: Install Fitr on another computer, and overwrite the empty data files that it creates with the files with your data files."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "**Q: Can I edit the text files created by Fitr?**"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "A: Yes, you can edit the text files. Note that if the entries are not recognised by Fitr, it will be ignored and deleted subsequently."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "sixletters"
        },
        "content": "**Q: Can I add my own exercises to add to the standard list of exercise recommendations?**"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "A: Currently, the standard exercises are maintained by us. You will not be able to alter or manipulate the list of standard exercises."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "sixletters"
        },
        "content": "**Q: What if I only like certain exercises in the recommendation?**"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "sixletters"
        },
        "content": "A: As mentioned above, you can choose to do and add specific exercises that have been recommended to you rather than the whole list. You can also recommend again repeatedly until you add all the exercises that you are comfortable doing."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "**Q: Will my fitness level be automatically increased for me over time?**"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "A: You have to increase your own fitness level according to what you deem fit as Fitr will not do it for you. This is because every single person\u0027s body react differently to a different set of exercises, hence automating it may not be the best for you."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "sixletters"
        },
        "content": "**Q: Will Fitr automatically know or save the calories for a food?**"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "A: You will have to know or search the amount of calories for a certain food and key it in respectively. Fitr does not save the calories for specific foods as we have no way of making sure if what you entered in is an actual food product."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "# 4. Command Summary"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Table 1 below summarises the commands Fitr understands and how they can be used. Examples are also provided for your reference."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "_Table 1: Commands supported in Fitr_"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "------ | ------ | --------"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Add food entry | `food NAME_OF_FOOD /CALORIES_OF_FOOD` or `food NAME_OF_FOOD /CALORIES_OF_FOOD AMOUNT_OF_FOOD` | `food pear /57` or `food apple /50 1`"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Add exercise entry | `exercise NAME_OF_EXERCISE /CALORIES_BURNT` | `exercise run /360`"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Add food goal | `goal food GOAL_DESCRIPTION` | `goal food eat more`"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Add smart food goal | `goal food \u003c NUMBER_OF_CALORIES` or `goal food \u003e NUMBER_OF_CALORIES` | `goal food \u003c 2000` or `goal food \u003e 3800`"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Add exercise goal | `goal exercise GOAL_DESCRIPTION` | `goal exercise run more`"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Add smart exercise goal | `goal exercise \u003c CALORIES_BURNT` or `goal exercise \u003e CALORIES_BURNT` | `goal exercise \u003c 4000` or `goal exercise \u003e 3800`"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "View Help | `help` |"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "View User Profile | `view profile` |"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "View User BMI | `view bmi` |"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "View Food Entry | `view food` |"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "View Food Entries on a Specified Date | `view food dd/MM/yyyy` | `view food 31/10/2020`"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "View Exercise Entry | `view exercise` | "
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "View Exercise Entries on a Specified Date | `view exercise dd/MM/yyyy` | `view exercise 31/10/2020`"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "View Goal Entry | `view goal` | "
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "View Calorie Summary | `view summary` |"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "View Calorie Summary on a Specified Date | `view summary dd/MM/yyyy` | `view summary 31/10/2020`"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Get a recommended general workout | `recommend` | "
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Get a recommended specific workout| `recommend WORKOUT_CATEGORY` | `recommend upperbody` or `recommend lowerbody` or `recommend aerobic` or `recommend stretch`"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Edit User Profile | `edit name NEW_NAME` or `edit age NEW_AGE` or `edit gender NEW_GENDER` or  `edit height NEW_HEIGHT` or `edit weight NEW_WEIGHT` or `edit fitness NEW_FITNESS_LEVEL` | `edit name John` or `edit age 21` or `edit gender m` or `edit height 1.7` or `edit weight 65` or `edit fitness 1`"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Edit Food Entry | `edit food dd/MM/yyyy INDEX NAME_OF_FOOD /CALORIES_OF_FOOD QUANTITY` | `edit food 31/10/2020 1 green apple /50 1`"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Edit Exercise Entry | `edit exercise dd/MM/yyyy INDEX NAME_OF_EXERCISE /CALORIES_BURNT` | `edit exercise 31/10/2020 1 5km run /360`"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Edit Goal Entry | `edit goal INDEX TYPE_OF_GOAL GOAL_DESCRIPTION` | `edit goal 1 food eat healthier`"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Delete a Food Entry | `delete food dd/MM/yyyy INDEX` | `delete food 31/10/2020 3`"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Delete an Exercise Entry | `delete exercise dd/MM/yyyy INDEX` | `delete exercise 31/10/2020 3`"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Delete a Goal Entry | `delete goal INDEX` | `delete goal 5`"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Clear All Food Entries | `clear food` |"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Clear All Exercise Entries | `clear exercise` | "
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Clear All Goal Entries | `clear goal` | "
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Clear All Entries | `clear` |"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Mark a Goal Entry as Completed | `complete goal INDEX` | `complete goal 4`"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Exit Fitr | `bye` | "
      }
    ],
    "authorContributionMap": {
      "hui444": 164,
      "sixletters": 179,
      "jerichochua": 192,
      "dmbclub": 66,
      "-": 18,
      "gohsonghan98": 243
    }
  },
  {
    "path": "docs/team/dmbclub.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "# Ding Mingbang - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Fitr is a command-line application, helping you keep track of your food intake and exercises."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "### Code contributed"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "[Link to code contributed](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003ddmbclub\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "- give a tip to the user every time the user opens the app."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    - This feature gives a tip, advice or fun fact to the user to motivate the user to do exercise."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    - Web crawling is used to gather the tips."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "- implement date attribute and allow the user to view food and exercise by date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    - This feature allows the user to view the entries by date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    - Initially date is string type which causes lots of bugs. Now is local date type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "- Junit test."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "### Contributions to documentation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Contributed the following sections in the user guide:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "- Expected outcomes"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "- Receiving a tip from Fitr"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "- Command summary"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "### Contributions to DG"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Contributed the following sections in the developer guide:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "- Delete command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "- Tip of the day"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "- User stories"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Contributed to the following team-based tasks:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "- Updating user/developer guides that are not specific to a feature"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "- Incorporating the planUML plugin to draw diagrams"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "### Review/mentoring contributions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Because our PR must be reviewed by other members before get merged, everyone reviews a lot of PRs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "### Contributions beyond the project team"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "- Found 4 bugs during PE Dry Run [Link](https://github.com/dmbclub/ped/issues)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "- Wrote a unsupervised machine learning to give recommendations, which is not used in our code yet."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "This is the github link to the code: [Link](https://github.com/dmbclub/exercise_recommendation)."
      }
    ],
    "authorContributionMap": {
      "dmbclub": 44
    }
  },
  {
    "path": "docs/team/gohsonghan98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "# Goh Song Han - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Fitr is a command-line application, helping you keep track of your food intake and exercises."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "### Code contributed"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[Link to code contributed](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dgohsonghan98\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- Implemented View Command "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - This class enables users to view profile information, help, food entries, exercise entries"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "     , and calorie summary. Different non-trivial methods are designed for non-similar view command types. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - A note-worthy design is with the view summary command. In this method, both exercise and food list have to be"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "     compared together,entry by entry, and sorted into a new combined ArrayList according to the dates of the entry"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "     . A separate date formatter is created to facilitate the sorting process. Upon successful sorting, the program"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "     finally outputs a list of caloric summary in ascending order of the date.  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- Implemented User Class: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - This class stores all the user profile information (i.e. name, age, gender, height, weight"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    , fitness level) and includes get and set methods for such information. Methods used for caloric calculation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    are also implemented here."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - Ensured that there is sufficient OOP here to support more diverse implementations and scalability of Fitr."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- Implemented StandardExerciseStorage class:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - This class loads four different exercise lists from the resources folder into Fitr. The exercise lists is"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    used by the `Recommender` class to recommend exercises."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "     "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- User Experience improvement:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - For edit profile and view command: Added helpful tips and error messages to give users convenience and improve"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "     self-sufficiency of the Fitr program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- JUnit tests:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - Added some JUnit tests for product\u0027s quality assurance."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "### Contributions to user guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- Viewing Commands section"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - Viewing help"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - Viewing your profile"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - Viewing food entries"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - Viewing exercise entries"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - Viewing calorie summary"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- Editing Commands (For User Profile)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - Edit profile name"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - Edit profile age"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - Edit profile gender"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - Edit profile height"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - Edit profile weight"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - Edit profile fitness"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "### Contributions to developer guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- Added detailed description and class diagram of User component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- Added sequence diagram for Edit command (implementation) to illustrate interaction with User class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- Added sequence diagram for View command (implementation) to illustrate interaction with User class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- Create and assign some tasks in issue tracker"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- Approved and merged some PRs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "### Reviewing/mentoring contributions"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- Suggested some code improvements to teammates after reviewing their PRs."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "### Contributions beyond the project team"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- Found 4 bugs during PE Dry Run [Link](https://github.com/gohsonghan98/ped/issues)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "- Reviewed other group\u0027s team project PR [Link](https://github.com/nus-cs2113-AY2021S1/tp/pull/31)"
      }
    ],
    "authorContributionMap": {
      "gohsonghan98": 70
    }
  },
  {
    "path": "docs/team/hui444.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "# Fang Hui Hui - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "Fitr is a command-line application, helping you keep track of your food intake and exercises."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "### Code contributed"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "[Link to code contributed](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dhui444\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Implemented Goal feature"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "    - This feature allows users to keep motivated to complete their goals"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "    - Implemented smart goals to link the user\u0027s calories with their goals, where Fitr will update the status of their goal with the user\u0027s calorie consumed and calories burnt data (from the goal\u0027s created date)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "    - Allow user to mark goals as complete, including overriding the smart goals function to ensure the user has control over the progress of the goals"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "    - Allow user to manipulate goals data (including editing, deleting, clearing goal list) "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "    - Ordered goals based on date created and status of goals when viewed so that the user is more encouraged to complete an uncompleted/old goal"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Implemented UI class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "    - This class prints all the messages the user sees, including colour coded words (e.g. red for errors, blue for additional feature tips etc.) and reads user inputs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "    - Consolidated the formats of all commands so that the user can know what commands and formats are available through the help command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "    - Added a format error method to print customised format errors for the various commands "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Added JUnit tests"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "    - Added some JUnit tests to the goal components"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "### Contributions to user guide"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "Contributed the following sections in the user guide:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Adding goals (food, smart food, exercise and smart exercises)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Viewing goal entries"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Editing a goal entry"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Clearing all goal entry"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Marking a goal as complete"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "### Contributions to developer guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "Contributed the following sections in the developer guide:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Ui component"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Parser component"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Help command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "- View goal command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Approved and merged some PRs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "### Reviewing/mentoring contributions"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Suggested some code improvements after reviewing my team\u0027s PRs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "### Contributions beyond the project team"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Found 5 bugs during PE Dry Run [Link](https://github.com/hui444/ped/issues)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": "- Reviewed other group\u0027s Team Project PR [Link](https://github.com/nus-cs2113-AY2021S1/tp/pull/81)"
      }
    ],
    "authorContributionMap": {
      "hui444": 54
    }
  },
  {
    "path": "docs/team/jerichochua.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "# Jericho Chua - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Fitr is a command-line application, helping you keep track of your food intake and exercises."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Code contributed"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "[Link to code contributed on RepoSense](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djerichochua)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Allow the user to clear the individual list, or clear all the lists at the same time"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - This feature allows users to quickly empty the lists, if they want to start with a fresh list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - This feature is especially useful for users who may be trying the application for the first time, and may add random data to test the application. If they wish to use the application proper, they can immediately clear the lists, without having to delete the entries individually."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Allow the user to edit a previous exercise or food entry in the lists"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - This feature allows users to correct mistakes that they make in a previous entry."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - This was initially hard to implement as the `edit` command was also used to edit the user\u0027s profile. Hence, I created the `EditCommandParser` to handle the arguments in the `edit` command first. Once the arguments are parsed, it is then passed into a `EditEntryCommand` class and the corresponding entry is edited."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - The command to edit a specific entry is also designed as a one-shot command, so users who can type fast in a command-line application can quickly edit an entry."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Added a `ResourceManager` class to handle loading of resources in the JAR file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - As Fitr requires some resources to be packaged together with the JAR file, such as the tips and exercise lists, the usual way of reading files using `File` and `Scanner` cannot be used."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - Instead, `InputStream` and `InputStreamReader` is used to read the resources packaged in the JAR file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Added some JUnit tests"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Contributions to documentation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Contributed the following sections in the user guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Editing a food entry"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Editing an exercise entry"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Clearing commands (Clearing all food entries, clearing all exercise entries, clearing all entries)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Saving your data"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Parts of the Introduction section"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Parts of the FAQ section"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Contributions to DG"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Contributed the following sections in the developer guide:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Architecture diagram"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- StorageManager component"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- ListManager component"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Edit command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Clear command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Contributed to the following team-based tasks:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Set up the GitHub team organisation and repository"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Maintaining the issue tracker"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Release management"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Review/mentoring contributions"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Reviewed the following PRs:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- [#86](https://github.com/AY2021S1-CS2113T-W13-2/tp/pull/86)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- [#89](https://github.com/AY2021S1-CS2113T-W13-2/tp/pull/89)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- [#98](https://github.com/AY2021S1-CS2113T-W13-2/tp/pull/98)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Contributions beyond the project team"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Responded to a [forum post](https://github.com/nus-cs2113-AY2021S1/forum/issues/52#issuecomment-693130427)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- [Reviewed](https://github.com/nus-cs2113-AY2021S1/tp/pull/31#pullrequestreview-518329234) another team\u0027s DG"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Found [4 bugs](https://github.com/jerichochua/ped/issues) in a team\u0027s tp during PE dry run"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Tools"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- Integrated a third-party library into the project (Jansi) ([#180](https://github.com/AY2021S1-CS2113T-W13-2/tp/pull/180))"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 60
    }
  },
  {
    "path": "docs/team/sixletters.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sixletters"
        },
        "content": "# Harris Maung - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "**Fitr** is a command-line application, helping you keep track of your food intake and exercises."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "A summary of my contributions can be found [here](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dsixletters\u0026tabRepo\u003dAY2021S1-CS2113T-W13-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### Enhancements Implemented"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- Implemented Exercise class and Add Exercise Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    - This class enabled users to log and add into our system the exercises they have done as well as the calories they have burnt from the exercises."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- Implemented Food class and Add Food Command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    - This class enabled users to log what food they have eaten, and the calories consumed from it."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- Implemented Standard Exercise Class and Standard Exercise List."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    - researched on frequent exercises that are done and came up with the appropriate intensity to store in our database."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- Implemented Recommender and Recommend Command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    - This class assessed our data base of standard exercises and recommended the users a workout."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    - Initially, I thought that a general recommendation would be enough, however I decided to implement it such that users would also be free to choose which body part or category they would want a recommendation for."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    - Class contained Standard Exercise Lists for different body parts and categories."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    - Users do not have to take the whole workout, rather they were free to choose and pick which exercise from the recommendation they wanted to do."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- Added JUnit tests"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    - Added some JUnit tests to the Recommender component as well as individual classes such as Food, Exercise etc."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Contributed the following sections in the user guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- Adding a Food or Exercise entry"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- Deleting a Food, Exercise or Goal Entry."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- Getting a recommended workout."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sixletters"
        },
        "content": "In the Developer Guide, I also wrote the sections related to the features and enhancements I implemented."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Contributed the following sections in the developer guide:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- Command component"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- Recommender component"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- Add command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- recommend command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### Contributions to Team-Based Tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sixletters"
        },
        "content": "In terms of contribution to team based tasks, the following areas were where I contributed the most:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- Approved and merge PRs."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- Made sure our application was accurate by researching on human metabolic levels."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sixletters"
        },
        "content": "- Created and assigned a few tasks in issue tracker."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### Review / Mentoring Contributions"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Throughout the project, I made sure to review to my teammates to abstract out their code to follow OOP standards. This was not easy as we were not taught on OOP concepts until this year, however, by enforcing OOP standards, our code was generally neater and more specific."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### Contributions Beyond the Project Team"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Throughout the project, I browsed through different exercise applications as well as researched on intensity level for exercises as well as their effect on the human body. This information would be key in making sure our product was accurate and provided the best experience for our users. I also led and brainstormed for more pragmatic features that we could add to our product, considering the rest of the team were following my direction."
      }
    ],
    "authorContributionMap": {
      "sixletters": 65
    }
  },
  {
    "path": "src/main/java/fitr/Fitr.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.TipList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.tip.TipManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SEPARATOR_LINE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class Fitr {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private ListManager listManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    private Recommender recommender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Fitr() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printGreetingMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            user \u003d storageManager.loadUserProfile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            storageManager.writeUserProfile(user);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "            listManager \u003d new ListManager(storageManager, user);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            TipList tipList \u003d new TipList(storageManager.loadTipList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            TipManager tipOfTheDay \u003d new TipManager(tipList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            recommender \u003d new Recommender();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            tipOfTheDay.execute();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            Ui.printSuggestQuestion();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"An error has occurred - the file cannot be opened!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            System.out.print(\"\u003e \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            String userInput \u003d Ui.read();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomMessage(SEPARATOR_LINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            Command c \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            c.execute(listManager, storageManager, user, recommender);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomMessage(SEPARATOR_LINE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        new Fitr().run();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 5,
      "sixletters": 8,
      "jerichochua": 29,
      "dmbclub": 15,
      "-": 4,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/calorie/Calorie.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.calorie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class Calorie {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected int amountOfCalories;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public Calorie(int calories) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.amountOfCalories \u003d calories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public int get() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return amountOfCalories;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 12,
      "jerichochua": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/AddExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_EXERCISE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ECHO_ADDED_EXERCISE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_CALORIE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_IN_FILE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.EXERCISE_NAME_HEADER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.LINE_BREAK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPLIT_SPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class AddExerciseCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public AddExerciseCommand(String command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "            String nameOfExercise \u003d command.split(\"/\", 2)[0].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            if (nameOfExercise.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "            command \u003d command.split(\"/\", 2)[1].trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (command.split(SPLIT_SPACE).length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Calorie amountOfCaloriesBurnt \u003d new Calorie(Integer.parseInt(command.split(SPLIT_SPACE)[0]));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                if (amountOfCaloriesBurnt.get() \u003c 1 || amountOfCaloriesBurnt.get() \u003e 10000) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    throw new NumberFormatException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                listManager.addExercise(new Exercise(nameOfExercise, amountOfCaloriesBurnt, getCurrentDate()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                storageManager.writeExerciseList(listManager.getExerciseList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(ECHO_ADDED_EXERCISE + LINE_BREAK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        + EXERCISE_NAME_HEADER + nameOfExercise + LINE_BREAK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + \"Burnt Cal: \" + amountOfCaloriesBurnt.get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_INVALID_CALORIE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printFormatError(COMMAND_EXERCISE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_IN_FILE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 17,
      "sixletters": 28,
      "jerichochua": 15,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/AddFoodCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.exception.FitrException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_FOOD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ECHO_ADDED_FOOD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_CALORIE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_IN_FILE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FOOD_NAME_HEADER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.LINE_BREAK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.PHRASE_EXTRA_PARAMETERS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPLIT_SPACE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class AddFoodCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public AddFoodCommand(String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "            String nameOfFood \u003d command.split(\"/\", 2)[0].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            if (nameOfFood.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "            command \u003d command.split(\"/\", 2)[1].trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (command.split(SPLIT_SPACE).length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Calorie amountOfCalories \u003d new Calorie(Integer.parseInt(command.split(SPLIT_SPACE)[0]));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                if (amountOfCalories.get() \u003c 0 || amountOfCalories.get() \u003e 10000) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    throw new NumberFormatException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                listManager.addFood(new Food(nameOfFood, amountOfCalories, getCurrentDate()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                storageManager.writeFoodList(listManager.getFoodList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(ECHO_ADDED_FOOD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        + FOOD_NAME_HEADER + nameOfFood + LINE_BREAK"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + \"Calorie Consumed: \" + amountOfCalories.get()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else if (command.split(SPLIT_SPACE).length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "                String individualCalorie \u003d command.split(SPLIT_SPACE, 2)[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (!individualCalorie.matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    throw new NumberFormatException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (!command.split(\" \", 2)[1].matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    throw new FitrException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": "                int amountOfFood \u003d Integer.parseInt(command.split(SPLIT_SPACE, 2)[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                if (amountOfFood \u003c 1 || amountOfFood \u003e 1000) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    throw new FitrException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                if (Integer.parseInt(individualCalorie) \u003c 0 || Integer.parseInt(individualCalorie) \u003e 10000) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    throw new NumberFormatException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Calorie amountOfCalories \u003d new Calorie(Integer.parseInt(individualCalorie)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        * amountOfFood);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                listManager.addFood(new Food(nameOfFood, amountOfCalories, amountOfFood, getCurrentDate()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                storageManager.writeFoodList(listManager.getFoodList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(ECHO_ADDED_FOOD"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        + FOOD_NAME_HEADER + nameOfFood + LINE_BREAK"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + \"Calorie Consumed: \" + amountOfCalories.get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printFormatError(PHRASE_EXTRA_PARAMETERS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_INVALID_CALORIE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printFormatError(COMMAND_FOOD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (FitrException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Sorry, quantity should be a positive integer less than or equal to 1000!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_IN_FILE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 28,
      "sixletters": 41,
      "jerichochua": 18,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/AddGoalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.FitrException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.UpperBoundLessThanException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.UpperBoundMoreThanException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.goal.Goal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_FOOD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_EXERCISE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_GOAL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ADD_SMART_EXERCISE_GOAL_TIP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ADD_SMART_FOOD_GOAL_TIP;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.CLOSE_SQUARE_BRACKET;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ECHO_ADDED_GOAL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_GOAL_LESS_THAN_UPPERBOUND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_GOAL_MORE_THAN_UPPERBOUND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_IN_FILE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.PHRASE_SMART_EXERCISE_GOAL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.PHRASE_SMART_FOOD_GOAL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SEPARATOR_LINE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPACE_STRING;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPLIT_SPACE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_EXERCISE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_FOOD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.goal.FormatGoal.formatGoal;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class AddGoalCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public AddGoalCommand(String command) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "            String goalType \u003d command.split(SPLIT_SPACE, 2)[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Goal newGoal \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "            switch (goalType) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "            //Food goal"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "            case COMMAND_FOOD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    command \u003d command.split(SPLIT_SPACE, 2)[1].trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    newGoal \u003d formatGoal(getCurrentDate(), SYMBOL_FOOD, command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                    listManager.addGoal(newGoal);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(ECHO_ADDED_GOAL + newGoal.getGoalType() + CLOSE_SQUARE_BRACKET"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": "                            + SPACE_STRING + newGoal.getDescription());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    if (newGoal.getDescription().equals(command)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        Ui.printCustomMessage(SEPARATOR_LINE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        Ui.printMessageInBlue(ADD_SMART_FOOD_GOAL_TIP);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": "                } catch (FitrException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printFormatError(PHRASE_SMART_FOOD_GOAL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hui444"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": "            //Exercise goal"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hui444"
        },
        "content": "            case COMMAND_EXERCISE:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    command \u003d command.split(SPLIT_SPACE, 2)[1].trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    newGoal \u003d formatGoal(getCurrentDate(), SYMBOL_EXERCISE, command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                    listManager.addGoal(newGoal);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(ECHO_ADDED_GOAL + newGoal.getGoalType() + CLOSE_SQUARE_BRACKET"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hui444"
        },
        "content": "                            + SPACE_STRING + newGoal.getDescription());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    if (newGoal.getDescription().equals(command)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        Ui.printCustomMessage(SEPARATOR_LINE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        Ui.printMessageInBlue(ADD_SMART_EXERCISE_GOAL_TIP);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hui444"
        },
        "content": "                } catch (FitrException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printFormatError(PHRASE_SMART_EXERCISE_GOAL);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hui444"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hui444"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printFormatError(COMMAND_GOAL);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hui444"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hui444"
        },
        "content": "            storageManager.writeGoalList(listManager.getGoalList(), listManager.getFoodList(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    listManager.getExerciseList(), user);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_IN_FILE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printFormatError(COMMAND_GOAL);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (UpperBoundLessThanException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_GOAL_LESS_THAN_UPPERBOUND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (UpperBoundMoreThanException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_GOAL_MORE_THAN_UPPERBOUND);;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 95,
      "jerichochua": 7
    }
  },
  {
    "path": "src/main/java/fitr/command/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.Commands;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " * Clears the food or exercise lists."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(ClearCommand.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ClearCommand(String arguments) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.command \u003d arguments;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storage, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (command.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "            LOGGER.fine(\"Clearing food, exercise and goal lists.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            listManager.clearFoodList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            listManager.clearExerciseList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "            listManager.clearGoalList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomMessage(\"Food, exercise and goal lists are all cleared!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "            switch (command.toLowerCase()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            case Commands.COMMAND_FOOD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                LOGGER.fine(\"Clearing food list.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (listManager.getFoodList().getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(\"Food list is empty!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                listManager.clearFoodList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                Ui.printCustomMessage(\"Food list is cleared!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            case Commands.COMMAND_EXERCISE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                LOGGER.fine(\"Clearing exercise list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (listManager.getExerciseList().getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(\"Exercise list is empty!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                listManager.clearExerciseList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                Ui.printCustomMessage(\"Exercise list is cleared!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "            case Commands.COMMAND_GOAL:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": "                LOGGER.fine(\"Clearing goal list.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (listManager.getGoalList().getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(\"Goal list is empty!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": "                listManager.clearGoalList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(\"Goal list is cleared!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hui444"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                Ui.printCustomError(\"Invalid clear command entered!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            storage.writeExerciseList(listManager.getExerciseList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            storage.writeFoodList(listManager.getFoodList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hui444"
        },
        "content": "            storage.writeGoalList(listManager.getGoalList(), listManager.getFoodList(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    listManager.getExerciseList(), user);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"The file cannot be written!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 23,
      "jerichochua": 56
    }
  },
  {
    "path": "src/main/java/fitr/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public abstract void execute(ListManager listManager, StorageManager storageManager,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                                 User user, Recommender recommender);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 6,
      "jerichochua": 8,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/CompleteGoalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.goal.Goal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.FitrException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_COMPLETE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_GOAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_INDEX_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_IN_FILE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.PHRASE_EXTRA_PARAMETERS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPACE_STRING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPLIT_SPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_YES;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": " * Marks a particular goal as complete."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class CompleteGoalCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public CompleteGoalCommand(String command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "            command \u003d command.toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (command.split(SPLIT_SPACE, 2)[0].equals(COMMAND_GOAL)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (command.split(SPLIT_SPACE).length \u003c 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(\"No index specified!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (command.split(SPLIT_SPACE).length \u003e 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printFormatError(PHRASE_EXTRA_PARAMETERS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "                command \u003d command.split(SPLIT_SPACE, 2)[1];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (!command.matches(\"^(|-?\\\\d+)$\") || Integer.parseInt(command) \u003c 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(\"Sorry, deletion index must be an positive integer.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "                int completedGoalIndex \u003d Integer.parseInt(command) - 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Goal completedGoal \u003d listManager.getGoal(completedGoalIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (completedGoal.getStatus(completedGoal, listManager.getFoodList(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        listManager.getExerciseList(), user) \u003d\u003d SYMBOL_YES) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(\"This goal has already been completed.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": "                listManager.getGoalList().deleteGoal(completedGoalIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": "                listManager.getGoalList().addGoal(completedGoal);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hui444"
        },
        "content": "                completedGoal.markAsCompleted();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hui444"
        },
        "content": "                storageManager.writeGoalList(listManager.getGoalList(), listManager.getFoodList(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        listManager.getExerciseList(), user);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(\"Yay! You completed:\\n\\t\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        + completedGoal.getDescription());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hui444"
        },
        "content": "                throw new FitrException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_INDEX_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_IN_FILE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (FitrException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printFormatError(COMMAND_COMPLETE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 77,
      "jerichochua": 2
    }
  },
  {
    "path": "src/main/java/fitr/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.common.DateManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.FitrException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_DELETE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_EXERCISE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_FOOD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_GOAL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_INDEX_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_IN_FILE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPLIT_SPACE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public DeleteCommand(String command) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "            String type \u003d command.split(SPLIT_SPACE)[0].toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (command.split(SPLIT_SPACE).length !\u003d 3 \u0026\u0026 !type.equals(COMMAND_GOAL)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                throw new FitrException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            case COMMAND_EXERCISE: {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "                String deletionDate \u003d command.split(SPLIT_SPACE)[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                deletionDate \u003d LocalDate.parse(deletionDate, DateManager.formatter).format(DateManager.formatter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                ExerciseList exerciseList \u003d listManager.getExerciseList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "                boolean isValidDate \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "                int deletionIndex \u003d Integer.parseInt(command.split(SPLIT_SPACE)[2]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                for (int i \u003d 0; i \u003c exerciseList.getSize(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    if (exerciseList.getExercise(i).getDate().equals(deletionDate)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        isValidDate \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        deletionIndex +\u003d i - 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        if (!exerciseList.getExercise(deletionIndex).getDate().equals(deletionDate)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (!isValidDate) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(\"No records found for the specified date!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                Ui.printCustomMessage(\"The following exercise has been deleted\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + \" for the \" + deletionDate + \": \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + listManager.getExercise(deletionIndex).getNameOfExercise());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                listManager.deleteExercise(deletionIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                storageManager.writeExerciseList(listManager.getExerciseList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            case COMMAND_FOOD: {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "                String deletionDate \u003d command.split(SPLIT_SPACE)[1];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                deletionDate \u003d LocalDate.parse(deletionDate, DateManager.formatter).format(DateManager.formatter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                FoodList foodList \u003d listManager.getFoodList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hui444"
        },
        "content": "                boolean isValidDate \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hui444"
        },
        "content": "                int deletionIndex \u003d Integer.parseInt(command.split(SPLIT_SPACE)[2]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                for (int i \u003d 0; i \u003c foodList.getSize(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    if (foodList.getFood(i).getDate().equals(deletionDate)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        isValidDate \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        deletionIndex +\u003d i - 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        if (!foodList.getFood(deletionIndex).getDate().equals(deletionDate)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (!isValidDate) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(\"No records found for the specified date!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printCustomMessage(\"The following food has been deleted\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + \" for the \" + deletionDate + \": \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + listManager.getFood(deletionIndex).getFoodName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                listManager.deleteFood(deletionIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                storageManager.writeFoodList(listManager.getFoodList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            case COMMAND_GOAL: {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (command.split(SPLIT_SPACE).length \u003c 2) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(\"Sorry, deletion index cannot be empty!\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (!command.split(SPLIT_SPACE, 2)[1].matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(\"Sorry, deletion index must be a positive number\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hui444"
        },
        "content": "                int deletionIndex \u003d Integer.parseInt(command.split(SPLIT_SPACE, 2)[1]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(\"The following has been deleted from the list of goals: \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                        + listManager.getGoal(deletionIndex - 1).getDescription());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                listManager.deleteGoal(deletionIndex - 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hui444"
        },
        "content": "                storageManager.writeGoalList(listManager.getGoalList(), listManager.getFoodList(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        listManager.getExerciseList(), user);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hui444"
        },
        "content": "                throw new FitrException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_INDEX_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Sorry, index deletion must be a positive number\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_IN_FILE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (FitrException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printFormatError(COMMAND_DELETE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Invalid date entered!\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 45,
      "sixletters": 62,
      "jerichochua": 21,
      "dmbclub": 1,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/EditEntryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.DateManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.FitrException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.UpperBoundLessThanException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.UpperBoundMoreThanException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.goal.Goal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.Commands;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.GoalList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.CLOSE_SQUARE_BRACKET;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.COLOURED_FORMAT_STRING;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_GOAL_LESS_THAN_UPPERBOUND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_GOAL_MORE_THAN_UPPERBOUND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_GOAL_TYPE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_INDEX;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_EXERCISE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_FOOD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_GOAL;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_CALORIES;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPACE_STRING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_EXERCISE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_FOOD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_NO;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.goal.FormatGoal.formatGoal;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class EditEntryCommand extends Command {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(EditEntryCommand.class.getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String EXERCISE_FORMAT_REGEX \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            \"(?\u003cdate\u003e\\\\S+)\\\\s+(?\u003cindex\u003e\\\\d+)\\\\s+(?\u003cexerciseName\u003e.*)\\\\s*/\\\\s*(?\u003ccalories\u003e\\\\d+)\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String FOOD_FORMAT_REGEX \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            \"(?\u003cdate\u003e\\\\S+)\\\\s+(?\u003cindex\u003e\\\\d+)\\\\s*(?\u003cfoodName\u003e.*)\\\\s*/\\\\s*(?\u003ccalories\u003e\\\\d+)\\\\s+(?\u003cquantity\u003e\\\\d+)\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Pattern EXERCISE_FORMAT \u003d Pattern.compile(EXERCISE_FORMAT_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Pattern FOOD_FORMAT \u003d Pattern.compile(FOOD_FORMAT_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final Pattern GOAL_FORMAT \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Pattern.compile(\"(?\u003cindex\u003e\\\\d+)\\\\s+(?\u003cgoalType\u003e\\\\S+)\\\\s+(?\u003cgoalDescription\u003e.*)\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final String arguments;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public EditEntryCommand(String command, String arguments) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            case Commands.COMMAND_EXERCISE:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                editExercise(listManager.getExerciseList(), arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            case Commands.COMMAND_FOOD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                editFood(listManager.getFoodList(), arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hui444"
        },
        "content": "            case Commands.COMMAND_GOAL:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hui444"
        },
        "content": "                editGoal(listManager.getGoalList(), arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hui444"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                Ui.printInvalidCommandError();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (NumberFormatException | FitrException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Invalid value entered!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Invalid date entered!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (UpperBoundLessThanException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_GOAL_LESS_THAN_UPPERBOUND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (UpperBoundMoreThanException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_GOAL_MORE_THAN_UPPERBOUND);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Invalid input!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LOGGER.fine(\"Writing to exercise, food and goal lists to local storage...\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            storageManager.writeExerciseList(listManager.getExerciseList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            storageManager.writeFoodList(listManager.getFoodList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hui444"
        },
        "content": "            storageManager.writeGoalList(listManager.getGoalList(), listManager.getFoodList(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    listManager.getExerciseList(), user);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LOGGER.fine(\"Exercise, food and goal lists successfully written to local storage.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(Messages.MISSING_FILE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private void editExercise(ExerciseList exerciseList, String arguments) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Editing an exercise entry...\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Matcher matcher \u003d EXERCISE_FORMAT.matcher(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomMessage(COLOURED_FORMAT_STRING + FORMAT_EDIT_EXERCISE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (exerciseList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Exercise list is empty!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(matcher.group(\"date\").trim(), DateManager.formatter);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String formattedDate \u003d date.format(DateManager.formatter);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ExerciseList filteredExercises \u003d new ExerciseList(exerciseList.filterByDate(formattedDate));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (filteredExercises.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"No exercise entries found on: \" + formattedDate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        int index \u003d Integer.parseInt(matcher.group(\"index\").trim());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e filteredExercises.getSize()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Invalid index entered!\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String exerciseName \u003d matcher.group(\"exerciseName\").trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (exerciseName.isBlank()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Name cannot be empty!\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hui444"
        },
        "content": "        int calories \u003d Integer.parseInt(matcher.group(KEYWORD_CALORIES).trim());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (calories \u003c 1 || calories \u003e 10000) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Calories must be between 0 and 10000 (inclusive)!\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        filteredExercises.getExercise(index - 1).setNameOfExercise(exerciseName);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        filteredExercises.getExercise(index - 1).setCaloriesBurnt(new Calorie(calories));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Ui.printCustomMessage(\"Successfully edited exercise to: \" + exerciseName + \", calories burnt: \" + calories);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private void editFood(FoodList foodList, String arguments) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Editing a food entry...\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Matcher matcher \u003d FOOD_FORMAT.matcher(arguments);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomMessage(COLOURED_FORMAT_STRING + FORMAT_EDIT_FOOD);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (foodList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Food list is empty!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(matcher.group(\"date\").trim(), DateManager.formatter);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String formattedDate \u003d date.format(DateManager.formatter);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FoodList filteredFood \u003d new FoodList(foodList.filterByDate(formattedDate));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (filteredFood.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"No food entries found on: \" + formattedDate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        int index \u003d Integer.parseInt(matcher.group(\"index\").trim());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e filteredFood.getSize()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Invalid index entered!\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String foodName \u003d matcher.group(\"foodName\").trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (foodName.isBlank()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Name cannot be empty!\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        int calories \u003d Integer.parseInt(matcher.group(\"calories\").trim());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (calories \u003c 0 || calories \u003e 10000) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Calories must be between 0 and 10000 (inclusive)!\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        int quantity \u003d Integer.parseInt(matcher.group(\"quantity\").trim());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (quantity \u003c 1 || quantity \u003e 1000) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Quantity must be between 1 and 1000 (inclusive)!\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        filteredFood.getFood(index - 1).setNameOfFood(foodName);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        filteredFood.getFood(index - 1).setCaloriesInFood(new Calorie(calories * quantity));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        filteredFood.getFood(index - 1).setAmountOfFood(quantity);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Ui.printCustomMessage(\"Successfully edited food to: \" + foodName"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                + \", calories (per qty): \" + calories + \", amount: \" + quantity);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private void editGoal(GoalList goalList, String arguments) throws FitrException,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hui444"
        },
        "content": "            UpperBoundLessThanException, UpperBoundMoreThanException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Editing a goal entry...\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Matcher matcher \u003d GOAL_FORMAT.matcher(arguments);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomMessage(COLOURED_FORMAT_STRING + FORMAT_EDIT_GOAL);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (goalList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Goal list is empty!\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hui444"
        },
        "content": "        int index \u003d Integer.parseInt(matcher.group(\"index\").trim());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e goalList.getSize()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_INVALID_INDEX);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hui444"
        },
        "content": "        String goalDescription \u003d matcher.group(\"goalDescription\").trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hui444"
        },
        "content": "        String goalType \u003d matcher.group(\"goalType\").trim().toLowerCase();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (!(goalType.equals(Commands.COMMAND_EXERCISE) || goalType.equals(Commands.COMMAND_FOOD))) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_INVALID_GOAL_TYPE);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Goal goal \u003d goalList.getGoal(index - 1);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hui444"
        },
        "content": "        String createdDate \u003d goal.getCreatedDate();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalType \u003d goalType.equals(Commands.COMMAND_EXERCISE) ? SYMBOL_EXERCISE : SYMBOL_FOOD;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Goal editedGoal \u003d formatGoal(LocalDate.parse(createdDate, DateManager.formatter), goalType, goalDescription);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goal.setGoal(editedGoal, SYMBOL_NO);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Ui.printCustomMessage(\"Successfully edited goal to: [\" + editedGoal.getGoalType()"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hui444"
        },
        "content": "                + CLOSE_SQUARE_BRACKET + SPACE_STRING + editedGoal.getDescription());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 84,
      "jerichochua": 168
    }
  },
  {
    "path": "src/main/java/fitr/command/EditProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "public class EditProfileCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private final String argument;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public EditProfileCommand(String command, String argument) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.argument \u003d argument;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (command.equalsIgnoreCase(Messages.EDIT_NAME)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            editName(user, argument);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(Messages.EDIT_HEIGHT)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            editHeight(user, argument);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(Messages.EDIT_WEIGHT)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            editWeight(user, argument);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(Messages.EDIT_AGE)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            editAge(user, argument);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(Messages.EDIT_GENDER)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            editGender(user, argument);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(Messages.EDIT_FITNESS)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            editFitness(user, argument);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printInvalidCommandError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            storageManager.writeUserProfile(user);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomMessage(Messages.MISSING_FILE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void editName(User user, String argument) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setName(argument, true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.NAME_ECHO_HEADER + user.getName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void editHeight(User user, String argument) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setupHeight(argument, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.HEIGHT_ECHO_HEADER + String.format(\"%.2f\", user.getHeight()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void editWeight(User user, String argument) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setupWeight(argument, true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.WEIGHT_ECHO_HEADER + String.format(\"%.2f\", user.getWeight()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void editAge(User user, String argument) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setupAge(argument, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.AGE_ECHO_HEADER + user.getAge());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void editGender(User user, String argument) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setupGender(argument, true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.GENDER_ECHO_HEADER + user.getGender());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void editFitness(User user, String argument) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setupFitnessLevel(argument, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.FITNESS_ECHO_HEADER + user.getUserFitnessLevelString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 12,
      "gohsonghan98": 67
    }
  },
  {
    "path": "src/main/java/fitr/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(ExitCommand.class.getName());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public ExitCommand(String command) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assert command !\u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Exiting the application.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Ui.printExitMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 10,
      "jerichochua": 18,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public HelpCommand(String userInput) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        this.command \u003d userInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assert command !\u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Ui.printHelpMessage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 1,
      "jerichochua": 8,
      "dmbclub": 14,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/InvalidCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public InvalidCommand(String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.command \u003d userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Ui.printFormatError(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 5,
      "jerichochua": 7,
      "dmbclub": 11,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/RecommendCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sixletters"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.exception.DuplicateIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.exception.FitrException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.exception.InvalidRecommendationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.StandardExercise;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.StandardExerciseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static fitr.common.Messages.BURNT_CAL_HEADER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static fitr.common.Messages.CLOSE_SQUARE_BRACKET;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ECHO_ADDED_EXERCISE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_IN_FILE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static fitr.common.Messages.EXERCISE_HEADER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static fitr.common.Messages.INTENSITY_CAL_HEADER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static fitr.common.Messages.OPEN_SQUARE_BRACKET;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SEPARATOR_LINE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static fitr.common.Messages.SPACE_FORMATTING;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPACE_STRING;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPLIT_SPACE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class RecommendCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public RecommendCommand(String command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.command \u003d command.trim().toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            StandardExerciseList recommendList \u003d recommender.recommend(command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            int fitnessLevel \u003d user.getFitnessLevel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            assert fitnessLevel \u003e\u003d 0 \u0026\u0026 fitnessLevel \u003c\u003d 2;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            for (int i \u003d 0; i \u003c 4; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                StandardExercise standardExercise \u003d recommendList.getExercise(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                int calorieBurnt \u003d (int) (standardExercise.getDuration().get(fitnessLevel)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        * standardExercise.getMet()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        * standardExercise.getSets().get(fitnessLevel)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        * user.getWeight())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        / 60;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(OPEN_SQUARE_BRACKET + (i + 1) + CLOSE_SQUARE_BRACKET + SPACE_STRING"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + EXERCISE_HEADER + recommendList.getExercise(i).getName()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + SPACE_FORMATTING + INTENSITY_CAL_HEADER"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + recommendList.getExercise(i).getSets().get(fitnessLevel) + \" sets of \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + recommendList.getExercise(i).getDuration().get(fitnessLevel) + \" minutes\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + SPACE_FORMATTING + BURNT_CAL_HEADER + calorieBurnt);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomMessage(\"Will you be doing this workout?\" + System.lineSeparator()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                    + \"Type \u0027y\u0027 to add all 4 to your exercise list,\" + System.lineSeparator()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    + \"or you can type in the index of the exercises you want added to you exercise list \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                    + \"(separated by a space).\" + System.lineSeparator() + \"Any other input will be taken as a no.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            String checker \u003d Ui.read();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            if (checker.toLowerCase().equals(\"y\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(SEPARATOR_LINE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(ECHO_ADDED_EXERCISE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                for (int i \u003d 0; i \u003c 4; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    StandardExercise standardExercise \u003d recommendList.getExercise(i);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Calorie caloriesBurnt \u003d new Calorie((int) (standardExercise.getDuration().get(fitnessLevel)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            * standardExercise.getMet()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            * standardExercise.getSets().get(fitnessLevel)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            * user.getWeight())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            / 60);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(OPEN_SQUARE_BRACKET + (i + 1) + CLOSE_SQUARE_BRACKET + SPACE_STRING"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            + EXERCISE_HEADER + standardExercise.getName()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            + SPACE_FORMATTING + BURNT_CAL_HEADER"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            + caloriesBurnt.get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                    listManager.addExercise(new Exercise(standardExercise.getName(), caloriesBurnt, getCurrentDate()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                    storageManager.writeExerciseList(listManager.getExerciseList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            } else if (checker.chars().anyMatch(Character::isLetter) || (checker.trim().length() \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(\"Next time then!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    if (checker.split(SPLIT_SPACE).length \u003e 4) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        throw new FitrException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    ArrayList\u003cInteger\u003e indexArr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    for (int i \u003d 0; i \u003c checker.split(SPLIT_SPACE).length; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        if (Integer.parseInt(checker.split(SPLIT_SPACE)[i]) \u003c 0"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hui444"
        },
        "content": "                                || Integer.parseInt(checker.split(SPLIT_SPACE)[i]) \u003e 4) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        if (indexArr.contains(Integer.parseInt(checker.split(SPLIT_SPACE)[i]))) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            throw new DuplicateIndexException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        indexArr.add(Integer.parseInt(checker.split(SPLIT_SPACE)[i]));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(SEPARATOR_LINE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(ECHO_ADDED_EXERCISE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    for (int i \u003d 0; i \u003c indexArr.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        StandardExercise standardExercise \u003d recommendList.getExercise(indexArr.get(i) - 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        Calorie caloriesBurnt \u003d new Calorie((int) (standardExercise.getDuration()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                                .get(fitnessLevel)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                                * standardExercise.getMet()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                                * standardExercise.getSets().get(fitnessLevel)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                                * user.getWeight())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                                / 60);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        Ui.printCustomMessage(OPEN_SQUARE_BRACKET + (i + 1) + CLOSE_SQUARE_BRACKET + SPACE_STRING"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                                + EXERCISE_HEADER + standardExercise.getName()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                                + SPACE_FORMATTING + BURNT_CAL_HEADER"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                                + caloriesBurnt.get());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        listManager.addExercise(new Exercise(standardExercise.getName(), caloriesBurnt,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                                getCurrentDate()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        storageManager.writeExerciseList(listManager.getExerciseList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                } catch (FitrException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    Ui.printCustomError(\"You have typed in too many indexes.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(\"The indexes have to be a number!\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(\"Sorry, you have to key in a positive number below 4 inclusive.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                } catch (DuplicateIndexException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    Ui.printCustomError(\"You cannot add the same index multiple times!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_IN_FILE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (InvalidRecommendationException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Sorry, that is an invalid recommendation type.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 24,
      "sixletters": 97,
      "jerichochua": 16,
      "dmbclub": 2,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.DateManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.goal.Goal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Recommender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.GoalList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_EXERCISE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_FOOD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_GOAL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_BMI;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_PROFILE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_SUMMARY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.EMPTY_FOOD_LIST;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.EMPTY_EXERCISE_LIST;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.EMPTY_GOAL_LIST;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FOOD_LIST_HEADER;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.EXERCISE_LIST_HEADER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.CALORIE_CONSUMED_HEADER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.CALORIE_BURNT_HEADER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.GOAL_LIST_HEADER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.NET_CALORIE_HEADER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.BMI_HEADER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.PHRASE_EXTRA_PARAMETERS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SEPARATOR_LINE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPACE_STRING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPLIT_SPACE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.USER_PROFILE_HEADER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.OPEN_SQUARE_BRACKET;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.CLOSE_SQUARE_BRACKET;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FOOD_HEADER;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.QUANTITY_HEADER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.SPACE_FORMATTING;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.CAL_HEADER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.EXERCISE_HEADER;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.BURNT_CAL_HEADER;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.common.Messages.DATE_HEADER;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.EMPTY_STRING;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_DATE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.common.Messages.EMPTY_EXERCISE_LIST_DATE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.common.Messages.EMPTY_FOOD_LIST_DATE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.NO_RECORDS_FOUND;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.VIEW_FOOD_TIP;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.VIEW_EXERCISE_TIP;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.VIEW_SUMMARY_TIP;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public ViewCommand(String command) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"ViewCommand\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assert (command !\u003d null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (command.equalsIgnoreCase(COMMAND_FOOD)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            viewFood(listManager.getFoodList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(COMMAND_EXERCISE)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            viewExercise(listManager.getExerciseList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(COMMAND_VIEW_SUMMARY)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            viewSummary(listManager.getFoodList(), listManager.getExerciseList(), false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } else if (command.split(SPLIT_SPACE)[0].equalsIgnoreCase(COMMAND_VIEW_SUMMARY)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (command.split(SPLIT_SPACE).length \u003e 2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printFormatError(PHRASE_EXTRA_PARAMETERS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hui444"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hui444"
        },
        "content": "            viewSummaryByDate(listManager.getFoodList(), listManager.getExerciseList(), command.split(SPLIT_SPACE)[1]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(COMMAND_VIEW_BMI)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            viewBmi(user);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(COMMAND_VIEW_PROFILE)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            viewProfile(user);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(COMMAND_GOAL)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hui444"
        },
        "content": "            viewGoal(listManager.getFoodList(), listManager.getExerciseList(), listManager.getGoalList(), user);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } else if (command.split(SPLIT_SPACE)[0].equalsIgnoreCase(COMMAND_EXERCISE)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (command.split(SPLIT_SPACE).length \u003e 2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printFormatError(PHRASE_EXTRA_PARAMETERS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hui444"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hui444"
        },
        "content": "            viewExerciseByDate(listManager.getExerciseList(), command.split(SPLIT_SPACE)[1], true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } else if (command.split(SPLIT_SPACE)[0].equalsIgnoreCase(COMMAND_FOOD)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (command.split(SPLIT_SPACE).length \u003e 2) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printFormatError(PHRASE_EXTRA_PARAMETERS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hui444"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hui444"
        },
        "content": "            viewFoodByDate(listManager.getFoodList(), command.split(SPLIT_SPACE)[1], true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printFormatError(COMMAND_VIEW);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //View food"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void viewFood(FoodList foodList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"Displaying food list\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (foodList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(EMPTY_FOOD_LIST);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            int printIndex \u003d index + 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            String lastDate \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(FOOD_LIST_HEADER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            while (index \u003c foodList.getSize()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (!lastDate.equals(foodList.getFood(index).getDate())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    if (index !\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        Ui.printCustomMessage(EMPTY_STRING);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printMessageInYellow(DATE_HEADER + foodList.getFood(index).getDate());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    lastDate \u003d foodList.getFood(index).getDate();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    printIndex \u003d 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(OPEN_SQUARE_BRACKET + printIndex + CLOSE_SQUARE_BRACKET + SPACE_STRING"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        + FOOD_HEADER + foodList.getFood(index).getFoodName()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        + SPACE_FORMATTING + QUANTITY_HEADER + foodList.getFood(index).getAmountOfFood()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        + SPACE_FORMATTING + CAL_HEADER + foodList.getFood(index).getCalories());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                printIndex++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Ui.printCustomMessage(SEPARATOR_LINE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Ui.printMessageInBlue(VIEW_FOOD_TIP);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //View exercise"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void viewExercise(ExerciseList exerciseList) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"Displaying exercise list.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (exerciseList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(EMPTY_EXERCISE_LIST);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            int printIndex \u003d index + 1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            String lastDate \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(EXERCISE_LIST_HEADER);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            while (index \u003c exerciseList.getSize()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (!lastDate.equals(exerciseList.getExercise(index).getDate())) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    if (index !\u003d 0) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        Ui.printCustomMessage(EMPTY_STRING);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printMessageInYellow(DATE_HEADER + exerciseList.getExercise(index).getDate());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    lastDate \u003d exerciseList.getExercise(index).getDate();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    printIndex \u003d 1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(OPEN_SQUARE_BRACKET + printIndex + CLOSE_SQUARE_BRACKET + SPACE_STRING"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        + EXERCISE_HEADER + exerciseList.getExercise(index).getNameOfExercise()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        + SPACE_FORMATTING + BURNT_CAL_HEADER + exerciseList.getExercise(index).getCalories());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                printIndex++;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Ui.printCustomMessage(SEPARATOR_LINE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Ui.printMessageInBlue(VIEW_EXERCISE_TIP);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void viewSummary(FoodList foodList, ExerciseList exerciseList, Boolean isDate) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"Displaying summary\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int foodIndex \u003d 0;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int exerciseIndex \u003d 0;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int totalCalorieConsumed \u003d 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int totalCalorieBurnt \u003d 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (foodList.getSize() \u003d\u003d 0 \u0026\u0026 exerciseList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(NO_RECORDS_FOUND);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String currentDate;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        ArrayList\u003cString\u003e dateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        ArrayList\u003cInteger\u003e calorieList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"Sorting calories entries from exercise list and food list together by date.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (exerciseIndex \u003c exerciseList.getSize() \u0026\u0026 foodIndex \u003c foodList.getSize()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            if (Integer.parseInt(dateFormatter(exerciseList.getExercise(exerciseIndex).getDate()))"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    \u003c Integer.parseInt(dateFormatter(foodList.getFood(foodIndex).getDate()))) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                dateList.add(exerciseList.getExercise(exerciseIndex).getDate());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                calorieList.add(-exerciseList.getExercise(exerciseIndex).getCalories());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                exerciseIndex++;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            } else if (Integer.parseInt(dateFormatter(exerciseList.getExercise(exerciseIndex).getDate()))"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    \u003d\u003d Integer.parseInt(dateFormatter(foodList.getFood(foodIndex).getDate()))) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                dateList.add(exerciseList.getExercise(exerciseIndex).getDate());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                calorieList.add(-exerciseList.getExercise(exerciseIndex).getCalories());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                dateList.add(foodList.getFood(foodIndex).getDate());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                calorieList.add(foodList.getFood(foodIndex).getCalories());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                exerciseIndex++;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                foodIndex++;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            } else if (Integer.parseInt(dateFormatter(exerciseList.getExercise(exerciseIndex).getDate()))"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    \u003e Integer.parseInt(dateFormatter(foodList.getFood(foodIndex).getDate()))) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                dateList.add(foodList.getFood(foodIndex).getDate());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                calorieList.add(foodList.getFood(foodIndex).getCalories());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                foodIndex++;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (exerciseIndex \u003e\u003d exerciseList.getSize()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            while (foodIndex \u003c foodList.getSize()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                calorieList.add(foodList.getFood(foodIndex).getCalories());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                dateList.add(foodList.getFood(foodIndex).getDate());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                foodIndex++;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            while (exerciseIndex \u003c exerciseList.getSize()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                calorieList.add(-exerciseList.getExercise(exerciseIndex).getCalories());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                dateList.add(exerciseList.getExercise(exerciseIndex).getDate());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                exerciseIndex++;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"Entries successfully sorted.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"Displaying sorted calorie entries by date.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (index \u003c dateList.size()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            currentDate \u003d dateList.get(index);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printMessageInYellow(DATE_HEADER + currentDate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            while (index \u003c dateList.size() \u0026\u0026 dateList.get(index).equals(currentDate)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (calorieList.get(index) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    totalCalorieBurnt +\u003d calorieList.get(index);//negative"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                } else if (calorieList.get(index) \u003e 0) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    totalCalorieConsumed +\u003d calorieList.get(index);//positive"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(CALORIE_CONSUMED_HEADER);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(String.valueOf(totalCalorieConsumed));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(CALORIE_BURNT_HEADER);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(String.valueOf(-totalCalorieBurnt));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(NET_CALORIE_HEADER);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(String.valueOf(totalCalorieBurnt + totalCalorieConsumed));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            totalCalorieBurnt \u003d 0;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            totalCalorieConsumed \u003d 0;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (dateList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(EMPTY_STRING);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (!isDate) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomMessage(SEPARATOR_LINE);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printMessageInBlue(VIEW_SUMMARY_TIP);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void viewSummaryByDate(FoodList foodList, ExerciseList exerciseList, String date) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LocalDate.parse(date, DateManager.formatter);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            ExerciseList exerciseListByDate \u003d viewExerciseByDate(exerciseList, date, false);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            FoodList foodListByDate \u003d viewFoodByDate(foodList, date, false);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            viewSummary(foodListByDate, exerciseListByDate, true);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomError(ERROR_INVALID_DATE);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private String dateFormatter(String date) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        //Convert date from DD/MM/YYYY to YYYYMMDD"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String newDateFormat;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        newDateFormat \u003d LocalDate.parse(date, DateManager.formatter).format(formatter2);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return newDateFormat;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void viewBmi(User user) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String bmiString \u003d String.format(\"%.2f\", user.getBmi());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Ui.printCustomMessage(BMI_HEADER + bmiString);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void viewProfile(User user) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(USER_PROFILE_HEADER);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(user.toString());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private void viewGoal(FoodList foodList, ExerciseList exerciseList, GoalList goalList, User user) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (goalList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomMessage(EMPTY_GOAL_LIST);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomMessage(GOAL_LIST_HEADER);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hui444"
        },
        "content": "            goalList \u003d goalList.reformatGoalList(goalList, foodList, exerciseList, user);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hui444"
        },
        "content": "            for (int i \u003d 0; i \u003c goalList.getSize(); i++) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Goal goal \u003d goalList.getGoal(i);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage((i + 1) + \". [\" + goal.getGoalType() + \"][\""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        + goal.getStatus(goal, foodList, exerciseList, user) + \"] \" + goal.getDescription()"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        + \"\\033[0;32m (created on: \" + goal.getCreatedDate() + \")\\033[0m\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static ExerciseList viewExerciseByDate(ExerciseList exerciseList, String date, Boolean isPrint) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LocalDate.parse(date, DateManager.formatter);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            if (isPrint) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printCustomError(ERROR_INVALID_DATE);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        date \u003d LocalDate.parse(date, DateManager.formatter).format(DateManager.formatter);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        ExerciseList exercisesOnThatDate \u003d new ExerciseList();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        for (int i \u003d 0; i \u003c exerciseList.getSize(); i++) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            if (date.equals(exerciseList.getExercise(i).getDate())) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                exercisesOnThatDate.addExercise(exerciseList.getExercise(i));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (isPrint) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            if (exercisesOnThatDate.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printCustomMessage(EMPTY_EXERCISE_LIST_DATE);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                int index \u003d 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                int printIndex \u003d index + 1;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printCustomMessage(EXERCISE_LIST_HEADER);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printMessageInYellow(DATE_HEADER + date);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                while (index \u003c exercisesOnThatDate.getSize()) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(OPEN_SQUARE_BRACKET + printIndex + CLOSE_SQUARE_BRACKET + SPACE_STRING"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                            + EXERCISE_HEADER + exercisesOnThatDate.getExercise(index).getNameOfExercise()"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                            + SPACE_FORMATTING + BURNT_CAL_HEADER"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                            + exercisesOnThatDate.getExercise(index).getCalories());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    printIndex++;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return exercisesOnThatDate;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static FoodList viewFoodByDate(FoodList foodList, String date, Boolean isPrint) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LocalDate.parse(date, DateManager.formatter);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            if (isPrint) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printCustomError(ERROR_INVALID_DATE);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        date \u003d LocalDate.parse(date, DateManager.formatter).format(DateManager.formatter);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        FoodList foodOnThatDate \u003d new FoodList();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        for (int i \u003d 0; i \u003c foodList.getSize(); i++) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            if (date.equals(foodList.getFood(i).getDate())) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                foodOnThatDate.addFood(foodList.getFood(i));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (isPrint) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            if (foodOnThatDate.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printCustomMessage(EMPTY_FOOD_LIST_DATE);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                int index \u003d 0;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                int printIndex \u003d index + 1;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printCustomMessage(FOOD_LIST_HEADER);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printMessageInYellow(DATE_HEADER + date);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                while (index \u003c foodOnThatDate.getSize()) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(OPEN_SQUARE_BRACKET + printIndex + CLOSE_SQUARE_BRACKET + SPACE_STRING"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                            + FOOD_HEADER + foodOnThatDate.getFood(index).getFoodName()"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                            + SPACE_FORMATTING + BURNT_CAL_HEADER + foodOnThatDate.getFood(index).getCalories());"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    printIndex++;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return foodOnThatDate;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 61,
      "sixletters": 12,
      "jerichochua": 30,
      "dmbclub": 60,
      "gohsonghan98": 203
    }
  },
  {
    "path": "src/main/java/fitr/common/Commands.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": " * Container for commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class Commands {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COMMAND_FOOD \u003d \"food\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COMMAND_EXERCISE \u003d \"exercise\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COMMAND_VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String COMMAND_RECOMMEND \u003d \"recommend\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String WORD_AEROBIC \u003d \"aerobic\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String WORD_UPPERBODY \u003d \"upperbody\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String WORD_LOWERBODY \u003d \"lowerbody\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String WORD_STRETCH \u003d \"stretch\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String COMMAND_VIEW_SUMMARY \u003d \"summary\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String COMMAND_VIEW_BMI \u003d \"bmi\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String COMMAND_VIEW_PROFILE \u003d \"profile\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COMMAND_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public static final String COMMAND_CLEAR \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public static final String COMMAND_EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static final String COMMAND_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COMMAND_COMPLETE \u003d \"complete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COMMAND_GOAL \u003d \"goal\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 17,
      "jerichochua": 3,
      "dmbclub": 1,
      "gohsonghan98": 4
    }
  },
  {
    "path": "src/main/java/fitr/common/DateManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class DateManager {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static LocalDate getCurrentDate() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 5,
      "jerichochua": 4,
      "dmbclub": 3
    }
  },
  {
    "path": "src/main/java/fitr/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FITR_WORD \u003d \" _______   __   __\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "            + \"|    ___| |__| |  |_  .----.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "            + \"|    ___| |  | |   _| |   _|\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "            + \"|___|     |__| |____| |__|\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String MESSAGE_GREET \u003d FITR_WORD + \"Hello! Welcome to Fitr.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String MESSAGE_SUGGEST_QUESTION \u003d \"What can I do for you?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String MESSAGE_BYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String PHRASE_EXTRA_PARAMETERS \u003d \"Extra parameters\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "    //Common strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String LINE_BREAK \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String SPACE_STRING \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String SPLIT_SPACE \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String OPEN_SQUARE_BRACKET \u003d \"[\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String CLOSE_SQUARE_BRACKET \u003d \"]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String DASH \u003d \"-\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COLOURED_FORMAT_STRING \u003d \"\\033[0;32mFormat: \\033[0m\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String SEPARATOR_LINE \u003d DASH.repeat(136);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "    //Format messages"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_FOOD \u003d \"food NAME_OF_FOOD /NUMBER_OF_CALORIES [QUANTITY]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_EXERCISE \u003d \"exercise NAME_OF_EXERCISE /CALORIES_BURNT\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_FOOD_GOAL \u003d \"goal food GOAL_DESCRIPTION\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_SMART_FOOD_GOAL \u003d \"goal food \u003c NUMBER_OF_CALORIES or goal food \u003e \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "            + \"NUMBER_OF_CALORIES\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_EXERCISE_GOAL \u003d \"goal exercise GOAL_DESCRIPTION\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_SMART_EXERCISE_GOAL \u003d \"goal exercise \u003c CALORIES_BURNT or goal exercise \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "            + \"\u003e CALORIES_BURNT\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_VIEW_PROFILE \u003d \"view profile\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_VIEW_BMI \u003d \"view bmi\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_VIEW_FOOD \u003d \"view food\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FORMAT_VIEW_FOOD_ON_SPECIFIED_DATE \u003d \"view food dd/MM/yyyy\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_VIEW_EXERCISE \u003d \"view exercise\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FORMAT_VIEW_EXERCISE_ON_SPECIFIED_DATE \u003d \"view exercise dd/MM/yyyy\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_VIEW_GOAL \u003d \"view goal\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_VIEW_SUMMARY \u003d \"view summary\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FORMAT_VIEW_SUMMARY_ON_SPECIFIED_DATE \u003d \"view summary dd/MM/yyyy\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FORMAT_EDIT_NAME \u003d \"edit name NEW_NAME\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FORMAT_EDIT_AGE \u003d \"edit age NEW_AGE\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String RANGE_EDIT_AGE \u003d \"Valid range for age: 1 to 130\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FORMAT_EDIT_GENDER \u003d \"edit gender NEW_GENDER (\u0027M\u0027 for Male or \u0027F\u0027 for Female)\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FORMAT_EDIT_HEIGHT \u003d \"edit height NEW_HEIGHT (in m)\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String RANGE_EDIT_HEIGHT \u003d \"Valid range for height (in m) after round off: 0.50 to 4.00\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FORMAT_EDIT_WEIGHT \u003d \"edit weight NEW_WEIGHT (in kg)\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String RANGE_EDIT_WEIGHT \u003d \"Valid range for weight (in kg) after round off: 2.00 to 1000.00\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FORMAT_EDIT_FITNESS \u003d \"edit fitness NEW_FITNESS_LEVEL (0 for Unfit; 1 for Normal; 2 for\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            + \" Fit)\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public static final String FORMAT_EDIT_FOOD \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            \"edit food dd/MM/yyyy INDEX NAME_OF_FOOD /NUMBER_OF_CALORIES QUANTITY\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public static final String FORMAT_EDIT_EXERCISE \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            \"edit exercise dd/MM/yyyy INDEX NAME_OF_EXERCISE /CALORIES_BURNT\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_EDIT_GOAL \u003d \"edit goal INDEX TYPE_OF_GOAL GOAL_DESCRIPTION\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FORMAT_DELETE_FOOD \u003d \"delete food dd/MM/yyyy INDEX\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FORMAT_DELETE_EXERCISE \u003d \"delete exercise dd/MM/yyyy INDEX\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_DELETE_GOAL \u003d \"delete goal INDEX\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_CLEAR_FOOD \u003d \"clear food\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_CLEAR_EXERCISE \u003d \"clear exercise\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_CLEAR_GOAL \u003d \"clear goal\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_MARK_GOAL_AS_COMPLETE \u003d \"complete goal INDEX\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FORMAT_DATE \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //User class messages"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String USER_SETUP_GREET \u003d \"Before we begin, let me get to know you :)\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String INPUT_NAME \u003d \"Please enter your name:\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String INPUT_AGE \u003d \"Please enter your age:\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String INPUT_HEIGHT \u003d \"Please enter your height (in m):\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String INPUT_WEIGHT \u003d \"Please enter your weight (in kg):\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String INPUT_GENDER \u003d \"Please enter your gender (Enter \u0027M\u0027 for Male or \u0027F\u0027 for Female):\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String SETUP_COMPLETE \u003d \"Setup complete!\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_AGE_INPUT \u003d \"Oops! That is an invalid age input.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_GENDER_INPUT \u003d \"Oops! That is an invalid gender input.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_HEIGHT_INPUT \u003d \"Oops! That is an invalid height input.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_WEIGHT_INPUT \u003d \"Oops! That is an invalid weight input.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_FITNESS_INPUT \u003d \"Oops! That is an invalid fitness level input.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String NAME_OUTPUT_HEADER \u003d \"Name: \";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String AGE_OUTPUT_HEADER \u003d \"Age: \";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String GENDER_OUTPUT_HEADER \u003d \"Gender: \";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String HEIGHT_OUTPUT_HEADER \u003d \"Height (in m): \";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String WEIGHT_OUTPUT_HEADER \u003d \"Weight (in kg): \";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FITNESS_OUTPUT_HEADER \u003d \"Your fitness level: \";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String MALE_SYMBOL \u003d \"M\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FEMALE_SYMBOL \u003d \"F\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String MALE_STRING \u003d \"Male\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FEMALE_STRING \u003d \"Female\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FIT_STRING \u003d \"Fit\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String UNFIT_STRING \u003d \"Unfit\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String NORMAL_STRING \u003d \"Normal\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String NULL_STRING \u003d \"NULL\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String NAME_FORMAT \u003d \"Only alphabetical and space inputs allowed for name! Please try again.\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hui444"
        },
        "content": "    //Error messages"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_COMMAND \u003d \"Sorry, this is an invalid command!\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_IN_FILE \u003d \"Sorry, there is an error in the file.\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public static final String ERROR_INVALID_CALORIE \u003d \"Sorry, invalid calorie amount entered. \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            + \"Calorie must be between 0 and 10 000\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_FORMAT_MESSAGE \u003d \"Please input in the correct format!\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INDEX_DOES_NOT_EXIST \u003d \"Sorry, that index does not exist in the list\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_INDEX \u003d \"Invalid index entered!\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_GOAL_TYPE \u003d \"Invalid goal type!\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_GOAL_LESS_THAN_UPPERBOUND \u003d \"Invalid value for target calories. \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hui444"
        },
        "content": "            + \"Please enter an amount between 0 and 100000.\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_GOAL_MORE_THAN_UPPERBOUND \u003d \"Invalid value for target calories. \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hui444"
        },
        "content": "            + \"Please enter an amount between 0 (inclusive) and 100000.\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //ViewCommand class messages"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EMPTY_FOOD_LIST \u003d \"The food list is empty...\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EMPTY_EXERCISE_LIST \u003d \"The exercise list is empty...\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static final String EMPTY_EXERCISE_LIST_DATE \u003d \"The exercise list on that date is empty...\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static final String EMPTY_FOOD_LIST_DATE \u003d \"The food list on that date is empty...\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String EMPTY_GOAL_LIST \u003d \"The goal list is empty...\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FOOD_LIST_HEADER \u003d \"Here is the list of your food:\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EXERCISE_LIST_HEADER \u003d \"Here is the list of your exercises:\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String GOAL_LIST_HEADER \u003d \"Here is the list of your goals:\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String CALORIE_CONSUMED_HEADER \u003d \"Total calorie consumed:\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String CALORIE_BURNT_HEADER \u003d \"Total calorie burnt:\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String NET_CALORIE_HEADER \u003d \"Net calorie:\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String BMI_HEADER \u003d \"Your BMI is: \";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String USER_PROFILE_HEADER \u003d \"User profile:\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FOOD_HEADER \u003d \"Food: \";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String QUANTITY_HEADER \u003d \"Quantity: \";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EXERCISE_HEADER \u003d \"Exercise: \";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String SPACE_FORMATTING \u003d \"\\n    \";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String CAL_HEADER \u003d \"Total Calorie(s): \";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static final String DATE_HEADER \u003d \"Date: \";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String BURNT_CAL_HEADER \u003d \"Burnt Cal: \";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public static final String INTENSITY_CAL_HEADER \u003d \"Intensity: \";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static final String ERROR_INVALID_DATE \u003d \"Sorry, please enter a correct date in the format dd/MM/yyyy\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String NO_RECORDS_FOUND \u003d \"No records found!\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //EditProfileCommand class messages"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_HEIGHT \u003d \"height\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_WEIGHT \u003d \"weight\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_AGE \u003d \"age\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_GENDER \u003d \"gender\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_FITNESS \u003d \"fitness\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String MISSING_FILE \u003d \"Theres no file\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String NAME_ECHO_HEADER \u003d \"Your current name is: \";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String HEIGHT_ECHO_HEADER \u003d \"Your current height (in m) is: \";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String WEIGHT_ECHO_HEADER \u003d \"Your current weight (in kg) is: \";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String AGE_ECHO_HEADER \u003d \"Your current age is: \";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String GENDER_ECHO_HEADER \u003d \"Your current gender is: \";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public static final String INPUT_FITNESS_LEVEL \u003d \"Please indicate your fitness level to be used for determining \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            + \"intensity of exercises.\\n(0 for Unfit; 1 for Normal; 2 for Fit): \";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FITNESS_ECHO_HEADER \u003d \"Your current fitness level is: \";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String SYMBOL_YES \u003d \"Y\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String SYMBOL_NO \u003d \"N\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String SYMBOL_EXERCISE \u003d \"E\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String SYMBOL_FOOD \u003d \"F\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final char SYMBOL_MORE_THAN \u003d \u0027\u003e\u0027;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final char SYMBOL_LESS_THAN \u003d \u0027\u003c\u0027;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String SYMBOL_PERCENTAGE \u003d \"%\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hui444"
        },
        "content": "    //Smart goal texts"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String KEYWORD_FOOD_MORE_THAN \u003d \"Eat more than \";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String KEYWORD_FOOD_LESS_THAN \u003d \"Eat less than \";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String KEYWORD_EXERCISE_MORE_THAN \u003d \"Burn more than \";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String KEYWORD_EXERCISE_LESS_THAN \u003d \"Burn less than \";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String KEYWORD_EAT \u003d \"Eat\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String KEYWORD_BURN \u003d \"Burn\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String KEYWORD_MORE \u003d \"more\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String KEYWORD_LESS \u003d \"less\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String KEYWORD_THAN \u003d \"than\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String KEYWORD_CALORIE \u003d \"calorie\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String KEYWORD_CALORIES \u003d \"calories\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String PHRASE_MORE_THAN \u003d \"more than\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String PHRASE_LESS_THAN \u003d \"less than\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String PHRASE_SMART_EXERCISE_GOAL \u003d \"Smart exercise goal\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String PHRASE_SMART_FOOD_GOAL \u003d \"Smart food goal\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ECHO_ADDED_GOAL \u003d \"Okay! The following goal has been added: \\n\\t[\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ECHO_ADDED_EXERCISE \u003d \"The following exercise has been added:\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ECHO_ADDED_FOOD \u003d \"The following food has been added:\\n\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String EXERCISE_NAME_HEADER \u003d \"Name of Exercise: \";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FOOD_NAME_HEADER \u003d \"Name of Food: \";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hui444"
        },
        "content": "    //Tip messages"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String VIEW_FOOD_TIP \u003d \"Tip: You may also view food entries by day using the format \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            + \"\\\"view food dd/MM/yyyy\\\"\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String VIEW_EXERCISE_TIP \u003d \"Tip: You may also view exercise entries by day using the format \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            + \"\\\"view exercise dd/MM/yyyy\\\"\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String VIEW_SUMMARY_TIP \u003d \"Tip: You may also view summary by day using the format \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            + \"\\\"view summary dd/MM/yyyy\\\"\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ADD_SMART_FOOD_GOAL_TIP \u003d \"Tip: You may also add a smart food goal using the format \""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            + System.lineSeparator() + \"\\t\" + \"\\\"\" + FORMAT_SMART_FOOD_GOAL + \"\\\"\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ADD_SMART_EXERCISE_GOAL_TIP \u003d \"Tip: You may also add a smart exercise goal using \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            + \"the format\" + System.lineSeparator() + \"\\t\" + \"\\\"\" + FORMAT_SMART_EXERCISE_GOAL + \"\\\"\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 116,
      "sixletters": 3,
      "jerichochua": 12,
      "dmbclub": 4,
      "gohsonghan98": 63
    }
  },
  {
    "path": "src/main/java/fitr/common/RemoveLeadingZeros.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class RemoveLeadingZeros {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static String removeLeadingZeros(String number) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "        String strPattern \u003d \"^0+(?!$)\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "        number \u003d number.replaceAll(strPattern, \"\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 9
    }
  },
  {
    "path": "src/main/java/fitr/common/ResourceManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " * Handles the loading of resources."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class ResourceManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Loads the resource with a given file name."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @param fileName Name of the file in the resources folder"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @return an InputStreamReader of the loaded file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public static InputStreamReader loadResource(String fileName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        InputStream inputStream \u003d ResourceManager.class.getClassLoader().getResourceAsStream(fileName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (inputStream \u003d\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 25
    }
  },
  {
    "path": "src/main/java/fitr/exception/DuplicateIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sixletters"
        },
        "content": "package fitr.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class DuplicateIndexException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 4
    }
  },
  {
    "path": "src/main/java/fitr/exception/FitrException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class FitrException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 3,
      "jerichochua": 1
    }
  },
  {
    "path": "src/main/java/fitr/exception/InvalidFileFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class InvalidFileFormatException extends FitrException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 4
    }
  },
  {
    "path": "src/main/java/fitr/exception/InvalidRecommendationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sixletters"
        },
        "content": "package fitr.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class InvalidRecommendationException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 4
    }
  },
  {
    "path": "src/main/java/fitr/exception/UpperBoundLessThanException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class UpperBoundLessThanException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 4
    }
  },
  {
    "path": "src/main/java/fitr/exception/UpperBoundMoreThanException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class UpperBoundMoreThanException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 4
    }
  },
  {
    "path": "src/main/java/fitr/exercise/Exercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.DateManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected String nameOfExercise; // The name of the Exercise"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected Calorie caloriesBurnt;// Amount of calories burnt from exercise"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    protected LocalDate date; //Date when the Exercise is added to the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public Exercise(String name, Calorie caloriesBurnt, LocalDate date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.nameOfExercise \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.caloriesBurnt \u003d caloriesBurnt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return caloriesBurnt.get();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public String getNameOfExercise() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return nameOfExercise;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return date.format(DateManager.formatter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void setNameOfExercise(String nameOfExercise) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.nameOfExercise \u003d nameOfExercise;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void setCaloriesBurnt(Calorie caloriesBurnt) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.caloriesBurnt \u003d caloriesBurnt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 18,
      "jerichochua": 15,
      "dmbclub": 6
    }
  },
  {
    "path": "src/main/java/fitr/exercise/Recommender.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.exception.FitrException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.exception.InvalidRecommendationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.StandardExerciseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StandardExerciseStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.WORD_AEROBIC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.WORD_LOWERBODY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.WORD_STRETCH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.WORD_UPPERBODY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class Recommender {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected StandardExerciseList upperBodyList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected StandardExerciseList lowerBodyList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected StandardExerciseList aerobicList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected StandardExerciseList stretchingList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    private static final Logger recommenderLogger \u003d Logger.getLogger(\"RecommenderLogger\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public Recommender() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Boolean isSuccessful \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        StandardExerciseStorage storage \u003d new StandardExerciseStorage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            this.upperBodyList \u003d storage.loadUpperBodyList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            this.lowerBodyList \u003d storage.loadLowerBodyList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            this.aerobicList \u003d storage.loadAerobicList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            this.stretchingList \u003d storage.loadStretchList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            isSuccessful \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(\"File(s) missing!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            isSuccessful \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assert (isSuccessful);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public StandardExerciseList recommend(String command) throws InvalidRecommendationException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        int recommendationType \u003d this.recommendParser(command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        recommenderLogger.fine(command + \" \" + recommendationType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        if (recommendationType \u003d\u003d 5) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            recommenderLogger.fine(\"Invalid Recommendation:\" + command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            throw new InvalidRecommendationException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assert recommendationType \u003e\u003d 0 \u0026\u0026 recommendationType \u003c 5;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        StandardExerciseList finalList \u003d new StandardExerciseList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        int firstIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        int secondIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        int thirdIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        int fourthIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        switch (recommendationType) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            firstIndex \u003d (int) (Math.random() * (upperBodyList.getSize() - 1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            secondIndex \u003d (int) (Math.random() * (lowerBodyList.getSize() - 1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            thirdIndex \u003d (int) (Math.random() * (aerobicList.getSize() - 1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            fourthIndex \u003d (int) (Math.random() * (stretchingList.getSize() - 1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(upperBodyList.getExercise(firstIndex));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(lowerBodyList.getExercise(secondIndex));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(aerobicList.getExercise(thirdIndex));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(stretchingList.getExercise(fourthIndex));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            firstIndex \u003d (int) (Math.random() * (aerobicList.getSize() - 1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            secondIndex \u003d (firstIndex + 1) % aerobicList.getSize();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            thirdIndex \u003d (secondIndex + 2) % aerobicList.getSize();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            fourthIndex \u003d (secondIndex + 3) % aerobicList.getSize();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            assert firstIndex \u003c aerobicList.getSize() \u0026\u0026 secondIndex \u003c aerobicList.getSize()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    \u0026\u0026 thirdIndex \u003c aerobicList.getSize()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    \u0026\u0026 fourthIndex \u003c aerobicList.getSize();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(aerobicList.getExercise(firstIndex));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(aerobicList.getExercise(secondIndex));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(aerobicList.getExercise(thirdIndex));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(aerobicList.getExercise(fourthIndex));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            firstIndex \u003d (int) (Math.random() * (upperBodyList.getSize() - 1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            secondIndex \u003d (firstIndex + 1) % upperBodyList.getSize();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            thirdIndex \u003d (secondIndex + 2) % upperBodyList.getSize();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            fourthIndex \u003d (secondIndex + 3) % upperBodyList.getSize();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            assert firstIndex \u003c upperBodyList.getSize() \u0026\u0026 secondIndex \u003c upperBodyList.getSize()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    \u0026\u0026 thirdIndex \u003c upperBodyList.getSize()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    \u0026\u0026 fourthIndex \u003c upperBodyList.getSize();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(upperBodyList.getExercise(firstIndex));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(upperBodyList.getExercise(secondIndex));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(upperBodyList.getExercise(thirdIndex));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(upperBodyList.getExercise(fourthIndex));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            firstIndex \u003d (int) (Math.random() * (lowerBodyList.getSize() - 1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            secondIndex \u003d (firstIndex + 1) % lowerBodyList.getSize();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            thirdIndex \u003d (secondIndex + 2) % lowerBodyList.getSize();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            fourthIndex \u003d (secondIndex + 3) % lowerBodyList.getSize();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            assert firstIndex \u003c lowerBodyList.getSize() \u0026\u0026 secondIndex \u003c lowerBodyList.getSize()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    \u0026\u0026 thirdIndex \u003c lowerBodyList.getSize()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    \u0026\u0026 fourthIndex \u003c lowerBodyList.getSize();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(lowerBodyList.getExercise(firstIndex));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(lowerBodyList.getExercise(secondIndex));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(lowerBodyList.getExercise(thirdIndex));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(lowerBodyList.getExercise(fourthIndex));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            firstIndex \u003d (int) (Math.random() * (stretchingList.getSize() - 1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            secondIndex \u003d (firstIndex + 1) % stretchingList.getSize();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            thirdIndex \u003d (secondIndex + 2) % stretchingList.getSize();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            fourthIndex \u003d (secondIndex + 3) % stretchingList.getSize();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            assert firstIndex \u003c stretchingList.getSize() \u0026\u0026 secondIndex \u003c stretchingList.getSize()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    \u0026\u0026 thirdIndex \u003c stretchingList.getSize()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    \u0026\u0026 fourthIndex \u003c stretchingList.getSize();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(stretchingList.getExercise(firstIndex));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(stretchingList.getExercise(secondIndex));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(stretchingList.getExercise(thirdIndex));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            finalList.addExercise(stretchingList.getExercise(fourthIndex));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        recommenderLogger.fine(firstIndex + \" \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                                    + secondIndex + \" \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                                    + thirdIndex + \" \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                                    + fourthIndex);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return finalList;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public int recommendParser(String command) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        int recommendationType \u003d 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        if (command.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hui444"
        },
        "content": "            case WORD_AEROBIC:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                recommendationType \u003d 1;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hui444"
        },
        "content": "            case WORD_UPPERBODY:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                recommendationType \u003d 2;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hui444"
        },
        "content": "            case WORD_LOWERBODY:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                recommendationType \u003d 3;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hui444"
        },
        "content": "            case WORD_STRETCH:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                recommendationType \u003d 4;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                recommendationType \u003d 5;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return recommendationType;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 9,
      "sixletters": 121,
      "jerichochua": 5,
      "gohsonghan98": 18
    }
  },
  {
    "path": "src/main/java/fitr/exercise/StandardExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class StandardExercise {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected ArrayList\u003cDouble\u003e duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected ArrayList\u003cInteger\u003e sets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected double met;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public StandardExercise(String name, double met, ArrayList\u003cDouble\u003e duration, ArrayList\u003cInteger\u003e sets) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.met \u003d met;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.sets \u003d sets;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public double getMet() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return met;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public ArrayList\u003cDouble\u003e getDuration() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public ArrayList\u003cInteger\u003e getSets() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return sets;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public String toString(int fitnessLevel) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return \"Temp\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 35,
      "jerichochua": 1,
      "gohsonghan98": 2
    }
  },
  {
    "path": "src/main/java/fitr/food/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.DateManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected String nameOfFood; // The name of the Food"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected Calorie caloriesInFood;// Amount of calories consumed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    protected int amountOfFood \u003d 1; // Amount of food in grams, if not it will be taken as arbitrary unit e.g, 1 banana"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    protected LocalDate date; //Date when the Food is added to the list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public Food(String nameOfFood, Calorie calories, int amount, LocalDate date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.nameOfFood \u003d nameOfFood;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.amountOfFood \u003d amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.caloriesInFood \u003d new Calorie(calories.get());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public Food(String name, Calorie caloriesInFood, LocalDate date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.nameOfFood \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.caloriesInFood \u003d caloriesInFood;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return caloriesInFood.get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public String getFoodName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return nameOfFood;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public int getAmountOfFood() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return amountOfFood;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return date.format(DateManager.formatter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void setNameOfFood(String nameOfFood) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.nameOfFood \u003d nameOfFood;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void setCaloriesInFood(Calorie caloriesInFood) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.caloriesInFood \u003d caloriesInFood;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void setAmountOfFood(int amountOfFood) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.amountOfFood \u003d amountOfFood;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 24,
      "jerichochua": 21,
      "dmbclub": 9
    }
  },
  {
    "path": "src/main/java/fitr/goal/CheckGoalStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.goal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.text.NumberFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_BURN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_CALORIE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_CALORIES;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_EAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_LESS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_MORE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_THAN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPLIT_SPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_NO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_YES;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class CheckGoalStatus {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static String checkGoalStatus(String status, Goal goal, FoodList foodList,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "                                         ExerciseList exerciseList, User user) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "        int targetCalorie;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "        int userConsumedCalorie \u003d user.calculateCalorieConsumed(foodList, goal.getCreatedDate()).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "        int userBurntCalorie \u003d user.calculateCalorieBurnt(exerciseList, goal.getCreatedDate()).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "        int calorieDifference;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "        NumberFormat formatter \u003d new DecimalFormat(\"#0.0\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (status.equals(SYMBOL_YES)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "                return status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "            String[] goalWords \u003d goal.getDescription().split(SPLIT_SPACE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (goalWords.length !\u003d 5) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "                return status;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "            targetCalorie \u003d Integer.parseInt(goalWords[3]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (targetCalorie \u003c 0 || targetCalorie \u003e\u003d 100000) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "                return status;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (goalWords[0].equals(KEYWORD_BURN) \u0026\u0026 goalWords[1].equals(KEYWORD_LESS)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    \u0026\u0026 goalWords[2].equals(KEYWORD_THAN)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (((targetCalorie \u003d\u003d 1 \u0026\u0026 !goalWords[4].equals(KEYWORD_CALORIE))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        \u0026\u0026 !goalWords[4].equals(KEYWORD_CALORIES))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        || (targetCalorie \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return status;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "                calorieDifference \u003d targetCalorie - userBurntCalorie;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "                status \u003d (calorieDifference \u003c 0) ? SYMBOL_NO : SYMBOL_YES;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else if (goalWords[0].equals(KEYWORD_BURN) \u0026\u0026 goalWords[1].equals(KEYWORD_MORE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    \u0026\u0026 goalWords[2].equals(KEYWORD_THAN)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if ((targetCalorie \u003d\u003d 1 \u0026\u0026 !goalWords[4].equals(KEYWORD_CALORIE))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        \u0026\u0026 !goalWords[4].equals(KEYWORD_CALORIES)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return status;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hui444"
        },
        "content": "                calorieDifference \u003d targetCalorie - userBurntCalorie;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": "                status \u003d String.valueOf((calorieDifference \u003c 0) ? SYMBOL_YES :"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        formatter.format((double) userBurntCalorie / (double) targetCalorie * 100));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hui444"
        },
        "content": "                //Special case where target calorie is zero"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (targetCalorie \u003d\u003d 0 \u0026\u0026 userBurntCalorie \u003c\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    status \u003d SYMBOL_NO;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else if (goalWords[0].equals(KEYWORD_EAT) \u0026\u0026 goalWords[1].equals(KEYWORD_MORE)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    \u0026\u0026 goalWords[2].equals(KEYWORD_THAN)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if ((targetCalorie \u003d\u003d 1 \u0026\u0026 !goalWords[4].equals(KEYWORD_CALORIE))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        \u0026\u0026 !goalWords[4].equals(KEYWORD_CALORIES)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return status;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hui444"
        },
        "content": "                calorieDifference \u003d targetCalorie - userConsumedCalorie;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hui444"
        },
        "content": "                status \u003d String.valueOf((calorieDifference \u003c 0) ? SYMBOL_YES :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        formatter.format((double) userConsumedCalorie / (double) targetCalorie * 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hui444"
        },
        "content": "                //Special case where target calorie is zero"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (targetCalorie \u003d\u003d 0 \u0026\u0026 userConsumedCalorie \u003c\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    status \u003d SYMBOL_NO;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else if (goalWords[0].equals(KEYWORD_EAT) \u0026\u0026 goalWords[1].equals(KEYWORD_LESS)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    \u0026\u0026 goalWords[2].equals(KEYWORD_THAN)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (((targetCalorie \u003d\u003d 1 \u0026\u0026 !goalWords[4].equals(KEYWORD_CALORIE))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        \u0026\u0026 !goalWords[4].equals(KEYWORD_CALORIES))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        || (targetCalorie \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    return status;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hui444"
        },
        "content": "                calorieDifference \u003d targetCalorie - userConsumedCalorie;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hui444"
        },
        "content": "                status \u003d (calorieDifference \u003c 0) ? SYMBOL_NO : SYMBOL_YES;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return status;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 96
    }
  },
  {
    "path": "src/main/java/fitr/goal/FormatGoal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.goal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.common.RemoveLeadingZeros;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.FitrException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.UpperBoundLessThanException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.UpperBoundMoreThanException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_BURN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_CALORIE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_CALORIES;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_EAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.PHRASE_LESS_THAN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.PHRASE_MORE_THAN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPACE_STRING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPLIT_SPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_EXERCISE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_LESS_THAN;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_MORE_THAN;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class FormatGoal {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static Goal formatGoal(LocalDate createdDate, String goalType, String goalDescription)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "            throws FitrException, UpperBoundLessThanException, UpperBoundMoreThanException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Goal newGoal \u003d new Goal(createdDate, goalType, goalDescription);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "        String descriptionPart \u003d (goalType.equals(SYMBOL_EXERCISE)) ? KEYWORD_BURN : KEYWORD_EAT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "        String[] arguments \u003d goalDescription.substring(1).trim().split(SPLIT_SPACE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "        boolean isNumber \u003d arguments[0].matches(\"^(|-?\\\\d+)$\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (Objects.equals(goalDescription.split(SPLIT_SPACE, 2)[0].trim().charAt(0), SYMBOL_MORE_THAN)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (isNumber) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (arguments.length !\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    throw new FitrException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "                String targetCalories \u003d RemoveLeadingZeros.removeLeadingZeros(goalDescription.substring(1).trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    if (Integer.parseInt(targetCalories) \u003e\u003d 100000 || Integer.parseInt(targetCalories) \u003c 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "                            || targetCalories.equals(\"-0\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        throw new UpperBoundMoreThanException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    throw new UpperBoundMoreThanException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "                String wordCalorie \u003d (Integer.parseInt(targetCalories) \u003d\u003d 1) ? (SPACE_STRING + KEYWORD_CALORIE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        : (SPACE_STRING + KEYWORD_CALORIES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "                newGoal \u003d new Goal(createdDate, goalType, descriptionPart + SPACE_STRING"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        + PHRASE_MORE_THAN + SPACE_STRING + targetCalories + wordCalorie);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } else if (Objects.equals(goalDescription.split(SPLIT_SPACE, 2)[0].trim().charAt(0), SYMBOL_LESS_THAN)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (isNumber) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (arguments.length !\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    throw new FitrException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": "                String targetCalories \u003d RemoveLeadingZeros.removeLeadingZeros(goalDescription.substring(1).trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hui444"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    if (Integer.parseInt(targetCalories) \u003e\u003d 100000 || Integer.parseInt(targetCalories) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        throw new UpperBoundLessThanException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hui444"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    throw new UpperBoundLessThanException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hui444"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": "                String wordCalorie \u003d (Integer.parseInt(targetCalories) \u003d\u003d 1) ? (SPACE_STRING + KEYWORD_CALORIE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        : (SPACE_STRING + KEYWORD_CALORIES);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "                newGoal \u003d new Goal(createdDate, goalType, descriptionPart + SPACE_STRING"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        + PHRASE_LESS_THAN + SPACE_STRING + targetCalories + wordCalorie);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hui444"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return newGoal;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 76
    }
  },
  {
    "path": "src/main/java/fitr/goal/Goal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.goal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.DateManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_NO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_PERCENTAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_YES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.goal.CheckGoalStatus.checkGoalStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "    protected LocalDate createdDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "    protected String goalType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "    protected String goalStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public Goal(LocalDate createdDate, String goalType, String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.createdDate \u003d createdDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalType \u003d goalType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalStatus \u003d SYMBOL_NO;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public Goal(LocalDate createdDate, String goalType, String goalStatus, String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.createdDate \u003d createdDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalType \u003d goalType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalStatus \u003d goalStatus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public String getCreatedDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return createdDate.format(DateManager.formatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public String getGoalType() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return goalType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public String getStatus(Goal goal, FoodList foodList, ExerciseList exerciseList, User user) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "        String rawStatus \u003d checkGoalStatus(goalStatus, goal, foodList, exerciseList, user) + SYMBOL_PERCENTAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (rawStatus.equals(\"0.0\" + SYMBOL_PERCENTAGE) || rawStatus.equals(SYMBOL_NO + SYMBOL_PERCENTAGE)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return SYMBOL_NO;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } else if (rawStatus.equals(\"100.0\" + SYMBOL_PERCENTAGE) || rawStatus.equals(SYMBOL_YES + SYMBOL_PERCENTAGE)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return SYMBOL_YES;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return rawStatus;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void markAsCompleted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalStatus \u003d SYMBOL_YES;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void setGoal(Goal goal, String goalStatus) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalType \u003d goal.getGoalType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalStatus \u003d goalStatus;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.description \u003d goal.getDescription();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 63,
      "jerichochua": 3
    }
  },
  {
    "path": "src/main/java/fitr/list/ExerciseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class ExerciseList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final ArrayList\u003cExercise\u003e exerciseList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ExerciseList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ExerciseList(ArrayList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.exerciseList \u003d exerciseList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseList.add(exercise);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Exercise getExercise(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList.get(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Exercise deleteExercise(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList.remove(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseList.clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cExercise\u003e filterByDate(String date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return (ArrayList\u003cExercise\u003e) exerciseList.stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                .filter((s) -\u003e s.getDate().contentEquals(date))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 45
    }
  },
  {
    "path": "src/main/java/fitr/list/FoodList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class FoodList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final ArrayList\u003cFood\u003e foodList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public FoodList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public FoodList(ArrayList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.foodList \u003d foodList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodList.add(food);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Food getFood(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList.get(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Food deleteFood(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList.remove(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodList.clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cFood\u003e filterByDate(String date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return (ArrayList\u003cFood\u003e) foodList.stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                .filter((s) -\u003e s.getDate().contentEquals(date))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 3,
      "jerichochua": 42
    }
  },
  {
    "path": "src/main/java/fitr/list/GoalList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.goal.Goal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_YES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class GoalList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private final ArrayList\u003cGoal\u003e goalList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public GoalList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public GoalList(ArrayList\u003cGoal\u003e goalList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalList \u003d goalList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void addGoal(Goal goal) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList.add(goal);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public Goal deleteGoal(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return goalList.remove(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public Goal getGoal(int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return goalList.get(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return goalList.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList.clear();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public ArrayList\u003cGoal\u003e getGoalList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return goalList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public GoalList reformatGoalList(GoalList goalList, FoodList foodList, ExerciseList exerciseList, User user) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "        GoalList completedGoalList \u003d new GoalList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "        GoalList incompletedGoalList \u003d new GoalList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "        for (int i \u003d 0; i \u003c goalList.getSize(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (goalList.getGoal(i).getStatus(goalList.getGoal(i), foodList, exerciseList, user).equals(SYMBOL_YES)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": "                completedGoalList.addGoal(goalList.getGoal(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "                incompletedGoalList.addGoal(goalList.getGoal(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList.clearList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hui444"
        },
        "content": "        for (int i \u003d 0; i \u003c incompletedGoalList.getSize(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hui444"
        },
        "content": "            goalList.addGoal(incompletedGoalList.getGoal(i));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hui444"
        },
        "content": "        for (int i \u003d 0; i \u003c completedGoalList.getSize(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hui444"
        },
        "content": "            goalList.addGoal(completedGoalList.getGoal(i));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return goalList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 68,
      "jerichochua": 1
    }
  },
  {
    "path": "src/main/java/fitr/list/ListManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.goal.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class ListManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final ExerciseList exerciseList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final FoodList foodList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final GoalList goalList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public ListManager(StorageManager storageManager, User user) throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseList \u003d new ExerciseList(storageManager.loadExerciseList());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodList \u003d new FoodList(storageManager.loadFoodList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList \u003d new GoalList(storageManager.loadGoalList(foodList, exerciseList, user));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseList.addExercise(exercise);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Exercise getExercise(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList.getExercise(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void deleteExercise(int index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseList.deleteExercise(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ExerciseList getExerciseList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void clearExerciseList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseList.clearList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodList.addFood(food);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Food getFood(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList.getFood(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void deleteFood(int index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodList.deleteFood(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public FoodList getFoodList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void clearFoodList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodList.clearList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addGoal(Goal goal) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        goalList.addGoal(goal);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Goal getGoal(int index) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return goalList.getGoal(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void deleteGoal(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        goalList.deleteGoal(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public GoalList getGoalList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return goalList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void clearGoalList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList.clearList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 6,
      "jerichochua": 75
    }
  },
  {
    "path": "src/main/java/fitr/list/StandardExerciseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.StandardExercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class StandardExerciseList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    private final ArrayList\u003cStandardExercise\u003e standardExerciseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public StandardExerciseList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public StandardExerciseList(ArrayList\u003cStandardExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.standardExerciseList \u003d exerciseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void addExercise(StandardExercise exercise) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        standardExerciseList.add(exercise);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public StandardExercise getExercise(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return standardExerciseList.get(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return standardExerciseList.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 26,
      "jerichochua": 3
    }
  },
  {
    "path": "src/main/java/fitr/list/TipList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class TipList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    private final ArrayList\u003cString\u003e tipList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public TipList(ArrayList\u003cString\u003e tipList) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        this.tipList \u003d tipList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public String getTip(int totalTips) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        return tipList.get(random.nextInt(totalTips));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 17
    }
  },
  {
    "path": "src/main/java/fitr/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.EditEntryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.EditProfileCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.InvalidCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.Commands;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_EDIT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class EditCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Pattern ARGUMENT_FORMAT \u003d Pattern.compile(\"(?\u003ctype\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final String fullArgument;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public EditCommandParser(String argument) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.fullArgument \u003d argument.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Command editCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Matcher matcher \u003d ARGUMENT_FORMAT.matcher(fullArgument);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return new InvalidCommand(COMMAND_EDIT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String editType \u003d matcher.group(\"type\").trim().toLowerCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String arguments \u003d matcher.group(\"arguments\").trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        switch (editType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Messages.EDIT_NAME:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Messages.EDIT_AGE:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Messages.EDIT_GENDER:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Messages.EDIT_HEIGHT:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Messages.EDIT_WEIGHT:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Messages.EDIT_FITNESS:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            return new EditProfileCommand(editType, arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Commands.COMMAND_EXERCISE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Commands.COMMAND_FOOD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case Commands.COMMAND_GOAL:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new EditEntryCommand(editType, arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return new InvalidCommand(COMMAND_EDIT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 5,
      "jerichochua": 43,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.AddFoodCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.command.CompleteGoalCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.InvalidCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.command.AddExerciseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.ViewCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.command.RecommendCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.command.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.command.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.command.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.command.AddGoalCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.common.Commands;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.PHRASE_EXTRA_PARAMETERS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": " * Parses the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommand\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "     * Parses the user input and return a corresponding command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "     * @param userInput String of user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "     * @return a Command object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static Command parse(String userInput) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Matcher matcher \u003d COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return new InvalidCommand(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        String userCommand \u003d matcher.group(\"command\").trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        String arguments \u003d matcher.group(\"arguments\").trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        switch (userCommand.toLowerCase()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        case Commands.COMMAND_FOOD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return new AddFoodCommand(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        case Commands.COMMAND_EXERCISE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return new AddExerciseCommand(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        case Commands.COMMAND_VIEW:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return new ViewCommand(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        case Commands.COMMAND_RECOMMEND:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            return new RecommendCommand(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Commands.COMMAND_EDIT:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new EditCommandParser(arguments).editCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        case Commands.COMMAND_HELP:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (arguments.length() !\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": "                return new InvalidCommand(PHRASE_EXTRA_PARAMETERS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return new HelpCommand(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        case Commands.COMMAND_DELETE:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return new DeleteCommand(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Commands.COMMAND_CLEAR:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new ClearCommand(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        case Commands.COMMAND_BYE:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (arguments.length() !\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hui444"
        },
        "content": "                return new InvalidCommand(PHRASE_EXTRA_PARAMETERS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return new ExitCommand(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case Commands.COMMAND_GOAL:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return new AddGoalCommand(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case Commands.COMMAND_COMPLETE:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return new CompleteGoalCommand(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return new InvalidCommand(userCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 21,
      "sixletters": 1,
      "jerichochua": 12,
      "dmbclub": 41,
      "gohsonghan98": 3
    }
  },
  {
    "path": "src/main/java/fitr/storage/ExerciseStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.DateManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Exercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.storage.StorageManager.COMMA_SEPARATOR;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " * Handles the read and write operations of the user\u0027s exercises."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class ExerciseStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(ExerciseStorage.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String DEFAULT_EXERCISE_LIST_PATH \u003d \"exerciseList.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final String exerciseListPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ExerciseStorage() throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this(DEFAULT_EXERCISE_LIST_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ExerciseStorage(String exerciseListPath) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.exerciseListPath \u003d exerciseListPath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        File exerciseListFile \u003d new File(exerciseListPath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!exerciseListFile.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            boolean isFileExists \u003d exerciseListFile.createNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LOGGER.fine(\"Exercise list file created: \" + exerciseListPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Loads the user\u0027s exercises from a file and returns an ArrayList of Exercise objects."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @return an ArrayList of Exercise objects"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws FileNotFoundException if the file is not found"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cExercise\u003e loadExerciseList() throws FileNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to read file: \" + exerciseListPath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cExercise\u003e exerciseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String[] arguments;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        File exerciseListFile \u003d new File(exerciseListPath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Scanner readFile \u003d new Scanner(exerciseListFile);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        boolean containsInvalidEntry \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        while (readFile.hasNext()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            line \u003d readFile.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            arguments \u003d line.split(COMMA_SEPARATOR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            if (isValidEntry(arguments)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                exerciseList.add(new Exercise(arguments[0], new Calorie(Integer.parseInt(arguments[1])),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                        LocalDate.parse(arguments[2], DateManager.formatter)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                LOGGER.fine(\"Invalid entry found in exercise list file.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                containsInvalidEntry \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (containsInvalidEntry) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Invalid exercise entries found and are not added to your exercise list!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Exercise list file read successfully.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Writes the exercise list data into a file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @param exerciseList the exercise list to write to the file"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws IOException if an I/O error has occurred"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void writeExerciseList(ExerciseList exerciseList) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to write to file: \" + exerciseListPath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FileWriter file \u003d new FileWriter(exerciseListPath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Exercise exercise;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        for (int i \u003d 0; i \u003c exerciseList.getSize(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            exercise \u003d exerciseList.getExercise(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            file.write(exercise.getNameOfExercise()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    + COMMA_SEPARATOR + exercise.getCalories()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    + COMMA_SEPARATOR + exercise.getDate() + System.lineSeparator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Exercise list file written successfully.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private boolean isValidEntry(String[] arguments) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (arguments.length !\u003d 3) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String name \u003d arguments[0];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (name.isBlank()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            int calories \u003d Integer.parseInt(arguments[1]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            if (calories \u003c 1 || calories \u003e 10000) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(arguments[2], DateManager.formatter);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (NumberFormatException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 119,
      "dmbclub": 4
    }
  },
  {
    "path": "src/main/java/fitr/storage/FoodStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.DateManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.storage.StorageManager.COMMA_SEPARATOR;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " * Handles the read and write operations of the user\u0027s food."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class FoodStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(FoodStorage.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String DEFAULT_FOOD_LIST_PATH \u003d \"foodList.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final String foodListPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public FoodStorage() throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this(DEFAULT_FOOD_LIST_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public FoodStorage(String foodListPath) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.foodListPath \u003d foodListPath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        File foodListFile \u003d new File(foodListPath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!foodListFile.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            boolean isFileExists \u003d foodListFile.createNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LOGGER.fine(\"Food list file created: \" + foodListPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Loads the list of the user\u0027s consumed food from a file and returns an ArrayList of Food objects."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @return an ArrayList of Food objects"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws FileNotFoundException if the file is not found"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cFood\u003e loadFoodList() throws FileNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to read file: \" + foodListPath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String[] arguments;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        File foodListFile \u003d new File(foodListPath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Scanner readFile \u003d new Scanner(foodListFile);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        boolean containsInvalidEntry \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        while (readFile.hasNext()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            line \u003d readFile.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            arguments \u003d line.split(COMMA_SEPARATOR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            if (isValidEntry(arguments)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                foodList.add(new Food(arguments[0], new Calorie(Integer.parseInt(arguments[1])),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                        Integer.parseInt(arguments[2]), LocalDate.parse(arguments[3], DateManager.formatter)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                LOGGER.fine(\"Invalid entry found in food list file.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                containsInvalidEntry \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (containsInvalidEntry) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Invalid food entries found and are not added to your food list!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Food list file read successfully.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Writes the food list data into a file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @param foodList the food list to write to the file"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws IOException if an I/O error has occurred"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void writeFoodList(FoodList foodList) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to write to file: \" + foodListPath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FileWriter file \u003d new FileWriter(foodListPath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Food food;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        for (int i \u003d 0; i \u003c foodList.getSize(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            food \u003d foodList.getFood(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            file.write(food.getFoodName()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                    + COMMA_SEPARATOR + food.getCalories()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    + COMMA_SEPARATOR + food.getAmountOfFood()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    + COMMA_SEPARATOR + food.getDate() + System.lineSeparator());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Food list file written successfully.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private boolean isValidEntry(String[] arguments) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (arguments.length !\u003d 4) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String name \u003d arguments[0];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (name.isBlank()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            int calories \u003d Integer.parseInt(arguments[1]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            if (calories \u003c 0 || calories \u003e 10000000) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            int quantity \u003d Integer.parseInt(arguments[2]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            if (quantity \u003c 1 || quantity \u003e 1000) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(arguments[3], DateManager.formatter);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (NumberFormatException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 125,
      "dmbclub": 4
    }
  },
  {
    "path": "src/main/java/fitr/storage/GoalStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.DateManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.goal.Goal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.GoalList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_EXERCISE_LESS_THAN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_EXERCISE_MORE_THAN;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_FOOD_LESS_THAN;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.KEYWORD_FOOD_MORE_THAN;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SPLIT_SPACE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_EXERCISE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_FOOD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_NO;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.SYMBOL_YES;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.storage.StorageManager.COMMA_SEPARATOR;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class GoalStorage {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(GoalStorage.class.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final String DEFAULT_GOAL_LIST_PATH \u003d \"goalList.txt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private final String goalListPath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public GoalStorage() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this(DEFAULT_GOAL_LIST_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public GoalStorage(String goalListPath) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalListPath \u003d goalListPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "        File goalListFile \u003d new File(goalListPath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!goalListFile.exists()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            boolean isFileExists \u003d goalListFile.createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "            LOGGER.fine(\"Goal list file created: \" + goalListPath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Loads the user\u0027s goals from a file and returns an ArrayList of Goal objects."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @return an ArrayList of Goal objects"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws FileNotFoundException if the file is not found"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public ArrayList\u003cGoal\u003e loadGoalList() throws FileNotFoundException, ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hui444"
        },
        "content": "        LOGGER.fine(\"Attempting to read file: \" + goalListPath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cGoal\u003e goalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String[] arguments;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hui444"
        },
        "content": "        File goalListFile \u003d new File(goalListPath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Scanner readFile \u003d new Scanner(goalListFile);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": "        boolean hasUnrecognisedGoals \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        while (readFile.hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            line \u003d readFile.nextLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            arguments \u003d line.split(COMMA_SEPARATOR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (isValidGoalLine(arguments)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                goalList.add(new Goal(LocalDate.parse(arguments[0], DateManager.formatter),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                        arguments[1], arguments[2], arguments[3]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hui444"
        },
        "content": "                LOGGER.fine(\"Invalid entry found in goal list file.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hui444"
        },
        "content": "                hasUnrecognisedGoals \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (hasUnrecognisedGoals) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Unrecognised goals were not added to your goal list!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Goal list file read successfully.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return goalList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Writes the goal list data into a file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @param goalList the goal list to write to the file"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws IOException if an I/O error has occurred"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void writeGoalList(GoalList goalList, FoodList foodList, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hui444"
        },
        "content": "                              User user) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hui444"
        },
        "content": "        LOGGER.fine(\"Attempting to write to file: \" + goalListPath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hui444"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(goalListPath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Goal goal;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assert user !\u003d null : \"user cannot be null!\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assert goalList !\u003d null : \"goalList cannot be null!\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assert foodList !\u003d null : \"foodList cannot be null!\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assert exerciseList !\u003d null : \"exerciseList cannot be null!\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        for (int i \u003d 0; i \u003c goalList.getSize(); i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            goal \u003d goalList.getGoal(i);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hui444"
        },
        "content": "            fileWriter.write(goal.getCreatedDate()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    + COMMA_SEPARATOR + goal.getGoalType()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    + COMMA_SEPARATOR + goal.getStatus(goal,foodList, exerciseList, user)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                    + COMMA_SEPARATOR + goal.getDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Goal list file written successfully.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static boolean isValidGoalLine(String[] arguments) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hui444"
        },
        "content": "        boolean isValidGoalType \u003d false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hui444"
        },
        "content": "        boolean isValidStatus \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (arguments.length !\u003d 4) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hui444"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hui444"
        },
        "content": "            String createdDate \u003d arguments[0];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hui444"
        },
        "content": "            String goalType \u003d arguments[1];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hui444"
        },
        "content": "            String goalStatus \u003d arguments[2];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hui444"
        },
        "content": "            String goalDescription \u003d arguments[3];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hui444"
        },
        "content": "            //Check if goal type is valid (E or F)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (goalType.equals(SYMBOL_EXERCISE) || goalType.equals(SYMBOL_FOOD)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hui444"
        },
        "content": "                isValidGoalType \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hui444"
        },
        "content": "            //Check if status is valid (Y or N or 0.0 \u003c status \u003c 100.0)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (goalStatus.equals(SYMBOL_YES) || goalStatus.equals(SYMBOL_NO)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hui444"
        },
        "content": "                isValidStatus \u003d isValidSmartGoalCalorie(goalDescription);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else if (Double.parseDouble(goalStatus.substring(0, arguments[2].length() - 1)) \u003e\u003d 0.0"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    \u0026\u0026 Double.parseDouble(goalStatus.substring(0, arguments[2].length() - 1)) \u003c\u003d 100) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hui444"
        },
        "content": "                isValidStatus \u003d isValidSmartGoalCalorie(goalDescription);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hui444"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(createdDate, DateManager.formatter);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return (isValidGoalType \u0026\u0026 isValidStatus);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (NumberFormatException | DateTimeException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static boolean isValidSmartGoalCalorie(String goalDescription) throws NumberFormatException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (goalDescription.contains(KEYWORD_FOOD_LESS_THAN)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hui444"
        },
        "content": "                || goalDescription.contains(KEYWORD_EXERCISE_LESS_THAN)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return !((Integer.parseInt(goalDescription.split(SPLIT_SPACE)[3]) \u003e\u003d 100000"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    || Integer.parseInt(goalDescription.split(SPLIT_SPACE)[3]) \u003c\u003d 0));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } else if (goalDescription.contains(KEYWORD_FOOD_MORE_THAN)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hui444"
        },
        "content": "                || goalDescription.contains(KEYWORD_EXERCISE_MORE_THAN)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return !((Integer.parseInt(goalDescription.split(SPLIT_SPACE)[3]) \u003e\u003d 100000)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    || (Integer.parseInt(goalDescription.split(SPLIT_SPACE)[3]) \u003c 0)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    || ((goalDescription.split(SPLIT_SPACE)[3]).equals(\"-0\")));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 98,
      "jerichochua": 64
    }
  },
  {
    "path": "src/main/java/fitr/storage/StandardExerciseStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.StandardExercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.ResourceManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.StandardExerciseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "public class StandardExerciseStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String DEFAULT_UPPER_BODY_FILEPATH \u003d \"upperBodyList.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String DEFAULT_LOWER_BODY_FILEPATH \u003d \"lowerBodyList.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String DEFAULT_AEROBIC_FILEPATH \u003d \"aerobicList.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String DEFAULT_STRETCH_FILEPATH \u003d \"stretchList.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private static final String COMMA_SEPARATOR \u003d \", \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"StandardExerciseStorage\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public StandardExerciseStorage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public StandardExerciseList loadUpperBodyList() throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        StandardExerciseList upperBodyList \u003d new StandardExerciseList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        upperBodyList \u003d readToList(DEFAULT_UPPER_BODY_FILEPATH, upperBodyList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"UpperBodyList loaded.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return upperBodyList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public StandardExerciseList loadLowerBodyList() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        StandardExerciseList lowerBodyList \u003d new StandardExerciseList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        lowerBodyList \u003d readToList(DEFAULT_LOWER_BODY_FILEPATH, lowerBodyList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"LowerBodyList loaded.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return lowerBodyList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public StandardExerciseList loadAerobicList() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        StandardExerciseList aerobicList \u003d new StandardExerciseList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        aerobicList \u003d readToList(DEFAULT_AEROBIC_FILEPATH, aerobicList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"AerobicList loaded.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return aerobicList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public StandardExerciseList loadStretchList() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        StandardExerciseList stretchList \u003d new StandardExerciseList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        stretchList \u003d readToList(DEFAULT_STRETCH_FILEPATH, stretchList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"StretchList loaded.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return stretchList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private StandardExerciseList readToList(String filePath, StandardExerciseList exerciseList) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(ResourceManager.loadResource(filePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String[] arguments;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        double metValue;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        ArrayList\u003cDouble\u003e duration;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        ArrayList\u003cInteger\u003e sets;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            line \u003d line.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            arguments \u003d line.split(COMMA_SEPARATOR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            name \u003d arguments[0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            metValue \u003d Double.parseDouble(arguments[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            duration \u003d new ArrayList\u003cDouble\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            duration.add(Double.parseDouble(arguments[2]));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            duration.add(Double.parseDouble(arguments[3]));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            duration.add(Double.parseDouble(arguments[4]));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            sets \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            sets.add(Integer.parseInt(arguments[5]));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            sets.add(Integer.parseInt(arguments[6]));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            sets.add(Integer.parseInt(arguments[7]));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            StandardExercise exercise \u003d new StandardExercise(name, metValue, duration, sets);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            exerciseList.addExercise(exercise);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 5,
      "jerichochua": 19,
      "gohsonghan98": 54
    }
  },
  {
    "path": "src/main/java/fitr/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.goal.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.GoalList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    protected static final String COMMA_SEPARATOR \u003d \",\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final ExerciseStorage exerciseStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final FoodStorage foodStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final GoalStorage goalStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final TipStorage tipStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final UserStorage userStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public StorageManager() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseStorage \u003d new ExerciseStorage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodStorage \u003d new FoodStorage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        goalStorage \u003d new GoalStorage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        tipStorage \u003d new TipStorage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        userStorage \u003d new UserStorage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cExercise\u003e loadExerciseList() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            exerciseStorage.writeExerciseList(new ExerciseList(exerciseStorage.loadExerciseList()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return exerciseStorage.loadExerciseList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (DateTimeParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Error: Invalid exercise file - new exercise list created!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            exerciseStorage.writeExerciseList(new ExerciseList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void writeExerciseList(ExerciseList exerciseList) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseStorage.writeExerciseList(exerciseList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cFood\u003e loadFoodList() throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            foodStorage.writeFoodList(new FoodList(foodStorage.loadFoodList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return foodStorage.loadFoodList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (DateTimeParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Error: Invalid food file - new food list created!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            foodStorage.writeFoodList(new FoodList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void writeFoodList(FoodList foodList) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodStorage.writeFoodList(foodList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public User loadUserProfile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return userStorage.loadUserProfile();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Error: Invalid user file - creating a new user!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new User();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void writeUserProfile(User user) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        userStorage.writeUserProfile(user);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public ArrayList\u003cGoal\u003e loadGoalList(FoodList foodList, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hui444"
        },
        "content": "                                        User user) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hui444"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hui444"
        },
        "content": "            goalStorage.writeGoalList(new GoalList(goalStorage.loadGoalList()), foodList, exerciseList, user);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return goalStorage.loadGoalList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Error: Invalid goal file - new goal list created!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hui444"
        },
        "content": "            goalStorage.writeGoalList(new GoalList(), foodList, exerciseList, user);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void writeGoalList(GoalList goalList, FoodList foodList, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hui444"
        },
        "content": "                              User user) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalStorage.writeGoalList(goalList, foodList, exerciseList, user);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cString\u003e loadTipList() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return tipStorage.loadTipList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 12,
      "jerichochua": 85
    }
  },
  {
    "path": "src/main/java/fitr/storage/TipStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.ResourceManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class TipStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(TipStorage.class.getName());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String TIP_LIST_PATH \u003d \"tips.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Loads the tips from a file and returns an ArrayList of String tips."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @return an ArrayList of String tips"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws IOException if an I/O error has occurred"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cString\u003e loadTipList() throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to read file: \" + TIP_LIST_PATH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cString\u003e tipList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(ResourceManager.loadResource(TIP_LIST_PATH));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            tipList.add(line);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Tip list file written successfully.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return tipList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 33
    }
  },
  {
    "path": "src/main/java/fitr/storage/UserStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.storage.StorageManager.COMMA_SEPARATOR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class UserStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(UserStorage.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String USER_PROFILE_PATH \u003d \"userProfile.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public UserStorage() throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        File userProfile \u003d new File(USER_PROFILE_PATH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!userProfile.exists()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            boolean isFileExists \u003d userProfile.createNewFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LOGGER.fine(\"User profile created: \" + USER_PROFILE_PATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Reads the user\u0027s data from the text file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @return an User object with data from the text file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws FileNotFoundException if the file is not found"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public User loadUserProfile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to read file: \" + USER_PROFILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        File file \u003d new File(USER_PROFILE_PATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Scanner readFile \u003d new Scanner(file);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            line \u003d readFile.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LOGGER.fine(\"New user created.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new User();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String[] arguments \u003d line.split(COMMA_SEPARATOR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String gender;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        int age;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        double height;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        double weight;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        int userFitnessLevel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (isValidEntry(arguments)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            name \u003d arguments[0];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            gender \u003d arguments[1];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            age \u003d Integer.parseInt(arguments[2]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            height \u003d Double.parseDouble(arguments[3]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            weight \u003d Double.parseDouble(arguments[4]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            userFitnessLevel \u003d Integer.parseInt(arguments[5]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LOGGER.fine(\"Invalid data found in user profile, new user created.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Error: Invalid user file - creating a new user!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new User();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"User profile file read successfully.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return new User(name, age, height, weight, gender, userFitnessLevel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Writes the user\u0027s data into the text file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @param user the user to load the file into"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws IOException if an I/O error has occurred"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void writeUserProfile(User user) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assert user !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to write to file: \" + USER_PROFILE_PATH);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FileWriter file \u003d new FileWriter(USER_PROFILE_PATH);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        file.write(user.getName()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                + COMMA_SEPARATOR + user.getGender()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                + COMMA_SEPARATOR + user.getAge()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                + COMMA_SEPARATOR + user.getHeight()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                + COMMA_SEPARATOR + user.getWeight()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                + COMMA_SEPARATOR + user.getFitnessLevel() + System.lineSeparator());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"User profile file written successfully.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private boolean isValidEntry(String[] arguments) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (arguments.length !\u003d 6) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String name \u003d arguments[0];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (name.isBlank()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String gender \u003d arguments[1];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!gender.equals(\"Male\") \u0026\u0026 !gender.equals(\"Female\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            int age \u003d Integer.parseInt(arguments[2]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            if (age \u003c 1 || age \u003e 130) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            double height \u003d Double.parseDouble(arguments[3]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            if (height \u003c 0.50 || height \u003e 4.00) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            double weight \u003d Double.parseDouble(arguments[4]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            if (weight \u003c 2.0 || weight \u003e 1000.00) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            int fitnessLevel \u003d Integer.parseInt(arguments[5]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            if (fitnessLevel !\u003d 0 \u0026\u0026 fitnessLevel !\u003d 1 \u0026\u0026 fitnessLevel !\u003d 2) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 135,
      "gohsonghan98": 3
    }
  },
  {
    "path": "src/main/java/fitr/tip/TipManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.tip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.list.TipList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class TipManager {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    private final TipList tips;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public TipManager(TipList tips) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        this.tips \u003d tips;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        int totalNumberOfTips \u003d 99;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Ui.printMessageInYellow(\"Tip of the day!\" + System.lineSeparator() + tips.getTip(totalNumberOfTips));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 1,
      "dmbclub": 17
    }
  },
  {
    "path": "src/main/java/fitr/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_BYE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_CLEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_COMPLETE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_DELETE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_EDIT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_EXERCISE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_FOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_GOAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_HELP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_RECOMMEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_BMI;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_PROFILE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_SUMMARY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.WORD_AEROBIC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.WORD_LOWERBODY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.WORD_STRETCH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.WORD_UPPERBODY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.COLOURED_FORMAT_STRING;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.DASH;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_COMMAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_CLEAR_EXERCISE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_CLEAR_FOOD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_CLEAR_GOAL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_DELETE_EXERCISE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_DELETE_FOOD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_DELETE_GOAL;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_AGE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_EXERCISE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_FITNESS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_FOOD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_GENDER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_GOAL;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_HEIGHT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_NAME;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_WEIGHT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_EXERCISE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_EXERCISE_GOAL;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_FOOD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_FOOD_GOAL;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_MARK_GOAL_AS_COMPLETE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_SMART_EXERCISE_GOAL;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_SMART_FOOD_GOAL;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_VIEW_BMI;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_VIEW_EXERCISE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_VIEW_EXERCISE_ON_SPECIFIED_DATE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_VIEW_FOOD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_VIEW_FOOD_ON_SPECIFIED_DATE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_VIEW_GOAL;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_VIEW_PROFILE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_VIEW_SUMMARY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FORMAT_DATE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.FORMAT_VIEW_SUMMARY_ON_SPECIFIED_DATE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.MESSAGE_BYE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.MESSAGE_GREET;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.MESSAGE_SUGGEST_QUESTION;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.PHRASE_EXTRA_PARAMETERS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.PHRASE_SMART_EXERCISE_GOAL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.PHRASE_SMART_FOOD_GOAL;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "/**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sixletters"
        },
        "content": " * Prints messages."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hui444"
        },
        "content": " */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final String HELP_SPACER \u003d \"%-90s%s%n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final String VIEW_SPACER \u003d \"%-30s%s%n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final String GOAL_SPACER \u003d \"%-70s%s%n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final String DELETE_SPACER \u003d \"%-60s%s%n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final String RED_COLOUR \u003d \"\\033[0;31m\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String YELLOW_COLOUR \u003d \"\\033[0;93m\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String BLUE_COLOUR \u003d \"\\033[0;34m\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final String RESET_COLOUR \u003d \"\\033[0m\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static String read() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static void printCustomMessage(String message) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hui444"
        },
        "content": "    //Prints message in red"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static void printCustomError(String errorMessage) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.println(RED_COLOUR + errorMessage + RESET_COLOUR);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hui444"
        },
        "content": "    //Prints message in yellow"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static void printMessageInYellow(String message) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.println(YELLOW_COLOUR + message + RESET_COLOUR);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hui444"
        },
        "content": "    //Prints message in blue"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static void printMessageInBlue(String message) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.println(BLUE_COLOUR + message + RESET_COLOUR);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static void printGreetingMessage() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(MESSAGE_GREET);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static void printSuggestQuestion() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(MESSAGE_SUGGEST_QUESTION);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static void printExitMessage() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(MESSAGE_BYE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static void printHelpMessage() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(\"These are commands Fitr understands:\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        printCustomMessage(\"Do note that:\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        printCustomMessage(\" * On the left shows the command format while the right shows its usage\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        printCustomMessage(\" * Words formatted as UPPER_CASE are to be supplied by you\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        printCustomMessage(\" * Items in square brackets are [optional]\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        printCustomMessage(\" * Items in brackets are (additional information)\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(DASH.repeat(64) + \"Profile\" + DASH.repeat(65));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_VIEW_PROFILE, \"View your profile information\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_VIEW_BMI, \"View your BMI\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_EDIT_NAME, \"Edit your profile name\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_EDIT_AGE, \"Edit your profile age\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_EDIT_GENDER, \"Edit your profile gender\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_EDIT_HEIGHT, \"Edit your profile height\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_EDIT_WEIGHT, \"Edit your profile weight\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_EDIT_FITNESS, \"Edit your profile fitness\\n\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(DASH.repeat(66) + \"Food\" + DASH.repeat(66));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_FOOD, \"Add a food entry\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_VIEW_FOOD, \"View your food entries\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_VIEW_FOOD_ON_SPECIFIED_DATE,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                \"View your food entries on a specified date\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_EDIT_FOOD, \"Edit your previous food entry\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_DELETE_FOOD, \"Delete a food entry\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_CLEAR_FOOD, \"Clear all your food entries\\n\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(DASH.repeat(64) + \"Exercise\" + DASH.repeat(64));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_RECOMMEND, \"Get a recommended workout\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_RECOMMEND + \" \" + WORD_AEROBIC, \"Get a recommended aerobic workout\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_RECOMMEND + \" \" + WORD_UPPERBODY, \"Get a recommended upperbody workout\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_RECOMMEND + \" \" + WORD_LOWERBODY, \"Get a recommended lowerbody workout\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_RECOMMEND + \" \" + WORD_STRETCH, \"Get a recommended stretch workout\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_EXERCISE, \"Add an exercise entry\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_VIEW_EXERCISE, \"View your exercise entries\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_VIEW_EXERCISE_ON_SPECIFIED_DATE,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                \"View your exercise entries on a specified date\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_EDIT_EXERCISE, \"Edit your previous exercise entry\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_DELETE_EXERCISE, \"Delete an exercise entry\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_CLEAR_EXERCISE, \"Clear all your exercise entries\\n\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(DASH.repeat(66) + \"Goal\" + DASH.repeat(66));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_FOOD_GOAL, \"Add a food goal\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_SMART_FOOD_GOAL, \"Add a smart food goal\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_EXERCISE_GOAL, \"Add an exercise goal\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_SMART_EXERCISE_GOAL, \"Add a smart exercise goal\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_VIEW_GOAL, \"View your goals\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_EDIT_GOAL, \"Edit your previous goal entry\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_MARK_GOAL_AS_COMPLETE, \"Mark your goal entry as complete\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_DELETE_GOAL, \"Delete a goal entry\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_CLEAR_GOAL, \"Clear all your goal entries\\n\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(DASH.repeat(65) + \"Other\" + DASH.repeat(66));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_HELP, \"Display available commands\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_VIEW_SUMMARY, \"View calorie summary\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, FORMAT_VIEW_SUMMARY_ON_SPECIFIED_DATE,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                \"View calorie summary on a specified date\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_CLEAR, \"Clear all food, exercise and goal entries\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_BYE, \"Exit the application\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static void printFormatError(String command) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hui444"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case COMMAND_FOOD:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomError(ERROR_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomMessage(COLOURED_FORMAT_STRING + FORMAT_FOOD);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case COMMAND_EXERCISE:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomError(ERROR_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomMessage(COLOURED_FORMAT_STRING + FORMAT_EXERCISE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case COMMAND_GOAL:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomError(ERROR_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(GOAL_SPACER, \"\u003cFORMAT\u003e\", \"\u003cUSAGE\u003e\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(GOAL_SPACER, FORMAT_FOOD_GOAL, \"Add a food goal\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(GOAL_SPACER, FORMAT_SMART_FOOD_GOAL, \"Add a smart food goal\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(GOAL_SPACER, FORMAT_EXERCISE_GOAL, \"Add an exercise goal\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(GOAL_SPACER, FORMAT_SMART_EXERCISE_GOAL, \"Add a smart exercise goal\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        case COMMAND_VIEW:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomError(ERROR_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomMessage(COLOURED_FORMAT_STRING + \"view \u003cTYPE\u003e\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(VIEW_SPACER, \"\u003cTYPE\u003e\", \"\u003cDESCRIPTION\u003e\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(VIEW_SPACER, COMMAND_VIEW_PROFILE, \"View your profile\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(VIEW_SPACER, COMMAND_VIEW_BMI, \"View your BMI\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(VIEW_SPACER, COMMAND_FOOD, \"View food entries\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            System.out.printf(VIEW_SPACER, COMMAND_FOOD + \" \" + FORMAT_DATE, \"View food entries on specific date\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(VIEW_SPACER, COMMAND_EXERCISE, \"View exercise entries\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            System.out.printf(VIEW_SPACER, COMMAND_EXERCISE + \" \" + FORMAT_DATE, \"View exercise entries on specific \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    + \"date\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(VIEW_SPACER, COMMAND_VIEW_SUMMARY, \"View calorie summary\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(VIEW_SPACER, COMMAND_GOAL, \"View your food and exercise goals\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case PHRASE_EXTRA_PARAMETERS:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Please remove the extra parameters!\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case COMMAND_DELETE:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomError(ERROR_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(DELETE_SPACER, \"\u003cFORMAT\u003e\", \"\u003cUSAGE\u003e\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(DELETE_SPACER, FORMAT_DELETE_FOOD, \"Delete a food entry\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(DELETE_SPACER, FORMAT_DELETE_EXERCISE, \"Delete an exercise entry\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(DELETE_SPACER, FORMAT_DELETE_GOAL, \"Delete a goal entry\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case COMMAND_EDIT:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomError(ERROR_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(HELP_SPACER, \"\u003cFORMAT\u003e\", \"\u003cUSAGE\u003e\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(HELP_SPACER, FORMAT_EDIT_NAME, \"Edit your profile name\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(HELP_SPACER, FORMAT_EDIT_AGE, \"Edit your profile age\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(HELP_SPACER, FORMAT_EDIT_GENDER, \"Edit your profile gender\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(HELP_SPACER, FORMAT_EDIT_HEIGHT, \"Edit your profile height\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(HELP_SPACER, FORMAT_EDIT_WEIGHT, \"Edit your profile weight\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(HELP_SPACER, FORMAT_EDIT_FITNESS, \"Edit your profile fitness\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(HELP_SPACER, FORMAT_EDIT_FOOD, \"Edit your previous food entry\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(HELP_SPACER, FORMAT_EDIT_EXERCISE, \"Edit your previous exercise entry\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hui444"
        },
        "content": "            System.out.printf(HELP_SPACER, FORMAT_EDIT_GOAL, \"Edit your previous goal entry\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case PHRASE_SMART_FOOD_GOAL:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomError(ERROR_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomMessage(COLOURED_FORMAT_STRING + FORMAT_SMART_FOOD_GOAL);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case PHRASE_SMART_EXERCISE_GOAL:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomError(ERROR_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomMessage(COLOURED_FORMAT_STRING + FORMAT_SMART_EXERCISE_GOAL);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case COMMAND_COMPLETE:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomError(ERROR_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomMessage(COLOURED_FORMAT_STRING + FORMAT_MARK_GOAL_AS_COMPLETE);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hui444"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printInvalidCommandError();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static void printInvalidCommandError() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomError(ERROR_INVALID_COMMAND);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(\"Use \u0027help\u0027 to see the list of commands Fitr understands.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 190,
      "sixletters": 4,
      "jerichochua": 51,
      "dmbclub": 4,
      "gohsonghan98": 6
    }
  },
  {
    "path": "src/main/java/fitr/user/User.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.command.ViewCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.storage.UserStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.USER_SETUP_GREET;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.INPUT_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.INPUT_AGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.INPUT_HEIGHT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.INPUT_WEIGHT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.INPUT_GENDER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.SETUP_COMPLETE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_AGE_INPUT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_GENDER_INPUT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_HEIGHT_INPUT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_WEIGHT_INPUT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_FITNESS_INPUT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.NAME_OUTPUT_HEADER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.AGE_OUTPUT_HEADER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.GENDER_OUTPUT_HEADER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.HEIGHT_OUTPUT_HEADER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.WEIGHT_OUTPUT_HEADER;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FITNESS_OUTPUT_HEADER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.LINE_BREAK;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.MALE_SYMBOL;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FEMALE_SYMBOL;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.MALE_STRING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FEMALE_STRING;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FIT_STRING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.UNFIT_STRING;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.NORMAL_STRING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.NULL_STRING;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.INPUT_FITNESS_LEVEL;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_AGE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_HEIGHT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_WEIGHT;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_GENDER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_FITNESS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.NAME_FORMAT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_NAME;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.RANGE_EDIT_HEIGHT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.RANGE_EDIT_WEIGHT;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.RANGE_EDIT_AGE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " * User class keeps track of user\u0027s personal information."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private double height;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private double weight;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private int userFitnessLevel; // 0 for unfit; 1 for normal; 2 for Fit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"User\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public User() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public User(String name, int age, double height, double weight, String gender, int userFitnessLevel) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.userFitnessLevel \u003d userFitnessLevel;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "     * Setup configures user profile for first time use."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(USER_SETUP_GREET);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(INPUT_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"Setting up profile name.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setName(Ui.read().trim(), false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(INPUT_AGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"Setting up profile age.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setupAge(null, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(INPUT_HEIGHT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"Setting up profile height.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setupHeight(null, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(INPUT_WEIGHT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"Setting up profile weight.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setupWeight(null, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(INPUT_GENDER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"Setting up profile gender.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setupGender(null, false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(INPUT_FITNESS_LEVEL);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"Setting up profile fitness level.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setupFitnessLevel(null, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(SETUP_COMPLETE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        LOGGER.fine(\"User setup completed.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public double getHeight() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setName(String name, Boolean isEdit) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (!name.matches(\"^[a-zA-z ]+$\") || name.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomError(NAME_FORMAT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            if (isEdit) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                Ui.printCustomError(\"FORMAT: \" + FORMAT_EDIT_NAME);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(INPUT_NAME);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            name \u003d Ui.read().trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setHeight(double height) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setWeight(double weight) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setGender(String gender) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setFitnessLevel(int userFitnessLevel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.userFitnessLevel \u003d userFitnessLevel;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setupAge(String argument, Boolean isEdit) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int ageInput \u003d 0;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (ageInput \u003c 1 || ageInput \u003e 130) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (isEdit) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    ageInput \u003d Integer.parseInt(argument.trim());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    ageInput \u003d Integer.parseInt(Ui.read().trim());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (ageInput \u003c 1 || ageInput \u003e 130) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(ERROR_INVALID_AGE_INPUT);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    if (isEdit) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        Ui.printCustomError(\"FORMAT: \" + FORMAT_EDIT_AGE + LINE_BREAK + RANGE_EDIT_AGE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(INPUT_AGE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printCustomError(RANGE_EDIT_AGE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomError(ERROR_INVALID_AGE_INPUT);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (isEdit) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printCustomError(\"FORMAT: \" + FORMAT_EDIT_AGE + LINE_BREAK + RANGE_EDIT_AGE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                Ui.printCustomError(RANGE_EDIT_AGE);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(INPUT_AGE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                ageInput \u003d 0;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setAge(ageInput);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setupHeight(String argument, Boolean isEdit) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        double heightInput \u003d 0.00;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        // Height (in m)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (heightInput \u003c 0.50 || heightInput \u003e 4.00) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (isEdit) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    heightInput \u003d Double.parseDouble(String.format(\"%.2f\", Double.parseDouble(argument.trim())));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    heightInput \u003d Double.parseDouble(String.format(\"%.2f\", Double.parseDouble(Ui.read().trim())));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (heightInput \u003c 0.50 || heightInput \u003e 4.00) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(ERROR_INVALID_HEIGHT_INPUT);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    if (isEdit) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        Ui.printCustomError(\"FORMAT: \" + FORMAT_EDIT_HEIGHT + LINE_BREAK + RANGE_EDIT_HEIGHT);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printCustomError(RANGE_EDIT_HEIGHT);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(INPUT_HEIGHT);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomError(ERROR_INVALID_HEIGHT_INPUT);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (isEdit) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printCustomError(\"FORMAT: \" + FORMAT_EDIT_HEIGHT + LINE_BREAK + RANGE_EDIT_HEIGHT);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                Ui.printCustomError(RANGE_EDIT_HEIGHT);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(INPUT_HEIGHT);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                heightInput \u003d 0.00;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (isEdit) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setHeight(heightInput);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setupWeight(String argument, Boolean isEdit) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        // Weight (in kg)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        double weightInput \u003d 0.00;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (weightInput \u003c 2.00 || weightInput \u003e 1000.00) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (isEdit) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    weightInput \u003d Double.parseDouble(String.format(\"%.2f\", Double.parseDouble(argument.trim())));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    weightInput \u003d Double.parseDouble(String.format(\"%.2f\", Double.parseDouble(Ui.read().trim())));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (weightInput \u003c 2.00 || weightInput \u003e 1000.00) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(ERROR_INVALID_WEIGHT_INPUT);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    if (isEdit) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        Ui.printCustomError(\"FORMAT: \" + FORMAT_EDIT_WEIGHT + LINE_BREAK + RANGE_EDIT_WEIGHT);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printCustomError(RANGE_EDIT_WEIGHT);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(INPUT_WEIGHT);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomError(ERROR_INVALID_WEIGHT_INPUT);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (isEdit) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printCustomError(\"FORMAT: \" + FORMAT_EDIT_WEIGHT + LINE_BREAK + RANGE_EDIT_WEIGHT);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                Ui.printCustomError(RANGE_EDIT_WEIGHT);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(INPUT_WEIGHT);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                weightInput \u003d 0.00;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setWeight(weightInput);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setupGender(String argument, Boolean isEdit) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String genderInput;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (isEdit) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            genderInput \u003d argument.trim();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            genderInput \u003d Ui.read().trim();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (!genderInput.equalsIgnoreCase(\"m\") \u0026\u0026 !genderInput.equalsIgnoreCase(\"f\")) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_INVALID_GENDER_INPUT);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            if (isEdit) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                Ui.printCustomError(\"FORMAT: \" + FORMAT_EDIT_GENDER);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomMessage(INPUT_GENDER);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            genderInput \u003d Ui.read().trim();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (genderInput.equalsIgnoreCase(MALE_SYMBOL)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            setGender(MALE_STRING);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (genderInput.equalsIgnoreCase(FEMALE_SYMBOL)) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            setGender(FEMALE_STRING);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setupFitnessLevel(String argument, Boolean isEdit) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int fitnessLevelInput \u003d -1;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String input \u003d null;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (fitnessLevelInput !\u003d 0 \u0026\u0026 fitnessLevelInput !\u003d 1 \u0026\u0026 fitnessLevelInput !\u003d 2) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (isEdit) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    // Only single digit input allowed"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    if (argument.trim().length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                        fitnessLevelInput \u003d Integer.parseInt(argument.trim());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    input \u003d Ui.read().trim();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    // Only single digit input allowed"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    if (input.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        fitnessLevelInput \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (fitnessLevelInput !\u003d 0 \u0026\u0026 fitnessLevelInput !\u003d 1 \u0026\u0026 fitnessLevelInput !\u003d 2) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printCustomError(ERROR_INVALID_FITNESS_INPUT);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    if (isEdit) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        Ui.printCustomError(\"FORMAT: \" + FORMAT_EDIT_FITNESS);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printCustomMessage(INPUT_FITNESS_LEVEL);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomError(ERROR_INVALID_FITNESS_INPUT);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (isEdit) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printCustomError(\"FORMAT: \" + FORMAT_EDIT_FITNESS);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(INPUT_FITNESS_LEVEL);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                fitnessLevelInput \u003d -1;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setFitnessLevel(fitnessLevelInput);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    // Returns user profile"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return NAME_OUTPUT_HEADER + getName() + LINE_BREAK + AGE_OUTPUT_HEADER + getAge() + LINE_BREAK"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                + GENDER_OUTPUT_HEADER + getGender() + LINE_BREAK + HEIGHT_OUTPUT_HEADER"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                + String.format(\"%.2f\", getHeight()) + LINE_BREAK + WEIGHT_OUTPUT_HEADER"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                + String.format(\"%.2f\", getWeight()) + LINE_BREAK + FITNESS_OUTPUT_HEADER"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                + getUserFitnessLevelString();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public Calorie calculateCalorieBurnt(ExerciseList exerciseList, String date) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int totalCalorieBurnt \u003d 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        ExerciseList exerciseListByDate \u003d ViewCommand.viewExerciseByDate(exerciseList, date, false);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (index \u003c exerciseListByDate.getSize()) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            totalCalorieBurnt +\u003d exerciseListByDate.getExercise(index).getCalories();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return new Calorie(totalCalorieBurnt);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public Calorie calculateCalorieConsumed(FoodList foodList, String date) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int totalCalorieConsumed \u003d 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        FoodList foodListByDate \u003d ViewCommand.viewFoodByDate(foodList, date, false);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (index \u003c foodListByDate.getSize()) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            totalCalorieConsumed +\u003d foodListByDate.getFood(index).getCalories();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return new Calorie(totalCalorieConsumed);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public Calorie calculateCalorie(FoodList foodList, ExerciseList exerciseList, String date) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int totalCalories;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Calorie totalConsumed \u003d calculateCalorieConsumed(foodList, date);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Calorie totalBurnt \u003d calculateCalorieBurnt(exerciseList, date);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        totalCalories \u003d totalConsumed.get() - totalBurnt.get();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return new Calorie(totalCalories);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public double getBmi() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return weight / ((height) * (height));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public int getFitnessLevel() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return userFitnessLevel;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public String getUserFitnessLevelString() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (userFitnessLevel \u003d\u003d 0) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            return UNFIT_STRING;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (userFitnessLevel \u003d\u003d 1) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            return NORMAL_STRING;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (userFitnessLevel \u003d\u003d 2) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            return FIT_STRING;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            return NULL_STRING;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 16,
      "sixletters": 4,
      "jerichochua": 5,
      "dmbclub": 9,
      "gohsonghan98": 345
    }
  },
  {
    "path": "src/main/resources/aerobicList.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Jumping rope, 12.3, 4, 8, 10, 3, 4, 4"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Running, 7.0, 15, 25, 35, 1, 1, 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Burpees, 13.0, 0.5, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Squat Jacks, 5.0, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Mountain Climbers, 8.0, 0.5, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Sit-ups, 3.8, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Crunches, 3.8, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Leg raises, 4.5, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Bicycle Kicks, 3.8, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Bicycle crunches, 3.8, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Sprints (in minutes), 16.0, 1, 1, 1.5, 3, 4, 5"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Russian Twists, 3.8, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Flutter kicks, 4.5, 1, 1, 1, 3, 4, 5"
      }
    ],
    "authorContributionMap": {
      "sixletters": 9,
      "gohsonghan98": 4
    }
  },
  {
    "path": "src/main/resources/lowerBodyList.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Air Squats, 5.0, 1, 1.5, 2, 3, 4, 5"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Lunges, 3.8, 1, 1.5, 2, 3, 4, 5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Squat Jumps, 8.0, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Sumo Squats, 5.0, 1, 1.5, 2, 3, 4, 5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Cossack Squat, 5.0, 1, 1.5, 2, 3, 4, 5"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Static Chair Pose, 3.8, 1, 1.5, 2, 3, 4, 5"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Tuck Jump, 8.0, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Jumping Squat, 8.0, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Reverse lunge, 3.8, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Donkey Kick, 5.0, 1, 1.5, 2, 3, 4, 5"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Side Lunges, 3.8, 1, 1.5, 2, 3, 4, 5"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Step ups, 4.0, 1, 1.5, 2, 3, 4, 5"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Side Lying Leg lifts, 5.0, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Calf Raises, 3.8, 1, 1, 1, 3, 4, 5"
      }
    ],
    "authorContributionMap": {
      "sixletters": 11,
      "gohsonghan98": 3
    }
  },
  {
    "path": "src/main/resources/stretchList.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Head rotation, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Cobra stretch, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Mountain stretch, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Calf stretch, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Thigh stretch, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Spinal rotations, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Quad stretch, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Arm circles, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      }
    ],
    "authorContributionMap": {
      "gohsonghan98": 8
    }
  },
  {
    "path": "src/main/resources/tips.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Think about how the particular exercise is making you feel. If something doesn\u0027t feel right, stop immediately and seek medical advice."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Try slow stretches and go through the motions of your sport or activity before starting. Cool down with slow stretching."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Have at least one recovery day each week to rest. If you are experiencing pain, rest until the pain has gone."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Try other sports and exercises to reduce the risk of overtraining."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If a joint is prone to injury, consider strapping or taping it before exercising. Even better, see an exercise physiologist or physiotherapist to obtain a program to strengthen the injured area and get advice on proper taping techniques."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "You can lose around one and a half litres of fluid for every hour of exercise; so drink water before, during and after a session."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Take it easier in hot weather and wear clothing and sunscreen to protect yourself from the elements."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Try to get the technique right from the beginning, to ensure you are using your muscles correctly."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Make sure your shoes and equipment fit properly and are right for the activity. Look after your equipment and check it regularly for safety."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Take a friend or your dog, stick to well-lit areas and wear bright or light-reflective clothing so drivers can see you."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "People who don\u0027t regularly exercise may lose up to 80% of their muscle strength by age 65."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Regular exercise helps lower blood pressure and cholesterol levels. Two major risk factors for heart disease."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Improve your mental health and mood with an exercise routine!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercise keeps your metabolism elevated even after your workout, and continues to burn more calories even at rest."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "The average person walks about 7,500 steps per day. If you stick to that average step count and live to be 80 years old, you\u0027ll walk about 110,000 miles in your lifetime."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "You use 200 muscles to take a single step forward."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "The pressure on your feet is equal to about 3-4 times your body weight with each step while running."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Your heart is the hardest working muscle in your body. It beats approximately 100,000 times per day, pumping almost 2,000 gallons of blood."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "During physical activity, you breathe more to keep oxygen levels in your blood at appropriate levels."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "The knee is the largest and most complex joint in your body which makes it most likely to be injured."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Fat and muscle are completely different types of tissue. Muscle cannot turn into fat."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If you can\u0027t speak a few words without taking a breath, you may be exercising too intensely."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Being dehydrated reduces exercise performance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Opposite of people who cross-train, people who do the same daily type of exercise regularly are more prone to injury."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Studies indicate that children\u0027s physical activity levels correlate closely with those of their parents."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Music improves workout performance. Listening to music while exercising can improve work out performance by 15%."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercising improves brain performance. Cardiovascular exercise helps create new brain cells. This enhances brainpower and brain activity."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Working out sharpens your memory. Exercising increases the production of cells that are responsible for learning and memory."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Running burns calories! If you run at a 10 minute per mile pace, you can burn 104.3 calories per mile."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "More muscle mass \u003d burning more fat while resting. The more muscle mass you have, the more fat your body burns while resting."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercise prevents signs of ageing. If you exercise 3 times a week for 45 minutes, you can help prevent signs of ageing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "A pound of muscle burns three times more calories than a pound of fat."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Exercising regularly helps boost your immune system. This means you\u0027ll get sick less often than people who don\u0027t exercise."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercising increases the number of endorphins that are released into your body and increases productivity."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Sweat releases dirt through your pores, which reduces acne and breakouts. Workouts improve the overall look of your skin."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercising can help ease your mind and rejuvenate your body. Working out will make you feel great and boost your confidence."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If you are someone who has trouble sleeping or staying asleep, then working out is your answer. Exercise helps to clear your head and helps you feel relaxed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If you work out on an empty stomach you can actually burn more fat."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If your goal is performance-based, you\u0027re not going to have enough energy to go all-out."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Sweating not only keeps you cool, it removes toxins from your body too."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Women simply can\u0027t build muscle in the same way as men due to the fact they have lower levels of testosterone."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "It\u0027s common knowledge that cigarettes are bad for you, but did you know that inactivity can have the same effect on your body? In terms of premature death, physical in-activity is just second to smoking!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercise is said to boost self-confidence, improve your skin condition. So it makes you look good and you genuinely feel good too."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Although there are many benefits to stretching before exercise, stretching before running actually burns 5% less calories than runners that didn\u0027t stretch!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "One misconception is the only way to get definition in your muscles is from lifting light weights at a higher rate, which isn\u0027t true, muscle definition comes from having low body fat and muscle mass."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If you train with light weights only, you\u0027re not going to build muscle. The more muscle that you build, the more fat you\u0027ll be able to burn, as well as calories."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Actually, soreness is a chemical response to inflammation from ripping your muscle fibres. If you don\u0027t feel sore, it can mean you worked out just right."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Want to lose some weight?  Be certain that no matter how hard you exercise, you can\u0027t out-train a bad diet."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "The top forms of exercise for burning calories is running and cycling.  However, your exact calorie burn will be related to your weight, the intensity and the duration."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercise improves your attractiveness!"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "A good warm-up prepares your body for the challenges of working out, and can help to reduce the risk of injury."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "No matter what your key training goals are, including strength training will help you to reach them sooner."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Carbohydrates are the primary fuel source for most workouts. "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "It\u0027s important to be hydrated to make the most of your workout because your muscles are actually around 70 percent water!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Good sleep can help to maximise the benefits of your training. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercising with friends is a great way to have fun while training and will also keep you accountable to your training schedule and fitness goals."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Protein and fats are important macronutrients for women who do strength training. "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Be mindful of your current level of ability, and include active recovery when you need additional time for your muscles to bounce back from a heavy training session. "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Rest is so important to your training schedule! A proper rest day can actually help to boost your performance for both cardio and strength training."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "When you start doing any new form of training, consistency is the key to improvement."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Music is great for motivation during your workout."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Schedule in exercise on a regular basis, and stick to your plan. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Cardio doesn\u0027t have to mean running or doing burpees - low-impact cardio is very beneficial too."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If you need a fast workout that packs a punch, grab a jump rope!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Low-intensity cardio helps to build endurance by increasing glycogen stores — the readily available energy found in the muscles. "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Cardio isn\u0027t an activity that you have to do indoors or in the gym. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Interval training can help to make cardio workouts more challenging."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Allow for 5-10 minutes of stretching after each workout. This helps your heart rate return to normal and can prevent injury. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If you aren\u0027t ready to join a gym, you can get started with strength training at home. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "When lifting weights, all parts of the movement are important."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "It\u0027s a myth that lifting weights will make you bulk up! "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If you plan to lift weights and do cardio on the same day, try to do cardio after your resistance session to get the most out of your strength training workout."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "As you work against the resistance, the hardest part of the movement, breathe out."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "A superset contains two dedicated exercises that focus on specific areas of the body."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If you reach a workout plateau and find it\u0027s difficult to increase your weights once you reach a certain point, try adding variable resistance."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Choose a yoga style that suits your needs!"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "To practice yoga at home, the first thing you should invest in is a non-slip yoga mat."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "When practising yoga, choose clothing that you feel comfortable in and that allows you to move freely. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Adding meditation to your yoga practice helps you to be present in the moment with your mind and body."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "While yoga is a valuable tool for dealing with life\u0027s struggles, it can introduce new sensations to your body."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "SWEAT includes Express workouts, and even a short walk is so much better than doing nothing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "The best thing about HIIT workouts is that you can get creative!"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Challenge yourself with AMRAP or Tabata workouts!"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "You can challenge yourself with high-intensity resistance training (HIRT), by simply adding weights (the resistance!) to your workout. "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "During summer you might enjoy changing up your workout routine by using your backyard or heading to a park. "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Your home gym may be simply a space where you can lay out a towel or mat, or you may have some other equipment."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "A highly effective at-home training routine will target ALL areas of your body."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Combining cardio and strength exercises will build your endurance."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "When you\u0027re working out at home, you might not always have the exact piece of equipment recommended for an exercise."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Gym machines are great for building a base strength when you are a fitness beginner — you can gain confidence knowing that the weight is supported by the machine."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Write down your 1RM, or personal best, for each exercise, and aim to improve these numbers."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Take the time to understand a few of the terms used in fitness that you might not have heard of before. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "If you ever feel uncertain about using a specific piece of gym equipment, don\u0027t be afraid to ask for assistance."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "When you get caught up in a new workout routine, it\u0027s easy to forget to pause and reflect on how far you\u0027ve come."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Whether you are exercising for weight loss, muscle gain or endurance, tracking your progress can make a big difference in motivation."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "It\u0027s important to keep proper form during strength exercises or weight lifting to avoid injury."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "It\u0027s important to warm up and cool down properly to prepare your muscles for the workout ahead, and to speed up recovery and avoid injury."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Even the smallest bouts of exercise can benefit your health."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "People who are physically inactive can lose as much as 3% to 5% of their muscle mass per decade after age 30."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "45 minutes of exercise 3 times a week can result in cells that show fewer signs of aging."
      }
    ],
    "authorContributionMap": {
      "jerichochua": 10,
      "dmbclub": 90
    }
  },
  {
    "path": "src/main/resources/upperBodyList.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Standard Pushups, 3.8, 0.5, 1, 1.5, 3, 4, 5"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Inclined Pullups, 3.8, 0.5, 1, 1.5, 3, 4, 5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Pullups, 3.8, 0.5, 0.5, 1, 2, 4, 5"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Triceps dips, 3.8, 0.5, 1, 1.5, 3, 4, 5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Diamond pushups, 3.8, 0.5, 1, 1.5, 3, 4, 5"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Knee Pushups, 3.8, 0.5, 1, 1.5, 3, 4, 5"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Buddha Claps, 3.5, 2, 3, 5, 3, 4, 5"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Planks to Pushup, 5.0, 0.5, 1, 1.5, 3, 4, 5"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Plank Rotations, 3.7, 0.5, 1, 1.5, 3, 4, 5"
      }
    ],
    "authorContributionMap": {
      "sixletters": 1,
      "gohsonghan98": 8
    }
  },
  {
    "path": "src/test/data/StorageTest/InvalidExerciseData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "test"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 1
    }
  },
  {
    "path": "src/test/data/StorageTest/InvalidFoodData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "test"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 1
    }
  },
  {
    "path": "src/test/data/StorageTest/InvalidGoalData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "test"
      }
    ],
    "authorContributionMap": {
      "hui444": 1
    }
  },
  {
    "path": "src/test/data/StorageTest/InvalidUserData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "test"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 1
    }
  },
  {
    "path": "src/test/data/StorageTest/ValidExerciseData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Test Exercise 1,500,22/10/2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Test Exercise 2,100,23/10/2020"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 2
    }
  },
  {
    "path": "src/test/data/StorageTest/ValidFoodData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Test Food 1,100,1,23/10/2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Test Food 2,50,5,22/10/2020"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 2
    }
  },
  {
    "path": "src/test/data/StorageTest/ValidGoalData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "23/10/2020,E,N,run more"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": "25/10/2020,F,Y,eat more"
      }
    ],
    "authorContributionMap": {
      "hui444": 2
    }
  },
  {
    "path": "src/test/data/StorageTest/ValidUserData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "TestUser,Male,20,1.7,60"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 1
    }
  },
  {
    "path": "src/test/java/fitr/calorie/CalorieTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sixletters"
        },
        "content": "package fitr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class CalorieTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void getCaloriesAsInt_validInt_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        Calorie newCalorie \u003d new Calorie(500);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(500,newCalorie.get());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 13,
      "jerichochua": 1
    }
  },
  {
    "path": "src/test/java/fitr/command/AddExerciseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class AddExerciseCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void testAddExerciseExit() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command addExercise \u003d new AddExerciseCommand(\"run /500\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertFalse(addExercise.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 2,
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/command/AddFoodCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class AddFoodCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void testAddFoodExit() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command addFood \u003d new AddFoodCommand(\"apple /100 1\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertFalse(addFood.isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/command/AddGoalCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class AddGoalCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void testAddFoodExit() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command addGoal \u003d new AddGoalCommand(\"burn 500 cal\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertFalse(addGoal.isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/command/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void clearCommandTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command clearCommand \u003d new ClearCommand(\"exercise\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertFalse(clearCommand.isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/command/CompleteGoalCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class CompleteGoalCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void completeGoalCommandTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command completeGoal \u003d new CompleteGoalCommand(\"goal 2\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertFalse(completeGoal.isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/command/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void completeGoalCommandTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command deleteCommand \u003d new DeleteCommand(\"food 1\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertFalse(deleteCommand.isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/command/EditEntryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class EditEntryCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void editEntryCommandExitTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command editEntry \u003d new EditEntryCommand(\"exercise\",\"25/10/2020 15km run /360\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertFalse(editEntry.isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/command/EditProfileCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class EditProfileCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void editProfileCommandExitTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command editProfile \u003d new EditProfileCommand(\"name\", \"James\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertFalse(editProfile.isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/command/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void exitCommandTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command exit \u003d new ExitCommand(\"bye\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertTrue(exit.isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/command/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void testHelp() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command help \u003d new HelpCommand(\"help\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertFalse(help.isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/command/InvalidCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class InvalidCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void testInvalid() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command invalid \u003d new InvalidCommand(\"haha\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertFalse(invalid.isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/command/RecommendCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class RecommendCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void exitCommandTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command recommend \u003d new RecommendCommand(\"recommend\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertFalse(recommend.isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/command/ViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.exercise.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.command.ViewCommand.viewExerciseByDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.command.ViewCommand.viewFoodByDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void viewCommandTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command view \u003d new ViewCommand(\"food\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertFalse(view.isExit());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void viewExerciseByDateTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        ExerciseList exerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.addExercise(new Exercise(\"run\", new Calorie(360), LocalDate.parse(\"26/10/2020\", formatter)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.addExercise(new Exercise(\"push ups\", new Calorie(200), LocalDate.parse(\"27/10/2020\", formatter)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList \u003d viewExerciseByDate(exerciseList, \"27/10/2020\", false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(\"push ups\", exerciseList.getExercise(0).getNameOfExercise());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void viewFoodByDateTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        FoodList foodList \u003d new FoodList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.addFood(new Food(\"apple\", new Calorie(360), LocalDate.parse(\"26/10/2020\", formatter)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.addFood(new Food(\"orange\", new Calorie(200), LocalDate.parse(\"27/10/2020\", formatter)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList \u003d viewFoodByDate(foodList, \"27/10/2020\", false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(\"orange\", foodList.getFood(0).getFoodName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 44
    }
  },
  {
    "path": "src/test/java/fitr/common/DateManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class DateManagerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void dateManagerTest_correctResult() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        LocalDate date1 \u003d getCurrentDate();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        LocalDate date2 \u003d getCurrentDate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(date1, date2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 16
    }
  },
  {
    "path": "src/test/java/fitr/common/MessagesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class MessagesTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void messagesTest_correctResult() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(\"Bye. Hope to see you again soon!\", Messages.MESSAGE_BYE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(\"What can I do for you?\", Messages.MESSAGE_SUGGEST_QUESTION);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/common/ResourceManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.common.ResourceManager.loadResource;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class ResourceManagerTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void resourceManagerTest_fail() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            loadResource(\"exerciseList.txt\"); });"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 14
    }
  },
  {
    "path": "src/test/java/fitr/exercise/ExerciseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class ExerciseTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Calorie tempCalorie \u003d new Calorie(500);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void getCaloriesBurnt_validExerciseAndCalorie_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Exercise tempExercise \u003d new Exercise(\"exercise\", tempCalorie, getCurrentDate());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(500, tempCalorie.get());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void getNameOfExercise_validExerciseAndCalorie_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Exercise tempExercise \u003d new Exercise(\"exercise\", tempCalorie, getCurrentDate());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(\"exercise\", tempExercise.getNameOfExercise());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 20,
      "jerichochua": 2,
      "dmbclub": 3
    }
  },
  {
    "path": "src/test/java/fitr/exercise/RecommenderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.exception.InvalidRecommendationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class RecommenderTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void recommenderTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Recommender recommender \u003d new Recommender();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            assertEquals(4, recommender.recommend(\"upperbody\").getSize());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            assertEquals(4, recommender.recommend(\"lowerbody\").getSize());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            assertEquals(4, recommender.recommend(\"aerobic\").getSize());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            assertEquals(4, recommender.recommend(\"stretch\").getSize());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            assertEquals(4, recommender.recommend(\"\").getSize());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (InvalidRecommendationException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            Ui.printCustomError(\"This should never happen\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void recommenderParserTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Recommender recommender \u003d new Recommender();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(0, recommender.recommendParser(\"\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(1, recommender.recommendParser(\"aerobic\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(2, recommender.recommendParser(\"upperbody\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(3, recommender.recommendParser(\"lowerbody\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(4, recommender.recommendParser(\"stretch\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(5, recommender.recommendParser(\"default\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 15,
      "dmbclub": 21
    }
  },
  {
    "path": "src/test/java/fitr/exercise/StandardExerciseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class StandardExerciseTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    ArrayList\u003cDouble\u003e duration \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    ArrayList\u003cInteger\u003e sets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void getName_validName_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        StandardExercise standardExercise \u003d new StandardExercise(\"Thigh stretch\", 2.4, duration, sets);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(\"Thigh stretch\", standardExercise.getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void getMet_validMet_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        StandardExercise standardExercise \u003d new StandardExercise(\"Thigh stretch\", 2.4, duration, sets);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(2.4, standardExercise.getMet());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void getDuration_validDuration_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        duration.add(0.5);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        duration.add(0.6);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        StandardExercise standardExercise \u003d new StandardExercise(\"Thigh stretch\", 2.4, duration, sets);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(0.5, standardExercise.getDuration().get(0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void getSets_validSets_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        sets.add(4);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        sets.add(5);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        StandardExercise standardExercise \u003d new StandardExercise(\"Thigh stretch\", 2.4, duration, sets);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(5, standardExercise.getSets().get(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 38
    }
  },
  {
    "path": "src/test/java/fitr/food/FoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class FoodTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Calorie tempCalorie \u003d new Calorie(500);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void getCaloriesConsumed_validFoodAndCalorie_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Food tempExercise \u003d new Food(\"food\",tempCalorie, getCurrentDate());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(500,tempCalorie.get());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void getNameOfFood_validFoodAndCalorie_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Food tempExercise \u003d new Food(\"exercise\",tempCalorie, getCurrentDate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(\"exercise\",tempExercise.getFoodName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void getAmountOfFoodSpecified_validFoodWithSpecifiedAmount_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Food tempExercise \u003d new Food(\"exercise\",tempCalorie,2, getCurrentDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(2,tempExercise.getAmountOfFood());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void getAmountOfFoodUnspecified_validFoodWithSpecifiedAmount_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Food tempExercise \u003d new Food(\"exercise\",tempCalorie, getCurrentDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(1,tempExercise.getAmountOfFood());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 28,
      "jerichochua": 3,
      "dmbclub": 5
    }
  },
  {
    "path": "src/test/java/fitr/goal/CheckGoalStatusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.goal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.exercise.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.goal.CheckGoalStatus.checkGoalStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class CheckGoalStatusTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    ExerciseList exerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    FoodList foodList \u003d new FoodList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    User user \u003d new User(\"John Doe\", 22, 1.70, 80, \"Male\", 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void checkExerciseGoalStatusTest_correctResult() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.addExercise(new Exercise(\"run\", new Calorie(400), getCurrentDate()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Goal goal \u003d new Goal(getCurrentDate(), \"exercise\", \"Burn more than 500 cal.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        String status \u003d checkGoalStatus(\"N\", goal, foodList, exerciseList, user);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(\"80.0\", status);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.addExercise(new Exercise(\"run\", new Calorie(200), getCurrentDate()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        status \u003d checkGoalStatus(\"N\", goal, foodList, exerciseList, user);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(\"Y\", status);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void checkFoodGoalStatusTest_correctResult() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.addFood(new Food(\"apple\", new Calorie(100), getCurrentDate()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Goal goal \u003d new Goal(getCurrentDate(), \"food\", \"Eat less than 200 cal.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        String status \u003d checkGoalStatus(\"N\", goal, foodList, exerciseList, user);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(\"Y\", status);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.addFood(new Food(\"ice cream\", new Calorie(200), getCurrentDate()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        status \u003d checkGoalStatus(\"N\", goal, foodList, exerciseList, user);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(\"N\", status);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 40
    }
  },
  {
    "path": "src/test/java/fitr/goal/FormatGoalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.goal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.exception.FitrException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.UpperBoundLessThanException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.UpperBoundMoreThanException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.goal.FormatGoal.formatGoal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class FormatGoalTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void formatGoalTest() throws FitrException, UpperBoundMoreThanException, UpperBoundLessThanException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Goal finalGoal \u003d formatGoal(getCurrentDate(), \"exercise\", \"do triceps dips\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(\"do triceps dips\", finalGoal.description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(\"exercise\", finalGoal.goalType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 3,
      "dmbclub": 15
    }
  },
  {
    "path": "src/test/java/fitr/goal/GoalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.goal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "class GoalTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void getDescription_validGoal_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Goal tempGoal \u003d new Goal(getCurrentDate(), \"exercise\", \"run more\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assertEquals(\"run more\", tempGoal.getDescription());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void getGoalType_validGoal_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Goal tempGoal \u003d new Goal(getCurrentDate(), \"food\", \"Y\", \"eat clean\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assertEquals(\"food\", tempGoal.getGoalType());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 21
    }
  },
  {
    "path": "src/test/java/fitr/list/ExerciseListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Exercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class ExerciseListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addExerciseToEmptyList_validExercise_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ExerciseList exerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.addExercise(new Exercise(\"Push ups\", new Calorie(100), getCurrentDate()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(1, exerciseList.getSize());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addExerciseToNonEmptyList_validExercise_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ExerciseList exerciseList \u003d new ExerciseList(getTestExerciseList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.addExercise(new Exercise(\"Push ups\", new Calorie(100), getCurrentDate()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(4, exerciseList.getSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private ArrayList\u003cExercise\u003e getTestExerciseList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cExercise\u003e exerciseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.add(new Exercise(\"Crunches\", new Calorie(100), getCurrentDate()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.add(new Exercise(\"Squats\", new Calorie(100), getCurrentDate()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.add(new Exercise(\"Run\", new Calorie(300), getCurrentDate()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 29,
      "dmbclub": 5
    }
  },
  {
    "path": "src/test/java/fitr/list/FoodListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class FoodListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addFoodToEmptyList_validFood_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FoodList foodList \u003d new FoodList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.addFood(new Food(\"Rice\", new Calorie(100), 1, getCurrentDate()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(1, foodList.getSize());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addFoodToNonEmptyList_validFood_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FoodList foodList \u003d new FoodList(getTestFoodList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.addFood(new Food(\"Rice\", new Calorie(100), 1, getCurrentDate()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(4, foodList.getSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private ArrayList\u003cFood\u003e getTestFoodList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.add(new Food(\"Meat\", new Calorie(100), 1, getCurrentDate()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.add(new Food(\"Fish\", new Calorie(100), 2, getCurrentDate()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.add(new Food(\"Noodles\", new Calorie(200), 1, getCurrentDate()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 29,
      "dmbclub": 5
    }
  },
  {
    "path": "src/test/java/fitr/list/GoalListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.goal.Goal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "class GoalListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void addGoalToEmptyList_validGoal_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "        GoalList goalList \u003d new GoalList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList.addGoal(new Goal(getCurrentDate(), \"exercise\", \"run 5km\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assertEquals(1, goalList.getSize());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void addGoalToNonEmptyList_validGoal_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "        GoalList goalList \u003d new GoalList(getTestGoalList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList.addGoal(new Goal(getCurrentDate(), \"exercise\", \"run 5km\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assertEquals(3, goalList.getSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private ArrayList\u003cGoal\u003e getTestGoalList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "        ArrayList\u003cGoal\u003e goalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList.add(new Goal(getCurrentDate(), \"food\", \"\u003c2000\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList.add(new Goal(getCurrentDate(), \"exercise\", \"\u003e3800\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return goalList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 33
    }
  },
  {
    "path": "src/test/java/fitr/list/StandardExerciseListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.exercise.StandardExercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class StandardExerciseListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void addExerciseToEmptyList_validExercise_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        ArrayList\u003cDouble\u003e duration \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        ArrayList\u003cInteger\u003e sets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        StandardExerciseList exerciseList \u003d new StandardExerciseList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.addExercise(new StandardExercise(\"Push ups\", 2.4, duration, sets));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(1, exerciseList.getSize());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void addExerciseToNonEmptyList_validExercise_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        ArrayList\u003cDouble\u003e duration \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        ArrayList\u003cInteger\u003e sets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        StandardExerciseList exerciseList \u003d new StandardExerciseList(getTestExerciseList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.addExercise(new StandardExercise(\"Push ups\", 2.4, duration, sets));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(4, exerciseList.getSize());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    private ArrayList\u003cStandardExercise\u003e getTestExerciseList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        ArrayList\u003cDouble\u003e duration \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        ArrayList\u003cInteger\u003e sets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        ArrayList\u003cStandardExercise\u003e exerciseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.add(new StandardExercise(\"Crunches\", 1, duration, sets));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.add(new StandardExercise(\"Squats\", 2, duration, sets));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.add(new StandardExercise(\"Run\", 3, duration, sets));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 42
    }
  },
  {
    "path": "src/test/java/fitr/list/TipListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class TipListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    ArrayList\u003cString\u003e tips \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void getTipFromNonEmptyTipList_validTotalNumber_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        tips.add(\"Let\u0027s start exercising!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        TipList tipList \u003d new TipList(tips);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(\"Let\u0027s start exercising!\", tipList.getTip(1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void getTipFromEmptyTipList_fail() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        TipList tipList \u003d new TipList(tips);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            tipList.getTip(1); });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 26
    }
  },
  {
    "path": "src/test/java/fitr/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.EditEntryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.EditProfileCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.InvalidCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "class EditCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void editCommand_validEditFood_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        EditCommandParser editCommandParser \u003d new EditCommandParser(\"food 1/10/2020 1 apple /100 1\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertTrue(editCommandParser.editCommand() instanceof EditEntryCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void editCommand_validEditName_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        EditCommandParser editCommandParser \u003d new EditCommandParser(\"name John\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertTrue(editCommandParser.editCommand() instanceof EditProfileCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void editCommand_invalidEditCommand_returnInvalid() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        EditCommandParser editCommandParser \u003d new EditCommandParser(\"test\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertTrue(editCommandParser.editCommand() instanceof InvalidCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void editCommand_emptyEditCommand_returnInvalid() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        EditCommandParser editCommandParser \u003d new EditCommandParser(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertTrue(editCommandParser.editCommand() instanceof InvalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 34
    }
  },
  {
    "path": "src/test/java/fitr/storage/ExerciseStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "class ExerciseStorageTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void loadExerciseList_validExerciseData_success() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ExerciseStorage exerciseStorage \u003d new ExerciseStorage(\"src/test/data/StorageTest/ValidExerciseData.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cExercise\u003e expectedExerciseList \u003d getValidExerciseList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cExercise\u003e actualExerciseList \u003d exerciseStorage.loadExerciseList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedExerciseList.get(0).getNameOfExercise(), actualExerciseList.get(0).getNameOfExercise());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedExerciseList.get(0).getCalories(), actualExerciseList.get(0).getCalories());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(expectedExerciseList.get(0).getDate(), actualExerciseList.get(0).getDate());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedExerciseList.get(1).getNameOfExercise(), actualExerciseList.get(1).getNameOfExercise());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedExerciseList.get(1).getCalories(), actualExerciseList.get(1).getCalories());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(expectedExerciseList.get(1).getDate(), actualExerciseList.get(1).getDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void loadExerciseList_invalidExerciseData_invalidDataRemoved() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ExerciseStorage exerciseStorage \u003d new ExerciseStorage(\"src/test/data/StorageTest/InvalidExerciseData.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cExercise\u003e actualExerciseList \u003d exerciseStorage.loadExerciseList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(0, actualExerciseList.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private ArrayList\u003cExercise\u003e getValidExerciseList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cExercise\u003e exerciseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.add(new Exercise(\"Test Exercise 1\", new Calorie(500), LocalDate.parse(\"22/10/2020\", formatter)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.add(new Exercise(\"Test Exercise 2\", new Calorie(100), LocalDate.parse(\"23/10/2020\", formatter)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 36,
      "dmbclub": 8
    }
  },
  {
    "path": "src/test/java/fitr/storage/FoodStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.common.DateManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Exercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.food.Food;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "class FoodStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void loadFoodList_validFoodData_success() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FoodStorage foodStorage \u003d new FoodStorage(\"src/test/data/StorageTest/ValidFoodData.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cFood\u003e expectedFoodList \u003d getValidFoodList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cFood\u003e actualFoodList \u003d foodStorage.loadFoodList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedFoodList.get(0).getFoodName(), actualFoodList.get(0).getFoodName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedFoodList.get(0).getCalories(), actualFoodList.get(0).getCalories());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedFoodList.get(0).getAmountOfFood(), actualFoodList.get(0).getAmountOfFood());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(expectedFoodList.get(0).getDate(), actualFoodList.get(0).getDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedFoodList.get(1).getFoodName(), actualFoodList.get(1).getFoodName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedFoodList.get(1).getCalories(), actualFoodList.get(1).getCalories());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedFoodList.get(1).getAmountOfFood(), actualFoodList.get(1).getAmountOfFood());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(expectedFoodList.get(1).getDate(), actualFoodList.get(1).getDate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void loadFoodList_invalidFoodData_invalidDataRemoved() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FoodStorage foodStorage \u003d new FoodStorage(\"src/test/data/StorageTest/InvalidFoodData.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cFood\u003e actualFoodList \u003d foodStorage.loadFoodList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(0, actualFoodList.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private ArrayList\u003cFood\u003e getValidFoodList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "        foodList.add(new Food(\"Test Food 1\", new Calorie(100), 1,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "                LocalDate.parse(\"23/10/2020\", DateManager.formatter)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "        foodList.add(new Food(\"Test Food 2\", new Calorie(50), 5,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "                LocalDate.parse(\"22/10/2020\", DateManager.formatter)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 5,
      "jerichochua": 41,
      "dmbclub": 4
    }
  },
  {
    "path": "src/test/java/fitr/storage/GoalStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.common.DateManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.goal.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "class GoalStorageTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void loadGoalList_validGoalData_success() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "        GoalStorage goalStorage \u003d new GoalStorage(\"src/test/data/StorageTest/ValidGoalData.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "        ArrayList\u003cGoal\u003e expectedGoalList \u003d getValidGoalList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "        ArrayList\u003cGoal\u003e actualGoalList \u003d goalStorage.loadGoalList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assertEquals(expectedGoalList.get(0).getCreatedDate(), actualGoalList.get(0).getCreatedDate());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assertEquals(expectedGoalList.get(0).getGoalType(), actualGoalList.get(0).getGoalType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assertEquals(expectedGoalList.get(0).getDescription(), actualGoalList.get(0).getDescription());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assertEquals(expectedGoalList.get(1).getCreatedDate(), actualGoalList.get(1).getCreatedDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assertEquals(expectedGoalList.get(1).getGoalType(), actualGoalList.get(1).getGoalType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assertEquals(expectedGoalList.get(1).getDescription(), actualGoalList.get(1).getDescription());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private ArrayList\u003cGoal\u003e getValidGoalList() throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "        ArrayList\u003cGoal\u003e goalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList.add(new Goal(LocalDate.parse(\"23/10/2020\", DateManager.formatter), \"E\", \"N\", \"run more\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList.add(new Goal(LocalDate.parse(\"25/10/2020\", DateManager.formatter), \"F\", \"Y\", \"eat more\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return goalList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void loadGoalList_invalidGoalData_invalidDataRemoved() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "        GoalStorage goalStorage \u003d new GoalStorage(\"src/test/data/StorageTest/InvalidGoalData.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "        ArrayList\u003cGoal\u003e actualGoalList \u003d goalStorage.loadGoalList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assertEquals(0, actualGoalList.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 45
    }
  },
  {
    "path": "src/test/java/fitr/storage/StandardExerciseStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class StandardExerciseStorageTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    StandardExerciseStorage standardExerciseStorage \u003d new StandardExerciseStorage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void loadAerobicList_success() throws IOException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(13, standardExerciseStorage.loadAerobicList().getSize());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void loadLowerBodyList_success() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(14, standardExerciseStorage.loadLowerBodyList().getSize());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void loadUpperBodyList_success() throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(9, standardExerciseStorage.loadUpperBodyList().getSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void loadStretchList_success() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(8, standardExerciseStorage.loadStretchList().getSize());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 31
    }
  },
  {
    "path": "src/test/java/fitr/storage/TipStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class TipStorageTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void loadTipList_validTipData_success() throws Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        TipStorage tipStorage \u003d new TipStorage();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        ArrayList\u003cString\u003e actualGoalList \u003d tipStorage.loadTipList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(\"Being dehydrated reduces exercise performance.\", actualGoalList.get(22));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 15
    }
  },
  {
    "path": "src/test/java/fitr/ui/UiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.ui.Ui.read;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void readUserInput() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Ui uiText \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "        String input \u003d \"add 5\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assertEquals(\"add 5\", uiText.read());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 22
    }
  },
  {
    "path": "src/test/java/fitr/user/UserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "package fitr.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.calorie.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exercise.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "public class UserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //BMI test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void testBmiCalculation_positiveInputs_correctResult() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        User user \u003d new User(\"John Doe\", 22, 1.70, 80, \"Male\", 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setHeight(2.00);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setWeight(4.00);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(1.00, user.getBmi());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //user configuration test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void configureUserInformation_validInput_userConfigurationSuccess() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        User user \u003d new User(\"Bob\", 20, 2.00, 8.00, \"Male\", 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(\"Bob\", user.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(20, user.getAge());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(2.00, user.getHeight());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(8.00, user.getWeight());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(\"Male\", user.getGender());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(\"Normal\", user.getUserFitnessLevelString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //Calorie test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void testCalorieCalculation_positiveInputs_correctResult() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        FoodList foodList \u003d new FoodList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        ExerciseList exerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.addFood(new Food(\"Chicken\", new Calorie(200), 1, getCurrentDate()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.addFood(new Food(\"Duck\", new Calorie(200), 1, getCurrentDate()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.addExercise(new Exercise(\"Squats\", new Calorie(100), getCurrentDate()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.addExercise(new Exercise(\"Running\", new Calorie(100), getCurrentDate()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        User user \u003d new User(\"John Doe\", 22, 1.70, 80, \"Male\", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(200, user.calculateCalorieBurnt(exerciseList, getCurrentDate().format(formatter)).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(400, user.calculateCalorieConsumed(foodList, getCurrentDate().format(formatter)).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(200, user.calculateCalorie(foodList, exerciseList, getCurrentDate().format(formatter)).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 4,
      "dmbclub": 11,
      "gohsonghan98": 38
    }
  }
]
