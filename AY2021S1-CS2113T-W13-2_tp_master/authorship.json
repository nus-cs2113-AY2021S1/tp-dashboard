[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    mainClassName \u003d \"fitr.Fitr\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    archiveBaseName \u003d \"fitr\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 3,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Fang Hui Hui | [Github](https://github.com/hui444) | [Portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Goh Song Han | [Github](https://github.com/gohsonghan98) | [Portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Harris Maung | [Github](https://github.com/sixletters) | [Portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jericho Chua | [Github](https://github.com/jerichochua) | [Portfolio](team/jericho.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Mingbang | [Github](https://github.com/dmbclub) | [Portfolio](team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 5,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- [Design \u0026 implementation](#design--implementation)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "    - [Architecture](#architecture)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "    - [Ui component](#ui-component)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Storage component](#storage-component)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    - [User component](#user-component)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "    - [Common classes](#common-classes)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- [Product scope](#product-scope)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Target user profile](#target-user-profile)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Value proposition](#value-proposition)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- [User stories](#user-stories)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- [Non-functional requirements](#non-functional-requirements)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- [Instructions for manual testing](#instructions-for-manual-testing)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "This section provides an overview of the Fitr application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "![Main class diagram](images/MainClassDiagram.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "The _**Architecture Diagram**_ above explains the high-level design of Fitr. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "The main driver of the application is `Fitr` is responsible for mainly two phases:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "* At app launch: Initialises or loads the respective lists and user profile in the correct sequence and is in charge of connecting the various components with each other."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "The rest of the App consists of:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "* `Ui`: The user interface of the application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "* `Parser`: Handles and parses user commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "* `Command`: Handles the various commands Fitr understands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "* `Storage`: Reads data from and writes data back into a text file for future use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "Each of the component defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "The sequence diagram below shows how the components work with one another, when a user enters the following command `food chicken rice /600 1`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "![Add food sequence diagram](images/AddFoodSequenceDiagram.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "### Ui component"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "**API**: `Ui.java`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "The `Ui` class handles all user inputs and system output."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "This component also listens to other components and outputs the desired messages in specified formats."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "The `Storage` class handles the read and write operations of the `FoodList`, `ExerciseList` and `User` classes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "![Storage class diagram](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "The figure above shows the associations and dependencies present with the `Storage` class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "On startup, the `Fitr` class creates a new `Storage` object with the file paths of the text files. "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "This will cause the `Storage` object to retrieve the text files from the given file paths and loads the data into the program. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "If the files do not exist, the Storage object will create the files."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Each time there is a change in the `FoodList`, `ExerciseList` or `User` objects, or when the program is exiting, `writeExerciseList()`, `writeFoodList()` and `writeUserProfile()` methods are invoked. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "This will save the data onto the respective text files on the hard disk."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "### User component"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "The `User` class contains all information related to the user data (i.e. `name`, `age`, `height`, `weight`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "and `gender`) and handles all operations on these user data (i.e. `getBmi()`)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "The `User` class has two constructors and implementations differ based on the constructor used. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "If a `User` object is instantiated without parameters (i.e. `User user \u003d new User()`), the `setup` method in the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " `user` object will be invoked, allowing users to go through a set of instructions to input their `name`, `age`, `gender`, `height`, `weight` and"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " `fitnessLevel`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "If a `User` object is instantiated with defined parameters (i.e. `User user \u003d new User(name, age, height, weight"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ", gender)`), the values from the given parameters will be stored within the user class without going through"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " `setup()`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "On startup, the `Fitr` class instantiates a `Storage` object and calls its `loadUserProfile()` method. This method"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "returns a `User` type object and is referenced by a pre-declared `User` type variable, which is used throughout the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "running session. "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hui444"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hui444"
        },
        "content": "Classes used by multiple components are in the `fitr.common` package."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Our target user profile is university students, at all fitness levels, who values an application that integrates the logging of food, exercises performed and the tracking of calories in one application. "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "It is also aimed at those who prefer typing over mouse interactions and are reasonably comfortable with using command-line applications."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Our application helps users to keep fit without needing them to do any research on healthy living or workout options. "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "We will be collecting user information such as age, weight, fitness level, and the application will recommend users preset exercises."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## User stories"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "|v1.0|student|enter my food intake|log my calories|"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "|v1.0|student|view my past calories intake|track my calories|"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "|v1.0|student|store the food I consumed together with its calories in the application|add food that I previously consumed without having to enter the calories again|"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "|v1.0|new user|access the help function|I know what to do with the application|"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "|v1.0|student|print my past exercise records|see my workout progress|"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "|v1.0|student|enter my height and weight|the application can calculate my BMI|"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "|v1.0|student|save my past exercise and food records|access my past records at all times|"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "|v2.0|student|edit my previous exercise and food entries|fix any mistakes I made previously|"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "|v2.0|student|clear my previous exercise and food entries|declutter my exercise and food records|"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "|v2.0|student|indicate my fitness level|exercise based on the recommendations of the application|"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hui444"
        },
        "content": "|v2.0|student|edit my profile|update my information|"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hui444"
        },
        "content": "|v2.0|student|set goals|see if I am on track|"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hui444"
        },
        "content": "|v2.0|student|be recommended a set of workout|save time finding exercises to do|"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hui444"
        },
        "content": "|v2.0|student|unlock achievements|be motivated to workout|"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## Non-functional requirements"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "1. This application should work on any mainstream operating system, such as Windows or macOS, as long as Java 11 or above is installed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "2. A user with above average typing speed for regular English text should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hui444"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Download the latest version of `Fitr` from [here](https://github.com/AY2021S1-CS2113T-W13-2/tp/releases)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Open Command Prompt / Terminal"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. Run the command java -jar {filename}.jar e.g., java -jar Fitr.jar (i.e., run the command in the same folder as the jar file)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hui444"
        },
        "content": "    1. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hui444"
        },
        "content": "       ``` "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hui444"
        },
        "content": "        _______   __   __"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hui444"
        },
        "content": "       |    ___| |__| |  |_  .----."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hui444"
        },
        "content": "       |    ___| |  | |   _| |   _|"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hui444"
        },
        "content": "       |___|     |__| |____| |__|"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hui444"
        },
        "content": "       Hello! Welcome to Fitr. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hui444"
        },
        "content": "       ```"
      }
    ],
    "authorContributionMap": {
      "hui444": 47,
      "jerichochua": 45,
      "dmbclub": 2,
      "-": 23,
      "gohsonghan98": 20
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "# Fitr"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Fitr is a command-line application, helping you keep track of your food intake and exercises."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 2,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- [Introduction](#introduction)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- [Features](#features)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    - [Adding an exercise: `exercise`](#adding-an-exercise-exercise)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Adding a food item: `food`](#adding-a-food-item-food)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Deleting an item: `delete`](#deleting-an-item-delete)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Viewing the exercise list: `view exercise`](#viewing-the-exercise-list-view-exercise)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Viewing the food list: `view food`](#viewing-the-food-list-view-food)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Viewing the user profile: `view profile`](#viewing-the-user-profile-view-profile)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Viewing the user\u0027s BMI: `view bmi`](#viewing-the-users-bmi-view-bmi)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Viewing the user\u0027s caloric summary: `view summary`](#viewing-the-users-caloric-summary-view-summary)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Editing the user\u0027s profile: `edit`](#editing-the-users-profile-edit)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Editing previous exercise entry: `edit exercise`](#editing-previous-exercise-entry-edit-exercise)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Editing previous food entry: `edit food`](#editing-previous-food-entry-edit-food)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Viewing help: `help`](#viewing-help-help)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Clearing the lists: `clear`](#clearing-the-lists-clear)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Exiting the program: `bye`](#exiting-the-program-bye)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    - [Saving the data](#saving-the-data)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- [FAQ](#faq)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "![Welcome screen](images/WelcomeScreen.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Fitr is a command-line application, helping you keep track of your food intake and exercises."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "2. Download the latest version of `Fitr` from [here](https://github.com/AY2021S1-CS2113T-W13-2/tp/releases)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "3. Open command prompt/terminal."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "4. Run the command `java -jar {filename}.jar` e.g., `java -jar Fitr.jar` (i.e., run the command in the same folder as the jar file)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "5. If the setup is correct, you should see something like below:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "      ``` "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "       _______   __   __"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "      |    ___| |__| |  |_  .----."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "      |    ___| |  | |   _| |   _|"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "      |___|     |__| |____| |__|"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "      Hello! Welcome to Fitr. "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "      ```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### Adding an exercise: `exercise`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Adds a new exercise to the list of exercises you have done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Format: `exercise NAME_OF_EXERCISE /AMOUNT_OF_CALORIES_BURNT`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- The `NAME_OF_EXERCISE` can be in a natural language format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- The `AMOUNT_OF_CALORIES_BURNT` has to be a positive number.  "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `exercise Pushups /500`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `exercise 5km run /1000`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `The following exercise has been added: Pushups`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `The following exercise has been added: 5km run`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sixletters"
        },
        "content": "### Adding a food item: `food`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Adds a new food to the list of foods you have eaten."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Format: `food NAME_OF_FOOD /AMOUNT_OF_CALORIES_CONSUMED`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- The `NAME_OF_FOOD` can be in a natural language format."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- The `AMOUNT_OF_CALORIES_CONSUMED` has to be a positive number.  "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `food chicken rice /500`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `food Mcspicy /600`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `The following food has been added: chicken rice`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `The following food has been added: Mcspicy`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Deleting an item: `delete`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Deletes a particular item at a specified index in a specified list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Format: `delete LIST INDEX`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- The `LIST` has to be either `food` or `exercise`, otherwise an exception will be thrown."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- The `INDEX` has to be a positive number smaller than or equals to the size of the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sixletters"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `delete food 1`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `delete exercise 2`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Viewing the exercise list: `view exercise`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Displays the user\u0027s exercise entries from the exercise list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `view exercise`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Here is the list of your exercises:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 05/10/2020"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[1] Exercise: Thigh stretch"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 6"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 23/10/2020"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[1] Exercise: Thigh stretch"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 6"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 24/10/2020"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[1] Exercise: Triceps dips"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 7"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[2] Exercise: Cossack Squat"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 20"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[3] Exercise: Russian Twists"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 15"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[4] Exercise: Thigh stretch"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Burnt Cal: 6"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Viewing the food list: `view food`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Displays the user\u0027s food entries from the food list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `view food`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Here is the list of your food:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 22/10/2020"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[1] Food: chicken"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Cal: 10"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[2] Food: chicken"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Cal: 10"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 23/10/2020"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[1] Food: chicken"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Cal: 10"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "[2] Food: chicken"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    Cal: 10"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Viewing the user profile: `view profile`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Displays the user\u0027s profile: name, age, gender, height (in m), weight (in kg)."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `view profile`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "User profile:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Name: John Doe"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Age: 22"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Gender: Male"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Height (in m): 1.8"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Weight (in kg): 80.0"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Your fitness level: Fit"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Viewing the user\u0027s BMI: `view bmi`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Displays the user\u0027s BMI (body mass index) based on the user\u0027s height and weight in the user profile."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `view bmi`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Your BMI is: "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "24.69"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Viewing the user\u0027s caloric summary: `view summary`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Displays a summary of the calories consumed, calories burnt, and net calories based on the entries in the exercise and food list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `view summary`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 05/10/2020"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Total calorie consumed:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "0"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Total calorie burnt:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "-6"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Net calorie:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "-6"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Date: 22/10/2020"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Total calorie consumed:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "2"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Total calorie burnt:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "0"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Net calorie:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "2"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Editing the user\u0027s profile: `edit`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Changes the user\u0027s name, age, gender, height (in m), or weight (in kg)."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Format: `edit TYPE`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Type | Format | Description | Notes for input"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "----- | ------ | -------- | ------"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "name | `edit name` | Changes name in user profile | Not case-sensitive"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "age | `edit age` | Changes age in user profile | Only number inputs allowed, decimal number is not allowed"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "gender | `edit gender` | Changes gender in user profile | Not case-sensitive, only takes in `m` or `f` input."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "height | `edit height` | Changes height in user profile | Only number inputs allowed, decimal number is allowed"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "weight | `edit weight` | Changes weight in user profile | Only number inputs allowed, decimal number is allowed"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "fitness | `edit fitness` | Changes fitness level in user profile | Only number inputs 0,1 or 2 is allowed"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Edit name"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "edit name"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Change your name to: "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Tom"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Name changed to: Tom"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Edit age"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "edit age"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Change your age to: "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "20"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Age changed to: 20"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Edit gender"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "edit gender"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Change your gender (M|F) to: "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "f"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Gender changed to: Female"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Edit height"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "edit height"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Change your height (in m) to: "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "1.9"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Height (in m) changed to: 1.9"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Edit weight"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "edit weight"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Change your weight (in kg) to: "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "90"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Weight (in kg) changed to: 90.0"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Edit fitness"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "edit fitness"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Please indicate your fitness level to be used for determining intensity of exercises."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "(0 for Unfit; 1 for Normal; 2 for Fit): "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "2"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Fitness level changed to: Fit"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "```"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Editing previous exercise entry: `edit exercise`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Edits a previous exercise entry in the exercise list."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Format: `edit exercise INDEX NAME_OF_EXERCISE /AMOUNT_OF_CALORIES_BURNT`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `INDEX` and `AMOUNT_OF_CALORIES_BURNT` must be a positive integer: 1, 2, 3, ..."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Example of usage: `edit exercise 1 Push ups /500`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Successfully edited exercise to: Push ups"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Editing previous food entry: `edit food`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Edits a previous food entry in the food list."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Format: `edit food INDEX NAME_OF_FOOD /AMOUNT_OF_CALORIES_CONSUMED QUANTITY`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `INDEX`, `AMOUNT_OF_CALORIES_CONSUMED` and `QUANTITY` must be a positive integer: 1, 2, 3, ..."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Example of usage: `edit food 1 Rice /2000`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Successfully edited food to: rice"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Show help messages with all the valid commands supported by Fitr."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "These are commands Fitr understands:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "food              Adds food entry to Fitr program"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                  Format: food \u003cName of food\u003e / \u003cNumber of Calories\u003e \u003cQuantity (Optional)\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "exercise          Adds exercise entry to Fitr program"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                  Format: exercise \u003cName of exercise\u003e / \u003cNumber of Calories\u003e \u003cQuantity (Optional)\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "view profile      View your profile information"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "view bmi          View your BMI"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "view food         View food entries"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "view exercise     View exercise entries"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "view summary      View calorie summary"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "delete            Deletes selected entry"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                  Format: delete food \u003cIndex from Food List\u003e or delete exercise \u003cIndex from Exercise List\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "bye               Exits the program"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "```"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Clearing the lists: `clear`\t"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Clears either the exercise list, or the food list, or both.\t"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Format: `clear LIST`\t"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `LIST` can either take `exercise` or `food`.\t"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- If `LIST` is not provided, both exercise and food lists are cleared.\t"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Example of usage:\t"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `clear food` clears the food list.\t"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "- `clear` clears both the exercise and food lists."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Exiting the program: `bye`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "The user\u0027s profile, food consumed and exercises done are saved automatically after any command that changes the data. "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "**A**: Install `Fitr` on another computer, and overwrite the empty data files that it creates with the files with your data files."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "------ | ------ | --------"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hui444"
        },
        "content": "add food entry | `food \u003cname of food\u003e / \u003cnumber of calories consumed\u003e \u003cquantity (optional)\u003e` | `food apple / 52 1`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hui444"
        },
        "content": "add exercise entry | `exercise \u003cname of exercise\u003e / \u003cnumber of calories burnt\u003e` | `exercise 5km run / 400`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hui444"
        },
        "content": "delete food entry | `delete food \u003cIndex from Food List\u003e` | `delete food 3`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hui444"
        },
        "content": "delete exercise entry | `delete exercise \u003cIndex from Exercise List\u003e\"` | `delete exercise 5`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hui444"
        },
        "content": "view help | `help` "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hui444"
        },
        "content": "view bmi | `view bmi`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hui444"
        },
        "content": "view profile | `view profile`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hui444"
        },
        "content": "view food entries | `view food`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hui444"
        },
        "content": "view exercise entries | `view exercise`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hui444"
        },
        "content": "view calorie summary | `view summary`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "clear | `clear` | `clear`, `clear exercise`, `clear food`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hui444"
        },
        "content": "terminate Fitr program | `bye`"
      }
    ],
    "authorContributionMap": {
      "hui444": 18,
      "sixletters": 10,
      "jerichochua": 133,
      "dmbclub": 2,
      "-": 32,
      "gohsonghan98": 143
    }
  },
  {
    "path": "docs/team/jericho.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "# Jericho - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "TBD"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "TBD"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 9
    }
  },
  {
    "path": "src/main/java/fitr/Calorie.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class Calorie {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected int amountOfCalories;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public Calorie(int calories) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.amountOfCalories \u003d calories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public int get() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return amountOfCalories;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 12,
      "jerichochua": 1
    }
  },
  {
    "path": "src/main/java/fitr/Exercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected String nameOfExercise; // The name of the Exercise"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected Calorie caloriesBurnt;// Amount of calories burnt from exercise"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    protected String date; //Date when the Exercise is added to the list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public Exercise(String name, Calorie caloriesBurnt, String date) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.nameOfExercise \u003d name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.caloriesBurnt \u003d caloriesBurnt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return caloriesBurnt.get();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public String getNameOfExercise() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return nameOfExercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void setNameOfExercise(String nameOfExercise) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.nameOfExercise \u003d nameOfExercise;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void setCaloriesBurnt(Calorie caloriesBurnt) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.caloriesBurnt \u003d caloriesBurnt;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 18,
      "jerichochua": 10,
      "dmbclub": 6
    }
  },
  {
    "path": "src/main/java/fitr/Fitr.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.TipList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.tip.TipManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class Fitr {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private ListManager listManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    private Recommender recommender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Fitr() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printGreetingMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            listManager \u003d new ListManager(storageManager);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            user \u003d storageManager.loadUserProfile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            storageManager.writeUserProfile(user);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            TipList tipList \u003d new TipList(storageManager.loadTipList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            TipManager tipOfTheDay \u003d new TipManager(tipList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            recommender \u003d new Recommender();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            tipOfTheDay.execute();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            Ui.printSuggestQuestion();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"An error has occurred - the file cannot be opened!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            String userInput \u003d Ui.read();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            Command c \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            c.execute(listManager, storageManager, user, recommender);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Ui.printExitMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        new Fitr().run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 8,
      "jerichochua": 27,
      "dmbclub": 15,
      "-": 4,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected String nameOfFood; // The name of the Food"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected Calorie caloriesInFood;// Amount of calories consumed"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    protected int amountOfFood \u003d 1; // Amount of food in grams, if not it will be taken as arbitrary unit e.g, 1 banana"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    protected String date; //Date when the Food is added to the list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public Food(String nameOfFood, Calorie calories, int amount, String date) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.nameOfFood \u003d nameOfFood;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.amountOfFood \u003d amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.caloriesInFood \u003d new Calorie(calories.get());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Food(String name, Calorie caloriesInFood, String date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.nameOfFood \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.caloriesInFood \u003d caloriesInFood;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return caloriesInFood.get();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public String getFoodName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return nameOfFood;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public int getAmountOfFood() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return amountOfFood;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void setNameOfFood(String nameOfFood) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.nameOfFood \u003d nameOfFood;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void setCaloriesInFood(Calorie caloriesInFood) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.caloriesInFood \u003d caloriesInFood;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void setAmountOfFood(int amountOfFood) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.amountOfFood \u003d amountOfFood;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 24,
      "jerichochua": 17,
      "dmbclub": 8
    }
  },
  {
    "path": "src/main/java/fitr/Goal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.goal.CheckGoalStatus.checkGoalStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "    protected String createdDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "    protected String goalType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "    protected String goalStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public Goal(String createdDate, String goalType, String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.createdDate \u003d createdDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalType \u003d goalType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalStatus \u003d \"0.0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public Goal(String createdDate, String goalType, String goalStatus, String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.createdDate \u003d createdDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalType \u003d goalType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalStatus \u003d goalStatus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public String getCreatedDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return createdDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public String getGoalType() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return goalType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public String getStatus(Goal goal, FoodList foodList, ExerciseList exerciseList, User user) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "        String rawStatus \u003d checkGoalStatus(goalStatus, goal, foodList, exerciseList, user) + \"%\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (rawStatus.equals(\"0.0%\") || rawStatus.equals(\"✘%\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return \"✘\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } else if (rawStatus.equals(\"100.0%\") || rawStatus.equals(\"✓%\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return \"✓\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return rawStatus;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void markAsCompleted() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalStatus \u003d \"100.0\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void setGoal(Goal goal, String goalStatus) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.createdDate \u003d goal.getCreatedDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalType \u003d goal.getGoalType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalStatus \u003d goalStatus;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.description \u003d goal.getDescription();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 63
    }
  },
  {
    "path": "src/main/java/fitr/Recommender.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sixletters"
        },
        "content": "package fitr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.StandardExerciseList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StandardExerciseStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class Recommender {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected StandardExerciseList upperBodyList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected StandardExerciseList lowerBodyList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected StandardExerciseList aerobicList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected StandardExerciseList stretchingList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public Recommender() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Boolean isSuccessful \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        StandardExerciseStorage storage \u003d new StandardExerciseStorage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            this.upperBodyList \u003d storage.loadUpperBodyList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            this.lowerBodyList \u003d storage.loadLowerBodyList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            this.aerobicList \u003d storage.loadAerobicList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            this.stretchingList \u003d storage.loadStretchList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            isSuccessful \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(\"File(s) missing!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            isSuccessful \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assert (isSuccessful);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public StandardExerciseList recommend() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        StandardExerciseList finalList \u003d new StandardExerciseList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        int firstIndex \u003d (int) (Math.random() * (upperBodyList.getSize() - 1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        int secondIndex \u003d (int) (Math.random() * (lowerBodyList.getSize() - 1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        int thirdIndex \u003d (int) (Math.random() * (aerobicList.getSize() - 1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        int fourthIndex \u003d (int) (Math.random() * (stretchingList.getSize() - 1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        finalList.addExercise(upperBodyList.getExercise(firstIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        finalList.addExercise(lowerBodyList.getExercise(secondIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        finalList.addExercise(aerobicList.getExercise(thirdIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        finalList.addExercise(stretchingList.getExercise(fourthIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return finalList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void printExercise() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        StandardExerciseList list \u003d recommend();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        for (int i \u003d 0; i \u003c list.getSize(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(\"Name of Exercise:\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(list.getExercise(i).getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 25,
      "jerichochua": 4,
      "gohsonghan98": 23
    }
  },
  {
    "path": "src/main/java/fitr/StandardExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sixletters"
        },
        "content": "package fitr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class StandardExercise {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected ArrayList\u003cDouble\u003e duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected ArrayList\u003cInteger\u003e sets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected double met;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public StandardExercise(String name, double met, ArrayList\u003cDouble\u003e duration, ArrayList\u003cInteger\u003e sets) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.met \u003d met;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.sets \u003d sets;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public double getMet() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return met;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public ArrayList\u003cDouble\u003e getDuration() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public ArrayList\u003cInteger\u003e getSets() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return sets;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public String toString(int fitnessLevel) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return \"Temp\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 36,
      "gohsonghan98": 2
    }
  },
  {
    "path": "src/main/java/fitr/command/AddExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.Recommender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_EXERCISE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class AddExerciseCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public AddExerciseCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            String nameOfExercise \u003d command.split(\"/\", 2)[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            if (nameOfExercise.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            nameOfExercise \u003d nameOfExercise.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            command \u003d command.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            if (command.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                Calorie amountOfCaloriesBurnt \u003d new Calorie(Integer.parseInt(command.split(\" \")[0]));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                if (amountOfCaloriesBurnt.get() \u003c -1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    throw new NumberFormatException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                listManager.addExercise(new Exercise(nameOfExercise, amountOfCaloriesBurnt, getCurrentDate()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                storageManager.writeExerciseList(listManager.getExerciseList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                Ui.printCustomMessage(\"The following exercise has been added:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + \"Name of Exercise: \" + nameOfExercise + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + \"Burnt Cal: \" + amountOfCaloriesBurnt.get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            Ui.printCustomError(\"Sorry, invalid calorie amount entered\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printFormatError(COMMAND_EXERCISE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Sorry, there is an error in the file\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 3,
      "sixletters": 37,
      "jerichochua": 15,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/AddFoodCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.Recommender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.exception.FitrException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_FOOD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class AddFoodCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public AddFoodCommand(String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            String nameOfFood \u003d command.split(\"/\", 2)[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            nameOfFood \u003d nameOfFood.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            if (nameOfFood.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            command \u003d command.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            if (command.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                Calorie amountOfCalories \u003d new Calorie(Integer.parseInt(command.split(\" \")[0]));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                if (amountOfCalories.get() \u003c 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    throw new NumberFormatException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                listManager.addFood(new Food(nameOfFood, amountOfCalories, getCurrentDate()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                storageManager.writeFoodList(listManager.getFoodList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                Ui.printCustomMessage(\"The following food has been added:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + \"Name of Food: \" + nameOfFood + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + \"Calorie Consumed: \" + amountOfCalories.get()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            } else if (command.split(\" \").length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                Calorie amountOfCalories \u003d new Calorie(Integer.parseInt(command.split(\" \")[0])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        * Integer.parseInt(command.split(\" \")[1]));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                int amountOfFood \u003d Integer.parseInt(command.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                if (amountOfCalories.get() \u003c 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    throw new NumberFormatException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                if (amountOfFood \u003c 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    throw new FitrException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                listManager.addFood(new Food(nameOfFood, amountOfCalories, amountOfFood, getCurrentDate()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                storageManager.writeFoodList(listManager.getFoodList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                Ui.printCustomMessage(\"The following food has been added:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + \"Name of Food: \" + nameOfFood + \"\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + \"Calorie Consumed: \" + amountOfCalories.get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            Ui.printCustomError(\"Sorry, invalid calorie amount entered\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printFormatError(COMMAND_FOOD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (FitrException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            Ui.printCustomError(\"Sorry, the amount of food has to be a positive number\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Sorry, there is an error in the file\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 3,
      "sixletters": 52,
      "jerichochua": 17,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/AddGoalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.Goal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.Recommender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_FOOD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_EXERCISE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_GOAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.goal.FormatGoal.formatGoal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class AddGoalCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "    protected String createdDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public AddGoalCommand(String command, String createdDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.createdDate \u003d createdDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "            String goalType \u003d command.split(\" \", 2)[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Goal newGoal;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "            switch (goalType) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "            //Food goal"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "            case COMMAND_FOOD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "                command \u003d command.split(\" \", 2)[1].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "                newGoal \u003d formatGoal(createdDate, \"F\", command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                listManager.addGoal(newGoal);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(\"Okay! The following goal has been added: \\n\\t[\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        + newGoal.getGoalType() + \"] \" + newGoal.getDescription());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "            //Exercise goal"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "            case COMMAND_EXERCISE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "                command \u003d command.split(\" \", 2)[1].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "                newGoal \u003d formatGoal(createdDate, \"E\", command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                listManager.addGoal(newGoal);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(\"Okay! The following goal has been added: \\n\\t[\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        + newGoal.getGoalType() + \"] \" + newGoal.getDescription());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printFormatError(COMMAND_GOAL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": "            storageManager.writeGoalList(listManager.getGoalList(), listManager.getFoodList(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    listManager.getExerciseList(), user);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Please input in the correct format!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Sorry, there is an error in the file\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 57,
      "sixletters": 1,
      "jerichochua": 6
    }
  },
  {
    "path": "src/main/java/fitr/command/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Recommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.Commands;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " * Clears the food or exercise lists."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(ClearCommand.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ClearCommand(String arguments) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.command \u003d arguments;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storage, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (command.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "            LOGGER.fine(\"Clearing food, exercise and goal lists.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            listManager.clearFoodList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            listManager.clearExerciseList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "            listManager.clearGoalList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomMessage(\"Food, exercise and goal lists are both cleared!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            case Commands.COMMAND_FOOD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                LOGGER.fine(\"Clearing food list.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                listManager.clearFoodList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                Ui.printCustomMessage(\"Food list is cleared!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            case Commands.COMMAND_EXERCISE:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                LOGGER.fine(\"Clearing exercise list.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                listManager.clearExerciseList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                Ui.printCustomMessage(\"Exercise list is cleared!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "            case Commands.COMMAND_GOAL:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "                LOGGER.fine(\"Clearing goal list.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "                listManager.clearGoalList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(\"Goal list is cleared!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                Ui.printCustomMessage(\"Invalid clear command entered!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            storage.writeExerciseList(listManager.getExerciseList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            storage.writeFoodList(listManager.getFoodList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"The file cannot be written!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 8,
      "jerichochua": 57
    }
  },
  {
    "path": "src/main/java/fitr/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.Recommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public abstract void execute(ListManager listManager, StorageManager storageManager,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                                 User user, Recommender recommender);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 7,
      "jerichochua": 7,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/CompleteGoalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.Recommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.FitrException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.GoalList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_COMPLETE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_GOAL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": " * Marks a particular goal as complete."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class CompleteGoalCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public CompleteGoalCommand(String command) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (command.split(\" \", 2)[0].equals(COMMAND_GOAL)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "                command \u003d command.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "                int completedGoalIndex \u003d Integer.parseInt(command) - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "                listManager.getGoal(completedGoalIndex).markAsCompleted();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "                storageManager.writeGoalList(listManager.getGoalList(), listManager.getFoodList(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        listManager.getExerciseList(), user);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(\"Yay! You completed:\\n\\t\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        + listManager.getGoalList().getGoal(completedGoalIndex).getDescription());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "                throw new FitrException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Sorry that index does not exist in the list\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Sorry index deletion must be an number\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Sorry, there is an error in the file\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (FitrException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Wrong format!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 55
    }
  },
  {
    "path": "src/main/java/fitr/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.Recommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.FitrException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_EXERCISE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_FOOD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_GOAL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public DeleteCommand(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            String type \u003d command.split(\" \")[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            if (command.split(\" \").length !\u003d 3 \u0026\u0026 !type.equals(COMMAND_GOAL)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                throw new FitrException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            case COMMAND_EXERCISE: {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                String deletionDate \u003d command.split(\" \")[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                ExerciseList exerciseList \u003d listManager.getExerciseList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "                boolean isValidDate \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                int deletionIndex \u003d Integer.parseInt(command.split(\" \")[2]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                for (int i \u003d 0; i \u003c exerciseList.getSize(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    if (exerciseList.getExercise(i).getDate().equals(deletionDate)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        isValidDate \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        deletionIndex +\u003d i - 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        if (!exerciseList.getExercise(deletionIndex).getDate().equals(deletionDate)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (!isValidDate) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    throw new FitrException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                Ui.printCustomMessage(\"The following exercise has been deleted\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + \" for the \" + deletionDate + \": \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + listManager.getExercise(deletionIndex).getNameOfExercise());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                listManager.deleteExercise(deletionIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                storageManager.writeExerciseList(listManager.getExerciseList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            case COMMAND_FOOD: {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                String deletionDate \u003d command.split(\" \")[1];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                FoodList foodList \u003d listManager.getFoodList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": "                boolean isValidDate \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                int deletionIndex \u003d Integer.parseInt(command.split(\" \")[2]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                for (int i \u003d 0; i \u003c foodList.getSize(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    if (foodList.getFood(i).getDate().equals(deletionDate)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        isValidDate \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        deletionIndex +\u003d i - 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        if (!foodList.getFood(deletionIndex).getDate().equals(deletionDate)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hui444"
        },
        "content": "                if (!isValidDate) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    throw new FitrException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                Ui.printCustomMessage(\"The following exercise has been deleted\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + \" for the \" + deletionDate + \": \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                        + listManager.getFood(deletionIndex).getFoodName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                listManager.deleteFood(deletionIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                storageManager.writeFoodList(listManager.getFoodList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            case COMMAND_GOAL: {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hui444"
        },
        "content": "                int deletionIndex \u003d Integer.parseInt(command.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(\"The following has been deleted from the list of goals: \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                        + listManager.getGoal(deletionIndex - 1).getDescription());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                listManager.deleteGoal(deletionIndex - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hui444"
        },
        "content": "                storageManager.writeGoalList(listManager.getGoalList(), listManager.getFoodList(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        listManager.getExerciseList(), user);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hui444"
        },
        "content": "                throw new FitrException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            Ui.printCustomError(\"Sorry,that index does not exist in the list\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            Ui.printCustomError(\"Sorry, index deletion must be a positive number\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Sorry, there is an error in the file\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (FitrException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            Ui.printCustomError(\"Sorry, you have keyed in an invalid format or date\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 19,
      "sixletters": 72,
      "jerichochua": 18,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/EditEntryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.Goal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Recommender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.Commands;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.GoalList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.goal.FormatGoal.formatGoal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class EditEntryCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Pattern EXERCISE_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Pattern.compile(\"(?\u003cindex\u003e\\\\d+)\\\\s*(?\u003cexerciseName\u003e.*)\\\\s*/\\\\s*(?\u003ccalories\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Pattern FOOD_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Pattern.compile(\"(?\u003cindex\u003e\\\\d+)\\\\s*(?\u003cfoodName\u003e.*)\\\\s*/\\\\s*(?\u003ccalories\u003e\\\\d+)\\\\s+(?\u003cquantity\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final Pattern GOAL_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Pattern.compile(\"(?\u003cindex\u003e\\\\d+)\\\\s*(?\u003cgoalType\u003e\\\\S+)\\\\s+(?\u003cgoalDescription\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final String arguments;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public EditEntryCommand(String command, String arguments) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            case Commands.COMMAND_EXERCISE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                editExercise(listManager.getExerciseList(), arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            case Commands.COMMAND_FOOD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                editFood(listManager.getFoodList(), arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "            case Commands.COMMAND_GOAL:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "                editGoal(listManager.getGoalList(), arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                Ui.printInvalidCommandError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Error: Invalid value entered!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            storageManager.writeExerciseList(listManager.getExerciseList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            storageManager.writeFoodList(listManager.getFoodList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hui444"
        },
        "content": "            storageManager.writeGoalList(listManager.getGoalList(), listManager.getFoodList(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    listManager.getExerciseList(), user);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomMessage(Messages.MISSING_FILE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private void editExercise(ExerciseList exerciseList, String arguments) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Matcher matcher \u003d EXERCISE_FORMAT.matcher(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printFormatError(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (exerciseList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Error: Exercise list is empty!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        int index \u003d Integer.parseInt(matcher.group(\"index\").trim());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e exerciseList.getSize()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Error: Invalid index entered!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String exerciseName \u003d matcher.group(\"exerciseName\").trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        int calories \u003d Integer.parseInt(matcher.group(\"calories\").trim());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (calories \u003c 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Error: Calories cannot be negative!\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hui444"
        },
        "content": "        exerciseList.getExercise(index - 1).setNameOfExercise(exerciseName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseList.getExercise(index - 1).setCaloriesBurnt(new Calorie(calories));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Ui.printCustomMessage(\"Successfully edited exercise to: \" + exerciseName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private void editFood(FoodList foodList, String arguments) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Matcher matcher \u003d FOOD_FORMAT.matcher(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printFormatError(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (foodList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Food list is empty!\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        int index \u003d Integer.parseInt(matcher.group(\"index\").trim());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e foodList.getSize()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Error: Invalid index entered!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String foodName \u003d matcher.group(\"foodName\").trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        int calories \u003d Integer.parseInt(matcher.group(\"calories\").trim());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (calories \u003c 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Error: Calories cannot be negative!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        int quantity \u003d Integer.parseInt(matcher.group(\"quantity\").trim());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (quantity \u003c 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Error: Quantity cannot be negative!\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hui444"
        },
        "content": "        foodList.getFood(index - 1).setNameOfFood(foodName);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodList.getFood(index - 1).setCaloriesInFood(new Calorie(calories * quantity));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodList.getFood(index - 1).setAmountOfFood(quantity);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Ui.printCustomMessage(\"Successfully edited food to: \" + foodName);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private void editGoal(GoalList goalList, String arguments) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Matcher matcher \u003d GOAL_FORMAT.matcher(arguments);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printFormatError(arguments);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (goalList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Goal list is empty!\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hui444"
        },
        "content": "        int index \u003d Integer.parseInt(matcher.group(\"index\").trim());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e goalList.getSize()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Error: Invalid index entered!\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hui444"
        },
        "content": "        String goalDescription \u003d matcher.group(\"goalDescription\").trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hui444"
        },
        "content": "        String goalType \u003d matcher.group(\"goalType\").trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (!(goalType.equals(Commands.COMMAND_EXERCISE) || goalType.equals(Commands.COMMAND_FOOD))) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Error: Invalid goal type!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Goal goal \u003d goalList.getGoal(index - 1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hui444"
        },
        "content": "        String createdDate \u003d goal.getCreatedDate();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalType \u003d goalType.equals(Commands.COMMAND_EXERCISE) ? \"E\" : \"F\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Goal editedGoal \u003d formatGoal(createdDate, goalType, goalDescription);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goal.setGoal(editedGoal, \"0.0\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Ui.printCustomMessage(\"Successfully edited goal to: [\" + editedGoal.getGoalType()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hui444"
        },
        "content": "                + \"] \" + editedGoal.getDescription());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 53,
      "jerichochua": 127
    }
  },
  {
    "path": "src/main/java/fitr/command/EditProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.Recommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "public class EditProfileCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public EditProfileCommand(String command) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (command.equalsIgnoreCase(Messages.EDIT_NAME)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            editName(user);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(Messages.EDIT_HEIGHT)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            editHeight(user);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(Messages.EDIT_WEIGHT)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            editWeight(user);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(Messages.EDIT_AGE)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            editAge(user);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(Messages.EDIT_GENDER)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            editGender(user);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(Messages.EDIT_FITNESS)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            editFitness(user);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printInvalidCommandError();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            storageManager.writeUserProfile(user);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomMessage(Messages.MISSING_FILE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void editName(User user) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.EDIT_NAME_HEADER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.NAME_ECHO_HEADER + user.getName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void editHeight(User user) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.EDIT_HEIGHT_HEADER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setupHeight();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.HEIGHT_ECHO_HEADER + user.getHeight());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void editWeight(User user) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.EDIT_WEIGHT_HEADER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setupWeight();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.WEIGHT_ECHO_HEADER + user.getWeight());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void editAge(User user) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.EDIT_AGE_HEADER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setupAge();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.AGE_ECHO_HEADER + user.getAge());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void editGender(User user) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.EDIT_GENDER_HEADER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setupGender();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.GENDER_ECHO_HEADER + user.getGender());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void editFitness(User user) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.INPUT_FITNESS_LEVEL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setupFitnessLevel();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(Messages.FITNESS_ECHO_HEADER + user.getUserFitnessLevelString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 1,
      "jerichochua": 11,
      "gohsonghan98": 71
    }
  },
  {
    "path": "src/main/java/fitr/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.Recommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(ExitCommand.class.getName());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public ExitCommand(String command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assert command !\u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Exiting the application.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 11,
      "jerichochua": 15,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.Recommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public HelpCommand(String userInput) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        this.command \u003d userInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Ui.printHelpMessage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 1,
      "jerichochua": 7,
      "dmbclub": 14,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/InvalidCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.Recommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public InvalidCommand(String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.command \u003d userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Ui.printFormatError(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 6,
      "jerichochua": 6,
      "dmbclub": 11,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/RecommendCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sixletters"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.Recommender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.StandardExercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.StandardExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.exception.FitrException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static fitr.common.Messages.BURNT_CAL_HEADER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static fitr.common.Messages.CLOSE_SQUARE_BRACKET;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static fitr.common.Messages.EXERCISE_HEADER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static fitr.common.Messages.INTENSITY_CAL_HEADER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static fitr.common.Messages.OPEN_SQUARE_BRACKET;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static fitr.common.Messages.SPACE_FORMATTING;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class RecommendCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        StandardExerciseList recommendList \u003d recommender.recommend();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        int fitnessLevel \u003d user.getFitnessLevel();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        for (int i \u003d 0; i \u003c 4; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            StandardExercise standardExercise \u003d recommendList.getExercise(i);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            int calorieBurnt \u003d (int) (standardExercise.getDuration().get(fitnessLevel)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    * standardExercise.getMet()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    * standardExercise.getSets().get(fitnessLevel)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    * user.getWeight())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    / 60;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            Ui.printCustomMessage(OPEN_SQUARE_BRACKET + (i + 1) + CLOSE_SQUARE_BRACKET"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    + EXERCISE_HEADER + recommendList.getExercise(i).getName()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    + SPACE_FORMATTING + INTENSITY_CAL_HEADER"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    + recommendList.getExercise(i).getSets().get(fitnessLevel) + \" sets of \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    + recommendList.getExercise(i).getDuration().get(fitnessLevel) + \" minutes\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    + SPACE_FORMATTING + BURNT_CAL_HEADER + calorieBurnt);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "      "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        Ui.printCustomMessage(\"Will you be doing this workout?\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                + \"type y for yes and n for no!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        String checker \u003d Ui.read();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            if (checker.equals(\"y\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                Ui.printCustomMessage(\"The following Exercises has been added:\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                for (int i \u003d 0; i \u003c 4; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    StandardExercise standardExercise \u003d recommendList.getExercise(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Calorie caloriesBurnt \u003d new Calorie((int) (standardExercise.getDuration().get(fitnessLevel)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            * standardExercise.getMet()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            * standardExercise.getSets().get(fitnessLevel)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            * user.getWeight())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            / 60);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                    Ui.printCustomMessage(OPEN_SQUARE_BRACKET + (i + 1) + CLOSE_SQUARE_BRACKET"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            + EXERCISE_HEADER + standardExercise.getName()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            + SPACE_FORMATTING + BURNT_CAL_HEADER"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                            + caloriesBurnt.get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                    listManager.addExercise(new Exercise(standardExercise.getName(), caloriesBurnt, getCurrentDate()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                    storageManager.writeExerciseList(listManager.getExerciseList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                }    "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            } else if (checker.equals(\"n\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                Ui.printCustomMessage(\"Next time then!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                throw new FitrException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (FitrException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            Ui.printCustomError(\"Sorry, that is an invalid command\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            Ui.printCustomError(\"Sorry there is an error with the file\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 72,
      "jerichochua": 8,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/command/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.Goal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.Recommender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.GoalList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ListManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.EMPTY_FOOD_LIST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.EMPTY_EXERCISE_LIST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Messages.EMPTY_GOAL_LIST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FOOD_LIST_HEADER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.EXERCISE_LIST_HEADER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.CALORIE_CONSUMED_HEADER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.CALORIE_BURNT_HEADER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.NET_CALORIE_HEADER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.BMI_HEADER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.USER_PROFILE_HEADER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.OPEN_SQUARE_BRACKET;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.CLOSE_SQUARE_BRACKET;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FOOD_HEADER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.SPACE_FORMATTING;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.CAL_HEADER;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.EXERCISE_HEADER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.BURNT_CAL_HEADER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.common.Messages.DATE_HEADER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.EMPTY_STRING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_DATE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static fitr.common.Messages.EMPTY_EXERCISE_LIST_DATE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.NO_RECORDS_FOUND;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_FOOD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_EXERCISE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_SUMMARY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_BMI;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_PROFILE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.common.Commands.COMMAND_GOAL;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public ViewCommand(String command) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void execute(ListManager listManager, StorageManager storageManager, User user, Recommender recommender) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (command.equalsIgnoreCase(COMMAND_VIEW_FOOD)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            viewFood(listManager.getFoodList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(COMMAND_VIEW_EXERCISE)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            viewExercise(listManager.getExerciseList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(COMMAND_VIEW_SUMMARY)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            viewSummary(listManager.getFoodList(), listManager.getExerciseList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.split(\" \")[0].equalsIgnoreCase(COMMAND_VIEW_SUMMARY)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            viewSummaryByDate(listManager.getFoodList(), listManager.getExerciseList(), command.split(\" \")[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(COMMAND_VIEW_BMI)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            viewBmi(user);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (command.equalsIgnoreCase(COMMAND_VIEW_PROFILE)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            viewProfile(user);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } else if (command.equalsIgnoreCase(COMMAND_GOAL)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            viewGoal(listManager.getFoodList(), listManager.getExerciseList(), listManager.getGoalList(), user);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        } else if (command.split(\" \")[0].equalsIgnoreCase(COMMAND_VIEW_EXERCISE)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            viewExerciseByDate(listManager.getExerciseList(), command.split(\" \")[1], true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        } else if (command.split(\" \")[0].equalsIgnoreCase((COMMAND_VIEW_FOOD))) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            viewFoodByDate(listManager.getFoodList(), command.split(\" \")[1], true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printFormatError(\"view\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //View food"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void viewFood(FoodList foodList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (foodList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(EMPTY_FOOD_LIST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            int printIndex \u003d index + 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            String lastDate \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(FOOD_LIST_HEADER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            while (index \u003c foodList.getSize()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (!lastDate.equals(foodList.getFood(index).getDate())) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printCustomMessage(EMPTY_STRING);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printMessageInYellow(DATE_HEADER + foodList.getFood(index).getDate());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    lastDate \u003d foodList.getFood(index).getDate();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    printIndex \u003d 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                Ui.printCustomMessage(OPEN_SQUARE_BRACKET + printIndex + CLOSE_SQUARE_BRACKET"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        + FOOD_HEADER + foodList.getFood(index).getFoodName()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        + SPACE_FORMATTING + CAL_HEADER + foodList.getFood(index).getCalories());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                printIndex++;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //View exercise"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void viewExercise(ExerciseList exerciseList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (exerciseList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(EMPTY_EXERCISE_LIST);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            int printIndex \u003d index + 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            String lastDate \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(EXERCISE_LIST_HEADER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            while (index \u003c exerciseList.getSize()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (!lastDate.equals(exerciseList.getExercise(index).getDate())) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printCustomMessage(EMPTY_STRING);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printMessageInYellow(DATE_HEADER + exerciseList.getExercise(index).getDate());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    lastDate \u003d exerciseList.getExercise(index).getDate();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    printIndex \u003d 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                Ui.printCustomMessage(OPEN_SQUARE_BRACKET + printIndex + CLOSE_SQUARE_BRACKET"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        + EXERCISE_HEADER + exerciseList.getExercise(index).getNameOfExercise()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                        + SPACE_FORMATTING + BURNT_CAL_HEADER + exerciseList.getExercise(index).getCalories());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sixletters"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                printIndex++;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void viewSummary(FoodList foodList, ExerciseList exerciseList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int foodIndex \u003d 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int exerciseIndex \u003d 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int totalCalorieConsumed \u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int totalCalorieBurnt \u003d 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (foodList.getSize() \u003d\u003d 0 \u0026\u0026 exerciseList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(NO_RECORDS_FOUND);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String currentDate;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        ArrayList\u003cString\u003e dateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        ArrayList\u003cInteger\u003e calorieList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (exerciseIndex \u003c exerciseList.getSize() \u0026\u0026 foodIndex \u003c foodList.getSize()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            if (Integer.parseInt(dateFormatter(exerciseList.getExercise(exerciseIndex).getDate()))"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    \u003c Integer.parseInt(dateFormatter(foodList.getFood(foodIndex).getDate()))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                dateList.add(exerciseList.getExercise(exerciseIndex).getDate());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                calorieList.add(-exerciseList.getExercise(exerciseIndex).getCalories());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                exerciseIndex++;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            } else if (Integer.parseInt(dateFormatter(exerciseList.getExercise(exerciseIndex).getDate()))"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    \u003d\u003d Integer.parseInt(dateFormatter(foodList.getFood(foodIndex).getDate()))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                dateList.add(exerciseList.getExercise(exerciseIndex).getDate());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                calorieList.add(-exerciseList.getExercise(exerciseIndex).getCalories());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                dateList.add(foodList.getFood(foodIndex).getDate());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                calorieList.add(foodList.getFood(foodIndex).getCalories());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                exerciseIndex++;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                foodIndex++;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            } else if (Integer.parseInt(dateFormatter(exerciseList.getExercise(exerciseIndex).getDate()))"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    \u003e Integer.parseInt(dateFormatter(foodList.getFood(foodIndex).getDate()))) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                dateList.add(foodList.getFood(foodIndex).getDate());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                calorieList.add(foodList.getFood(foodIndex).getCalories());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                foodIndex++;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (exerciseIndex \u003e\u003d exerciseList.getSize()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            while (foodIndex \u003c foodList.getSize()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                calorieList.add(foodList.getFood(foodIndex).getCalories());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                dateList.add(foodList.getFood(foodIndex).getDate());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                foodIndex++;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            while (exerciseIndex \u003c exerciseList.getSize()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                calorieList.add(-exerciseList.getExercise(exerciseIndex).getCalories());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                dateList.add(exerciseList.getExercise(exerciseIndex).getDate());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                exerciseIndex++;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (index \u003c dateList.size()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            currentDate \u003d dateList.get(index);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printMessageInYellow(DATE_HEADER + currentDate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            while (index \u003c dateList.size() \u0026\u0026 dateList.get(index).equals(currentDate)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (calorieList.get(index) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    totalCalorieBurnt +\u003d calorieList.get(index);//negative"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                } else if (calorieList.get(index) \u003e 0) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    totalCalorieConsumed +\u003d calorieList.get(index);//positive"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(CALORIE_CONSUMED_HEADER);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(String.valueOf(totalCalorieConsumed));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(CALORIE_BURNT_HEADER);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(String.valueOf(-totalCalorieBurnt));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(NET_CALORIE_HEADER);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(String.valueOf(totalCalorieBurnt + totalCalorieConsumed));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            totalCalorieBurnt \u003d 0;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            totalCalorieConsumed \u003d 0;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void viewSummaryByDate(FoodList foodList, ExerciseList exerciseList, String date) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            new SimpleDateFormat(\"dd/MM/yyyy\").parse(date);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            ExerciseList exerciseListByDate \u003d viewExerciseByDate(exerciseList, date, false);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            FoodList foodListByDate \u003d viewFoodByDate(foodList, date, false);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            viewSummary(foodListByDate, exerciseListByDate);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomError(ERROR_INVALID_DATE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            Ui.printCustomMessage(EMPTY_STRING);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private String dateFormatter(String date) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        //Convert date from DD/MM/YYYY to YYYYMMDD"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String newDateFormat;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        date \u003d date.replace(\"/\", \"\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        newDateFormat \u003d date.substring(4, 8) + date.substring(2, 4) + date.substring(0, 2);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return newDateFormat;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void viewBmi(User user) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(BMI_HEADER);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String bmiString \u003d String.format(\"%.2f\", user.getBmi());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(bmiString);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private void viewProfile(User user) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(USER_PROFILE_HEADER);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(user.toString());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private void viewGoal(FoodList foodList, ExerciseList exerciseList, GoalList goalList, User user) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (goalList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomMessage(EMPTY_GOAL_LIST);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hui444"
        },
        "content": "            goalList \u003d goalList.reformatGoalList(goalList, foodList, exerciseList, user);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hui444"
        },
        "content": "            for (int i \u003d 0; i \u003c goalList.getSize(); i++) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Goal goal \u003d goalList.getGoal(i);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage((i + 1) + \". [\" + goal.getGoalType() + \"][\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        + goal.getStatus(goal, foodList, exerciseList, user) + \"] \" + goal.getDescription());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static ExerciseList viewExerciseByDate(ExerciseList exerciseList, String date, Boolean isPrint) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            new SimpleDateFormat(\"dd/MM/yyyy\").parse(date);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            if (isPrint) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printCustomError(ERROR_INVALID_DATE);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        ExerciseList exercisesOnThatDate \u003d new ExerciseList();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        for (int i \u003d 0; i \u003c exerciseList.getSize(); i++) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            if (date.equals(exerciseList.getExercise(i).getDate())) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                exercisesOnThatDate.addExercise(exerciseList.getExercise(i));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (isPrint) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            if (exercisesOnThatDate.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printCustomMessage(EMPTY_EXERCISE_LIST_DATE);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                int index \u003d 0;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                int printIndex \u003d index + 1;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printCustomMessage(EXERCISE_LIST_HEADER);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printMessageInYellow(DATE_HEADER + date);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                while (index \u003c exercisesOnThatDate.getSize()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    Ui.printCustomMessage(OPEN_SQUARE_BRACKET + printIndex + CLOSE_SQUARE_BRACKET"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                            + EXERCISE_HEADER + exercisesOnThatDate.getExercise(index).getNameOfExercise()"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                            + SPACE_FORMATTING + BURNT_CAL_HEADER"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                            + exercisesOnThatDate.getExercise(index).getCalories());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    printIndex++;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return exercisesOnThatDate;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static FoodList viewFoodByDate(FoodList foodList, String date, Boolean isPrint) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            new SimpleDateFormat(\"dd/MM/yyyy\").parse(date);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            if (isPrint) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printCustomError(ERROR_INVALID_DATE);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        FoodList foodOnThatDate \u003d new FoodList();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        for (int i \u003d 0; i \u003c foodList.getSize(); i++) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            if (date.equals(foodList.getFood(i).getDate())) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                foodOnThatDate.addFood(foodList.getFood(i));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (isPrint) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            if (foodOnThatDate.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printCustomMessage(EMPTY_EXERCISE_LIST_DATE);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                int index \u003d 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                int printIndex \u003d index + 1;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printCustomMessage(FOOD_LIST_HEADER);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                Ui.printMessageInYellow(DATE_HEADER + date);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                while (index \u003c foodOnThatDate.getSize()) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    Ui.printCustomMessage(OPEN_SQUARE_BRACKET + printIndex + CLOSE_SQUARE_BRACKET"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                            + FOOD_HEADER + foodOnThatDate.getFood(index).getFoodName()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                            + SPACE_FORMATTING + BURNT_CAL_HEADER + foodOnThatDate.getFood(index).getCalories());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    printIndex++;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return foodOnThatDate;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 18,
      "sixletters": 13,
      "jerichochua": 16,
      "dmbclub": 61,
      "gohsonghan98": 206
    }
  },
  {
    "path": "src/main/java/fitr/common/Commands.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": " * Container for commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class Commands {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COMMAND_FOOD \u003d \"food\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COMMAND_EXERCISE \u003d \"exercise\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COMMAND_VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String COMMAND_RECOMMEND \u003d \"recommend\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String COMMAND_VIEW_FOOD \u003d \"food\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String COMMAND_VIEW_EXERCISE \u003d \"exercise\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String COMMAND_VIEW_SUMMARY \u003d \"summary\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String COMMAND_VIEW_BMI \u003d \"bmi\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String COMMAND_VIEW_PROFILE \u003d \"profile\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COMMAND_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public static final String COMMAND_CLEAR \u003d \"clear\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public static final String COMMAND_EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static final String COMMAND_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COMMAND_COMPLETE \u003d \"complete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String COMMAND_GOAL \u003d \"goal\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 13,
      "jerichochua": 3,
      "dmbclub": 1,
      "gohsonghan98": 6
    }
  },
  {
    "path": "src/main/java/fitr/common/DateManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class DateManager {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static String getCurrentDate() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Date currentDateTime \u003d calendar.getTime();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "        SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"d/M/y\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return dateFormatter.format(currentDateTime);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 13,
      "jerichochua": 1
    }
  },
  {
    "path": "src/main/java/fitr/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FITR_WORD \u003d \" _______   __   __\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "            + \"|    ___| |__| |  |_  .----.\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "            + \"|    ___| |  | |   _| |   _|\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "            + \"|___|     |__| |____| |__|\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String MESSAGE_GREET \u003d FITR_WORD + \"Hello! Welcome to Fitr.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String MESSAGE_SUGGEST_QUESTION \u003d \"What can I do for you?\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String MESSAGE_BYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "    //Format messages"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_FOOD \u003d \"food \u003cName of food\u003e /\u003cNumber of Calories\u003e \u003cQuantity (Optional)\u003e\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public static final String FORMAT_EDIT_FOOD \u003d \"food \u003cName of food\u003e /\u003cNumber of Calories\u003e \u003cQuantity\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_EXERCISE \u003d \"exercise \u003cName of exercise\u003e /\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "            + \"\u003cNumber of Calories\u003e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_DELETE \u003d \"delete food \u003cIndex from Food List\u003e \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "            + \"or delete exercise \u003cIndex from Exercise List\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String FORMAT_GOAL \u003d \"goal food \u003cgoal description\u003e or goal exercise \u003cgoal description\u003e\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //User class messages"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String USER_SETUP_GREET \u003d \"Before we begin, let me get to know you :)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String INPUT_NAME \u003d \"Please enter your name:\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String INPUT_AGE \u003d \"Please enter your age:\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String INPUT_HEIGHT \u003d \"Please enter your height (in m):\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String INPUT_WEIGHT \u003d \"Please enter your weight (in kg):\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String INPUT_GENDER \u003d \"Please enter your gender (Enter \u0027M\u0027 for Male or \u0027F\u0027 for Female):\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String SETUP_COMPLETE \u003d \"Setup complete!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_AGE_INPUT \u003d \"Oops! That is an invalid age input.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_GENDER_INPUT \u003d \"Oops! That is an invalid gender input.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_HEIGHT_INPUT \u003d \"Oops! That is an invalid height input.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_WEIGHT_INPUT \u003d \"Oops! That is an invalid weight input.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_FITNESS_INPUT \u003d \"Oops! That is an invalid fitness level input.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String NAME_OUTPUT_HEADER \u003d \"Name: \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String AGE_OUTPUT_HEADER \u003d \"Age: \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String GENDER_OUTPUT_HEADER \u003d \"Gender: \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String HEIGHT_OUTPUT_HEADER \u003d \"Height (in m): \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String WEIGHT_OUTPUT_HEADER \u003d \"Weight (in kg): \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FITNESS_OUTPUT_HEADER \u003d \"Your fitness level: \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String LINE_BREAK \u003d \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String MALE_SYMBOL \u003d \"M\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FEMALE_SYMBOL \u003d \"F\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String MALE_STRING \u003d \"Male\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FEMALE_STRING \u003d \"Female\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FIT_STRING \u003d \"Fit\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String UNFIT_STRING \u003d \"Unfit\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String NORMAL_STRING \u003d \"Normal\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String NULL_STRING \u003d \"NULL\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_COMMAND \u003d \"Sorry this is an invalid command!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //ViewCommand class messages"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String ERROR_INVALID_VIEW_COMMAND \u003d \"Sorry this is an invalid view command!\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EMPTY_FOOD_LIST \u003d \"The food list is empty...\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EMPTY_EXERCISE_LIST \u003d \"The exercise list is empty...\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static final String EMPTY_EXERCISE_LIST_DATE \u003d \"The exercise list on that date is empty...\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String EMPTY_GOAL_LIST \u003d \"The goal list is empty...\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FOOD_LIST_HEADER \u003d \"Here is the list of your food:\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EXERCISE_LIST_HEADER \u003d \"Here is the list of your exercises:\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String CALORIE_CONSUMED_HEADER \u003d \"Total calorie consumed:\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String CALORIE_BURNT_HEADER \u003d \"Total calorie burnt:\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String NET_CALORIE_HEADER \u003d \"Net calorie:\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String BMI_HEADER \u003d \"Your BMI is: \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String USER_PROFILE_HEADER \u003d \"User profile:\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String OPEN_SQUARE_BRACKET \u003d \"[\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String CLOSE_SQUARE_BRACKET \u003d \"] \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FOOD_HEADER \u003d \"Food: \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EXERCISE_HEADER \u003d \"Exercise: \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String SPACE_FORMATTING \u003d \"\\n    \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String CAL_HEADER \u003d \"Cal: \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static final String DATE_HEADER \u003d \"Date: \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String BURNT_CAL_HEADER \u003d \"Burnt Cal: \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public static final String INTENSITY_CAL_HEADER \u003d \"Intensity: \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static final String ERROR_INVALID_DATE \u003d \"Sorry, please enter a correct date in the format dd/MM/yyyy\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String NO_RECORDS_FOUND \u003d \"No records found!\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //EditProfileCommand class messages"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_HEIGHT \u003d \"height\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_WEIGHT \u003d \"weight\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_AGE \u003d \"age\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_GENDER \u003d \"gender\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_FITNESS \u003d \"fitness\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String MISSING_FILE \u003d \"Theres no file\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_NAME_HEADER \u003d \"Change your name to: \";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String NAME_ECHO_HEADER \u003d \"Name changed to: \";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_HEIGHT_HEADER \u003d \"Change your height (in m) to: \";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String HEIGHT_ECHO_HEADER \u003d \"Height (in m) changed to: \";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_WEIGHT_HEADER \u003d \"Change your weight (in kg) to: \";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String WEIGHT_ECHO_HEADER \u003d \"Weight (in kg) changed to: \";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_AGE_HEADER \u003d \"Change your age to: \";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String AGE_ECHO_HEADER \u003d \"Age changed to: \";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String EDIT_GENDER_HEADER \u003d \"Change your gender (M|F) to: \";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String GENDER_ECHO_HEADER \u003d \"Gender changed to: \";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public static final String INPUT_FITNESS_LEVEL \u003d \"Please indicate your fitness level to be used for determining \" "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            + \"intensity of exercises.\\n(0 for Unfit; 1 for Normal; 2 for Fit): \";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public static final String FITNESS_ECHO_HEADER \u003d \"Fitness level changed to: \";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 42,
      "sixletters": 1,
      "jerichochua": 4,
      "dmbclub": 3,
      "gohsonghan98": 52
    }
  },
  {
    "path": "src/main/java/fitr/common/ResourceManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " * Handles the loading of resources."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class ResourceManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Loads the resource with a given file name."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @param fileName Name of the file in the resources folder"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @return an InputStreamReader of the loaded file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public static InputStreamReader loadResource(String fileName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        InputStream inputStream \u003d ResourceManager.class.getClassLoader().getResourceAsStream(fileName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (inputStream \u003d\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 25
    }
  },
  {
    "path": "src/main/java/fitr/exception/FitrException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class FitrException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 3,
      "jerichochua": 1
    }
  },
  {
    "path": "src/main/java/fitr/exception/InvalidFileFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class InvalidFileFormatException extends FitrException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 4
    }
  },
  {
    "path": "src/main/java/fitr/goal/CheckGoalStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.goal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.Goal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.text.NumberFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class CheckGoalStatus {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static String checkGoalStatus(String status, Goal goal, FoodList foodList,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "                                         ExerciseList exerciseList, User user) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "        int targetCalorie;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "        int userConsumedCalorie \u003d user.calculateCalorieConsumed(foodList, goal.getCreatedDate()).get();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "        int userBurntCalorie \u003d user.calculateCalorieBurnt(exerciseList, goal.getCreatedDate()).get();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "        int calorieDifference;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "        NumberFormat formatter \u003d new DecimalFormat(\"#0.0\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (goal.getDescription().contains(\"Burn less than \")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "                targetCalorie \u003d Integer.parseInt(goal.getDescription().split(\" \")[3]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "                calorieDifference \u003d targetCalorie - userBurntCalorie;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "                status \u003d String.valueOf((calorieDifference \u003c 0) ? 0.0 : 100.0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else if (goal.getDescription().contains(\"Burn more than \")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "                targetCalorie \u003d Integer.parseInt(goal.getDescription().split(\" \")[3]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "                calorieDifference \u003d targetCalorie - userBurntCalorie;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "                status \u003d String.valueOf((calorieDifference \u003c 0) ? 100.0 :"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        formatter.format((double) userBurntCalorie / (double) targetCalorie * 100));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else if (goal.getDescription().contains(\"Eat more than \")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "                targetCalorie \u003d Integer.parseInt(goal.getDescription().split(\" \")[3]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "                calorieDifference \u003d targetCalorie - userConsumedCalorie;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "                status \u003d String.valueOf((calorieDifference \u003c 0) ? 100.0 :"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        formatter.format((double) userConsumedCalorie / (double) targetCalorie * 100));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else if (goal.getDescription().contains(\"Eat less than \")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": "                targetCalorie \u003d Integer.parseInt(goal.getDescription().split(\" \")[3]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "                calorieDifference \u003d targetCalorie - userConsumedCalorie;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "                status \u003d String.valueOf((calorieDifference \u003c 0) ? 0.0 : 100.0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return status;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 47,
      "gohsonghan98": 1
    }
  },
  {
    "path": "src/main/java/fitr/goal/FormatGoal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.goal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.Goal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class FormatGoal {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static Goal formatGoal(String createdDate, String goalType, String goalDescription) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Goal newGoal \u003d new Goal(createdDate, goalType, goalDescription);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": "        String descriptionPart \u003d (goalType.equals(\"E\")) ? \"Burn\" : \"Eat\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "        boolean isPositiveNumber \u003d goalDescription.substring(1).trim().matches(\"\\\\d+\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "        if (Objects.equals(goalDescription.split(\" \", 2)[0].trim().charAt(0), \u0027\u003e\u0027)) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (isPositiveNumber) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "                newGoal \u003d new Goal(createdDate, goalType, descriptionPart + \" more than \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        + goalDescription.substring(1).trim() + \" calories\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } else if (Objects.equals(goalDescription.split(\" \", 2)[0].trim().charAt(0), \u0027\u003c\u0027)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (isPositiveNumber) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "                newGoal \u003d new Goal(createdDate, goalType, descriptionPart + \" less than \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "                        + goalDescription.substring(1).trim() + \" calories\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return newGoal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 30
    }
  },
  {
    "path": "src/main/java/fitr/list/ExerciseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class ExerciseList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final ArrayList\u003cExercise\u003e exerciseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ExerciseList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ExerciseList(ArrayList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.exerciseList \u003d exerciseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseList.add(exercise);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Exercise getExercise(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList.get(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Exercise deleteExercise(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList.remove(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseList.clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 37
    }
  },
  {
    "path": "src/main/java/fitr/list/FoodList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class FoodList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final ArrayList\u003cFood\u003e foodList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public FoodList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public FoodList(ArrayList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.foodList \u003d foodList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodList.add(food);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Food getFood(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList.get(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Food deleteFood(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList.remove(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodList.clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 3,
      "jerichochua": 34
    }
  },
  {
    "path": "src/main/java/fitr/list/GoalList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.Goal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "public class GoalList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private final ArrayList\u003cGoal\u003e goalList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public GoalList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public GoalList(ArrayList\u003cGoal\u003e goalList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "        this.goalList \u003d goalList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void addGoal(Goal goal) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList.add(goal);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public Goal deleteGoal(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return goalList.remove(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public Goal getGoal(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return goalList.get(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return goalList.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public ArrayList\u003cGoal\u003e getGoalList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return goalList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public GoalList reformatGoalList(GoalList goalList, FoodList foodList, ExerciseList exerciseList, User user) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "        GoalList completedGoalList \u003d new GoalList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "        GoalList incompletedGoalList \u003d new GoalList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": "        for (int i \u003d 0; i \u003c goalList.getSize(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (goalList.getGoal(i).getStatus(goalList.getGoal(i), foodList, exerciseList, user).equals(\"✓\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "                completedGoalList.addGoal(goalList.getGoal(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": "                incompletedGoalList.addGoal(goalList.getGoal(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList.clearList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": "        for (int i \u003d 0; i \u003c incompletedGoalList.getSize(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hui444"
        },
        "content": "            goalList.addGoal(incompletedGoalList.getGoal(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": "        for (int i \u003d 0; i \u003c completedGoalList.getSize(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hui444"
        },
        "content": "            goalList.addGoal(completedGoalList.getGoal(i));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return goalList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 67
    }
  },
  {
    "path": "src/main/java/fitr/list/ListManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class ListManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final ExerciseList exerciseList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final FoodList foodList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final GoalList goalList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ListManager(StorageManager storageManager) throws IOException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseList \u003d new ExerciseList(storageManager.loadExerciseList());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodList \u003d new FoodList(storageManager.loadFoodList());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        goalList \u003d new GoalList(storageManager.loadGoalList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseList.addExercise(exercise);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Exercise getExercise(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList.getExercise(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void deleteExercise(int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseList.deleteExercise(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ExerciseList getExerciseList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void clearExerciseList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseList.clearList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodList.addFood(food);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Food getFood(int index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList.getFood(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void deleteFood(int index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodList.deleteFood(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public FoodList getFoodList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void clearFoodList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodList.clearList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addGoal(Goal goal) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        goalList.addGoal(goal);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Goal getGoal(int index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return goalList.getGoal(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void deleteGoal(int index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        goalList.deleteGoal(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public GoalList getGoalList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return goalList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void clearGoalList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalList.clearList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 3,
      "jerichochua": 77
    }
  },
  {
    "path": "src/main/java/fitr/list/StandardExerciseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.StandardExercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class StandardExerciseList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    private final ArrayList\u003cStandardExercise\u003e standardExerciseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public StandardExerciseList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public StandardExerciseList(ArrayList\u003cStandardExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        this.standardExerciseList \u003d exerciseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void addExercise(StandardExercise exercise) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        standardExerciseList.add(exercise);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public StandardExercise getExercise(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return standardExerciseList.get(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        return standardExerciseList.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 26,
      "jerichochua": 3
    }
  },
  {
    "path": "src/main/java/fitr/list/TipList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class TipList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    private final ArrayList\u003cString\u003e tipList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public TipList(ArrayList\u003cString\u003e tipList) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        this.tipList \u003d tipList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public String getTip(int totalTips) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        return tipList.get(random.nextInt(totalTips));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 17
    }
  },
  {
    "path": "src/main/java/fitr/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.EditEntryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.EditProfileCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.InvalidCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.Commands;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class EditCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Pattern ARGUMENT_FORMAT \u003d Pattern.compile(\"(?\u003ctype\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final String fullArgument;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public EditCommandParser(String argument) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.fullArgument \u003d argument.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public Command editCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Matcher matcher \u003d ARGUMENT_FORMAT.matcher(fullArgument);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new InvalidCommand(fullArgument);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String editType \u003d matcher.group(\"type\").trim().toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String arguments \u003d matcher.group(\"arguments\").trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        switch (editType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Messages.EDIT_NAME:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Messages.EDIT_AGE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Messages.EDIT_GENDER:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Messages.EDIT_HEIGHT:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Messages.EDIT_WEIGHT:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Messages.EDIT_FITNESS:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new EditProfileCommand(editType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Commands.COMMAND_EXERCISE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Commands.COMMAND_FOOD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case Commands.COMMAND_GOAL:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new EditEntryCommand(editType, arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new InvalidCommand(fullArgument);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 1,
      "jerichochua": 46
    }
  },
  {
    "path": "src/main/java/fitr/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.AddFoodCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.command.CompleteGoalCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.InvalidCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.command.AddExerciseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.command.ViewCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.command.RecommendCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.command.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.command.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.command.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.command.AddGoalCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.common.Commands;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": " * Parses the user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dmbclub"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommand\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "     * Parses the user input and return a corresponding command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "     * @param userInput String of user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "     * @return a Command object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static Command parse(String userInput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Matcher matcher \u003d COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return new InvalidCommand(userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        String userCommand \u003d matcher.group(\"command\").trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        String arguments \u003d matcher.group(\"arguments\").trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        switch (userCommand.toLowerCase()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        case Commands.COMMAND_FOOD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return new AddFoodCommand(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        case Commands.COMMAND_EXERCISE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return new AddExerciseCommand(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        case Commands.COMMAND_VIEW:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return new ViewCommand(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        case Commands.COMMAND_RECOMMEND:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            return new RecommendCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Commands.COMMAND_EDIT:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new EditCommandParser(arguments).editCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        case Commands.COMMAND_HELP:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return new HelpCommand(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        case Commands.COMMAND_DELETE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return new DeleteCommand(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        case Commands.COMMAND_CLEAR:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new ClearCommand(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        case Commands.COMMAND_BYE:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            return new ExitCommand(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case Commands.COMMAND_GOAL:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return new AddGoalCommand(arguments, getCurrentDate());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case Commands.COMMAND_COMPLETE:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return new CompleteGoalCommand(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return new InvalidCommand(userCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 15,
      "jerichochua": 13,
      "dmbclub": 41,
      "gohsonghan98": 4
    }
  },
  {
    "path": "src/main/java/fitr/storage/ExerciseStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.storage.StorageManager.COMMA_SEPARATOR;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " * Handles the read and write operations of the user\u0027s exercises."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class ExerciseStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(ExerciseStorage.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String DEFAULT_EXERCISE_LIST_PATH \u003d \"exerciseList.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final String exerciseListPath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ExerciseStorage() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this(DEFAULT_EXERCISE_LIST_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ExerciseStorage(String exerciseListPath) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.exerciseListPath \u003d exerciseListPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        File exerciseListFile \u003d new File(exerciseListPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!exerciseListFile.exists()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            boolean isFileExists \u003d exerciseListFile.createNewFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LOGGER.fine(\"Exercise list file created: \" + exerciseListPath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Loads the user\u0027s exercises from a file and returns an ArrayList of Exercise objects."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @return an ArrayList of Exercise objects"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws FileNotFoundException if the file is not found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws InvalidFileFormatException if the file format is invalid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cExercise\u003e loadExerciseList() throws FileNotFoundException, InvalidFileFormatException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to read file: \" + exerciseListPath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cExercise\u003e exerciseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String[] arguments;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        File exerciseListFile \u003d new File(exerciseListPath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Scanner readFile \u003d new Scanner(exerciseListFile);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        while (readFile.hasNext()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            line \u003d readFile.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            arguments \u003d line.split(COMMA_SEPARATOR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            if (arguments.length !\u003d 3) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            exerciseList.add(new Exercise(arguments[0], new Calorie(Integer.parseInt(arguments[1])), arguments[2]));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Exercise list file read successfully.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Writes the exercise list data into a file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @param exerciseList the exercise list to write to the file"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws IOException if an I/O error has occurred"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void writeExerciseList(ExerciseList exerciseList) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to write to file: \" + exerciseListPath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FileWriter file \u003d new FileWriter(exerciseListPath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Exercise exercise;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        for (int i \u003d 0; i \u003c exerciseList.getSize(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            exercise \u003d exerciseList.getExercise(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            file.write(exercise.getNameOfExercise()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    + COMMA_SEPARATOR + exercise.getCalories()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    + COMMA_SEPARATOR + exercise.getDate() + System.lineSeparator());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Exercise list file written successfully.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 86,
      "dmbclub": 4
    }
  },
  {
    "path": "src/main/java/fitr/storage/FoodStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.storage.StorageManager.COMMA_SEPARATOR;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " * Handles the read and write operations of the user\u0027s food."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class FoodStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(FoodStorage.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String DEFAULT_FOOD_LIST_PATH \u003d \"foodList.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final String foodListPath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public FoodStorage() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this(DEFAULT_FOOD_LIST_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public FoodStorage(String foodListPath) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        this.foodListPath \u003d foodListPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        File foodListFile \u003d new File(foodListPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!foodListFile.exists()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            boolean isFileExists \u003d foodListFile.createNewFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LOGGER.fine(\"Food list file created: \" + foodListPath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Loads the list of the user\u0027s consumed food from a file and returns an ArrayList of Food objects."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @return an ArrayList of Food objects"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws FileNotFoundException FileNotFoundException if the file is not found"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws InvalidFileFormatException if the file format is invalid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cFood\u003e loadFoodList() throws FileNotFoundException, InvalidFileFormatException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to read file: \" + foodListPath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String[] arguments;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        File foodListFile \u003d new File(foodListPath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Scanner readFile \u003d new Scanner(foodListFile);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        while (readFile.hasNext()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            line \u003d readFile.nextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            arguments \u003d line.split(COMMA_SEPARATOR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "            if (arguments.length !\u003d 4) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            foodList.add(new Food(arguments[0],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    new Calorie(Integer.parseInt(arguments[1])), Integer.parseInt(arguments[2]), arguments[3]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Food list file read successfully.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Writes the food list data into a file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @param foodList the food list to write to the file"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws IOException if an I/O error has occurred"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void writeFoodList(FoodList foodList) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to write to file: \" + foodListPath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FileWriter file \u003d new FileWriter(foodListPath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Food food;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        for (int i \u003d 0; i \u003c foodList.getSize(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            food \u003d foodList.getFood(i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            file.write(food.getFoodName()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                    + COMMA_SEPARATOR + food.getCalories()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    + COMMA_SEPARATOR + food.getAmountOfFood()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "                    + COMMA_SEPARATOR + food.getDate() + System.lineSeparator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Food list file written successfully.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 89,
      "dmbclub": 4
    }
  },
  {
    "path": "src/main/java/fitr/storage/GoalStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Goal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.GoalList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.storage.StorageManager.COMMA_SEPARATOR;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class GoalStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(GoalStorage.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String GOAL_LIST_PATH \u003d \"goals.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public GoalStorage() throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        File goalListFile \u003d new File(GOAL_LIST_PATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!goalListFile.exists()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            boolean isFileExists \u003d goalListFile.createNewFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LOGGER.fine(\"Goal list file created: \" + GOAL_LIST_PATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Loads the user\u0027s goals from a file and returns an ArrayList of Goal objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @return an ArrayList of Goal objects"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws FileNotFoundException if the file is not found"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public ArrayList\u003cGoal\u003e loadGoalList() throws FileNotFoundException, ArrayIndexOutOfBoundsException,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "            InvalidFileFormatException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to read file: \" + GOAL_LIST_PATH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cGoal\u003e goalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String[] arguments;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        File goalListFile \u003d new File(GOAL_LIST_PATH);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Scanner readFile \u003d new Scanner(goalListFile);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        while (readFile.hasNext()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            line \u003d readFile.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            arguments \u003d line.split(COMMA_SEPARATOR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": "            if (arguments.length !\u003d 4) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "                throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "            goalList.add(new Goal(arguments[0], arguments[1], arguments[2], arguments[3]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Goal list file read successfully.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return goalList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Writes the goal list data into a file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @param goalList the goal list to write to the file"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws IOException if an I/O error has occurred"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void writeGoalList(GoalList goalList, FoodList foodList, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hui444"
        },
        "content": "                              User user) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to write to file: \" + GOAL_LIST_PATH);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(GOAL_LIST_PATH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Goal goal;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        for (int i \u003d 0; i \u003c goalList.getSize(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            goal \u003d goalList.getGoal(i);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hui444"
        },
        "content": "            fileWriter.write(goal.getCreatedDate()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    + COMMA_SEPARATOR + goal.getGoalType()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    + COMMA_SEPARATOR + goal.getStatus(goal,foodList, exerciseList, user)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                    + COMMA_SEPARATOR + goal.getDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Goal list file written successfully.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 17,
      "jerichochua": 68
    }
  },
  {
    "path": "src/main/java/fitr/storage/StandardExerciseStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.StandardExercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.ResourceManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.StandardExerciseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "public class StandardExerciseStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String DEFAULT_UPPER_BODY_FILEPATH \u003d \"upperBodyList.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String DEFAULT_LOWER_BODY_FILEPATH \u003d \"lowerBodyList.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String DEFAULT_AEROBIC_FILEPATH \u003d \"aerobicList.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String DEFAULT_STRETCH_FILEPATH \u003d \"stretchList.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private static final String COMMA_SEPARATOR \u003d \", \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public StandardExerciseStorage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public StandardExerciseList loadUpperBodyList() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        StandardExerciseList upperBodyList \u003d new StandardExerciseList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        upperBodyList \u003d readToList(DEFAULT_UPPER_BODY_FILEPATH, upperBodyList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return upperBodyList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public StandardExerciseList loadLowerBodyList() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        StandardExerciseList lowerBodyList \u003d new StandardExerciseList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        lowerBodyList \u003d readToList(DEFAULT_LOWER_BODY_FILEPATH, lowerBodyList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return lowerBodyList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public StandardExerciseList loadAerobicList() throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        StandardExerciseList aerobicList \u003d new StandardExerciseList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        aerobicList \u003d readToList(DEFAULT_AEROBIC_FILEPATH, aerobicList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return aerobicList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public StandardExerciseList loadStretchList() throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        StandardExerciseList stretchList \u003d new StandardExerciseList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        stretchList \u003d readToList(DEFAULT_STRETCH_FILEPATH, stretchList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return stretchList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private StandardExerciseList readToList(String filePath, StandardExerciseList exerciseList) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(ResourceManager.loadResource(filePath));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String[] arguments;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        double metValue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        ArrayList\u003cDouble\u003e duration;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        ArrayList\u003cInteger\u003e sets;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            line \u003d line.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            arguments \u003d line.split(COMMA_SEPARATOR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            name \u003d arguments[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            metValue \u003d Double.parseDouble(arguments[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            duration \u003d new ArrayList\u003cDouble\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            duration.add(Double.parseDouble(arguments[2]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            duration.add(Double.parseDouble(arguments[3]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sixletters"
        },
        "content": "            duration.add(Double.parseDouble(arguments[4]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            sets \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            sets.add(Integer.parseInt(arguments[5]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            sets.add(Integer.parseInt(arguments[6]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            sets.add(Integer.parseInt(arguments[7]));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            StandardExercise exercise \u003d new StandardExercise(name, metValue, duration, sets);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            exerciseList.addExercise(exercise);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 5,
      "jerichochua": 19,
      "gohsonghan98": 48
    }
  },
  {
    "path": "src/main/java/fitr/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.GoalList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    protected static final String COMMA_SEPARATOR \u003d \",\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final ExerciseStorage exerciseStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final FoodStorage foodStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final GoalStorage goalStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final TipStorage tipStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private final UserStorage userStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public StorageManager() throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseStorage \u003d new ExerciseStorage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodStorage \u003d new FoodStorage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        goalStorage \u003d new GoalStorage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        tipStorage \u003d new TipStorage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        userStorage \u003d new UserStorage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cExercise\u003e loadExerciseList() throws FileNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return exerciseStorage.loadExerciseList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Error: Invalid exercise file - new exercise list created!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void writeExerciseList(ExerciseList exerciseList) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        exerciseStorage.writeExerciseList(exerciseList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cFood\u003e loadFoodList() throws FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return foodStorage.loadFoodList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Error: Invalid food file - new food list created!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void writeFoodList(FoodList foodList) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        foodStorage.writeFoodList(foodList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public User loadUserProfile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return userStorage.loadUserProfile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            Ui.printCustomError(\"Error: Invalid user file - creating a new user!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new User();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void writeUserProfile(User user) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        userStorage.writeUserProfile(user);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cGoal\u003e loadGoalList() throws FileNotFoundException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hui444"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return goalStorage.loadGoalList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hui444"
        },
        "content": "        } catch (InvalidFileFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(\"Error: Invalid goal file - new goal list created!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hui444"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void writeGoalList(GoalList goalList, FoodList foodList, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hui444"
        },
        "content": "                              User user) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hui444"
        },
        "content": "        goalStorage.writeGoalList(goalList, foodList, exerciseList, user);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cString\u003e loadTipList() throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return tipStorage.loadTipList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 8,
      "jerichochua": 81
    }
  },
  {
    "path": "src/main/java/fitr/storage/TipStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.common.ResourceManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class TipStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(TipStorage.class.getName());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String TIP_LIST_PATH \u003d \"tips.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Loads the tips from a file and returns an ArrayList of String tips."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @return an ArrayList of String tips"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws IOException if an I/O error has occurred"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public ArrayList\u003cString\u003e loadTipList() throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to read file: \" + TIP_LIST_PATH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cString\u003e tipList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(ResourceManager.loadResource(TIP_LIST_PATH));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            tipList.add(line);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Tip list file written successfully.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return tipList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 33
    }
  },
  {
    "path": "src/main/java/fitr/storage/UserStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.storage.StorageManager.COMMA_SEPARATOR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class UserStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(UserStorage.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private static final String USER_PROFILE_PATH \u003d \"userProfile.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public UserStorage() throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        File userProfile \u003d new File(USER_PROFILE_PATH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (!userProfile.exists()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            boolean isFileExists \u003d userProfile.createNewFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LOGGER.fine(\"User profile created: \" + USER_PROFILE_PATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Reads the user\u0027s data from the text file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @return an User object with data from the text file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws FileNotFoundException if the file is not found"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws InvalidFileFormatException if the file format is invalid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public User loadUserProfile() throws FileNotFoundException, InvalidFileFormatException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to read file: \" + USER_PROFILE_PATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        File file \u003d new File(USER_PROFILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        Scanner readFile \u003d new Scanner(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            line \u003d readFile.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            LOGGER.fine(\"New user created.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            return new User();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String[] arguments \u003d line.split(COMMA_SEPARATOR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        if (arguments.length !\u003d 6) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "            throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String name \u003d arguments[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        String gender \u003d arguments[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        int age \u003d Integer.parseInt(arguments[2]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        double height \u003d Double.parseDouble(arguments[3]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        double weight \u003d Double.parseDouble(arguments[4]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int userFitnessLevel \u003d Integer.parseInt(arguments[5]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"User profile file read successfully.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return new User(name, age, height, weight, gender, userFitnessLevel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * Writes the user\u0027s data into the text file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @param user the user to load the file into"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     * @throws IOException if an I/O error has occurred"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void writeUserProfile(User user) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assert user !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"Attempting to write to file: \" + USER_PROFILE_PATH);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FileWriter file \u003d new FileWriter(USER_PROFILE_PATH);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        file.write(user.getName()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                + COMMA_SEPARATOR + user.getGender()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                + COMMA_SEPARATOR + user.getAge()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "                + COMMA_SEPARATOR + user.getHeight()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                + COMMA_SEPARATOR + user.getWeight()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                + COMMA_SEPARATOR + user.getFitnessLevel() + System.lineSeparator());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        LOGGER.fine(\"User profile file written successfully.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 85,
      "gohsonghan98": 4
    }
  },
  {
    "path": "src/main/java/fitr/tip/TipManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.tip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.list.TipList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class TipManager {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    private final TipList tips;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public TipManager(TipList tips) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        this.tips \u003d tips;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        int totalNumberOfTips \u003d 49;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Ui.printMessageInYellow(\"Tip of the day!\" + System.lineSeparator() + tips.getTip(totalNumberOfTips));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 1,
      "dmbclub": 17
    }
  },
  {
    "path": "src/main/java/fitr/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_BYE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_DELETE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_EDIT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_EXERCISE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_FOOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_GOAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_BMI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_EXERCISE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_FOOD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_PROFILE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Commands.COMMAND_VIEW_SUMMARY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_COMMAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Messages.FORMAT_DELETE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Messages.FORMAT_EDIT_FOOD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Messages.FORMAT_EXERCISE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Messages.FORMAT_FOOD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Messages.FORMAT_GOAL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Messages.MESSAGE_BYE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Messages.MESSAGE_GREET;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.Messages.MESSAGE_SUGGEST_QUESTION;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hui444"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": " * Prints messages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hui444"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final String HELP_SPACER \u003d \"%-18s%s%n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final String GREEN_COLOUR \u003d \"\\033[0;32m\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final String RED_COLOUR \u003d \"\\033[0;31m\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final String RESET_COLOUR \u003d \"\\033[0m\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static final String YELLOW_COLOUR \u003d \"\\033[0;93m\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final String SPACER \u003d \" \".repeat(18);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hui444"
        },
        "content": "    private static final String FORMAT \u003d GREEN_COLOUR + \"Format: \" + RESET_COLOUR;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static String read() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hui444"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static void printCustomMessage(String message) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hui444"
        },
        "content": "    //Prints message in red"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static void printCustomError(String errorMessage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.println(RED_COLOUR + errorMessage + RESET_COLOUR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hui444"
        },
        "content": "    //Prints message in yellow"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static void printMessageInYellow(String message) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.println(YELLOW_COLOUR + message + RESET_COLOUR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static void printGreetingMessage() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(MESSAGE_GREET);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static void printSuggestQuestion() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(MESSAGE_SUGGEST_QUESTION);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static void printExitMessage() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(MESSAGE_BYE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public static void printHelpMessage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(\"These are commands Fitr understands:\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_FOOD, \"Adds food entry to Fitr program\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(SPACER + FORMAT + FORMAT_FOOD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_EXERCISE, \"Adds exercise entry to Fitr program\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(SPACER + FORMAT + FORMAT_EXERCISE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_VIEW + \" \" + COMMAND_VIEW_PROFILE, \"View your profile information\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_VIEW + \" \" + COMMAND_VIEW_BMI, \"View your BMI\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_VIEW + \" \" + COMMAND_VIEW_FOOD, \"View food entries\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_VIEW + \" \" + COMMAND_VIEW_EXERCISE, \"View exercise entries\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_VIEW + \" \" + COMMAND_VIEW_SUMMARY, \"View calorie summary\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_EDIT + \" \" + COMMAND_EXERCISE, \"Edit a previous exercise entry\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        printCustomMessage(SPACER + FORMAT + COMMAND_EDIT + \" \" + FORMAT_EXERCISE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_EDIT + \" \" + COMMAND_FOOD, \"Edit a previous food entry\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        printCustomMessage(SPACER + FORMAT + COMMAND_EDIT + \" \" + FORMAT_EDIT_FOOD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_DELETE, \"Deletes selected entry\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(SPACER + FORMAT + FORMAT_DELETE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.out.printf(HELP_SPACER, COMMAND_BYE, \"Exits the program\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static void printFormatError(String command) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hui444"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case COMMAND_FOOD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomError(\"Please input in the correct format!\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomMessage(FORMAT + FORMAT_FOOD);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case COMMAND_EXERCISE:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomError(\"Please input in the correct format!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomMessage(FORMAT + FORMAT_EXERCISE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case COMMAND_DELETE:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomError(\"Please input in the correct format!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomMessage(FORMAT + FORMAT_DELETE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hui444"
        },
        "content": "        case COMMAND_GOAL:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomError(\"Please input in the correct format!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printCustomMessage(FORMAT + FORMAT_GOAL);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        case COMMAND_VIEW:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            printCustomError(\"Please input in the correct format!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            printCustomMessage(FORMAT + \"view \u003cTYPE\u003e\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            System.out.printf(HELP_SPACER, \"\u003cTYPE\u003e\", \"\u003cDESCRIPTION\u003e\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            System.out.printf(HELP_SPACER, COMMAND_VIEW_PROFILE, \"View your profile\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            System.out.printf(HELP_SPACER, COMMAND_VIEW_BMI, \"View your BMI\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            System.out.printf(HELP_SPACER, COMMAND_VIEW_FOOD, \"View food entries\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            System.out.printf(HELP_SPACER, COMMAND_VIEW_EXERCISE, \"View exercise entries\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            System.out.printf(HELP_SPACER, COMMAND_VIEW_SUMMARY, \"View calorie summary\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            System.out.printf(HELP_SPACER, COMMAND_GOAL, \"View your food and exercise goals\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hui444"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hui444"
        },
        "content": "            printInvalidCommandError();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hui444"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hui444"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public static void printInvalidCommandError() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomError(ERROR_INVALID_COMMAND);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hui444"
        },
        "content": "        printCustomMessage(\"Use \u0027help\u0027 to see the list of commands Fitr understands.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 84,
      "sixletters": 4,
      "jerichochua": 28,
      "dmbclub": 9,
      "gohsonghan98": 11
    }
  },
  {
    "path": "src/main/java/fitr/user/User.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.command.ViewCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Calorie;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.USER_SETUP_GREET;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.INPUT_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.INPUT_AGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.INPUT_HEIGHT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.INPUT_WEIGHT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.INPUT_GENDER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.SETUP_COMPLETE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_AGE_INPUT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_GENDER_INPUT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_HEIGHT_INPUT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_WEIGHT_INPUT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.ERROR_INVALID_FITNESS_INPUT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.NAME_OUTPUT_HEADER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.AGE_OUTPUT_HEADER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.GENDER_OUTPUT_HEADER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.HEIGHT_OUTPUT_HEADER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.WEIGHT_OUTPUT_HEADER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FITNESS_OUTPUT_HEADER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.LINE_BREAK;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.MALE_SYMBOL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FEMALE_SYMBOL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.MALE_STRING;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FEMALE_STRING;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.FIT_STRING;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.UNFIT_STRING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.NORMAL_STRING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.NULL_STRING;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static fitr.common.Messages.INPUT_FITNESS_LEVEL;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " * User class keeps track of user\u0027s personal information."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private double height;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private double weight;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    private int userFitnessLevel; // 0 for unfit; 1 for normal; 2 for Fit"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public User() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public User(String name, int age, double height, double weight, String gender, int userFitnessLevel) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.userFitnessLevel \u003d userFitnessLevel;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "     * Setup configures user profile for first time use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(USER_SETUP_GREET);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(INPUT_NAME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setName();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(INPUT_AGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setupAge();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(INPUT_HEIGHT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setupHeight();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(INPUT_WEIGHT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setupWeight();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(INPUT_GENDER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setupGender();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(INPUT_FITNESS_LEVEL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setupFitnessLevel();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Ui.printCustomMessage(SETUP_COMPLETE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public double getHeight() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setName() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        name \u003d Ui.read();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setHeight(double height) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setWeight(double weight) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setGender(String gender) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setFitnessLevel(int userFitnessLevel) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        this.userFitnessLevel \u003d userFitnessLevel;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setupAge() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int ageInput \u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (ageInput \u003c\u003d 0) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                ageInput \u003d Integer.parseInt(Ui.read());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (ageInput \u003c\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(ERROR_INVALID_AGE_INPUT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(INPUT_AGE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomError(ERROR_INVALID_AGE_INPUT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(INPUT_AGE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                ageInput \u003d 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setAge(ageInput);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setupHeight() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        double heightInput \u003d 0.00;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        // Height (in m)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (heightInput \u003c\u003d 0.00) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                heightInput \u003d Double.parseDouble(Ui.read());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (heightInput \u003c\u003d 0.00) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(ERROR_INVALID_HEIGHT_INPUT);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(INPUT_HEIGHT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomError(ERROR_INVALID_HEIGHT_INPUT);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(INPUT_HEIGHT);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                heightInput \u003d 0.00;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setHeight(heightInput);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setupWeight() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        // Weight (in kg)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        double weightInput \u003d 0.00;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (weightInput \u003c\u003d 0.00) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                weightInput \u003d Double.parseDouble(Ui.read());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (weightInput \u003c\u003d 0.00) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomError(ERROR_INVALID_WEIGHT_INPUT);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hui444"
        },
        "content": "                    Ui.printCustomMessage(INPUT_WEIGHT);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomError(ERROR_INVALID_WEIGHT_INPUT);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(INPUT_WEIGHT);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                weightInput \u003d 0.00;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setWeight(weightInput);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setupGender() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        String genderInput \u003d Ui.read();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (!genderInput.equalsIgnoreCase(\"m\") \u0026\u0026 !genderInput.equalsIgnoreCase(\"f\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomError(ERROR_INVALID_GENDER_INPUT);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hui444"
        },
        "content": "            Ui.printCustomMessage(INPUT_GENDER);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            genderInput \u003d Ui.read();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (genderInput.equalsIgnoreCase(MALE_SYMBOL)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            setGender(MALE_STRING);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (genderInput.equalsIgnoreCase(FEMALE_SYMBOL)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            setGender(FEMALE_STRING);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //to edit"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void setupFitnessLevel() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int fitnessLevelInput \u003d -1;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (fitnessLevelInput !\u003d 0 \u0026\u0026 fitnessLevelInput !\u003d 1 \u0026\u0026 fitnessLevelInput !\u003d 2) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                fitnessLevelInput \u003d Integer.parseInt(Ui.read());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                if (fitnessLevelInput !\u003d 0 \u0026\u0026 fitnessLevelInput !\u003d 1 \u0026\u0026 fitnessLevelInput !\u003d 2) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                    Ui.printCustomMessage(INPUT_FITNESS_LEVEL);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomError(ERROR_INVALID_FITNESS_INPUT);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hui444"
        },
        "content": "                Ui.printCustomMessage(INPUT_FITNESS_LEVEL);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                fitnessLevelInput \u003d -1;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        setFitnessLevel(fitnessLevelInput);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return NAME_OUTPUT_HEADER + getName() + LINE_BREAK + AGE_OUTPUT_HEADER + getAge() + LINE_BREAK"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                + GENDER_OUTPUT_HEADER + getGender() + LINE_BREAK + HEIGHT_OUTPUT_HEADER + getHeight()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                + LINE_BREAK + WEIGHT_OUTPUT_HEADER + getWeight() + LINE_BREAK + FITNESS_OUTPUT_HEADER"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "                + getUserFitnessLevelString();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public Calorie calculateCalorieBurnt(ExerciseList exerciseList, String date) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int totalCalorieBurnt \u003d 0;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        ExerciseList exerciseListByDate \u003d ViewCommand.viewExerciseByDate(exerciseList, date, false);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (index \u003c exerciseListByDate.getSize()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            totalCalorieBurnt +\u003d exerciseListByDate.getExercise(index).getCalories();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return new Calorie(totalCalorieBurnt);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public Calorie calculateCalorieConsumed(FoodList foodList, String date) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int totalCalorieConsumed \u003d 0;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        FoodList foodListByDate \u003d ViewCommand.viewFoodByDate(foodList, date, false);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        while (index \u003c foodListByDate.getSize()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            totalCalorieConsumed +\u003d foodListByDate.getFood(index).getCalories();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return new Calorie(totalCalorieConsumed);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public Calorie calculateCalorie(FoodList foodList, ExerciseList exerciseList, String date) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        int totalCalories;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Calorie totalConsumed \u003d calculateCalorieConsumed(foodList, date);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        Calorie totalBurnt \u003d calculateCalorieBurnt(exerciseList, date);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        totalCalories \u003d totalConsumed.get() - totalBurnt.get();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return new Calorie(totalCalories);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public double getBmi() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return weight / ((height) * (height));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public int getFitnessLevel() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        return userFitnessLevel;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public String getUserFitnessLevelString() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        if (userFitnessLevel \u003d\u003d 0) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            return UNFIT_STRING;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (userFitnessLevel \u003d\u003d 1) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            return NORMAL_STRING;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else if (userFitnessLevel \u003d\u003d 2) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            return FIT_STRING;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "            return NULL_STRING;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 16,
      "sixletters": 4,
      "jerichochua": 5,
      "gohsonghan98": 247
    }
  },
  {
    "path": "src/main/resources/aerobicList.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Jumping rope, 12.3, 1, 1.5, 2, 3, 4, 4"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Running, 7.0, 15, 25, 30, 1, 1, 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Burpees, 13.0, 0.5, 1, 1, 4, 5, 6"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Squat Jacks, 5.0, 1, 2, 2, 3, 4, 5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Mountain Climbers, 8.0, 1, 1.5, 2, 3, 4, 4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Sit-ups, 3.8, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Crunches, 3.8, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Leg raises, 4.5, 1, 1.5, 2, 3, 3, 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Bicycle Kicks, 3.8, 1, 1.5, 2, 3, 3, 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Bicycle crunches, 3.8, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Sprints (in seconds), 16.0, 1, 1.5, 2, 3, 4, 5"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Russian Twists, 3.8, 1, 1, 1, 3, 4, 5"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Flutter kicks, 4.5, 1, 1.5, 2, 3, 3, 3"
      }
    ],
    "authorContributionMap": {
      "gohsonghan98": 13
    }
  },
  {
    "path": "src/main/resources/lowerBodyList.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Air Squats, 5.0, 1, 1.5, 2, 3, 3, 3"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Lunges, 3.8, 1, 1.5, 2, 3, 4, 5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Squat Jumps, 8.0, 1, 1.5, 2, 3, 3, 3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Sumo Squats, 5.0, 1, 1.5, 2, 3, 3, 3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Cossack Squat, 5.0, 1, 1.5, 2, 3, 3, 3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Static Chair Pose, 3.8, 1, 1.5, 2, 3, 3, 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Tuck Jump, 8.0, 1, 1, 1.5, 3, 4, 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Jumping Squat, 8.0, 1, 1.5, 2, 3, 3, 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Reverse lunge, 3.8, 1, 1.5, 2, 3, 4, 5"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Donkey Kick, 5.0, 1, 1.5, 2, 3, 3, 4"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Side Lunges, 3.8, 1, 1.5, 2, 3, 4, 5"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Step ups, 4.0, 1, 1.5, 2, 3, 4, 5"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Side Lying Leg lifts, 5.0, 1, 1.5, 2, 3, 4, 5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Calf Raises, 3.8, 1, 1.5, 2, 3, 4, 5"
      }
    ],
    "authorContributionMap": {
      "gohsonghan98": 14
    }
  },
  {
    "path": "src/main/resources/stretchList.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Head rotation, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Cobra stretch, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Mountain stretch, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Calf stretch, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Thigh stretch, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Spinal rotations, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Quad stretch, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Arm circles, 2.4, 0.5, 0.5, 0.5, 4, 4, 4"
      }
    ],
    "authorContributionMap": {
      "gohsonghan98": 8
    }
  },
  {
    "path": "src/main/resources/tips.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Think about how the particular exercise is making you feel. If something doesn\u0027t feel right, stop immediately and seek medical advice."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Try slow stretches and go through the motions of your sport or activity before starting. Cool down with slow stretching."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Have at least one recovery day each week to rest. If you are experiencing pain, rest until the pain has gone."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Try other sports and exercises to reduce the risk of overtraining."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If a joint is prone to injury, consider strapping or taping it before exercising. Even better, see an exercise physiologist or physiotherapist to obtain a program to strengthen the injured area and get advice on proper taping techniques."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "You can lose around one and a half litres of fluid for every hour of exercise; so drink water before, during and after a session."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Take it easier in hot weather and wear clothing and sunscreen to protect yourself from the elements."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Try to get the technique right from the beginning, to ensure you are using your muscles correctly."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Make sure your shoes and equipment fit properly and are right for the activity. Look after your equipment and check it regularly for safety."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Take a friend or your dog, stick to well-lit areas and wear bright or light-reflective clothing so drivers can see you."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "People who don\u0027t regularly exercise may lose up to 80% of their muscle strength by age 65."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Regular exercise helps lower blood pressure and cholesterol levels. Two major risk factors for heart disease."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Improve your mental health and mood with an exercise routine！"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercise keeps your metabolism elevated even after your workout, and continues to burn more calories even at rest."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "The average person walks about 7,500 steps per day. If you stick to that average step count and live to be 80 years old, you\u0027ll walk about 110,000 miles in your lifetime."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "You use 200 muscles to take a single step forward."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "The pressure on your feet is equal to about 3-4 times your body weight with each step while running."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Your heart is the hardest working muscle in your body. It beats approximately 100,000 times per day, pumping almost 2,000 gallons of blood."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "During physical activity, you breathe more to keep oxygen levels in your blood at appropriate levels."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "The knee is the largest and most complex joint in your body which makes it most likely to be injured."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Fat and muscle are completely different types of tissue. Muscle cannot turn into fat."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If you can\u0027t speak a few words without taking a breath, you may be exercising too intensely."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Being dehydrated reduces exercise performance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Opposite of people who cross-train, people who do the same daily type of exercise regularly are more prone to injury."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Studies indicate that children\u0027s physical activity levels correlate closely with those of their parents."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Music improves workout performance. Listening to music while exercising can improve work out performance by 15%."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercising improves brain performance. Cardiovascular exercise helps create new brain cells. This enhances brainpower and brain activity."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Working out sharpens your memory. Exercising increases the production of cells that are responsible for learning and memory."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Running burns calories! If you run at a 10 minute per mile pace, you can burn 104.3 calories per mile."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "More muscle mass \u003d burning more fat while resting. The more muscle mass you have, the more fat your body burns while resting."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercise prevents signs of ageing. If you exercise 3 times a week for 45 minutes, you can help prevent signs of ageing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "A pound of muscle burns three times more calories than a pound of fat."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Exercising regularly helps boost your immune system. This means you\u0027ll get sick less often than people who don\u0027t exercise."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercising increases the number of endorphins that are released into your body and increases productivity."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Sweat releases dirt through your pores, which reduces acne and breakouts. Workouts improve the overall look of your skin."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercising can help ease your mind and rejuvenate your body. Working out will make you feel great and boost your confidence."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If you are someone who has trouble sleeping or staying asleep, then working out is your answer. Exercise helps to clear your head and helps you feel relaxed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If you work out on an empty stomach you can actually burn more fat."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If your goal is performance-based, you\u0027re not going to have enough energy to go all-out."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Sweating not only keeps you cool, it removes toxins from your body too."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "Women simply can\u0027t build muscle in the same way as men due to the fact they have lower levels of testosterone."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "It\u0027s common knowledge that cigarettes are bad for you, but did you know that inactivity can have the same effect on your body? In terms of premature death, physical in-activity is just second to smoking!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercise is said to boost self-confidence, improve your skin condition. So it makes you look good and you genuinely feel good too."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Although there are many benefits to stretching before exercise, stretching before running actually burns 5% less calories than runners that didn\u0027t stretch!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "One misconception is the only way to get definition in your muscles is from lifting light weights at a higher rate, which isn\u0027t true, muscle definition comes from having low body fat and muscle mass."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "If you train with light weights only, you\u0027re not going to build muscle. The more muscle that you build, the more fat you\u0027ll be able to burn, as well as calories."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Actually, soreness is a chemical response to inflammation from ripping your muscle fibres. If you don\u0027t feel sore, it can mean you worked out just right."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Want to lose some weight?  Be certain that no matter how hard you exercise, you can\u0027t out-train a bad diet."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "The top forms of exercise for burning calories is running and cycling.  However, your exact calorie burn will be related to your weight, the intensity and the duration."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Exercise improves your attractiveness!"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 5,
      "dmbclub": 45
    }
  },
  {
    "path": "src/main/resources/upperBodyList.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Standard Pushups, 3.8, 0.5, 1, 1.5, 3, 4, 5"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Inclined Pullups, 3.8, 0.5, 1, 1.5, 3, 4, 5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Pullups, 3.8, 0.5, 1, 1, 4, 4, 8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Triceps dips, 3.8, 0.5, 1, 1.5, 3, 4, 5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Diamond pushups, 3.8, 0.5, 1, 1.5, 3, 4, 5"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Knee Pushups, 3.8, 0.5, 1, 1.5, 3, 4, 5"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Buddha Claps, 3.5, 2, 3, 5, 3, 4, 5"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Planks to Pushup, 5.0, 0.5, 1, 1.5, 3, 4, 5"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "Plank Rotations, 3.7, 0.5, 1, 1.5, 3, 4, 5"
      }
    ],
    "authorContributionMap": {
      "gohsonghan98": 9
    }
  },
  {
    "path": "src/test/data/StorageTest/InvalidExerciseData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "test"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 1
    }
  },
  {
    "path": "src/test/data/StorageTest/InvalidFoodData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "test"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 1
    }
  },
  {
    "path": "src/test/data/StorageTest/InvalidUserData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "test"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 1
    }
  },
  {
    "path": "src/test/data/StorageTest/ValidExerciseData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Test Exercise 1,500,22/10/2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Test Exercise 2,100,23/10/2020"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 2
    }
  },
  {
    "path": "src/test/data/StorageTest/ValidFoodData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Test Food 1,100,1,23/10/2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "Test Food 2,50,5,22/10/2020"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 2
    }
  },
  {
    "path": "src/test/data/StorageTest/ValidUserData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "TestUser,Male,20,1.7,60"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 1
    }
  },
  {
    "path": "src/test/java/fitr/CalorieTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sixletters"
        },
        "content": "package fitr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import fitr.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class CalorieTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void getCaloriesAsInt_validInt_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        Calorie newCalorie \u003d new Calorie(500);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(500,newCalorie.get());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 14
    }
  },
  {
    "path": "src/test/java/fitr/ExerciseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sixletters"
        },
        "content": "package fitr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class ExerciseTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Calorie tempCalorie \u003d new Calorie(500);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void getCaloriesBurnt_validExerciseAndCalorie_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Exercise tempExercise \u003d new Exercise(\"exercise\", tempCalorie, getCurrentDate());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(500, tempCalorie.get());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void getNameOfExercise_validExerciseAndCalorie_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Exercise tempExercise \u003d new Exercise(\"exercise\", tempCalorie, getCurrentDate());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(\"exercise\", tempExercise.getNameOfExercise());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 21,
      "jerichochua": 1,
      "dmbclub": 2
    }
  },
  {
    "path": "src/test/java/fitr/FoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sixletters"
        },
        "content": "package fitr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sixletters"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sixletters"
        },
        "content": "public class FoodTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    Calorie tempCalorie \u003d new Calorie(500);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void getCaloriesConsumed_validFoodAndCalorie_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Food tempExercise \u003d new Food(\"food\",tempCalorie, getCurrentDate());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(500,tempCalorie.get());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void getNameOfFood_validFoodAndCalorie_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Food tempExercise \u003d new Food(\"exercise\",tempCalorie, getCurrentDate());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(\"exercise\",tempExercise.getFoodName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void getAmountOfFoodSpecified_validFoodWithSpecifiedAmount_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Food tempExercise \u003d new Food(\"exercise\",tempCalorie,2, getCurrentDate());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(2,tempExercise.getAmountOfFood());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sixletters"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    public void getAmountOfFoodUnspecified_validFoodWithSpecifiedAmount_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Food tempExercise \u003d new Food(\"exercise\",tempCalorie, getCurrentDate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sixletters"
        },
        "content": "        assertEquals(1,tempExercise.getAmountOfFood());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sixletters"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sixletters"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sixletters": 29,
      "jerichochua": 1,
      "dmbclub": 4
    }
  },
  {
    "path": "src/test/java/fitr/command/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void testHelp() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command help \u003d new HelpCommand(\"help\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertFalse(help.isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/command/InvalidCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "package fitr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dmbclub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "public class InvalidCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    public void testInvalid() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        Command invalid \u003d new InvalidCommand(\"haha\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertFalse(invalid.isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dmbclub": 13
    }
  },
  {
    "path": "src/test/java/fitr/list/ExerciseListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Calorie;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Exercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class ExerciseListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addExerciseToEmptyList_validExercise_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ExerciseList exerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.addExercise(new Exercise(\"Push ups\", new Calorie(100), getCurrentDate()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(1, exerciseList.getSize());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addExerciseToNonEmptyList_validExercise_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ExerciseList exerciseList \u003d new ExerciseList(getTestExerciseList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.addExercise(new Exercise(\"Push ups\", new Calorie(100), getCurrentDate()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(4, exerciseList.getSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private ArrayList\u003cExercise\u003e getTestExerciseList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cExercise\u003e exerciseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.add(new Exercise(\"Crunches\", new Calorie(100), getCurrentDate()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.add(new Exercise(\"Squats\", new Calorie(100), getCurrentDate()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.add(new Exercise(\"Run\", new Calorie(300), getCurrentDate()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 29,
      "dmbclub": 5
    }
  },
  {
    "path": "src/test/java/fitr/list/FoodListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Calorie;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "public class FoodListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addFoodToEmptyList_validFood_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FoodList foodList \u003d new FoodList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.addFood(new Food(\"Rice\", new Calorie(100), 1, getCurrentDate()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(1, foodList.getSize());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void addFoodToNonEmptyList_validFood_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FoodList foodList \u003d new FoodList(getTestFoodList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.addFood(new Food(\"Rice\", new Calorie(100), 1, getCurrentDate()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(4, foodList.getSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private ArrayList\u003cFood\u003e getTestFoodList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.add(new Food(\"Meat\", new Calorie(100), 1, getCurrentDate()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.add(new Food(\"Fish\", new Calorie(100), 2, getCurrentDate()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.add(new Food(\"Noodles\", new Calorie(200), 1, getCurrentDate()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 29,
      "dmbclub": 5
    }
  },
  {
    "path": "src/test/java/fitr/storage/ExerciseStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "class ExerciseStorageTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void loadExerciseList_validExerciseData_success() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ExerciseStorage exerciseStorage \u003d new ExerciseStorage(\"src/test/data/StorageTest/ValidExerciseData.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cExercise\u003e expectedExerciseList \u003d getValidExerciseList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cExercise\u003e actualExerciseList \u003d exerciseStorage.loadExerciseList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedExerciseList.get(0).getNameOfExercise(), actualExerciseList.get(0).getNameOfExercise());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedExerciseList.get(0).getCalories(), actualExerciseList.get(0).getCalories());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(expectedExerciseList.get(0).getDate(), actualExerciseList.get(0).getDate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedExerciseList.get(1).getNameOfExercise(), actualExerciseList.get(1).getNameOfExercise());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedExerciseList.get(1).getCalories(), actualExerciseList.get(1).getCalories());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(expectedExerciseList.get(1).getDate(), actualExerciseList.get(1).getDate());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void loadExerciseList_invalidExerciseData_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ExerciseStorage exerciseStorage \u003d new ExerciseStorage(\"src/test/data/StorageTest/InvalidExerciseData.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertThrows(InvalidFileFormatException.class, exerciseStorage::loadExerciseList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private ArrayList\u003cExercise\u003e getValidExerciseList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cExercise\u003e exerciseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.add(new Exercise(\"Test Exercise 1\", new Calorie(500),\"22/10/2020\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.add(new Exercise(\"Test Exercise 2\", new Calorie(100), \"23/10/2020\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 37,
      "dmbclub": 4
    }
  },
  {
    "path": "src/test/java/fitr/storage/FoodStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "package fitr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import fitr.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "class FoodStorageTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void loadFoodList_validFoodData_success() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FoodStorage foodStorage \u003d new FoodStorage(\"src/test/data/StorageTest/ValidFoodData.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cFood\u003e expectedFoodList \u003d getValidFoodList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cFood\u003e actualFoodList \u003d foodStorage.loadFoodList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedFoodList.get(0).getFoodName(), actualFoodList.get(0).getFoodName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedFoodList.get(0).getCalories(), actualFoodList.get(0).getCalories());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedFoodList.get(0).getAmountOfFood(), actualFoodList.get(0).getAmountOfFood());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(expectedFoodList.get(0).getDate(), actualFoodList.get(0).getDate());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedFoodList.get(1).getFoodName(), actualFoodList.get(1).getFoodName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedFoodList.get(1).getCalories(), actualFoodList.get(1).getCalories());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertEquals(expectedFoodList.get(1).getAmountOfFood(), actualFoodList.get(1).getAmountOfFood());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        assertEquals(expectedFoodList.get(1).getDate(), actualFoodList.get(1).getDate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    public void loadFoodList_invalidFoodData_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        FoodStorage foodStorage \u003d new FoodStorage(\"src/test/data/StorageTest/InvalidFoodData.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        assertThrows(InvalidFileFormatException.class, foodStorage::loadFoodList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerichochua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    private ArrayList\u003cFood\u003e getValidFoodList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.add(new Food(\"Test Food 1\", new Calorie(100), 1, \"23/10/2020\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.add(new Food(\"Test Food 2\", new Calorie(50), 5, \"22/10/2020\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 39,
      "dmbclub": 4
    }
  },
  {
    "path": "src/test/java/fitr/ui/UiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hui444"
        },
        "content": "package fitr.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hui444"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hui444"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static fitr.ui.Ui.read;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hui444"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hui444"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hui444"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hui444"
        },
        "content": "    public void readUserInput() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hui444"
        },
        "content": "        Ui uiText \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hui444"
        },
        "content": "        String input \u003d \"add 5\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hui444"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hui444"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hui444"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hui444"
        },
        "content": "        assertEquals(\"add 5\", uiText.read());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hui444"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hui444"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hui444": 22
    }
  },
  {
    "path": "src/test/java/fitr/user/UserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "package fitr.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.Calorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.list.ExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import fitr.list.FoodList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerichochua"
        },
        "content": "import static fitr.common.DateManager.getCurrentDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "public class UserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //BMI test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void testBmiCalculation_positiveInputs_correctResult() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        User user \u003d new User(\"John Doe\", 22, 1.70, 80, \"Male\", 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setHeight(2.00);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        user.setWeight(4.00);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(1.00, user.getBmi());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //user configuration test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void configureUserInformation_validInput_userConfigurationSuccess() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        User user \u003d new User(\"Bob\", 20, 2.00, 8.00, \"Male\", 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(\"Bob\", user.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(20, user.getAge());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(2.00, user.getHeight());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(8.00, user.getWeight());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(\"Male\", user.getGender());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(\"Normal\", user.getUserFitnessLevelString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    //Calorie test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    public void testCalorieCalculation_positiveInputs_correctResult() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        FoodList foodList \u003d new FoodList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        ExerciseList exerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.addFood(new Food(\"Chicken\", new Calorie(200), 1, getCurrentDate()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        foodList.addFood(new Food(\"Duck\", new Calorie(200), 1, getCurrentDate()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.addExercise(new Exercise(\"Squats\", new Calorie(100), getCurrentDate()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dmbclub"
        },
        "content": "        exerciseList.addExercise(new Exercise(\"Running\", new Calorie(100), getCurrentDate()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        User user \u003d new User(\"John Doe\", 22, 1.70, 80, \"Male\", 2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(200, user.calculateCalorieBurnt(exerciseList, getCurrentDate()).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(400, user.calculateCalorieConsumed(foodList, getCurrentDate()).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "        assertEquals(200, user.calculateCalorie(foodList, exerciseList, getCurrentDate()).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsonghan98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerichochua": 1,
      "dmbclub": 4,
      "gohsonghan98": 44
    }
  }
]
