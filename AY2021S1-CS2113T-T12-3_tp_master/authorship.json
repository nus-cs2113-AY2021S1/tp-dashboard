[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 1,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003cimg src\u003d \"https://commons.wikimedia.org/wiki/File:Red_Panda_(28072942347).jpg\" width\u003d150\u003e | Lusi Wu Qi | [Github](https://github.com/lusi711) | [Portfolio](team/lusi.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cimg src\u003d \"https://raw.githubusercontent.com/chuckiex3/tp/MooiSuetYengFrancene-AboutUs.md/docs/images/raccoon-holding-cat-56a9a1535f9b58b7d0fd836e.jpg\" width\u003d150\u003e | Mooi Suet Yeng, Francene | [Github](https://github.com/chuckiex3) | [Portfolio](team/francene.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/NeilBaner/tp/neilbaner-AboutUs/docs/images/neil_coverimage.jpg\" width\u003d150\u003e | Neil Banerjee | [Github](https://github.com/neilbaner) | [Portfolio](team/neilbaner.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cimg src\u003d\"https://imgur.com/AruRSrV.jpg\" width\u003d150\u003e | Neo Yao Jie, Joel | [Github](https://github.com/yaowzers) | [Portfolio](team/joel.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cimg src\u003d\"https://thumbs.dreamstime.com/b/cat-looking-computer-screen-curious-young-blue-tabby-maine-coon-standing-chair-front-table-notebook-190121850.jpg\" width\u003d150\u003e | Nguyen Ngoc Long | [Github](https://github.com/longngng) | [Portfolio](team/longnguyen.md)"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 4,
      "Lusi711": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "# Developer Guide for Zer0Note"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "## Table Of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[1. Introduction](#1-introduction-neil) \u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u0026nbsp;\u0026nbsp;[1.1. Welcome!](#11-welcome)\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u0026nbsp;\u0026nbsp;[1.2. How to use this document](#12-how-to-use-this-document)\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[2. Setting up](#2-setting-up) \u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[2.1. Prerequisites](#21-prerequisites) \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[2.2. Setting up the project in your computer](#22-setting-up-the-project-in-your-computer) \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[2.3. Verifying the setup](#23-verifying-the-setup) \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[2.4. Configure coding style](#24-configure-the-coding-style) \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[3. Design](#3-design) \u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.1. Architecture](#31-architecture-neil) \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.2. UI Component](#32-ui-component-neil) \u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.3. Commands Component](#33-commands-component-neil) \u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.4. Tasks Component](#34-tasks-component) \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.5. Notebooks Component](#35-notebooks-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.6. Storage Component](#36-storage-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[4. Implementation](#4-implementation) \u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[4.1. Mode Switch Feature](#41-mode-switch-feature) \u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.1.1. Implementation](#411-implementation) \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.1.2. Design Considerations](#412-design-considerations) \u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[4.2. Timetable Mode](#42-timetable-mode) \u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.1. Tasklist Management Feature](#421-tasklist-management-feature) \u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.1.1. Implementation](#4211-implementation) \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.1.2. Design Considerations](#4212-design-considerations) \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.2. Mark as done Feature](#422-mark-as-done-feature) \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.2.1. Implementation](#4221-implementation) \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.2.2. Design Considerations](#4222-design-considerations) \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.3. Tag Feature](#423-tag-feature) \u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.3.1. Implementation](#4231-implementation) \u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.3.2. Design Considerations](#4232-design-considerations) \u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.4. List Feature](#424-list-feature) \u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.4.1. Implementation](#4241-implementation) \u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.5. Search Feature](#425-search-feature) \u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.5.1. Implementation](#4251-implementation) \u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.5.2. Design Considerations](#4252-design-considerations) \u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[4.3. Notebook Mode](#43-notebook-mode) \u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3.1. Notebook Management Feature](#431-notebook-management-feature) \u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3.1.1. Implementation](#4311-implementation) \u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3.2. Select Feature](#432-select-feature) \u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3.2.1. Implementation](#4321-implementation) \u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3.2.2. Design Considerations](#4322-design-considerations) \u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3.3. Tag Feature](#433-tag-feature) \u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3.3.1. Implementation](#4331-implementation) \u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3.3.2. Design Considerations](#4332-design-considerations) \u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3.4. Search Feature](#434-search-feature) \u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3.4.1. Implementation](#4341-implementation) \u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3.4.2. Design Considerations](#4342-design-considerations) \u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;[4.4. Storage](#44-storage-neil) \u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.4.1. Storage Format](#441-storage-format) \u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.4.1.1. TaskList](#4411-tasklist) \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.4.1.2. Page](#4412-page) \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.4.1.3. Section](#4413-section) \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.4.1.4. Notebook](#4414-notebook) \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.4.1.5. NotebookShelf](#4415-notebookshelf) \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.4.2. Implementation](#442-implementation) \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.4.2.1. Saving the application state](#4421-saving-the-application-state) \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.4.2.2. Reading the application state](#4422-reading-the-application-state) \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;[4.5. Error handling](#45-error-handling) \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[5. Documentation](#5-documentation) \u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[5.1. Setting up and maintaining the project website](#51-setting-up-and-maintaining-the-project-website) \u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[5.2. Style guidance](#52-style-guidance) \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[5.3. Diagrams](#53-diagrams) \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[5.4. Converting a document to the PDF Format](#54-converting-a-document-to-the-pdf-format) \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[6. Testing](#6-testing) \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[6.1. Running tests](#61-running-tests) \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[6.2. Types of tests](#62-types-of-tests) \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[Appendix A: Project Scope](#appendix-a-project-scope) \u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[Appendix B: User Stores](#appendix-b-user-stories) \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[Appendix C: Use Cases](#appendix-c-use-cases) \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[Appendix D: Non-Functional Requirements](#appendix-d-non-functional-requirements) \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[Appendix E: Glossary](#appendix-e-glossary) \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[Appendix F: Instructions for manual testing](#appendix-f-instructions-for-manual-testing) \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "## 1. Introduction (Neil)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### 1.1. Welcome!"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Welcome, and thank you for choosing to help contribute to Zer0Note! Zer0Note is a command-line based note-taking and"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "organisation application. It is designed to combine the features of graphical tools like OneNote and Notion, with"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "the editing speed of applications like vim and emacs."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "This document is written for developers intending to improve Zer0Note, by fixing bugs, or perhaps adding entirely new"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "features. It explains how the project is set up, the architecture used, and the code style you should adopt when"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "contributing code to the project."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### 1.2. How to use this document"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### 1.2.1. Keywords"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "`Text that looks like this denotes a keyword or small extract of code.`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example: The `CliUserInterface` is used to handle input and output to and from the console."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### 1.2.2. Code blocks"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    Text that looks like this denotes a larger extract of code."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```java"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    System.out.println(\"This is a code block!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### 1.2.3. UI elements"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "**`Text that looks like this denotes a button, or other UI element you may see on screen. `**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example: Click **`Configure`** \u003e **`Project Defaults`** \u003e **`Project Structure`**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### 1.2.4. Tips"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u003e Text that looks like this indicates a tip, providing additional information that is useful but not critically"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u003e important"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u003e We use this method because Chrome\u0027s built-in PDF viewer preserves hyperlinks."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### 1.2.5. Important information"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u003e :exclamation: Text that looks like this, beginning with the :exclamation: sign indicates information that is very"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u003e important, such as warnings about potential mistakes or common problems"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u003e :exclamation: **Caution** Follow the steps in the following guide precisely."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "## 2. Setting up"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The following section describes how to set up the coding environment on your own computer, in order to start writing"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "code to improve Zer0Note."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 2.1. Prerequisites"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. **JDK** 11"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. **IntelliJ** IDEA"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 2.2. Setting up the project in your computer"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u003e:exclamation: **Caution:** Follow the steps in the following guide precisely."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003eThings will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "1. **Fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "3. Set up the correct JDK version for Gradle  "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "   a. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "   b. Click `New...` and find the directory of the JDK."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "4. Click `Import Project`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "5. Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "6. Click `Open as Project`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "7. Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 2.3. Verifying the setup"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. Run the `seedu.duke.Duke`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. Try a few commands."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "3. [Run the tests](#61-running-tests) to ensure they all pass."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 2.4. Configure the coding style"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "If using IDEA, follow the guide [[se-edu/guides] IDEA: Configuring the code style](https://se-education.org/guides/tutorials/intellijCodeStyle.html)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "to set up IDEA’s coding style to match ours."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003eOptionally, you can follow the guide [[se-edu/guides] Using Checkstyle](https://se-education.org/guides/tutorials/checkstyle.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003eto find how to use the CheckStyle within IDEA e.g., to report problems as you write code."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The following section describes the design and implementation of the product. UML diagrams and code snippets are used"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "to explain some aspects of the code. If you are unfamiliar with UML, the diagrams should still be fairly"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "understandable. However, you may wish to consult [[CS2113/T] Modeling](https://nus-cs2113-ay2021s1.github.io/website/se-book-adapted/chapters/modeling.html) for a quick introduction to UML."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### 3.1 Architecture (Neil)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The following diagram provides a rough overview of how **Zer0Note** is built."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "![Architecture Diagram](diagrams/class/jpeg/architecture_neil.jpg)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "The `CliUserInteface` (see [here](#32-ui-component-neil)) is the \"highest\" layer of the application, in"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "the sense that it interacts directly with the user, and it passes along the input to other classes. The"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "`CliUserInterface` contains the state of the application, stored in an instance of `AppState`. It then uses the other"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "classes such as `InputParser` and the various `CliCommand` classes to execute the instructions provided by the user"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ". This is explained in more detail in the following sections."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 3.2 UI Component (Neil)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The user interface of **Zer0Note** is provided by the class `CliUserInterface`. It is instantiated once in the main"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "method, and its `run()` method is called to start the UI for the application."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The class diagram below describes the `CliUserInterface` class, and the classes it depends on."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "// TODO: add class diagram for CliUserInterface"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The `CliUserInterface` class contains an instance of `AppState`. This is a class that, as the name implies, contains"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "the current state of the running instance of the application. For example, it contains the user data, the current mode,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "the navigation state (i.e. currently chosen notebook/section/page)."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The following sequence diagram describes the operation of the `run()` method in `CliUserInterface`."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "// TODO: add sequence diagram."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "First, the method `loadState()` is called, which loads the save file, and populates the `AppState` object with the"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "previously saved user data."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Then, the `startUI()` method is called to display the welcome message to the user."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The `CliUserInterface` class then continuously gets the input from the user. It then uses the `InputParser` class to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "parse this input and creates a new `CliCommand` object based on the command entered by the user. It executes the"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "command with `CliCommand.execute()` (learn more [here](#33-commands-component-neil)), which will use or modify the"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "`AppState` instance to make the requested change."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "If any of these steps encounters an error, an exception of the type `ZeroNoteException` is thrown by the method, and"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "caught in the `run()` method. Upon catching an exception, the `printErrorMessage()` method is called to display the"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "appropriate error message to the user. See [here]() for more information on how exceptions work in **Zer0Note**."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### 3.3. Commands Component (Neil)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Every command that a user can input into **Zer0Note** is represented by an object that extends the abstract class"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "`CliCommand`. `CliCommand` contains some basic fields and methods that are shared by all types of commands, such as:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* `execute()`, which is called after setting up the object appropriately, to perform the action requested by the user;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* `appState`, which refers to the `AppState` object that stores the state of the currently running instance of"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "**Zer0Note**; and"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* `commandParams`, which is a String containing the parameters the user entered as parameters to the command."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The following 2 UML diagrams show the different types of `CliCommand` components used in the application."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "This diagram describes the `CliCommand`s related to the Timetable mode."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "![UML diagram for Timetable Commands](diagrams/class/jpeg/timetable_commands.jpg)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "And this diagram describes the `CliCommand`s related to the Notebook mode."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "![UML diagrams for Notebook Commands](diagrams/class/jpeg/notebook_commands.jpg)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "// TODO: add the new commands for \"Find\", \"Tag\", \"SortByDate\"."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### 3.4. Tasks Component"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "![UML Diagram from Task Component](diagrams/class/jpeg/taskComponent.jpg)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "longngng"
        },
        "content": "Figure []. Structure of Tasks Component"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "longngng"
        },
        "content": "The `Tasks` component,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "longngng"
        },
        "content": "- stores an array of `Task` objects that represents the deadline of the user."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "longngng"
        },
        "content": "- together with the `Notebooks` component form the `AppState` component.   "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "longngng"
        },
        "content": "The `TaskList` class,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "longngng"
        },
        "content": "- has methods to add a new `Task` object and remove existing one at an index."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "longngng"
        },
        "content": "### 3.5. Notebooks Component"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "![UML diagram for Notebooks Component](diagrams/class/jpeg/notebooks_simplified.jpg)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "longngng"
        },
        "content": "Figure []. Structure of Notebooks Component"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "longngng"
        },
        "content": "The `Notebooks` class,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "longngng"
        },
        "content": "- stores a `NotebookShelf` object that contains a list of `Notebook` objects."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "longngng"
        },
        "content": "- together with the `Tasks` component form the `AppState` component."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "longngng"
        },
        "content": "The `NotebookShelf` class,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "longngng"
        },
        "content": "- has methods to add new `Notebook` object and remove existing one."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "longngng"
        },
        "content": "- has methods to search through to find a `Notebook` object with matching titles."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "longngng"
        },
        "content": "The `Notebook` class,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "longngng"
        },
        "content": "- contains a title and a list of `Section` objects."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "longngng"
        },
        "content": "- has methods to add new `Section` object or remove existing one."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "longngng"
        },
        "content": "- has a `tag` field that user can be set and get."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "longngng"
        },
        "content": "The `Section` object,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "longngng"
        },
        "content": "- contains a title and list of `Page` objects."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "longngng"
        },
        "content": "- has methods to add new `Page` object or remove existing one."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "longngng"
        },
        "content": "- has a `tag` field that user can be set and get."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "longngng"
        },
        "content": "The `Page` object,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "longngng"
        },
        "content": "- contains a title, and the content of the page as a String object."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "longngng"
        },
        "content": "- has a `tag` field that user can be set and get."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### 3.6. Storage Component"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "![UML diagram for Storage](diagrams/class/jpeg/Storage_UML_class.jpeg)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "* Contains the method `saveToFile` to save the current AppState of the application in the `notebooks.txt` and `tasks.txt` files.  "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "* Contains the method `readFromFile` to load up data containing the input of the user\u0027s previous session on Zer0Note.  "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "* Saves the name of the user in a `nameOfUser.txt` and reads it back in the form of personalised messages.   "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The following section describes the implementation of certain key features in the current version of Zer0Note. It also"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "provides some background into our (the original developers of Zer0Note) thinking and the rationale behind the"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "decisions."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 4.1. Mode Switch Feature"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 4.1.1. Implementation"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "longngng"
        },
        "content": "The mode switch mechanism is facilitated by `AppState`. It contains an `AppMode` object and can be accessed from"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "longngng"
        },
        "content": "`Mode Switch` object."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "longngng"
        },
        "content": "The following sequence diagram shows how the mode switch operation works:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "![Sequence Diagram for Mode Switch Command](diagrams/class/jpeg/SequenceDiagram_ModeSwitch.jpg)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "longngng"
        },
        "content": "Given below is an example usage scenario and how the find mode switch function behaves."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "longngng"
        },
        "content": "Step 1. The user launches the application for the first time. The `AppState` object is constructed and the `AppMode`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "longngng"
        },
        "content": "field is set to `TIMETABLE` by default."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "longngng"
        },
        "content": "Step 2. The user types `mode /n`. The `mode /t` command is passed through"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "longngng"
        },
        "content": "`InputParser#getCommandFromInput`, which constructs a `ModeSwitch` object and calls `ModeSwitch#execute()`."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "longngng"
        },
        "content": "Step 3. `execute()` is called, which then set the `AppMode` field in the `AppState` object either to `TIMETABLE`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "longngng"
        },
        "content": "or `NOTEBOOK_SHELF` or throw an `InvalidCommandException`."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "longngng"
        },
        "content": "Step 4. To signal that the user has successfully changed the mode, a message is printed with the current mode of the"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "longngng"
        },
        "content": "program.  "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 4.1.2. Design Considerations"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/* work in progress */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 4.2. Timetable Mode"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "#### 4.2.1. TaskList Management Feature"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.2.1.1. Implementation"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "`TaskList` is implemented to manage and store the tasks input by the user. It comprises an `ArrayList` list of"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " `Task`s, and a few helper methods."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "This means that multiple operations such as addition and deletion can be done on a `Task`, without affecting"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "the contents of other `Task` in the `TaskList`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Given below is an example usage scenario and how the add task function behaves."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "1. The user launches the application for the first time. CliUserInterface#executeCommand is called when the user adds a `Task` into the `TaskList`."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "2. The user types `add /tTask /by19-10-2020 1900`. The `add` command is passed through `InputParser#getCommandFromInput`, which then creates a constructor for `AddCommandTimetableMode`."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "3. `AddCommandTimetableMode#execute()` is called, which then calls `InputParser#parseTaskTitle`, which first extracts the `title` from the user\u0027s input."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "4. `InputParser#parseDeadline` is then called, which returns the `deadline` to `AddCommandTimetableMode#execute()`."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "5. `TaskList#addTask` is then called and a new `Task`, with `title` and `deadline`, is initialised."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "6. To signal that the user has successfully added a task, a message is printed with `CliMessages#printAddedTaskMessage`."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "The UML sequence diagram below shows how the add task command works."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "![Sequence Diagram for Add Task Command](diagrams/class/jpeg/add_task.jpg)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "TaskList also allows the deletion of tasks by the user."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "The figure below shows how the delete task command works:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "![Sequence Diagram for Delete Task Command](diagrams/class/jpeg/SequenceDiagram_RemoveTimetable.jpg)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Here are the general steps that the command goes through when the user inputs \"delete 1\":"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. The `CliUserInterface` receives the \"delete 1\" input by the user and passes it to the `InputParser` class."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. `InputParser` parses the input to determine the type of command and the index of the task that is required to delete."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "The Parser then constructs a `RemoveCommandTimetableMode` with constructor as shown below."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```java"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "public RemoveCommandTimetableMode(int indexToRemove, AppState uiMode) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    this.setAppState(uiMode);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    this.indexToRemove \u003d indexToRemove;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "```"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "3. Method **execute()** then calls the `TaskList` stored in `AppState` to update the deletion of the task."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "It also constructs `CliMessages` to display messages to the user."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "4. If the deletion is successful, `CliMessages` displays the message to the user."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.2.1.2. Design Considerations"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "###### Aspect: How to store tasks in `TaskList`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "- **Alternative 1 (current choice):** Store as an `ArrayList` of tasks"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Pros: It is easier to implement because the code base are list based."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Cons: It is unoptimized in terms of complexity, which requires more work for scaling of the application."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "- **Alternative 2:** Store as a Hash Table with the key as the index and value as `Task`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Pros: It has a better time complexity and reduce the work in scaling stage since this data structure is more optimized (O(1) can be achieved)."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    - Cons: It takes more resources to implement. The constant factor for a hashing algorithm is significant and not"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     worth the tradeoff for smaller amounts of data, like a typical user would be likely to generate."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 4.2.2. Mark as done feature  "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.2.2.1. Implementation  "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "The `Task` class contains a member `isDone` of Boolean type."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "The following sequence diagram shows how the mark as done operation works:  "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "![Sequence diagram for Storage](diagrams/class/jpeg/DoneCommand_Sequence_diagram.jpg)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "The following is an example of the processes that occur when the user uses the mark as done function:  "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Step 1. The user types `done 1`. The `done 1` command is passed through `InputParser#getCommandFromInput`, which constructs a DoneCommandTimetableMode object and calls `DoneCommandTimetable#execute()`.  "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Step 2. `execute()` is called, which then initialises a variable `taskList` of type TaskList. The method then calls `AppState#getTaskList`, which returns all exisiting tasks in the current tasklist.  "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Step 3. The `execute()` method proceeds to parse the user\u0027s intended task index to be marked as done through `Integer.parseInt()`. Using this index, it initialises a varible `taskDone` of type task and calls `AppState#markAsDone(index)`.  "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Step 4. After `taskDone` is initialised, a `messages` of type CliMessages calls a method `printMarkDone(taskDone)` with the variable `taskDone` as the argument, which in turn prints a success message with the respective task to the user.   "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "##### 4.2.2.2. Design Considerations"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 4.2.3. Tag Feature"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "The user can tag `Task`s in the `TaskList`. This section describes the implementation and design considerations for this"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "feature."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.2.3.1. Implementation"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "The `Task` class contains a member `tag` of String type."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "The figure below shows how the tag operation works:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "![Sequence Diagram for Tag Timetable command](diagrams/class/jpeg/SequenceDiagram_TagTimetable.jpg)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "There are 3 crucial processes during the tag operation. When the user enters `tag 1 /tCS2113T` into the command window while using the application:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Input Parsing**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. `CliUserInterface` receives the \"tag 1 /tCS2113T\" input by the user and calls the `executeCommand` method."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. Method `executeCommand` constructs the `InputParser` class and calls `InputParser#getCommandFromInput` to pass the"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "input to `InputParser`."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "3. `InputParser#getCommandFromInput`calls `InputParser#parseTagDescription` to separate the index from the tag."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "4. If the application is in the timetable mode, `InputParser#getCommandFromInput` then parses the index and constructs"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "the `TagCommandTimetableMode` class."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "5. `InputParser#getCommandFromInput` returns `TagCommandTimetableMode` back to `CliUserInterface`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Command Execution**"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. `CliUserInterface#executeCommand` calls `TagCommandTimetableMode#execute` to execute the command."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. In `TagCommandTimetableMode#execute()`, the `CliMessages` class, which prints any outputs to the user, is constructed."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "3. `Tasklist#getTask` returns the `Task` that is specified by the index."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "4. `Task#setTag` changes the `tag` member of `Task` to the tag input by the user."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "5. If the tag is successful, `CliMessages#printTagTaskMessage` displays the message to the user."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Storage**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. `CliUserInterface#executeCommand` finally calls `TagCommandTimetableMode#isTriggerAutoSave` method to check whether a change"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "has been made."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. If the method returns `True`, `CliUserInterface#executeCommand`calls `saveState` method to save the"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "current list."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "3. The tag operation ends."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.2.3.2. Design Considerations"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "This section describes some of the considerations involved when designing the tag feature."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "###### Aspect: How to store the tags"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- **Alternative 1 (current choice):** Store as a private `String` member in every task"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Pros: It is easy to access for print operations."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Cons: It is unoptimized in terms of complexity for search operations, which requires more work for scaling of the"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    application."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- **Alternative 2:** Store as a Hash Table with the key as the tag and value as `Task`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Pros: It has a better time complexity for search operations since this data structure is more optimized (O(1) can"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    be achieved)."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Cons: It is hard to retrieve the tag for a specific `Task` due to the structure of the key-value pair."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 4.2.4. List Feature"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.2.4.1. Implementation"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "longngng"
        },
        "content": "The following sequence diagram shows how the list operation works:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "![Sequence Diagram for List Urgent](diagrams/class/jpeg/SequenceDiagram_ListUrgent.jpg)"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "longngng"
        },
        "content": "Given below is an example usage scenario and how the list function behaves."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "longngng"
        },
        "content": "Step 1. The user types `list /urgent`. The `list /urgent` command is passed through"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "longngng"
        },
        "content": "`InputParser#getCommandFromInput`, which constructs a `ListCommandTimetableMode` object and calls"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "longngng"
        },
        "content": "`ListCommandTimetableMode#execute()`."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "longngng"
        },
        "content": "Step 2. `execute()` is called, which then calls the `sort()` function of `Collections` utility class and sort the list"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "longngng"
        },
        "content": "based on the due date of the `Task` objects in the list."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "longngng"
        },
        "content": "Step 3. The program prints up to three tasks in the sorted list."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 4.2.5. Search Feature"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "This feature allows the user to search for tasks by keyword or by tag. Refer to"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[Tag Feature](#423-tag-feature) for more information on the implementation of tags."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "This section explains the implementation and design considerations for the search feature."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.2.5.1. Implementation"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "The search feature is mainly executed by a `FindCommandTimetableMode` class. The following sequence diagram shows an"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "example of how the complete command works:"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "![Sequence Diagram for Find command](diagrams/class/jpeg/SequenceDiagram_FindTimetable.jpg)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "There are 3 crucial processes during the search operation. For example, when the user enters `find ` into the command"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "window while using the application:"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Input Parsing**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. `CliUserInterface` receives the \"find \" input by the user and calls the `executeCommand` method."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. Method `executeCommand` constructs the `InputParser` class and calls `InputParser#getCommandFromInput` to pass the"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "input to `InputParser`."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "3. Method `InputParser#getCommandFromInput` does the following:\u003cbr\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    a. Calls `InputParser#parseTagDescription` to identify the keyword or tag. The `keyword` and `tag` are set as empty"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    if they are not specified.\u003cbr\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    b. Constructs the `FindCommandTimetableMode` class. \u003cbr\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    c. Returns `FindCommandTimetableMode` back to `CliUserInterface`. \u003cbr\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Command Execution**"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. `CliUserInterface#executeCommand` calls `FindCommandTimetableMode#execute` to execute the command."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. Method `FindCommandTimetableMode#execute()` does the following:\u003cbr\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    a. Constructs `CliMessages` class, which prints any outputs to the user\u003cbr\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    b. Obtains the full tasklist `tasks` from `AppState#getTaskList`\u003cbr\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    c. If `keyword` is specified (not empty), `getTasksWithTitleContainingKeyword(tasks)` is calle, which returns a"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    list of tasks with their titles containing `keyword`.\u003cbr\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    d. Else, if the `tag` is specified (not empty), `getTasksWithTagsContainingKeyword(tasks)` is called, which returns"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    a list of tasks with their tags matching `tag`. This is the method called in this example.\u003cbr\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    e. Calls `CliMessages#printFoundTasksMessage` to display the message to the user."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Storage**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. `CliUserInterface#executeCommand` calls `FindCommandTimetableMode#isTriggerAutoSave` method to check whether a change"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "has been made."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. If the method returns `True`, `CliUserInterface#executeCommand` calls `saveState` method to save the"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "current list."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "3. The find operation ends."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.2.5.2. Design Considerations"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "This section describes some considerations involved when designing the find feature."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Aspect: Distinction between finding by keyword and finding by tag**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- **Alternative 1 (current choice):** Handle as a if-else statement in a single class"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- **Alternative 2:** Two different classes that are subclasses to a class `FindCommandTimetableMode`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Pros: Higher level of abstraction"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Cons: Unable to be returned directly by `InputParser#getCommandFromInput` as they are not subclasses of the"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    `CliCommand` class. An if-else statement is still required inside the`FindCommandTimetableMode#execute` method."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 4.3. Notebook Mode"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 4.3.1. Notebook Management Feature"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "As shown in Figure 1, the `NotebookShelf` class comprises instances of `Notebook` class. `Notebook` comprises `Section`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "and `Section` comprises `Page`. The navigability is not bidirectional. Multiple operations such as addition and deletion"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "can be done without affecting other instances at all, while updating the `Notebook` it is in."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "This section explains the implementation and design considerations for managing `Notebook`s."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.3.1.1 Implementation"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "There are two main functions in notebook management: add and remove."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Given below is an example usage scenario and how the add notebook function behaves."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "1. The user launches the application for the first time. `CliUserInterface#executeCommand` is called when the user adds new `Notebook` into the `NotebookShelf`."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "2. The user types `add /nCS2113T`. The `add` command is passed through `InputParser#getCommandFromInput`."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "3. `InputParser#parseNotebookTitle` is then called, and it returns the `titleToAdd`, which is `CS2113T`."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "4. A constructor for `AddCommandNotebookMode` is created."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "5. `AddCommandNotebookMode#execute()` runs, which then calls `NotebookShelf#addNotebook`."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "6. A new `Notebook`, entitled `CS2113T` is initialised."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "The UML sequence diagram below shows how the add notebook command works."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "![Sequence Diagram for Add Notebook Command](diagrams/class/jpeg/add_notebook.jpg)"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Notebook Mode also allows the user to remove a notebook/section/page."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "The figure below shows how the \"remove task\" command works:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "![Sequence Diagram for Delete Task Command](diagrams/class/jpeg/SequenceDiagram_RemoveNotebook.jpg)"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "After calling `InputParser#getCommandFromInput` from `CliUserInterface`:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. `InputParser` parses the input to return the `notebookTitleToRemove`, `sectionTitleToRemove` and `pageNumberToRemove`."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Some of these members may be empty."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. `InputParser` constructs and returns the `RemoveCommandNotebookMode` class with constructor as shown below:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```java"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "public RemoveCommandNotebookMode(String notebookTitle, String sectionTitle,"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                                     int pageNumber, AppState appState) {"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    this.appState \u003d appState;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    notebookTitleToRemove \u003d notebookTitle;"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    sectionTitleToRemove \u003d sectionTitle;"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    pageNumberToRemove \u003d pageNumber;"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    currentBookshelf \u003d appState.getCurrentBookShelf();"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    currentNotebook \u003d appState.getCurrentNotebook();"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    currentSection \u003d appState.getCurrentSection();"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "}"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "```"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "3. Method **execute()** is called by `CliUserInterface` to delete a notebook, section, or page, depending on the input."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "A switch-case block is used to determine the method to call based on the `appMode`."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "4. If the deletion is successful, `CliMessages` displays the message to the user."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 4.3.2. Select Feature"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "The user can `select` a `Notebook`, `Section` or `Page` to view its contents. This section describes the implementation and design considerations for this feature."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.3.2.1. Implementation"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Given below is an example usage scenario and how the select notebook function behaves."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "1. `CliUserInterface#executeCommand` is called when the user selects a `Notebook` from the `NotebookShelf`."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "2. The user types `select /nCS2113T`. The `select` command is passed through `InputParser#getCommandFromInput`."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "3. `InputParser#getCommandFromInput` returns the command `SelectCommandNotebookMode`."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "4. A constructor for `SelectCommandNotebookMode` is created."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "5. `SelectCommandNotebookMode#execute()` runs, which then calls `InputParser#extractParams`."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "6. If the argument typed by the user contains `/n`, which is the Notebook delimitter, `InputParser#extractNotebookParams` is called."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "7. Within `InputParser#extractNotebookParams`, `AppState#setAppMode` is called to set the `AppMode` as `NOTEBOOK_BOOK`."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "The UML sequence diagram below shows how the select notebook command works."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "![Sequence Diagram for Add Task Command](diagrams/class/jpeg/select_notebook.jpg)"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.3.2.2. Design Considerations"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "###### Aspect: How much navigability the Select function should have"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- **Alternative 1 (current choice):** The user must always select the notebook title if he wants to choose a section or page within it."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Pros: It is easy to catch exceptions when the notebook/section does not exist. This also ensures that even if there are 2 sections in 2 different notebooks with the same name, the user can select the correct section."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Cons: The format for the command is longer."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- **Alternative 2**: The user can select a notebook/section/page wherever he wants."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Pros: The command the user has to type is much shorter."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Cons: If the user has notebooks/sections with the same name, he cannot be sure that the item he wants will be selected correctly."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 4.3.3. Tag Feature"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "The user can add a `tag` to a `Notebook`, `Section` or `Page`. This section describes the implementation and design"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "considerations for this feature."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.3.3.1. Implementation"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "The `Notebook`, `Section` and `Page` classes each contain a member `tag` of type String."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "The figure below shows how the tag operation works:"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "![Sequence Diagram for Tag Notebook command](diagrams/class/jpeg/SequenceDiagram_TagNotebook.jpg)"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "There are 3 crucial processes during the tag operation. When the user enters `tag /tCS2113T` into the command window while using the application:"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Input Parsing**"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. `CliUserInterface` receives the \"tag /tCS2113T\" input by the user and calls the `executeCommand` method."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. Method `executeCommand` constructs the `InputParser` class and calls `InputParser#getCommandFromInput` to pass the"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "input to `InputParser`."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "3. `InputParser#getCommandFromInput`calls `InputParser#parseTagDescription` to separate the index from the tag."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "4. If the application is in the notebook mode, `InputParser#getCommandFromInput` constructs the"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "`TagCommandTimetableMode` class. Note that `AppState#getCurrentNotebook`, `AppState#getCurrentSection` and"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "`AppState#getCurrentPage` are called to determine the state of the application."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "5. `InputParser#getCommandFromInput` returns `TagCommandNotebookMode` back to `CliUserInterface`."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Command Execution**"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. `CliUserInterface#executeCommand` calls `TagCommandNotebookMode#execute` to execute the command."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. `TagCommandNotebookMode#execute()` first constructs the `CliMessages` class, which prints any outputs to the user."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "3. `AppState#getAppMode` returns where the user is."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "3. If the user is in a `Notebook`, `Section` or `Page`, `Notebook#setTag`, `Section#setTag` or `Page#setTag` is called"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "respectively to change the tag of the current notebook."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "4. If the tag is successful, `CliMessages#printTagNotebookMessage` displays the message to the user."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Storage**"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. `CliUserInterface#executeCommand` finally calls `TagCommandNotebookMode#isTriggerAutoSave` method to check whether a"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "change has been made."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. If the method returns `True`, `CliUserInterface#executeCommand`calls `saveState` method to save the"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "current list."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "3. The tag operation ends."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.3.3.2. Design Considerations"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "This section describes some of the considerations involved when designing the tag feature."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "###### Aspect: How to store the tags"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- **Alternative 1 (current choice):** Store as a private `String` member in every task"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Pros: It is easy to access for print operations."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Cons: It is unoptimized in terms of complexity for search operations, which requires more work for scaling of the"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    application."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- **Alternative 2:** Store as a Hash Table with the key as the tag and value as `Task`"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Pros: It has a better time complexity for search operations since this data structure is more optimized (O(1) can"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    be achieved)."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Cons: It is hard to retrieve the tag for a specific `Task` due to the structure of the key-value pair."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 4.3.4. Search Feature"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "This feature works similarly to the [search feature](#425-search-feature) in the Timetable mode. Refer to"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[Tag Feature](#433-tag-feature) for more information on the implementation of tags in the Notebook mode."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.3.4.1. Implementation"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "The following sequence diagram shows how the search feature works in the notebook mode:"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "![Sequence Diagram for Find Notebook Command](diagrams/class/jpeg/SequenceDiagram_FindNotebook.jpg)"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "As the implementation of the search feature in the Notebook mode is similar to that in the Timetable mode, this section"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "only covers the main differences in the two."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Input Parsing**"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- If the application is in the Notebook mode, `InputParser#getCommandFromInput` constructs the `FindCommandNotebookMode`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "class."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "###### Aspect: How much navigability the Select function should have"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "- **Alternative 1 (current choice):** The user must always select the notebook title if he wants to choose a section or page within it."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    - Pros: It is easy to catch exceptions when the notebook/section does not exist. This also ensures that even if there are 2 sections in 2 different notebooks with the same name, the user can select the correct section."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    - Cons: The format for the command is longer."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "- **Alternative 2**: The user can select a notebook/section/page wherever he wants."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    - Pros: The command the user has to type is much shorter."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    - Cons: If the user has notebooks/sections with the same name, he cannot be sure that the item he wants will be selected correctly."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Command Execution**"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Method `FindCommandNotebookMode#execute()` does the following:\u003cbr\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "a. Constructs `CliMessages` class, which prints any outputs to the user\u003cbr\u003e"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "b. If `keyword` is specified (not empty), `getAllWithTitleContainingKeyword()` is called."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "`getAllWithTitleContainingKeyword()`searches for all notebooks, sections and pages that have titles that contain the"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "keyword. \u003cbr\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "c. Else, if the `tag` is specified (not empty), `getAllWithTagsContainingKeyword` is called. This method finds"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "all notebooks, sections and pages that have tags that fit `tag`.\u003cbr\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "d. The messages to output to the user are added to `ArrayList`s."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "e. Calls `CliMessages#printFoundNotebooksMessages`, `CliMessages#printFoundSectionsMessages` and"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "`CliMessages#printFoundPagesMessages` are called if `Notebook`s, `Section`s and `Page`s are found respectively. These"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "methods output the titles of the found notebooks, sections and pages to the user."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.3.4.2. Design Considerations"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Aspect: Way to search through the notebook shelf"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- **Alternative 1 (current choice):** Loop through every page, section and notebook"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Pros: Able to trace the notebook and section that a found page belongs to. This makes it more convenient to show"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    to the user."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Cons: It is unoptimized in terms of complexity, with a complexity of O(n\u003csup\u003e3\u003c/sup\u003e)."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- **Alternative 2:** Store all notebooks, sections and pages into respective lists"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Pros: Has better time complexity of O(n) as it only needs to iterate through each list."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Cons: Unable to output the notebook and section a page belongs to to the user"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "longngng"
        },
        "content": "#### 4.3.5. List Feature"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "longngng"
        },
        "content": "##### 4.3.5.1. Implementation"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "longngng"
        },
        "content": "The following sequence diagram shows how the list operation in the notebook mode works:"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "![Sequence Diagram for List](diagrams/class/jpeg/SequenceDiagram_ListSection.jpg)"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "longngng"
        },
        "content": "Given below is an example usage scenario and how the list function behaves."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "longngng"
        },
        "content": "Step 1. The user types `list /s`. The `list /s` command is passed through"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "longngng"
        },
        "content": "`InputParser#getCommandFromInput`, which constructs a `ListCommandNoteMode` object and calls"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "longngng"
        },
        "content": "`ListCommandNotebookMode#execute()`."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "longngng"
        },
        "content": "Step 2. `execute()` is called, which then calls the print functions based on the `AppMode` field in `AppState`."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "longngng"
        },
        "content": "Step 3. The program prints the contents corresponding to the input or throw an exception if the command is"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "longngng"
        },
        "content": "invalid."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "longngng"
        },
        "content": "##### 4.3.5.2. Design Considerations"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### 4.4. Storage (Neil)"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The `Storage` class reads and writes the application state to and from a text file."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### 4.4.1. Storage format"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "This section describes the format used to store the TaskList and NotebookShelf from the application state in a plain"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "text file."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ":exclamation: The operating system newline character is used to terminate lines; that is, `\\r\\n` on Windows and"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "`\\n` on UNIX-based systems."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "##### 4.4.1.1. TaskList"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "For `TaskList`, the format is as follows:"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* One line containing an integer `n`, the number of tasks."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* `3n` lines follow, every 3 lines describing one task."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* The first line contains the task title as a String."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* The second line contains the task due date, in the format `dd-MM-yyyy hhmm`."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* The third line contains a value `true` or `false`, indicating whether the task is done. (`true` means done,"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "`false` means not done.)"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "##### 4.4.1.2. Page"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "For a single page, the format is as follows:"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* One line containing the title of the page."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* One line containing the content of the page. Newline characters in the content are replaced with the string `\"~~~\"`."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "##### 4.4.1.3. Section"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "For a single section, the format is as follows:"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* One line containing an integer `p`, the number of pages in the section."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* `p` pages are then described, as specified [here](#4412-page)."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "##### 4.4.1.4. Notebook"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "For a single notebook, the format is as follows:"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* One line containing an integer `s`, the number of sections."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* `s` sections are then described, as specified [here](#4413-section)"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "##### 4.4.1.5. NotebookShelf"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "For `NotebookShelf`, the format is as follows:"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* One line containing an integer `n`, the number of notebooks."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* `n` notebooks are then described, as specified [here](#4414-notebook)."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 4.4.2 Implementation"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "`TaskList`, `Task`,`NotebookShelf`, `Notebook`, `Section`, and `page` contain methods called `serialize()`."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "These methods return`String` representations of themselves, as specified [here](#441-storage-format).  "
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The `serialize()` method in `TaskList` calls the `serialize()` methods for every `Task` object within"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "it and combines their outputs with a `StringBuilder`."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The `serialize()` method in `NotebookShelf` calls the `serialize()` methods for every `Notebook` object within it and"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "combines their outputs with a `StringBuilder`."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The `serialize()` method in `Notebook` calls the `serialize()` methods for every `Section` object within"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "it and combines their outputs with a `StringBuilder`."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The `serialize()` method in `Section` calls the `serialize()` methods for every `Page` object within it and"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "combines their outputs with a `StringBuilder`."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.4.2.1. Saving the application state"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The following sequence diagram describes the operation of the `saveToFile()` operation."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "![Sequence Diagram for saveToFile command](diagrams/class/jpeg/storage_neil.jpg)"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Note: The diagram above does not show how the `saveToFile()` method saves `Task` objects from the `TaskList`, in"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "the interest of brevity. The operation of the method is very similar for the `TaskList`, except the hierarchy is much"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "simpler for tasks (since `Task` objects do not contain other objects).  "
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The `Storage.saveToFile()` method saves the current application state to a file."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "It gets the NotebookShelf and TaskList objects from the current appState, passed in as a parameter. Then, as"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "described above in the sequence diagram, it iterates through the lists of `Task` objects in the `TaskList` and"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "`Notebook` objects in the `NotebookShelf`, calling their `serialize()` methods, which in turn call the"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "`serialize()` methods for each of their contained objects (if applicable). The `saveToFile()` method then uses"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "`FileWriter`s to write to `File` objects, saving the serialized version of the application state to two text files."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 4.4.2.2. Reading the application state"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The following sequence diagram describes the operation of the `readFromFile()` operation."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "// TODO: Add a sequence diagram to this section."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Note: As above, the diagram omits the reading of the `TaskList` from the text file in the interest of brevity. Again,"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "this operation is similar to that for `NotebookShelf` but much simpler."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The `Storage.readFromFile()` method creates an instance of `AppState` based on the contents of the saved text files, and"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "returns said instance of `AppState` if reading the save files was successful, and a blank instance otherwise."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "`readFromFile()` uses `Scanner`s, and the `Scanner.nextLine()` method to read the text files line by line. It parses"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "the lines containing integers indicating the number of notebooks/sections/pages/tasks, and subsequently uses `for`"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "loops to read the appropriate number of lines."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Each iteration of the loop creates a new instance of `Task`/`Notebook`/`Section`/`Page` as appropriate, using the"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "constructor to set the fields appropriately based on what is read from the save file, and then it adds the objects"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "to the appropriate container (i.e. adds each `Task` to the `TaskList`, adds each `Page` to its respective `Section`"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "etc. ). It then stores the loaded `TaskList` and `NotebookShelf` to a new instance of `AppState` and returns this."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "### 4.5 Error Handling"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "The `ZeroNoteException` class extends `Exception` by printing an error message to the user when the user encounters an exception."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "The following example is a scenario that demonstrates how exceptions are handled in **Zer0Note**."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "1. The user launches the application for the first time. `CliUserInterface#executeCommand` is called when the user types in `hello`."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "2. The `hello` command is passed through a switch-case block within `InputParser#getCommandFromInput`."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "3. As `hello` is not a command in `Zer0Note`, `InvalidCommandException` which extends `ZeroNoteException` will be thrown."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "4. This `ZeroNoteException` is caught by `CliUserInterface#run`, which will then call `ZeroNoteException#printErrorMessage`."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "## 5. Documentation"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The following section describes how documentation for the project should be written. Note: documentation is all"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " written in [GitHub-Flavoured Markdown](https://github.github.com/gfm/)."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 5.1. Setting up and maintaining the project website."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- We use **Jekyll** to manage documentation."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- The `docs/` folder is used for documentation."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- To learn how to set it up and maintain the project website, follow the guide"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[[se-edu/guides] Using Jekyll for project documentation](https://se-education.org/guides/tutorials/jekyll.html)."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 5.2. Style guidance"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- Follow the [Google developer documentation style guide](https://developers.google.com/style)."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- Also relevant is the [[se-edu/guides] Markdown coding standard](https://se-education.org/guides/conventions/markdown.html)."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### 5.3. Diagrams"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "We use Microsoft Visio Professional 2019 to draw our UML diagrams. If you do not have access to this software, free"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "alternatives such as [Lucidchart](https://www.lucidchart.com/pages/), [Google Drawings](https://docs.google.com/drawings),"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "[LibreOffice Draw](https://www.libreoffice.org/discover/draw/) and many others are also available. If you wish to"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "contribute diagrams (which we recommend you do if you contribute new features!), you may use any software of your"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "choosing to draw the diagrams, as long as the finished product somewhat resembles those we already have and follows"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "UML syntax strictly."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 5.4. Converting a document to the PDF Format"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "We use **Chrome** for converting documentation to PDF format."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003e Reason: Chrome\u0027s PDF engine preserves hyperlinks used in Web pages."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. Go to your generated documentation site on GitHub using Chrome."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. Within Chrome, click on the `Print` option in Chrome’s menu."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "3. Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cimg src\u003d \"https://se-education.org/guides/tutorials/images/chrome_save_as_pdf.png\"\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "## 6. Testing"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The following section describes the testing methodologies followed in this project to ensure high-quality, bug-free"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "code as far as possible."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 6.1. Running tests"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - To run all tests, right-click on the `src/test/java` and choose `Run \u0027Tests in tp.test\u0027`"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    - Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 6.2. Types of tests"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "{Describe the type of testing used in the code}"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "This project has one type of test:"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Unit tests targeting the lowest level methods/classes."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "e.g. `seedu.duke.userinterface.command.notebook.AddNotebookTest`"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "## Appendix A: Project Scope"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Target user profile**"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- student with multiple courses"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- has a need to multiple notes"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- has a need to view upcoming tasks swiftly"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- prefer desktop apps over other forms"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "- is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Value proposition**:\u003cbr\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "manage both tasks and notes faster and lighter than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Priorities: High (must have) - `***`, Medium (nice to have) - `**`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "|Priority| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "|`***`|user|record and save my notes|review them later|"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "|`***`|student|view all tasks and sections of my notebook|have a clear view of my progress|"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "|`***`|new user|have usage instructions|refer to instructions when I forget how to use the App|"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "|`**`|forgetful user|see the most urgent tasks|prioritise my tasks|"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "|`*`|long-time user|have personalised messages|feel attached to my notes|"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "## Appendix C: Use Cases"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "(For all use cases below, the System is the `Zer0Note` and the Actor is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### Use case: Delete task"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "1. User requests to list tasks"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2. Zer0Note shows a list of tasks"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "3. User requests to delete a specific task in the list"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "4. Zer0Note deletes the task  "
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "#### Extensions"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "* 2.1. The task list is empty.  "
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  Use case ends.  "
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "* 3.1. The given index is invalid.  "
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "   * 3.1.1 Zer0Note shows an error message.  "
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/* work in progress */"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "## Appendix D: Non-Functional Requirements"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1. Should work on any *mainstream OS* as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "## Appendix E: Glossary"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "* **Mainstream OS**: Windows, Linux, macOS"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* **Notebook shelf**: a list of all notebooks entered by the user"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "## Appendix F: Instructions for manual testing"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003e**Note**: These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003etesters are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### 1. Launch and Shutdown"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "1.1 Initial launch  "
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Download the jar file and copy into an empty folder.  "
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Double-click the jar file  "
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: Command Line Interface should launch with a welcome message from Zer0Note as shown below:  "
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Welcome to"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " _ _ _                  _ _ _   _    _            _"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "|_ _  |   _ _    _  _  |  _  | |  \\ | |   _ _   _| |_    _ _"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  /  /  /  _  \\ | |/_\\ | | | | |   \\| |  /   \\ |_   _| /   _ \\"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " /  /_  |  _ _/ | |    | |_| | |  |\\  | |  [] |  | |_  |  _ _/"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "|_ _ _|  \\ _ _| |_|    |_ _ _| | _| \\_|  \\ _ /   |_ _|  \\ _ _|"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "You are now in timetable mode"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### 2. Test Cases"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "#### 2.1 Deleting a task"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.1.1. Deleting a task while all tasks in the existing tasklist is listed.  "
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must be in the Timetable mode. Enter `mode /t` command to enter Timetable mode. List all tasks in the tasklist using the `list` command. There must be existing tasks in the list.  "
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Test case: `delete 1`    "
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: First task is deleted from the tasklist.  "
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iii. Test case: `delete 0`  "
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: No task is deleted. Error message will be printed in the command line interface.  "
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iv. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the number of tasks in the tasklist)  "
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: No task is deleted. Error message will be printed in the command line interface."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "#### 2.2 Adding a task"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.2.1 Adding a task to the tasklist.  "
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must be in the Timetable mode. Enter `mode /t` command to enter Timetable mode.  "
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Test case: `add /t test task /by 10-10-2020 2000`  "
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: Task is added into the tasklist with a success message printed.  "
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iii. Test case: `add /t test task`  "
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: An error messsage will be printed in the command line interface.  "
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iv. Test case: `add`  "
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: An error message along with a formatting guideline message will be printed.  "
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "v. Test case: `add /t test task /by 2020-10-10 2000`  "
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: An error message along with a formatting guideline message (date format should be dd-MM-yyyy HHmm) will be printed in the command line interface."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "#### 2.3 Marking a task as done"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.3.1 Marking a task as done while there are existing task in the tasklist.  "
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must be in the Timetable mode. Enter `mode /t` command to enter Timetable mode. List all tasks in the tasklist using the `list` command. There must be existing tasks in the list.  "
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Test case: `done 1`  "
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: First task should be marked as done in the tasklist.  "
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iii. Test case: `done 0`  "
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: An error messsage along with a formatting guideline message will be printed in the command line interface.  "
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iv. Other incorrect done commands to try: `done`, `done x` (where x is larger than the number of tasks in the tasklist)  "
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: An error messsage along with a formatting guideline message will be printed in the command line interface.  "
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "#### 2.4 Tagging a Task"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.4.1. Tagging an existing task in the tasklist.  "
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must be in the Timetable mode. Enter `mode /t` command to enter Timetable mode. List all tasks in the tasklist using the `list` command. There must be existing tasks in the list.  "
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Test case: `tag 1 /tschoolWork`  "
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: Task in index 1 of the tasklist is tagged with a tag \u0027schoolWork\u0027.  "
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iii. Test case: `tag 1`  "
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: An error message along with a formatting guideline message will be printed in the command line interface.  "
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iv. Test case: `tag`  "
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: An error message along with a formatting guideline message will be printed in the command line interface.  "
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "v. Test case: `tag schoolWork`  "
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: An error message along with a formatting guideline message will be printed in the command line interface."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "#### 2.5 Listing a Task"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.5.1. Listing existing task in the tasklist.  "
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must be in the Timetable mode. Enter `mode /t` command to enter Timetable mode. There must be existing tasks in the list."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.5.1.1. Listing all existing task in the tasklist.  "
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Test case: `list`  "
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: All existing tasks in the tasklist will be printed out."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.5.1.2. Listing all marked as done existing tasks in the tasklist.  "
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Test case: `list /d`  "
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: All existing marked as done tasks in the tasklist will be printed out.  "
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.5.1.3. Listing all undone existing tasks in the tasklist.  "
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Test case: `list /u`  "
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: All existing undone tasks in the tasklist will be printed out.  "
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.5.1.4. Listing all urgent existing tasks in the tasklist.  "
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Test case: `list /urgent`  "
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: All existing urgent tasks in the tasklist will be printed out.  "
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "#### 2.6 Executing a mode switch"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.6.1. Switching between Timetable mode and Notebook mode.  "
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must be in the Timetable mode. Enter `mode /t` command to enter Timetable mode.  "
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Test case: `mode /n`   "
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: Mode is switched to Notebook mode.  "
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iii. Test case: `mode /t`  "
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: Mode is switched to Timetable mode.  "
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iv. Test case: `mode`  "
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: An error message along with a formatting guideline message (missing follow up command \u0027/n\u0027 or \u0027/t\u0027) will be printed in the command line interface..  "
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "#### 2.7 Finding a Task using a keyword"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.7.1. Finding all tasks that contains a specified keyword.  "
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "i. Prerequisites: User must be in the Timetable mode. Enter `mode /t` command to enter Timetable mode. List all tasks in the tasklist using the `list` command. There must be existing tasks in the list.  "
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Test case: `Find Project`  "
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: All tasks with tags that contains the word \u0027Project\u0027 will be printed. If the tasks do not have tags, it will list the tasks with titles that contain the keyword \u0027Project\u0027.  "
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iii. Test case: `Find`  "
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: An error message along with a formatting guideline message will be printed in the command line interface.  "
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "#### 2.8 Adding a Notebook/Section/Page"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.8.1. Adding a respective notebook/section/page in their respective list.  "
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must be in the Notebook mode. Enter `mode /n` command to enter Notebook mode.    "
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.8.1.1. Adding a Notebook.  "
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must not be in a selected notebook or section. User should type `mode /n` before executing this test case.   "
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Test case: `add /nCS2113T`  "
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: Notebook \u0027CS2113T\u0027 is added to the notebookShelf with a success message printed.  "
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.8.1.2. Adding a Section.  "
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must select a notebook. Enter `select /n[NOTEBOOK]` to enter a specified notebook.    "
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Test case: `add /sChapter 1`  "
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: Section \u0027Chapter 1\u0027 is added to the specified notebook with a success message printed.  "
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.8.1.3. Adding a Page.  "
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must select a Section. Enter `select /s[SECTION]` to enter a specified section.    "
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Test case: `add /pPage 1 ; a test page`  "
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: Page \u0027Page 1\u0027 along with content \u0027a test page\u0027 is added to the specified section with a success message printed.  "
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "#### 2.9 Selecting a Notebook/Section/Page"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.9.1. Selecting a respective notebook/section/page in their respective list.  "
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must be in the Notebook mode. Enter `mode /n` command to enter Notebook mode.  "
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.9.1.1. Selecting a Notebook.    "
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Test case: `select /nCS2113T`  "
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: The user will enter the selected notebook \u0027CS2113T\u0027 with a success message printed."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.9.1.2. Selecting a Section.  "
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Test case: `select /sChapter 1`  "
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: The user will enter the selected Section \u0027Chapter 1\u0027 with a success message printed."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.9.1.3. Selecting a Page.  "
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Test case: `select /pPage 1`  "
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: The user will enter the selected Page \u0027Page 1\u0027 with a success message printed.  "
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Test case: `select /nCS2113T /sChapter 1 /pPage 1`  "
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: The user will enter the selected Page \u0027Page 1\u0027 with a success message printed.  "
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "#### 2.10 Deleting a Notebook/Section/Page"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.10.1. Deleting a respective notebook/section/page in their respective list.  "
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must be in the Notebook mode. Enter `mode /n` command to enter Notebook mode. There must be existing notebooks/sections/pages in the respective list when command `list` is entered.  "
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.10.1.1. Deleting a notebook.  "
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Test case: `delete /nCS2113T`    "
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: The selected notebook \u0027CS2113T\u0027 will be deleted, along with the sections and pages under it, with a success message printed."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.10.1.2. Deleting a section.  "
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Test case: `delete /sChapter 1`    "
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: The selected section \u0027Chapter 1\u0027 will be deleted, along with the pages under it, with a success message printed."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.10.1.3. Deleting a notebook.  "
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Test case: `delete /pPage 1`    "
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: The selected page \u0027Page 1\u0027 will be deleted with a success message printed."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "#### 2.11 Listing a Notebook/Section/Page"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.11.1 Listing existing notebook/section/page in the NotebookShelf.  "
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must be in the Notebook mode. Enter `mode /n` command to enter Notebook mode. There must be existing notebooks/sections/pages in the respective list when command `list` is entered.  "
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Test case: `list`   "
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: All existing Notebooks/Sections/Pages will be listed in the given NotebookShelf/Notebook/Section respectively.  "
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.11.1.1. Listing all n task in the tasklist.  "
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Test case: `list /a`  "
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: All notebooks, sections and pages will be printed out.  "
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.11.1.2. Listing the list of notebooks and their sections   "
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must be in a notebook and not in a section.  "
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Test case: `list /s`  "
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: All notebooks and their respective sections will be printed out.  "
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "#### 2.12 Tagging a Notebook/Section/Page"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.12.1. Tagging an existing notebooks/sections/pages in the list.  "
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must be in the Notebook mode. Enter `mode /n` command to enter Notebook mode. List all tasks in the tasklist using the `list` command. There must be existing tasks in the list.  "
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Test case: `tag /tschoolWork`  "
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: Specified name of notebook/section/page in the list is tagged with a tag \u0027schoolWork\u0027.  "
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iii. Test case: `tag`  "
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: An error message along with a formatting guideline message will be printed in the command line interface.   "
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "#### 2.13 Finding a Notebook/Section/Page using a keyword"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "2.13.1. Finding all notebooks/sections/pages that contains a specified keyword.  "
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Prerequisites: User must be in the Notebook mode. Enter `mode /n` command to enter Notebook mode. List all notebooks/sections/pages in the notebookShelf using the `list /a` command. There must be existing notebooks/sections/pages in the list.  "
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Test case: `Find Project`  "
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: All notebooks/sections/pages with tags that contains the word \u0027Project\u0027 will be printed. If the notebooks/sections/pages do not have tags, it will list the notebooks/sections/pages with titles that contain the keyword \u0027Project\u0027.  "
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iii. Test case: `Find`   "
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: An error message along with a formatting guideline message will be printed in the command line interface.  "
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "### 3. Saving Data"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "3.1. Dealing with corrupted data files  "
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Click on the folder that the jar file had been saved in.  "
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Select both the \u0027tasks.txt\u0027 and \u0027notebooks.txt\u0027."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iii. Delete both files.  "
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iv. Restart the application by double-clicking the jar file and running Zer0Note.  "
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Expected: The Command Line Interface should launch with a welcome note from Zer0Note as shown in Appendix F, 1.1. "
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "3.2 Dealing with corrupted name file  "
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Click on the folder that the jar file had been saved in.  "
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Enter the \u0027src\u0027, then \u0027main\u0027, \u0027resources\u0027 and then \u0027txt\u0027 folder.  "
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iii. Delete the file named \u0027nameOfUser.txt\u0027  "
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iv. Restart the application by double-clicking the jar file. Re-enter the name of user.  "
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "3.3 Changing of saved name  "
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "i. Click on the folder that the jar file had been saved in.  "
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "ii. Enter the \u0027src\u0027, then \u0027main\u0027, \u0027resources\u0027 and then \u0027txt\u0027 folder.  "
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iii. Double-click the \u0027nameOfUser.txt\u0027 file to edit it.  "
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "iv. Change the name in the txt file with the desired name and save the file.  "
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "v. Re-run Zer0Note with the desired name.  "
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 119,
      "Lusi711": 461,
      "yAOwzers": 288,
      "neilbaner": 238,
      "longngng": 93,
      "-": 27
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "# Zer0Note"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "```"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " ______ "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "|      |  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "| 0 u 0|    Hello I\u0027m Zer0!"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "|      | "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "|______|"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "```"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Welcome, and thank you for choosing **Zer0Note**!"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "**Zer0Note** is a note taking and organisation application meant for students(especially those who can type fast)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "It combines the features of note-taking apps (like OneNote) with the interaction speed of command-line based tools like vim and emacs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "It helps students (like yourself!) to keep track of deadlines and take notes quickly."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "**Zer0Note** is designed for students who love typing, and the command line! "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 16,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "# Zer0Note User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "```"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "          Welcome to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " ______    _ _ _                  _ _ _   _    _            _"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "|      |  |_ _  |   _ _    _  _  |  _  | |  \\ | |   _ _   _| |_    _ _"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "| 0 u 0|    /  /  /  _  \\ | |/_\\ | | | | |   \\| |  /   \\ |_   _| /   _ \\"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "|      |   /  /_  |  _ _/ | |    | |_| | |  |\\  | |  [] |  | |_  |  _ _/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "|______|  |_ _ _|  \\ _ _| |_|    |_ _ _| | _| \\_|  \\ _ /   |_ _|  \\ _ _|"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "```"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[**1. Introduction**](#1-introduction) \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;[1.1. How to use this guide](#11-how-to-use-this-guide) \u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[**2. Quick Start**](#2-quick-start) \u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[**3. Features**](#3-features) \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.1 Viewing the user guide: `help`](#31-viewing-the-user-guide-help) \u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.2 Switching between the two modes: `mode`](#32-switching-between-the-two-modes-mode) \u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.3 Timetable Mode](#33-timetable-mode) \u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.1 Adding a task: `add`](#331-adding-a-task-add) \u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.2 Marking a task as done: `done`](#332-marking-a-task-as-done-done) \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.3 Tagging a task: `tag`](#333-tagging-tasks-tag) \u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.4 Listing tasks: `list`](#334-listing-tasks-list) \u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.4.1 Listing all tasks](#3341-listing-all-tasks) \u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.4.2 Listing done tasks](#3342-listing-done-tasks) \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.4.3 Listing undone tasks](#3343-listing-undone-tasks) \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.4.4 Listing urgent tasks](#3344-listing-urgent-tasks) \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.5 Finding tasks: `find`](#335-finding-tasks-find) \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.5.1 Finding by keyword](#3351-finding-by-keyword) \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.5.2 Finding by tag](#3352-finding-by-tag) \u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.6. Deleting a task: `delete`](#336-deleting-a-task-delete) \u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.4 Notebook Mode](#34-notebook-mode) \u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4.1 Adding a notebook/section/page: `add`](#341-adding-a-notebooksectionpage-add) \u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4.1.1 Adding a notebook](#3411-adding-a-notebook) \u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4.1.2 Adding a section](#3412-adding-a-section) \u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4.1.3 Adding a page](#3413-adding-a-page) \u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4.2 Selecting a notebook/section/page: `select`](#342-selecting-a-notebooksectionpage-select) \u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4.3 Tagging a notebook/section/page: `tag`](#343-tagging-a-notebooksectionpage-tag) \u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4.4 Listing contents: `list`](#344-listing-contents-list) \u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4.5 Finding contents: `find`](#345-finding-contents-find) \u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4.5.1 Finding by keyword](#3351-finding-by-keyword) \u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4.5.2 Finding by tag](#3452-finding-by-tag) \u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4.6 Deleting a notebook/section/page: `delete`](#346-deleting-a-notebooksectionpage-delete) \u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.5 Exiting the program: `exit`](#35-exiting-the-program-exit) \u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[**4. FAQ**](#4-faq) \u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[**5. Command Summary**](#5-command-summary) \u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[**6. For advanced users: Editing your save file**](#6-for-advanced-users-editing-your-save-file)\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;[6.1 The tasks save file](#61-the-tasks-save-file)\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u0026nbsp;\u0026nbsp;[6.2 The notebooks save file](#62-the-notebooks-save-file)\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Welcome, and thank you for choosing **Zer0Note**!"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "**Zer0Note** is a note taking and organisation application meant for students(especially those who can type fast)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "It combines the features of note-taking apps (like OneNote) with the interaction speed of command-line based tools like vim and emacs."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "It helps students (like yourself!) to keep track of deadlines and take notes quickly."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "**Zer0Note** is designed for students who love typing, and the command line!"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "This document contains all the information you need to get started with using Zer0Note. It contains an exhaustive"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "guide to all the features in the application. A condensed version of this guide is available inside the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "too, for quick reference while you\u0027re using **Zer0Note**. To learn how to access the built-in user guide, see"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "[Section 3.1](#31-viewing-the-user-guide-help)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### 1.1 How to use this guide"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "This user guide will give you a step-by-step tutorial on how to use each of the commands."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "By using these commands, you will be able to keep track of your deadlines and organise your notes!"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Here are some icons that will be used in this User Guide:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "*Table 1: Icons and their meanings*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "**Icon** | **Meaning**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "-------- | ----------"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ":exclamation: | This is a note. A note suggests some considerations when using Zer0Note."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ":bulb: | This is a tip. A tip gives you a suggestion when using **Zer0Note**."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ":warning: | This is a warning. A warning suggests that you **may** get an error."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ":exclamation: Notes about the format:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* Words/sections that look like this: `example`, are code snippets."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* Words/phrases within `[square brackets]` are the expected user inputs."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "  e.g. in `add /n[NOTEBOOK]`, `NOTEBOOK` is a parameter which can be used as `add /nCS2101`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* Words within `(parentheses)` are optional user inputs."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "  e.g. in `list (/urgent)`, `/urgent` is an optional parameter."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* Words in [blue]() are clickable links."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "* Within a code segment, `\u003e\u003e\u003e` denotes the command typed by the user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    Example:  "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    \u003e\u003e\u003e select /sChapter 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        now in notebook section: Chapter 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "  `select /sChapter 1` is the user\u0027s input, and `now in notebook section: Chapter 1` is the output message.      "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Here is a list of instructions on how you can download Zer0Note!"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "1. Ensure that you have Java 11 or above installed. You may use the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "[Oracle Java SE runtime](https://www.oracle.com/java/technologies/javase-downloads.html)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "or an open-source alternative like [AdoptOpenJDK](https://adoptopenjdk.net/index.html)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "2. Download the latest version of `Zer0Note` from [here](https://github.com/AY2021S1-CS2113T-T12-3/tp/releases)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for Zer0Note."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "4. Open a terminal on your computer and navigate to the folder containing the jar file. In the following example, the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " file has been saved in the Downloads folder."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    ![Change directory](images/command-change-dir.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    *Figure 1. Changing directory in Windows command prompt*"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "5. Type `chcp 65001` and press Enter."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "6. Type `java -jar Zer0Note.jar` and press Enter."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "7. If successful, you will see the following message."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    ![Welcome message](images/welcome.png)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    *Figure 2. Welcome message on successful run*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Great! Now that you have successfully run Zer0Note, go ahead and try out the different commands available (shown in section 3. Features)."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "This section introduces the available features, and the format required for each of the commands."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "**Zer0Note** can operate in two different modes:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "1. Timetable Mode"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "2. Notebook Mode"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "The following sections will explain more about the different commands that can be used in anywhere,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "and commands specific to [Timetable Mode](#33-timetable-mode) and [Notebook Mode](#34-notebook-mode)."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "### 3.1 Viewing the user guide: `help`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Whenever you need help, you can view the full built-in user guide by typing in `help`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "To view the user guide for the timetable mode, type in `help timetable`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "To view the user guide for the notebook mode, type in `help notebook`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "### 3.2 Switching between the two modes: `mode`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "This command allows you to switch from notebook mode (at the bookshelf level) to the timetable mode, or vice versa."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "longngng"
        },
        "content": "- Switch to the notebook mode"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "longngng"
        },
        "content": "Format: `mode /n`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "longngng"
        },
        "content": "- Switch to the timetable mode"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "longngng"
        },
        "content": "Format: `mode /t`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 3.3 Timetable Mode"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Keeping up with deadlines may seem like a daunting task, especially when you\u0027re already busy with school."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "With Zer0Note\u0027s Timetable Mode, you\u0027ll be able to manage a list of tasks."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "You can `add`, `delete`, `list` and mark your deadlines as `done`!"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "For example, you can add your assignments with their due dates as tasks."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "You can then mark them as done when you\u0027re finished with them, or delete them if you\u0027ve made a mistake."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "The following sections explain the various features you can use while you are in the Timetable Mode."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 3.3.1 Adding a task: `add`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "This command lets you `add` a `task` with a deadline to the task list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "longngng"
        },
        "content": "Format: `add /t[TASK] /by[dd-MM-yyyy] [hhmm]`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "These are the parameters required in the command:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `TASK`: name of the task."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "longngng"
        },
        "content": "* `dd-MM-yyyy`: the due date of the task, in the format day/month/year."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `hhmm`: time the task is due, in 24h format."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Let\u0027s say you have to read a book for one of your modules."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "```"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "\u003e\u003e\u003e add /tRead book /by19-10-2020 1800"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Added: Read Book"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1:[x] Read book (by: Oct 19 2020 06.00 PM)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "With that, you\u0027ve successfully added a task titled `Read book`, with the deadline `Oct 19 2020 06.00 PM` into your task list!"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e:warning: Please remember to type the deadline in the correct format, or else an error message will be shown."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e Both task titles and deadlines should not be blank!"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 3.3.2 Marking a task as done: `done`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Marks an existing `task` as done in the current task list."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Format: `done [INDEX]`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "This is the parameter required in the command:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "* `INDEX`: Index of the existing task in the current task list."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "\u003e\u003e\u003e done 1"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Yay! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " [o] Read book"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 3.3.3 Tagging tasks: `tag`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "You have added a few tasks, and completed some of them. Congratulations! After reviewing, you realise that some of the"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "tasks come from the same module, or that some are non-academic-related. Is there any way you can categorise them together?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "This command lets you add a single `tag` to an existing `task` to remind you of the category it belongs to. You can"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "learn how to search for all tasks with the same `tag` in [Finding tasks](#335-finding-tasks-find)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003e:bulb: Each task can only have one tag. The previous tag will be automatically overwritten by the new tag and no"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003ereminder will be given."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Format: `tag [INDEX] /t[TAG]`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "These are the parameters required in the command:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `INDEX`: index number of the intended task in the full task list"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `TAG`: text description of the tag"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "```"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003e\u003e\u003e tag 1 /tTodo"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Got it! I\u0027ve tagged this as:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lusi711"
        },
        "content": " [o] Read book (by: Oct 19 2020 06.00PM)(tag: Todo)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "```"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 3.3.4 Listing tasks: `list`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Use the `list` command to list the tasks you have added to **Zer0Note**. There are 4 ways you can use this"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "command, described below:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 3.3.4.1 Listing all tasks"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "When you want to have a look at your task list, you can list out all the existing tasks."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "longngng"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "longngng"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "longngng"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "longngng"
        },
        "content": "\u003e\u003e\u003e list"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1:[o] Read book (by: Oct 19 2020 06.00 PM)(tag: Todo)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "longngng"
        },
        "content": "2:[x] Return book (by: Oct 23 2020 12.00 PM)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "longngng"
        },
        "content": "3:[x] Submit assignment (by: Oct 18 2020 04.00 PM)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "longngng"
        },
        "content": "4:[x] CS2113T Quiz (by: Oct 23 2020 11.00 PM)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "longngng"
        },
        "content": "5:[o] CS2101 OP2 (by: Oct 25 2020 11.00 AM)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "longngng"
        },
        "content": "```"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 3.3.4.2 Listing done tasks"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "When you want to keep track of your progress, you can list out all the tasks that are marked as done."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "longngng"
        },
        "content": "Format: `list /d`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "longngng"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "longngng"
        },
        "content": "```"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "longngng"
        },
        "content": "\u003e\u003e\u003e list /d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1:[o] Read book (by: Oct 19 2020 06.00 PM)(tag: Todo)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "longngng"
        },
        "content": "2:[o] CS2101 OP2 (by: Oct 25 2020 11.00 AM)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "longngng"
        },
        "content": "```"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 3.3.4.3 Listing undone tasks"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "If you want to have a look at what you need to do, you can list out all the tasks that are not marked as done."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "longngng"
        },
        "content": "Format: `list /u`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "longngng"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "longngng"
        },
        "content": "```"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "longngng"
        },
        "content": "\u003e\u003e\u003e list /u"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "longngng"
        },
        "content": "1:[x] Return book (by: Oct 23 2020 12.00 PM)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "longngng"
        },
        "content": "2:[x] Submit assignment (by: Oct 18 2020 04.00 PM)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "longngng"
        },
        "content": "3:[x] CS2113T Quiz (by: Oct 23 2020 11.00 PM)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "longngng"
        },
        "content": "```"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 3.3.4.4 Listing urgent tasks"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "If you\u0027re in a time crunch, you can list out top urgent tasks that have not been done, sorted by deadlines. If there"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "are many undone tasks, only the top three urgent ones will be displayed."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "longngng"
        },
        "content": "Format: `list /urgent`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "longngng"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "longngng"
        },
        "content": "```"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "longngng"
        },
        "content": "\u003e\u003e\u003e list /urgent"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "longngng"
        },
        "content": "1:[x] Submit assignment (by: Oct 18 2020 04.00 PM)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "longngng"
        },
        "content": "2:[x] CS2113T Quiz (by: Oct 23 2020 11.00 PM)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "longngng"
        },
        "content": "3:[x] Return book (by: Oct 23 2020 12.00 PM)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "longngng"
        },
        "content": "```"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 3.3.5 Finding tasks `find`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Your tasklist has grown, and it becomes a pain to go through every single task in the list. Filtering the list by"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "completion and deadline does not provide the intended result either. Don\u0027t worry! You can search for any task directly"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "too."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "There are two ways to find a task:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 3.3.5.1 Finding by keyword"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Finds any task that contains the keyword in the task description.  The search is not case-sensitive."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Format: `find [KEYWORD]`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "These are the parameters required in the command:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `KEYWORD`: keyword to look for"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "```"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003e\u003e\u003e find book"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1:[o] Read book (by: Oct 19 2020 06.00 PM)(tag: Todo)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2:[x] Return book (by: Oct 23 2020 12.00 PM)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "```"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 3.3.5.2 Finding by tag"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Finds any task that has a specified tag.  The search is case-sensitive."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Format: `find /t[TAG]`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "These are the parameters required in the command:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `TAG`: tag to look for"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "```"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003e\u003e\u003e find /tTodo"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Here are the tasks I found:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1:[o] Read book (by: Oct 19 2020 06.00 PM)(tag: Todo)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "```"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 3.3.6 Deleting a task: `delete`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Use the `delete` command to delete tasks you previously added to **Zer0Note**."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Format: `delete [INDEX]`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "This is the parameter required in the command:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `INDEX`: index number of the intended task in the full task list"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "```"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "\u003e\u003e\u003e delete 1"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[x] Read book (by: Oct 19 2020 06.00 PM)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\tNow you have 4 tasks in the list."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "```"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### 3.4 Notebook Mode"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "In a semester, an average student takes about 4-5 modules. You can use **Zer0Note** to keep all your notes and"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "thoughts about all those different classes in one place. This can help you organise your thoughts better!"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "In `Notebook Mode`, you can manage a shelf of notebooks."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "You can name it however you like and create as many notebooks you wish!"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Each notebook contains sections, and each section contains pages. Each page holds your type-written notes."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "For example, you can keep one notebook for each module you take, one section for each week or"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "lecture, and pages for different concepts.  "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 3.4.1 Adding a notebook/section/page: `add`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Within `Notebook Mode`, you can `add` a `notebook`, `section` or a `page`. This section will guide you through these commands."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e :warning: This feature does not support adding a notebook, section and page (or any combination of the 3) "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e all at once. e.g. `add /nSchool /sAdmin /p1: Modules` will throw an error."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 3.4.1.1 Adding a notebook"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Use the `add /n` command to add a `notebook`  into the `notebook shelf`."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Format: `add /n[NOTEBOOK]`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "This is the parameter required in the command:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `NOTEBOOK`: the name of the notebook."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Let\u0027s say you want to take notes for CS2113T, a module you\u0027re currently taking."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e\u003e\u003e add /nCS2113T"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Added notebook with title: CS2113T"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e:warning: Ensure that your notebook title is preceded by \"/n\", or an error message will be shown."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Now that you have added a new notebook for `CS2113T`, you can add a `section`!"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 3.4.1.2 Adding a section"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Use the `add /s` command to add a `section`  into the [selected](#342-selecting-a-notebooksectionpage-select) `notebook`."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e:bulb: You must select a `notebook` before adding a section!"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Format: `add /s[SECTION]`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "This is the parameter required in the command:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `SECTION`: the name of the section in the selected `notebook`."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Now that you have a notebook for `CS2113T`, you can make a `section` for each academic week."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e :bulb: Remember to select the `CS2113T` notebook!"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "\u003e\u003e\u003e add /sW1: Java"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Added section with title: W1: Java"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e:warning: Ensure that your section title is preceded by \"/s\", or an error message will be shown."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Great! You can now add a `page` (or as many pages as you like) into your new section titled `W1: Java`."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "##### 3.4.1.3 Adding a page"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Use the `add /p` command to add a `page`  into the [selected](#342-selecting-a-notebooksectionpage-select) `section`."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e:bulb: You must select a `section` before adding a page!"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e :warning: Please also make sure not to use \";\" in your page title! \";\" should only be used to "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e separate the page title from its contents."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Format: `add /p[PAGE]; [PAGE CONTENT]`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "These are the parameters required in the command:"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `PAGE`: the name of the page in the selected `section`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `PAGE CONTENT`: the contents that you would like to store in the `page`."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Let\u0027s say you want to add a page into a selected notebook `section`."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e :bulb: Remember to select the `W1: Java` section!"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "\u003e\u003e\u003e add /pHELLO WORLD; System.out.println(\"Hello World!\");"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Added page with title: HELLO WORLD"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "You\u0027ve successfully added a new page into the section `W1: Java` of the notebook `CS2113T`."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e:warning: Ensure that your page title is preceded by \"/p\" and that there is a \";\" to separate the contents from the page title."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e Otherwise, an error message will be shown. "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "#### 3.4.2 Selecting a notebook/section/page: `select`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "After adding a `notebook`, `section` or `page`, you may want to view its contents."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Use the `select` command to select a `notebook`, `section`, `page` or a combination of the three."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e :bulb: When you want to [`add` a `section`](#3412-adding-a-section), you must select a `notebook` first."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e :bulb: When you want to [`add` a `page`](#3413-adding-a-page), you must select a `section` first."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Format: `select /n[NOTEBOOK] /s[SECTION] /p[PAGE]`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "These are the parameters required in the command:"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `NOTEBOOK`: the title of the expected `notebook`."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `SECTION`: the title of the expected `section` in `notebook`."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `PAGE`: the page title in the expected `section`."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "In *NOTEBOOK MODE*:"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `select /nCS2101 /sW2 /pEmails` - selects the page titled `Emails` in the notebook `CS2101`, under the section `W2`."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `select /nCS2101 /sW2` - selects the section titled `W2` in the notebook `CS2101`."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `select /nCS2101` - selects the notebook titled `CS2101`."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `select /all` - navigates back into `NOTEBOOK MODE`, where you can list to see all available notebooks."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e These commands can be run anywhere(i.e in a selected notebook or section) once you\u0027re in NOTEBOOK MODE.  "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "In a selected *NOTEBOOK*:"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `select /s1: What is OOP? /pDefinition` - selects the page titled `Definition`, in the section `1: What is OOP?` of the selected `notebook`."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `select /s1: What is OOP?` - selects the section entitled `1: What is OOP?` in the selected `notebook`."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "In a selected *SECTION*:"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `select /pDefinition` - selects the page titled `Definition` in the selected `section`."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e :bulb: Whenever you want to select something, you may want to use the list all function, `list /a`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e to ensure that you\u0027re typing in the correct parameters."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "If you have a notebook entitled `CS2101`, you can select it by typing `select /nCS2101`."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "\u003e\u003e\u003e select /nCS2101"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "now in notebook book: CS2101"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "```"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "#### 3.4.3 Tagging a notebook/section/page: `tag`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "You have now several notebooks in the bookshelf. Some come from the same module, while others are just a running list of"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "inspirations you have."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "This command lets you add a single `tag` to a selected `notebook`, `section` or `tag` to remind you of the category it"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "belongs to. You can learn how to search for all notebooks, sections and pages in the bookshelf with the same `tag` in"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[Finding notebooks](#345-finding-contents-find)."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e:exclamation: The tag is added to the selected notebook, section or page. The tag will not be added to components"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003ebelonging to the selected notebook or section are not tagged."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e:bulb: Each notebook, section and page can only have one tag. The previous tag will be automatically overwritten"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003eby the new tag and no reminder will be given."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Format: `tag /t[TAG]`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "These are the parameters required in the command:"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `TAG`: text description of the tag"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "For example, you would to add a tag \"Module\" to a notebook titled \"CS2101\":"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e:bulb: Remember to select the notebook \"CS2101\"!"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "```"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e\u003e\u003e tag /tModule"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Got it! I\u0027ve tagged this as:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "CS2101 (tag: Module)"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "```"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "#### 3.4.4 Listing contents: `list`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Use the `list` command to view the content of the bookshelf, a selected book or a selected section."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "longngng"
        },
        "content": "Format: `list (/s) (/a)`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "longngng"
        },
        "content": "- `list` display contents in one level below the current selected object"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "longngng"
        },
        "content": "- `list /s` display the notebooks together with titles of sections in NOTEBOOK mode"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "longngng"
        },
        "content": "- `list /a` display all notebooks, sections and pages."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "In *NOTEBOOK MODE*,"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "longngng"
        },
        "content": "- `list` displays the titles of notebooks in the shelf."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "longngng"
        },
        "content": "- `list /s` displays the titles of notebooks together with titles of sections."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "longngng"
        },
        "content": "- `list /a` displays all notebooks, sections and pages."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "longngng"
        },
        "content": "```"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "longngng"
        },
        "content": "\u003e\u003e\u003e list"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "longngng"
        },
        "content": "* CS2113"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "longngng"
        },
        "content": "* CG2271"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "longngng"
        },
        "content": "* CS2101"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "longngng"
        },
        "content": "\u003e\u003e\u003e list /s"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "longngng"
        },
        "content": "* CS2113"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "longngng"
        },
        "content": "  |-- Chapter 1"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "longngng"
        },
        "content": "  |-- Chapter 2"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "longngng"
        },
        "content": "* CG2271"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "longngng"
        },
        "content": "* CS2101"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "longngng"
        },
        "content": "  |-- Chapter 1"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "longngng"
        },
        "content": "  |-- Chapter 2"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "longngng"
        },
        "content": "  |-- Chapter 3"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "longngng"
        },
        "content": "\u003e\u003e\u003e list /a"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "longngng"
        },
        "content": "* CS2113"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "longngng"
        },
        "content": "  |-- Chapter 1"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "longngng"
        },
        "content": "  |-- Chapter 2"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "longngng"
        },
        "content": "* CG2271"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "longngng"
        },
        "content": "* CS2101"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "longngng"
        },
        "content": "  |-- Chapter 1"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "longngng"
        },
        "content": "        |-- Writing email"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "longngng"
        },
        "content": "            Lorem ipsum"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "longngng"
        },
        "content": "        |-- Team meeting"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "longngng"
        },
        "content": "            Lorem ipsum"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "longngng"
        },
        "content": "  |-- Chapter 2"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "longngng"
        },
        "content": "  |-- Chapter 3"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "longngng"
        },
        "content": "```"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "In a selected *NOTEBOOK*:"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "longngng"
        },
        "content": "- `list` displays the titles of all the sections in the selected notebook."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "longngng"
        },
        "content": "- `list /a` displays all sections and pages in the selected notebook."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "longngng"
        },
        "content": "```"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "longngng"
        },
        "content": "\u003e\u003e\u003e select /nCS2101"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "longngng"
        },
        "content": "now in notebook book: CS2101"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "longngng"
        },
        "content": "\u003e\u003e\u003elist"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "longngng"
        },
        "content": "* Chapter 1"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "longngng"
        },
        "content": "* Chapter 2"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "longngng"
        },
        "content": "* Chapter 3"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "longngng"
        },
        "content": "\u003e\u003e\u003e list /a"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "longngng"
        },
        "content": "* Chapter 1"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "longngng"
        },
        "content": "  |-- Writing email"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "longngng"
        },
        "content": "        Lorem ipsum"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "longngng"
        },
        "content": "  |-- Team meeting"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "longngng"
        },
        "content": "        Lorem ipsum"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "longngng"
        },
        "content": "* Chapter 2"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "longngng"
        },
        "content": "* Chapter 3"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "longngng"
        },
        "content": "```"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "In a selected *SECTION*:"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "longngng"
        },
        "content": "- `list` displays all the pages in the selected section."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "longngng"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "longngng"
        },
        "content": "```"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "longngng"
        },
        "content": "\u003e\u003e\u003e select /sChapter 1"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "longngng"
        },
        "content": "now in notebook section: Chapter 1"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "longngng"
        },
        "content": "\u003e\u003e\u003e list"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "longngng"
        },
        "content": "* Writing email"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "longngng"
        },
        "content": "    Lorem ipsum"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "longngng"
        },
        "content": "* Team meeting"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "longngng"
        },
        "content": "    Lorem ipsum"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "longngng"
        },
        "content": "```"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "#### 3.4.5 Finding contents: `find`"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Just like how you can find a task in the Timetable mode, you can look for contents in this mode. Even sections and pages"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "that do not belong to a select notebook can be found. There are two ways to do so:"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "##### 3.4.5.1 Finding by keyword"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Finds all notebooks, sections and pages that contain the keyword in their title.  The search is not case-sensitive."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Format: `find [KEYWORD]`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "These are the parameters required in the command:"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `KEYWORD`: keyword to look for"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "```"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e\u003e\u003e find chapter"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "I\u0027ve found these for keyword: chapter"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Sections:"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "1. CS2113 |-- Chapter 1"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "2. CS2113 |-- Chapter 2"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "3. CS2101 |-- Chapter 1"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "4. CS2101 |-- Chapter 2"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "5. CS2101 |-- Chapter 3"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "```"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e:bulb: \"|--\" indicates \"belongs to\". You can use this to identify the particular notebook and section a page is in."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "##### 3.4.5.2 Finding by tag"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Finds all notebooks, sections and pages that has a specified tag.  The search is case-sensitive."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Format: `find /t[TAG]`"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "These are the parameters required in the command:"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* `TAG`: tag to look for"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "```"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e\u003e\u003e find /tModule"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "I\u0027ve found these for tag: Module"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Notebooks:"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "1. CS2113"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "```"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "#### 3.4.6 Deleting a notebook/section/page: `delete`"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Use the `delete` command to delete an existing notebook, section or page."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003e :exclamation: The current selection determines the type you can delete."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Format: `delete /n[NOTEBOOK] /s[SECTION] /p[NUMBER]`"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `NOTEBOOK`: the title of the notebook to be deleted"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `SECTION`: the title of the section to be deleted in the selected `NOTEBOOK`"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `NUMBER`: the page number of the page to be deleted in the selected `SECTION`."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "In *NOTEBOOK MODE*,"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `delete /nCS2113T /sW10 /p1` deletes page `1` under the section `W10` of the notebook `CS2113T`."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `delete /nCS2113T /sW10` deletes the entire section titled `W10` in the notebook `CS2113T`."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `delete /nCS2113T` deletes the entire notebook titled `CS2113T`."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "In a selected *NOTEBOOK*,"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `delete /s1: What is OOP? /p1` deletes page `1` of the section titled `1: What is OOP?` of the selected notebook."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `delete /s1: What is OOP?` deletes the section titled `1: What is OOP?` of the selected notebook."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "In a selected *SECTION*,"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "* `delete /p1` deletes page `1` of the selected section."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "```"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003e\u003e\u003e mode /n"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "You are now in notebook mode"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003e\u003e\u003e delete /nCS2113T /sW10 /p1"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Noted. I\u0027ve removed this page: HELLO WORLD"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "System.out.println(\"Hello World!\")"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003e\u003e\u003e delete /nCS2113T /sW10"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Noted. I\u0027ve removed this section:"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\tW10"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "\u003e\u003e\u003e delete /nCS2113T"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Noted. I\u0027ve removed this notebook:"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    CS2113T"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "```"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "longngng"
        },
        "content": "### 3.5 Exiting the program: `exit`"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "To close the program, type `exit`."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "This section answers some frequently asked questions."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer?"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: {your answer here}"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "This section lists all the commands available in **Zer0Note**! There are general commands that can be used anywhere, as well as commands that are specific to the mode you are in!"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003e :bulb: You can click on each of the commands to navigate to its section."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "### General Commands"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "The following table shows you a list of commands that can be used anywhere, and in any mode."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "*Table 2: Commands that can be used anywhere*"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "**Command** | **Format** | **Example**"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "----------- | ---------- | -----------"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[Help](#31-viewing-the-user-guide-help): `help` | 1) help 2) help timetable 3) help notebook |"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[Exit](#35-exiting-the-program-exit) `exit` | exit |"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### Timetable Mode"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "The following table is a cheatsheet of the commands available in Timetable Mode."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "*Table 3: Cheatsheet of the commands available in Timetable Mode*"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "**Command** | **Format** | **Example**"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "----------- | ---------- | -----------"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "[Add a task](#331-adding-a-task-add): `add` | add /t[TASK] /by[dd-MM-yyyy] [hhmm] | add /tcoding /by19-10-2020 1705"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[Mark a task as done](#332-marking-a-task-as-done-done): `done` | done [INDEX] | done 1"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[Tag a task](#333-tagging-tasks-tag): `tag` | tag [INDEX] /t[TAG] | tag 1 /tCS2113T"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[List tasks](#334-listing-tasks-list): `list` | list (/u) (/d) (/urgent) |"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[Finding tasks](#335-finding-tasks-find): `find` | 1) find [KEYWORD] 2) find /t[TAG] | 1) find book 2) find /tTodo"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[Delete a task](#336-deleting-a-task-delete): `delete` | delete [INDEX] | delete 1"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[Switch to notebook mode](#32-switching-between-the-two-modes-mode): `mode` | mode /n |"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### Notebook Mode"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "The following table is a cheatsheet of the commands available in Notebook Mode."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "*Table 4: Cheatsheet of the commands available in Notebook Mode*"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "**Command** | **Format** | **Example**"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "----------- | ---------- | -----------"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[Add](#341-adding-a-notebooksectionpage-add): `add` | 1) add /n[NOTEBOOK] 2) add /s[SECTION] 3) add /p[PAGE]; [CONTENT] | add /nCS2101"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[Select](#342-selecting-a-notebooksectionpage-select): `select` | 1) select /n[NOTEBOOK] 2) select /s[SECTION] 3) select /p[NUMBER] | select /nCS2101"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[Tag](#343-tagging-a-notebooksectionpage-tag): `tag` | tag /t[TAG] | tag /tCS2113T"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[List contents](#344-listing-contents-list): `list` | list (/s) (/a) |"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[Find](#345-finding-contents-find): `find` | 1) find [KEYWORD] 2) find /t[TAG] | 1) find chapter 2) find /tModule"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[Delete](#346-deleting-a-notebooksectionpage-delete): `delete` | 1) delete /n[NOTEBOOK] /s[SECTION] /p[NUMBER] | select /nCS2113T /sW10 /p1"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "[Switch to timetable mode](#32-switching-between-the-two-modes-mode): `mode` | mode /t |"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "## 6. For advanced users: Editing your save file"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "**Zer0Note** saves your tasks as a plain text file, in a format designed to be easy to read, understand and modify if"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "you so desire. We realise that power users may wish to use a different text editor such as vim or Visual Studio Code"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "to edit their notes, while also taking advantage of the organisation features of Zer0Note. If you wish to edit the"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "save file by yourself, here\u0027s a detailed guide on the contents of the save file and how to edit it."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u003e :exclamation: **Zer0Note** is very sensitive to the format of the saved file! If there are any errors in the save"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u003e file, **Zer0Note** will not load it at all, since it cannot be sure if any of the file is uncorrupted. Proceed with"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u003e caution!"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### 6.1. The tasks save file"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The tasks save file is formatted as follows."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "First, one line containing only an integer number `n` indicating the number of tasks in the list."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "This is followed by `n` sets of 3 lines each. The first line contains the name of the task. The second line contains"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "the deadline of the task, in the format `dd-MM-YYYY hhmm`. The third line contains a value `true` or `false`,"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "indicating whether the task is done. `true` means it is done, `false` means it is not done."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Here is an example of the contents of a tasks save file:"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "3"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Code for CS2113T Team Project"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "10-11-2020 1200"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "false"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Read about hydrogen fuel cells"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "22-11-2020 1234"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "true"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Read Book"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "19-10-2020 1800"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "false"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### 6.2. The notebooks save file"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The notebooks save file is formatted as follows."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "First, one line containing only an integer number `n` indicating the number of notebooks on the shelf."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "This is followed by `n` sets of lines, describing each of the `n` notebooks. The `i`th set describes the `i`th"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "notebook."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The first line in the set contains the title of the `i`th notebook."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The next line in the set contains only an integer number `s` indicating the number of sections in the `i`th notebook."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "This is followed by `s` sets of lines, describing each of the `s` sections in notebook `i`. The `j`th set describes"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "the `j`th section in the `i`th notebook."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The first line in the `j`th set contains the title of the `j`th section of the `i`th notebook."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The next line in the set contains only an integer number `p` indicating the number of pages in the `j`th section of"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " the `i`th notebook."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "This is followed by `p` sets of 2 lines each. The `k`th set describes the `k`th page, of the `j`th section, of the `i"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "`th notebook."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The first line of the `k`th set contains the title of the page."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "The second line of the `k`th set contains the content of the page. The newline characters in the content of the"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "page are replaced by `~~~`.  "
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Here is an example of a notebooks save file:"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "2"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "CS2113T"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "4"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Java"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "2"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "What is Java?"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Java is a programming language used by 3 billion devices."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Why Java?"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "It\u0027s highly portable and relatively fast."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "OOP"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "1"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "What is OOP?"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "OOP is Object Oriented Programming."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "UML"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "2"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "What is UML?"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "UML is Unified Modeling Language."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Why UML?"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "UML is used to draw diagrams to explain your code to noobs."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Assertions"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "1"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Why assertions?"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Honestly I don\u0027t know."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "CS2101"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "2"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "User Guides"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "2"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "What are UGs?"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "UGs are documents for the user to read to understand how to use the product"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "How to write UGs?"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Be user focused. That\u0027s all."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Developer Guides"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "3"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "What are DGs?"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "DGs are documents for the developer to understand how the program is written."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "How to write DGs?"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Make sure the level of technicality is appropriate."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Diagrams"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Make sure diagrams use UML."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 455,
      "Lusi711": 147,
      "yAOwzers": 36,
      "neilbaner": 163,
      "longngng": 139,
      "-": 38
    }
  },
  {
    "path": "docs/originalUG.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "{Give a product intro}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "{Give steps to get started quickly}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "1. Down the latest version of `Duke` from [here](http://link.to/duke)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "{Give detailed description of each feature}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "### Adding a todo: `todo`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Adds a new item to the list of todo items."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Format: `todo n/TODO_NAME d/DEADLINE`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* The `DEADLINE` can be in a natural language format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* The `TODO_NAME` cannot contain punctuation.  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "`todo n/Write the rest of the User Guide d/next week`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "`todo n/Refactor the User Guide to remove passive voice d/13/04/2020`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "**Q**: How do I transfer my data to another computer?"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "**A**: {your answer here}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "{Give a \u0027cheat sheet\u0027 of commands here}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "* Add todo `todo n/TODO_NAME d/DEADLINE`"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 42
    }
  },
  {
    "path": "docs/team/francene.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "# Mooi Suet Yeng, Francene - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 6
    }
  },
  {
    "path": "docs/team/joel.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "# Neo Yao Jie, Joel - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/lusi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "# Lusi Wu Qi - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 6
    }
  },
  {
    "path": "docs/team/neilbaner.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "# Neil Banerjee"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 1
    }
  },
  {
    "path": "notebooks.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "4"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Notebook 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Section 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Page 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "lorem ipsum"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Section 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Notebook 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "notebook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "Notebook 365"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "0"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 5,
      "Lusi711": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.CliUserInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public static void main(String[] args) throws Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        CliUserInterface ui \u003d new CliUserInterface();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ui.run();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 3,
      "neilbaner": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/AddCommandNotebookException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@chuckiex3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " * Signals that the user is unable to add a notebook, section or page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "public class AddCommandNotebookException extends ZeroNoteException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public AddCommandNotebookException(String problematicInput) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        super(problematicInput);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"Unable to add notebook/section/page\" + problematicInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/CorruptFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class CorruptFileException extends ZeroNoteException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public CorruptFileException(String enteredCommand) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super(enteredCommand);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Sorry, there was some error reading the file. It may be corrupt. \");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"The following error message may help to debug the issue: \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(problematicInput);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/DuplicateFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@chuckiex3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " * Signals that the user input a notebook/section/page title that has already been used."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "public class DuplicateFoundException extends ZeroNoteException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    String duplicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public DuplicateFoundException(String argument) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        this.duplicate \u003d argument;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"A duplicate has been found for: \" + duplicate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"Unable to create \" + duplicate + \", sorry.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/EmptyPageException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@chuckiex3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " * Signals that the user has input an empty page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "public class EmptyPageException extends ZeroNoteException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"Empty page!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"Format for adding a page: add /pPAGE TITLE; PAGE CONTENT\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/FileSavingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class FileSavingException extends ZeroNoteException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public FileSavingException(String enteredCommand) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super(enteredCommand);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"There was some error saving the file.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Here\u0027s the output from Java in case it helps debug the issue: \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(problematicInput);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/IncorrectAppModeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@Lusi711"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "public class IncorrectAppModeException extends ZeroNoteException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Please check that you are in the correct mode.\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 1,
      "Lusi711": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/IncorrectDeadlineFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@chuckiex3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " * Signals that the user has input the date/time wrongly."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class IncorrectDeadlineFormatException extends ZeroNoteException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"You have entered the date and time wrongly. \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"Oops! Your deadline should be in this format\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"dd-MM-yyyy HHmm where time is in 24h\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 10,
      "neilbaner": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@Lusi711"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " * Signals that the user has input an invalid command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class InvalidCommandException extends ZeroNoteException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public InvalidCommandException(String problematicInput) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        super(problematicInput);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"You have entered an invalid command: \" + problematicInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 9,
      "Lusi711": 4,
      "neilbaner": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "public class InvalidIndexException extends ZeroNoteException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public InvalidIndexException(String problematicInput) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        super(problematicInput);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Please enter a valid index number: \" + problematicInput);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidModeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class InvalidModeException extends ZeroNoteException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        System.out.println(\"You are in the wrong mode! Kindly switch back to Timetable Mode \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + \"by entering \u0027/t\u0027.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidNotebookException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@chuckiex3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " * Signals that the user has input an invalid notebook name."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class InvalidNotebookException extends ZeroNoteException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public InvalidNotebookException(String problematicInput) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        this.problematicInput \u003d problematicInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"You have entered an invalid notebook name: \" + problematicInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Format for adding notebook: add /nNOTEBOOK TITLE\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Format for selecting notebook: select /nNOTEBOOK TITLE\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Format for deleting notebook: delete /nNOTEBOOK TITLE\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 12,
      "Lusi711": 4,
      "neilbaner": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidPageException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@chuckiex3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " * Signals that the user has input an invalid page name."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class InvalidPageException extends ZeroNoteException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public InvalidPageException(String problematicInput) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        super(problematicInput);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Entered invalid page: \" + problematicInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Format for adding page: add /pPAGE; CONTENT\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"Format for selecting page: select /pPAGE\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Format for deleting page: delete /nNOTEBOOK /sSECTION /pPAGE\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 8,
      "Lusi711": 8,
      "neilbaner": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidSectionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@chuckiex3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " * Signals that the user has input an invalid section name."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class InvalidSectionException extends ZeroNoteException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public InvalidSectionException(String problematicInput) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        this.problematicInput \u003d problematicInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Invalid Section Name: \" + problematicInput);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Format for adding section: add /sSECTION\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Format for selecting section: select /sSECTION\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Format for deleting section in bookshelf: delete /nNOTEBOOK /sSECTION\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Format for deleting section in notebook: delete /sSECTION\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 11,
      "Lusi711": 5,
      "neilbaner": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidSelectCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@chuckiex3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " * Signals that the user has incorrectly typed the select command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "public class InvalidSelectCommandException extends ZeroNoteException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    String argument;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public InvalidSelectCommandException(String argument) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        this.argument \u003d argument;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"Invalid select command: \" + argument);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"Format for selecting: select /nNOTEBOOK /sSECTION /pNUMBER\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"You must select a notebook before selecting a section.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"You must select a section before selecting a page.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidTagException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "public class InvalidTagException extends ZeroNoteException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public InvalidTagException(String problematicInput) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        super(problematicInput);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void setProblematicInput(String problematicInput) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.problematicInput \u003d problematicInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Missing tag/Invalid tag: tag /t\" + problematicInput);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Format: tag [index] /t[tag] for timetable mode\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Format: tag /t[tag] for notebook mode\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/TaskTitleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@chuckiex3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " * Signals that the user\u0027s input is missing a title."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class TaskTitleException extends ZeroNoteException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"Your task is missing a title!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"Please type in the format: add /tTITLE /byDEADLINE\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 10,
      "neilbaner": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/TaskWrongFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@chuckiex3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " * Signals that the user\u0027s input does not follow the correct format expected."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class TaskWrongFormatException extends ZeroNoteException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"The input \\\"\" + problematicInput + \"\\\" doesn\u0027t follow the format expected. \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 8,
      "neilbaner": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/ZeroNoteException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public abstract class ZeroNoteException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public String problematicInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public ZeroNoteException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public ZeroNoteException(String enteredCommand) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.problematicInput \u003d enteredCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public abstract void printErrorMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/notebooks/Notebook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.notebooks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.DuplicateFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.InvalidTagException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class Notebook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private String tag \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private final ArrayList\u003cSection\u003e sectionArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public Notebook(String title) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        sectionArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void setTag(String tag) throws InvalidTagException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (!tag.equals(\"\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidTagException(\"tag /t\" + tag);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Get the title of this notebook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the title of the notebook"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "longngng"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Set the title of this notebook."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param title the desired new title of the notebook"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public ArrayList\u003cSection\u003e getSectionArrayList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return sectionArrayList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public Section getSectionAtIndex(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return sectionArrayList.get(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Add a new section with a given title to this notebook."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param title the title of the section to be added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @throws DuplicateFoundException when the user inputs a section title that has already been used."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public void addSection(String title) throws DuplicateFoundException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        for (Section s : sectionArrayList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            if (s.getTitle().equals(title)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                throw new DuplicateFoundException(title);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        sectionArrayList.add(new Section(title));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void addSection(Section s) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        sectionArrayList.add(s);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Find a section with a given title in this notebook."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param searchKey the title of the section to search for in the notebook"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the index of the section with the given title, -1 if not found"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public int findSection(String searchKey) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (Section s : sectionArrayList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (s.getTitle().equals(searchKey)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * Remove a section from the notebook."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @param indexToRemove the index of the section to remove"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public Section removeSection(int indexToRemove) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return sectionArrayList.remove(indexToRemove);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        StringBuilder serialized \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String lineSeparator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(title);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(lineSeparator);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(sectionArrayList.size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(lineSeparator);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (Section s : sectionArrayList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            serialized.append(s.serialize());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return serialized.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 13,
      "Lusi711": 30,
      "neilbaner": 60,
      "longngng": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/notebooks/NotebookShelf.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.notebooks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.DuplicateFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class NotebookShelf {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    private final ArrayList\u003cNotebook\u003e notebooksArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public NotebookShelf() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        notebooksArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public ArrayList\u003cNotebook\u003e getNotebooksArrayList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "longngng"
        },
        "content": "        return notebooksArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Find the notebook on the shelf with the given title."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param title the title of the notebook we want to find"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the index of the notebook we want to find"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public int findNotebook(String title) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (Notebook n : notebooksArrayList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (n.getTitle().equals(title)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Get the notebook at a particular index in the ArrayList. Use findNotebook() to get an index from a given title."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param index the index of the notebook to be found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public Notebook getNotebookAtIndex(int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return notebooksArrayList.get(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Add a notebook with a given title to the shelf."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param title the title of the notebook to be added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @throws DuplicateFoundException when the notebook title input by the user has already been used."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public void addNotebook(String title) throws DuplicateFoundException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        for (Notebook n : notebooksArrayList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            if (n.getTitle().equals(title)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                throw new DuplicateFoundException(title);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        notebooksArrayList.add(new Notebook(title));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void addNotebook(Notebook n) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        notebooksArrayList.add(n);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public Notebook removeNotebook(int indexToRemove) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return notebooksArrayList.remove(indexToRemove);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        StringBuilder serialized \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String lineSeparator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(notebooksArrayList.size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(lineSeparator);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (Notebook n : notebooksArrayList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            serialized.append(n.serialize());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return serialized.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 11,
      "Lusi711": 10,
      "neilbaner": 54,
      "longngng": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/notebooks/Page.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.notebooks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.InvalidTagException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class Page {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private String tag \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public Page(String title, String content) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "longngng"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "longngng"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public void setContent(String content) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void setTag(String tag) throws InvalidTagException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (!tag.equals(\"\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidTagException(\"tag /t\" + tag);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public void printPage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(content);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        StringBuilder serialized \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String lineSeparator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(title);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(lineSeparator);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(content.replaceAll(System.lineSeparator(), \"~~~\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(lineSeparator);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return serialized.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 4,
      "Lusi711": 15,
      "neilbaner": 16,
      "longngng": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/notebooks/Section.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.notebooks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.DuplicateFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.InvalidPageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.InvalidTagException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class Section {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private String tag \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private final ArrayList\u003cPage\u003e pageArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public Section(String title) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        pageArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "longngng"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * Add a new page with a given title to this section."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @param title the title of the page to be added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @throws DuplicateFoundException when the user inputs a page title that has already been used."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public void addPage(String title, String content) throws DuplicateFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        for (Page p : pageArrayList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            if (p.getTitle().equals(title)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                throw new DuplicateFoundException(title);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        pageArrayList.add(new Page(title, content));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void addPage(Page p) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        pageArrayList.add(p);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * Find a page with a given title in this section."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @param searchKey the title of the section to search for in the section."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @return the index of the page with the given title, -1 if not found."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public int findPage(String searchKey) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (Page p : pageArrayList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (p.getTitle().equals(searchKey)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public Page removePage(int indexToRemove) throws InvalidPageException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            return pageArrayList.remove(indexToRemove);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidPageException(Integer.toString(indexToRemove + 1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public Page getPageAtIndex(int index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return pageArrayList.get(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public ArrayList\u003cPage\u003e getPageArrayList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return pageArrayList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void setTag(String tag) throws InvalidTagException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (!tag.equals(\"\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidTagException(\"tag /t\" + tag);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        StringBuilder serialized \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String lineSeparator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(lineSeparator);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(pageArrayList.size());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(lineSeparator);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (Page p : pageArrayList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            serialized.append(p.serialize());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return serialized.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 24,
      "Lusi711": 21,
      "neilbaner": 43,
      "longngng": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.exceptions.CorruptFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.exceptions.FileSavingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.notebooks.Notebook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.notebooks.NotebookShelf;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.notebooks.Page;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.notebooks.Section;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import seedu.duke.userinterface.CliMessages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import seedu.duke.userinterface.PersonalMesssageGenerator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " * Represents the storage of where Zer0Note is loading from and saving information to."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private final String tasksFilePath \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private final String notebooksFilePath \u003d \"notebooks.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private final String nameFilepath \u003d \"src/main/resources/txt/nameOfUser.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private PersonalMesssageGenerator msgGenerator;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        msgGenerator \u003d new PersonalMesssageGenerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void saveToFile(AppState currentAppState) throws FileSavingException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        File tasksFile \u003d new File(tasksFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        File notebooksFile \u003d new File(notebooksFilePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        TaskList currentTaskList \u003d currentAppState.getTaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        NotebookShelf currentNotebookShelf \u003d currentAppState.getCurrentBookShelf();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String tasksToSave \u003d currentTaskList.serialize();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String notebooksToSave \u003d currentNotebookShelf.serialize();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            FileWriter tasksFileWriter \u003d new FileWriter(tasksFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            FileWriter notebooksFileWriter \u003d new FileWriter(notebooksFile);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            tasksFileWriter.write(tasksToSave);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            notebooksFileWriter.write(notebooksToSave);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            tasksFileWriter.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            notebooksFileWriter.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new FileSavingException(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public AppState readFromFile() throws CorruptFileException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        AppState loadedAppState \u003d new AppState();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        TaskList loadedTaskList \u003d loadedAppState.getTaskList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        NotebookShelf loadedNotebookShelf \u003d loadedAppState.getCurrentBookShelf();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        File tasksFile \u003d new File(tasksFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        File notebooksFile \u003d new File(notebooksFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            Scanner tasksFileScanner \u003d new Scanner(tasksFile);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            Scanner notebooksFileScanner \u003d new Scanner(notebooksFile);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int numTasks \u003d Integer.parseInt(tasksFileScanner.nextLine());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            for (int i \u003d 0; i \u003c numTasks; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                String taskTitle \u003d tasksFileScanner.nextLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                String taskDate \u003d tasksFileScanner.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                String done \u003d tasksFileScanner.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                Task currentTask \u003d new Task(taskTitle, taskDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                if (done.equals(\"true\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    currentTask.markAsDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                loadedTaskList.addTask(currentTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int numNotebooks \u003d Integer.parseInt(notebooksFileScanner.nextLine());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            for (int i \u003d 0; i \u003c numNotebooks; i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                String notebookTitle \u003d notebooksFileScanner.nextLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                int numSections \u003d Integer.parseInt(notebooksFileScanner.nextLine());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                Notebook currentNotebook \u003d new Notebook(notebookTitle);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                for (int j \u003d 0; j \u003c numSections; j++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    String sectionTitle \u003d notebooksFileScanner.nextLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    int numPages \u003d Integer.parseInt(notebooksFileScanner.nextLine());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    Section currentSection \u003d new Section(sectionTitle);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    for (int k \u003d 0; k \u003c numPages; k++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                        String pageTitle \u003d notebooksFileScanner.nextLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                        String pageContent \u003d notebooksFileScanner.nextLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                        pageContent \u003d pageContent.replaceAll(\"~~~\", System.lineSeparator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                        Page currentPage \u003d new Page(pageTitle, pageContent);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                        currentSection.addPage(currentPage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    currentNotebook.addSection(currentSection);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                loadedNotebookShelf.addNotebook(currentNotebook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return loadedAppState;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            CliMessages.printNoFile();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return new AppState();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            CliMessages.printCorruptFile();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            PrintStream syserr \u003d System.err;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            System.setErr(System.out);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            System.setErr(syserr);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return new AppState();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public boolean isNameOfUserFilled() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        File nameOfUserFile \u003d new File(this.nameFilepath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (nameOfUserFile.length() \u003d\u003d 0 || !nameOfUserFile.exists()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void saveNameOfUser() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        File file \u003d new File(this.nameFilepath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "longngng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            file.getParentFile().mkdir(); // create a directory"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            file.createNewFile(); // create .txt file"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            Scanner keyboard \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String userInput \u003d keyboard.nextLine();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            FileWriter nameOfUserFileToSave \u003d new FileWriter(this.nameFilepath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            nameOfUserFileToSave.write(userInput);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            msgGenerator.setChosenName(userInput);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            msgGenerator.greetFirstTimeUser();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            nameOfUserFileToSave.close();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            System.out.println(\"Error in FileSaving\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 52,
      "neilbaner": 88,
      "longngng": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.InvalidTagException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    private final String by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    protected DateFormat dateTime \u003d new SimpleDateFormat(\"dd-MM-yyyy HHmm\"); // in 24h format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    protected DateFormat outputFormat \u003d new SimpleDateFormat(\"MMM dd yyyy hh.mm aa\"); // in 12h format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private Date dueDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private String tag \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public Task(String title, String by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public Date getDueDateTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "longngng"
        },
        "content": "        return dueDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public LocalDate getDueDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        String[] dayTime \u003d by.split(\" \", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return LocalDate.parse(dayTime[0].trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        String[] dayTime \u003d by.split(\" \", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return LocalTime.parse(dayTime[1].trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public String reformatDate() throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        Date date \u003d dateTime.parse(by);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.dueDateTime \u003d date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        return outputFormat.format(date);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        return (isDone ? \"o\" : \"x\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void setTag(String tag) throws InvalidTagException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (!tag.equals(\"\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidTagException(tag);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "longngng"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            return (\"[\" + getStatusIcon() + \"] \" + getTitle() + \" (by: \" + reformatDate() + \")\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    + (tag.equals(\"\") ? \"\" : \"(tag: \" + getTag() + \")\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            System.out.println(\"\\tAn error occurred while reading the given deadline.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        StringBuilder serialized \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String lineSeparator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(title);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(lineSeparator);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(by);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(lineSeparator);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(isDone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(lineSeparator);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return serialized.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 40,
      "Lusi711": 21,
      "yAOwzers": 8,
      "neilbaner": 18,
      "longngng": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private final ArrayList\u003cTask\u003e taskArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        taskArrayList.add(task);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public Task removeTask(int indexToRemove) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        Task removedTask \u003d taskArrayList.remove(indexToRemove);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return removedTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public int getNumberOfTasks() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return taskArrayList.size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public Task getTask(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        return taskArrayList.get(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public Task markAsDone(int i) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        Task task \u003d this.taskArrayList.get(i - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskArrayList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "longngng"
        },
        "content": "        return taskArrayList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        StringBuilder serialized \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String lineSeparator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(getNumberOfTasks());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized.append(lineSeparator);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (Task t : taskArrayList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            serialized.append(t.serialize());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return serialized.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 6,
      "Lusi711": 13,
      "yAOwzers": 6,
      "neilbaner": 20,
      "longngng": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/AppMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "longngng"
        },
        "content": "package seedu.duke.userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "longngng"
        },
        "content": "public enum AppMode {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "longngng"
        },
        "content": "    TIMETABLE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "longngng"
        },
        "content": "    NOTEBOOK_SHELF,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "longngng"
        },
        "content": "    NOTEBOOK_BOOK,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    NOTEBOOK_SECTION,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    NOTEBOOK_PAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "longngng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "longngng"
        },
        "content": "        switch (this) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "longngng"
        },
        "content": "        case TIMETABLE:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "longngng"
        },
        "content": "            return \"timetable\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        case NOTEBOOK_BOOK:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            return \"notebook book\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        case NOTEBOOK_SECTION:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            return \"notebook section\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        case NOTEBOOK_PAGE:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            return \"notebook page\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "longngng"
        },
        "content": "        case NOTEBOOK_SHELF:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "longngng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "longngng"
        },
        "content": "            return \"notebook\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "longngng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 9,
      "longngng": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/AppState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.notebooks.Notebook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.notebooks.NotebookShelf;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.Page;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.notebooks.Section;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "longngng"
        },
        "content": "public class AppState {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private AppMode appMode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private NotebookShelf currentBookShelf;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private Notebook currentNotebook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private Section currentSection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private Page currentPage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private int indexOfCurrentNotebook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    private int indexOfCurrentSection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private int indexOfCurrentPage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public AppState() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        appMode \u003d AppMode.TIMETABLE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        currentBookShelf \u003d new NotebookShelf();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public AppMode getAppMode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "longngng"
        },
        "content": "        return appMode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public void setAppMode(AppMode appMode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.appMode \u003d appMode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public NotebookShelf getCurrentBookShelf() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "longngng"
        },
        "content": "        return currentBookShelf;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public void setCurrentBookShelf(NotebookShelf currentBookShelf) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.currentBookShelf \u003d currentBookShelf;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public Notebook getCurrentNotebook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return currentNotebook;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public void setCurrentNotebook(Notebook currentNotebook) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        this.currentNotebook \u003d currentNotebook;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public Section getCurrentSection() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return currentSection;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public void setCurrentSection(Section currentSection) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        this.currentSection \u003d currentSection;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public Page getCurrentPage() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return currentPage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void setCurrentPage(int indexOfCurrentPage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        setIndexOfCurrentPage(indexOfCurrentPage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        currentPage \u003d currentSection.getPageAtIndex(indexOfCurrentPage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void setTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public int getIndexOfCurrentNotebook() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "longngng"
        },
        "content": "        return indexOfCurrentNotebook;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public void setIndexOfCurrentNotebook(int indexOfCurrentNotebook) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.indexOfCurrentNotebook \u003d indexOfCurrentNotebook;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public Task markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        Task task \u003d this.taskList.markAsDone(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public int getIndexOfCurrentSection() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        return indexOfCurrentSection;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public void setIndexOfCurrentSection(int indexOfCurrentSection) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        this.indexOfCurrentSection \u003d indexOfCurrentSection;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public int getIndexOfCurrentPage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return indexOfCurrentPage;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void setIndexOfCurrentPage(int indexOfCurrentPage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.indexOfCurrentPage \u003d indexOfCurrentPage;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 16,
      "Lusi711": 42,
      "yAOwzers": 7,
      "neilbaner": 3,
      "longngng": 36
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/CliMessages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.Notebook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.Page;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.Section;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * A class containing all the messages displayed to the user during operation."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author neilbaner"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class CliMessages {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private static final String REMOVE_TASK_SUCCESS_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private static PersonalMesssageGenerator msgGenerator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public static void printRemoveNotebookMessage(Notebook notebook) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String personalMessage \u003d msgGenerator.generatePersonalisedMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        System.out.println(personalMessage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this notebook: \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"\\t\" + notebook.getTitle());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public static void printRemoveSectionMessage(Section section) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String personalMessage \u003d msgGenerator.generatePersonalisedMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        System.out.println(personalMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this section: \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"\\t\" + section.getTitle());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public static void printRemovePageMessage(Page page) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String personalMessage \u003d msgGenerator.generatePersonalisedMessage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        System.out.println(personalMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this page: \" + page.getTitle());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        page.printPage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printCorruptFile() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"There was some error reading the save files; something has likely been corrupted\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"You may continue, and Zer0Note will start from scratch with no data. \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Note that continuing will overwrite the corrupted file, so you won\u0027t be able to \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                + \"recover it at all. \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"You may also quit Zer0Note now by pressing Ctrl-C (PC keyboards) or control-C (Mac \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                + \"keyboards) NOW\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                + \"and attempt to recover the \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                + \"file manually. \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"If you contact the developers for help, please provide the corrupt files, \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                + \"and the following error message \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                + \" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printNoFile() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"File was not found. A new save file will be created upon exit. \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public static void printRemoveTaskMessage(Task deletedTask, int numberOfTasks) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String personalMessage \u003d msgGenerator.generatePersonalisedMessage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        System.out.println(personalMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(REMOVE_TASK_SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(deletedTask.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        if (numberOfTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            System.out.println(\"\\tNow you have \" + numberOfTasks + \" task in the list.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            System.out.println(\"\\tNow you have \" + numberOfTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void printAddedTaskMessage(TaskList tasksList, String title) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String personalMessage \u003d msgGenerator.generatePersonalisedMessage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        System.out.println(personalMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Added: \" + title);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(tasksList.getNumberOfTasks() + \":\" + tasksList.getTask(tasksList.getNumberOfTasks() - 1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printAddTaskHelp() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"To add a task with a deadline to the task list: \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"add /t[TASK] /by[dd/MM/yyyy] [hhmm]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Example of usage: \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"add /tcoding /by19-10-2020 1900\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printAddNotebookSectionPageHelp() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printAddNotebookHelp();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printAddSectionHelp();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printAddPageHelp();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void printAddPageHelp() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"To add a page into the selected section:\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"add /p[PAGE]; [PAGE CONTENT]\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Example of usage: \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"add /pHELLO WORLD; System.out.println(\\\"Hello World!\\\");\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void printAddSectionHelp() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"To add a section into the selected notebook: \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"add /s[SECTION]\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Example of usage: \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"add /sW1: Java\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void printAddNotebookHelp() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"To add a notebook into the notebook shelf: \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"add /n[NOTEBOOK]\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Example of usage: \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"add /nCS2101\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printDoneTaskHelp() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printExitHelp() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"To quit Zer0Note:\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"exit\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printListTaskHelp() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printListNotebookSectionPageHelp() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printModeSwitchHelp() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"To switch to timetable mode: \");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"mode /t\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"To switch to notebook mode: \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"mode /n\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printRemoveTaskHelp() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"To delete an existing task from the task list: \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"delete [INDEX]\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Example of usage: \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"delete 1\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printRemoveNotebookSectionPageHelp() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"To delete and existing notebook, section or page: \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"delete /n[NOTEBOOK] /s[SECTION] /p[NUMBER]\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Examples of usage: \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"delete /nCS2113T /sW10 /p1\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"delete /nCS2113T /sW10\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"delete /nCS2113T\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printSelectHelp() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"To select a notebook, section, page, or a combination of the three: \");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"select /n[NOTEBOOK] /s[SECTION] /p[NUMBER]\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Examples of usage: \");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"In any context: \");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"select /nCS2101 /sW2 /p1\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"select /nCS2101 /sW2\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"select /nCS2101\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"select /all\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"In a selected notebook\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"select /s1: What is OOP? /p1\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"select /s1: What is OOP?\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"In a selected section\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"select /p1\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printNotebookModeHelp() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Here are some commands to help you work with the Notebook mode: \");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printAddNotebookSectionPageHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printListNotebookSectionPageHelp();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printSelectHelp();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printRemoveNotebookSectionPageHelp();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printTimetableModeHelp() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Here are some commands to help you work with the Timetable mode: \");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printAddTaskHelp();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printDoneTaskHelp();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printListTaskHelp();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printRemoveTaskHelp();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printGeneralHelp() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Here are some general commands that will work throughout Zer0Note: \");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printModeSwitchHelp();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printExitHelp();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printOnlineGuideLink() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Access the full user guide for Zer0Note online, at: \");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"https://ay2021s1-cs2113t-t12-3.github.io/tp/UserGuide.html\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printAllHelp() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Here are all the commands you need to know to operate Zer0Note: \");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printGeneralHelp();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printNotebookModeHelp();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printTimetableModeHelp();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printOnlineGuideLink();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printGoodBye() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Bye!\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void printMarkDone(Task task) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        String markDoneMessage \u003d \"Yay! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(markDoneMessage + \"\\n \" + task);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void printTagNotebookMessage(String description, String tag) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String personalMessage \u003d msgGenerator.generatePersonalisedMessage();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        System.out.println(personalMessage);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        String createTagMessage \u003d \"Got it! I\u0027ve tagged this as:\\n\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(createTagMessage + description + \" (tag: \" + tag + \")\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void printTagTaskMessage(Task task) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String personalMessage \u003d msgGenerator.generatePersonalisedMessage();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        System.out.println(personalMessage);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        String createTagMessage \u003d \"Got it! I\u0027ve tagged this as:\\n\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(createTagMessage + task);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void printFoundNotebooksMessages(ArrayList\u003cString\u003e messages) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        for (String message : messages) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            System.out.println(index + \". \" + message + \"\\n\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static String lineSeparator() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"\\n-------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void printFoundPagesMessage(ArrayList\u003cPage\u003e pagesFound) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Pages:\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        for (Page page : pagesFound) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            System.out.println(index + \". \" + page.getTitle());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            index +\u003d 1;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void printFillInNameOfUserMessage() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        System.out.println(\"Hi there! Sorry I don\u0027t think we have met, how may I address you?\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 12,
      "Lusi711": 71,
      "yAOwzers": 25,
      "neilbaner": 156
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/CliUserInterface.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.exceptions.CorruptFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.exceptions.ZeroNoteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.userinterface.command.CliCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.Exit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class CliUserInterface {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private AppState appState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private boolean toQuit \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private PersonalMesssageGenerator msgGenerator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private CliMessages messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public CliUserInterface() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        msgGenerator \u003d new PersonalMesssageGenerator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        messages \u003d new CliMessages();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void loadState() throws CorruptFileException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        appState \u003d storage.readFromFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void saveState() throws ZeroNoteException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        storage.saveToFile(appState);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private void checkNameOfUser() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        boolean isNameOfUserFilled;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        isNameOfUserFilled \u003d storage.isNameOfUserFilled();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (!isNameOfUserFilled) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            messages.printFillInNameOfUserMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            storage.saveNameOfUser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            msgGenerator.greetUser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void run() throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            loadState();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (CorruptFileException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            e.printErrorMessage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        startUI();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        checkNameOfUser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        Scanner keyboard \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        while (!toQuit) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            userInput \u003d keyboard.nextLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                if (userInput.equals(Exit.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    toQuit \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                System.out.println(messages.lineSeparator());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                executeCommand(userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                System.out.println(messages.lineSeparator());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            } catch (ZeroNoteException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                e.printErrorMessage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                System.out.println(messages.lineSeparator());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    private void executeCommand(String userInput) throws ZeroNoteException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "longngng"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "longngng"
        },
        "content": "        CliCommand command \u003d parser.getCommandFromInput(userInput, appState);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "longngng"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        if (command.isTriggerAutoSave()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            saveState();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void startUI() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"Welcome to\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\" _ _ _                  _ _ _   _    _            _\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"|_ _  |   _ _    _  _  |  _  | |  \\\\ | |   _ _   _| |_    _ _\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"  /  /  /  _  \\\\ | |/_\\\\ | | | | |   \\\\| |  /   \\\\ |_   _| /   _ \\\\\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\" /  /_  |  _ _/ | |    | |_| | |  |\\\\  | |  [] |  | |_  |  _ _/\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"|_ _ _|  \\\\ _ _| |_|    |_ _ _| | _| \\\\_|  \\\\ _ /   |_ _|  \\\\ _ _|\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "longngng"
        },
        "content": "        System.out.println(\"You are now in timetable mode\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public String printExit() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return \"GOODBYE HOPE TO SEE YOU AGAIN\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 22,
      "yAOwzers": 32,
      "neilbaner": 38,
      "longngng": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/InputParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.EmptyPageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.IncorrectAppModeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.IncorrectDeadlineFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import seedu.duke.exceptions.InvalidModeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.InvalidNotebookException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.InvalidPageException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.InvalidSectionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.InvalidSelectCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.InvalidTagException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.TaskTitleException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.ZeroNoteException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.notebooks.Notebook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.notebooks.NotebookShelf;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.notebooks.Page;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.notebooks.Section;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.userinterface.command.CliCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.userinterface.command.Exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.userinterface.command.Help;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.command.ModeSwitch;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.notebook.AddCommandNotebookMode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.command.notebook.FindCommandNotebookMode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.notebook.ListCommandNotebookMode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.notebook.RemoveCommandNotebookMode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.notebook.SelectCommandNotebookMode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.command.notebook.TagCommandNotebookMode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.timetable.AddCommandTimetableMode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.command.timetable.DoneCommandTimetableMode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.command.timetable.FindCommandTimetableMode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.timetable.ListCommandTimetableMode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.timetable.RemoveCommandTimetableMode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.command.timetable.TagCommandTimetableMode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import static seedu.duke.userinterface.command.notebook.AddCommandNotebookMode.CONTENT_DELIMITER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import static seedu.duke.userinterface.command.notebook.AddCommandNotebookMode.NOTEBOOK_DELIMITER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import static seedu.duke.userinterface.command.notebook.AddCommandNotebookMode.PAGE_DELIMITER;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import static seedu.duke.userinterface.command.notebook.AddCommandNotebookMode.SECTION_DELIMITER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import static seedu.duke.userinterface.command.notebook.SelectCommandNotebookMode.SHOW_ALL;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import static seedu.duke.userinterface.command.timetable.AddCommandTimetableMode.DEADLINE_DELIMITER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import static seedu.duke.userinterface.command.timetable.AddCommandTimetableMode.TASK_DELIMITER;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class InputParser {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * Parses the user\u0027s input to extract the task title in TIMETABLE mode."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @param input is the user\u0027s input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @return the task title."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @throws TaskTitleException               when the user\u0027s input does not include a task title."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @throws IncorrectDeadlineFormatException when the user\u0027s input does not include the DEADLINE_DELIMITER."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public String parseTaskTitle(String input)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            throws TaskTitleException, IncorrectDeadlineFormatException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        if (input.startsWith(TASK_DELIMITER) \u0026\u0026 input.contains(DEADLINE_DELIMITER)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            String taskTitle \u003d input.substring(TASK_DELIMITER.length());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            int indexPos \u003d taskTitle.indexOf(\"/by\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            taskTitle \u003d taskTitle.substring(0, indexPos).trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            if (taskTitle.isBlank()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                throw new TaskTitleException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            return taskTitle;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            throw new IncorrectDeadlineFormatException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * Parses user\u0027s input to extract deadline in TIMETABLE mode."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @param input is the user\u0027s input."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @return deadline in the format dd-MM-yyyy hhMM, where time is in 24h format."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @throws IncorrectDeadlineFormatException when the deadline input is in the wrong format."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public String parseDeadline(String input) throws IncorrectDeadlineFormatException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        if (input.contains(DEADLINE_DELIMITER)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            int dividerPos \u003d input.indexOf(DEADLINE_DELIMITER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            input \u003d input.substring(dividerPos);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            String deadline \u003d input.substring(DEADLINE_DELIMITER.length()).trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            if (deadline.isBlank()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                throw new IncorrectDeadlineFormatException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            if (!correctTimeFormat(deadline)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                throw new IncorrectDeadlineFormatException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            throw new IncorrectDeadlineFormatException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * Checks if [deadline] input by the user is in the correct format."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @param by is the string containing the deadline\u0027s due date and time."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @return true when the input is in the correct format, otherwise false."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    private boolean correctTimeFormat(String by) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        DateTimeFormatter dateTime \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(by, dateTime);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        } catch (DateTimeParseException d) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * Parses user\u0027s input to extract notebook title, section title or page number whenever applicable for"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * SelectCommandNotebookMode."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @param argument contains notebook title, section title or/and page number."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @param appState is the state of the application."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @throws InvalidNotebookException      when the notebook the user wants to select does not exist."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @throws InvalidSectionException       when the section the user wants to select does not exist."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @throws InvalidPageException          when the page number the user wants to select does not exist."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @throws InvalidSelectCommandException when the select command types by the user is wrong."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void extractParams(String argument, AppState appState)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throws InvalidNotebookException, InvalidSectionException, InvalidPageException,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            InvalidSelectCommandException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (argument.startsWith(NOTEBOOK_DELIMITER)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            extractNotebookParams(argument, appState);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else if ((argument.startsWith(SECTION_DELIMITER)) \u0026\u0026 (appState.getAppMode() \u003d\u003d AppMode.NOTEBOOK_BOOK)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            extractSectionParams(argument, appState);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else if ((argument.startsWith(PAGE_DELIMITER)) \u0026\u0026 (appState.getAppMode() \u003d\u003d AppMode.NOTEBOOK_SECTION)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            extractPageParams(argument, appState);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else if (argument.startsWith(SHOW_ALL)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            appState.setAppMode(AppMode.NOTEBOOK_SHELF);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            System.out.println(\"now in \" + appState.getAppMode() + \" mode.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidSelectCommandException(argument);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * Extracts the notebook title, as well as the section title and page number, if provided."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @param argument is the user\u0027s input."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @param appState is the current mode the user is in."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @throws InvalidNotebookException when the notebook title input by the user does not exist."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @throws InvalidSectionException  when the section title input by the user does not exist."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @throws InvalidPageException     when the page number input by the user does not exist."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void extractNotebookParams(String argument, AppState appState)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            throws InvalidNotebookException, InvalidSectionException, InvalidPageException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        Notebook notebook;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        String notebookTitle \u003d parseNotebookTitle(argument);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        NotebookShelf notebookShelf \u003d appState.getCurrentBookShelf();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        int notebookIndex \u003d notebookShelf.findNotebook(notebookTitle);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (notebookIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidNotebookException(notebookTitle);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        notebook \u003d notebookShelf.getNotebookAtIndex(notebookIndex);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        appState.setAppMode(AppMode.NOTEBOOK_BOOK);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        appState.setCurrentNotebook(notebook);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"now in \" + appState.getAppMode() + \": \" + appState.getCurrentNotebook().getTitle());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (argument.contains(SECTION_DELIMITER)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            extractSectionParams(argument, appState);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * Parses the user\u0027s input to extract the section title, and the page number if provided by the user."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @param argument is the user\u0027s input."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @param appState is the current mode the user is in."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @throws InvalidSectionException when the section title input by the user does not exist."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @throws InvalidPageException    when the page title input by the user does not exist."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public void extractSectionParams(String argument, AppState appState)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            throws InvalidSectionException, InvalidPageException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        Notebook notebook \u003d appState.getCurrentNotebook();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        String sectionTitle \u003d parseSectionTitle(argument);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        int sectionIndex \u003d notebook.findSection(sectionTitle);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (sectionIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidSectionException(sectionTitle);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        Section section \u003d notebook.getSectionAtIndex(sectionIndex);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        appState.setAppMode(AppMode.NOTEBOOK_SECTION);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        appState.setCurrentSection(section);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"now in \" + appState.getAppMode() + \": \" + appState.getCurrentSection().getTitle());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (argument.contains(PAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            extractPageParams(argument, appState);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * Parses the user\u0027s input to extract the page number, and content (only if applicable)."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @param argument is the user\u0027s input."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @param appState is the current mode the user is in."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @throws InvalidPageException when the page title input by the user does not exist."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public void extractPageParams(String argument, AppState appState) throws InvalidPageException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        Section section \u003d appState.getCurrentSection();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        String pageTitle \u003d parsePageTitle(argument);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        int pageNum \u003d section.findPage(pageTitle);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        appState.setCurrentPage(pageNum);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        Page page \u003d section.getPageAtIndex(pageNum);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        appState.setAppMode(AppMode.NOTEBOOK_PAGE);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        System.out.println(\"now in \" + appState.getAppMode() + \": \" + appState.getCurrentPage().getTitle());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        page.printPage();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * Parses notebook title from the user\u0027s input."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @param input is the input from the user."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @return the notebook title input by the user."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @throws InvalidNotebookException when user\u0027s input is in the wrong format."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public String parseNotebookTitle(String input) throws InvalidNotebookException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        if (input.startsWith(NOTEBOOK_DELIMITER)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            String notebookTitle \u003d input.substring(NOTEBOOK_DELIMITER.length()).trim();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            if (notebookTitle.contains(SECTION_DELIMITER)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                int indexPos \u003d notebookTitle.indexOf(SECTION_DELIMITER);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                notebookTitle \u003d notebookTitle.substring(0, indexPos).trim();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            if (notebookTitle.isBlank()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                throw new InvalidNotebookException(notebookTitle);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            return notebookTitle;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            throw new InvalidNotebookException(input);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * Parses section title from the user\u0027s input."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @param input is the user\u0027s input."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @return the section title input by the user."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @throws InvalidSectionException when the user\u0027s input does not contain the section delimiter, or when the"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     *                                 section title is blank."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public String parseSectionTitle(String input) throws InvalidSectionException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            int dividerPos \u003d input.indexOf(SECTION_DELIMITER);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            input \u003d input.substring(dividerPos);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            throw new InvalidSectionException(input);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        if (input.startsWith(SECTION_DELIMITER)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            String sectionTitle \u003d input.substring(SECTION_DELIMITER.length()).trim();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            if (sectionTitle.contains(PAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                int indexPos \u003d sectionTitle.indexOf(PAGE_DELIMITER);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                sectionTitle \u003d sectionTitle.substring(0, indexPos).trim();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            if (sectionTitle.isBlank()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                throw new InvalidSectionException(sectionTitle);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            return sectionTitle;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            throw new InvalidSectionException(input);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public int parseTaskIndex(String args) throws InvalidIndexException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            return Integer.parseInt(args) - 1;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidIndexException(args);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * Parses the page title input by the user."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @param input is the user\u0027s input."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @return the page title input by the user."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     * @throws InvalidPageException when the user\u0027s input is in the wrong format, or when the page title is blank."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public String parsePageTitle(String input) throws InvalidPageException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            int dividerPos \u003d input.indexOf(PAGE_DELIMITER);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            input \u003d input.substring(dividerPos);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidPageException(input);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        if (input.startsWith(PAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            String pageTitle \u003d input.substring(PAGE_DELIMITER.length()).trim();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            if (pageTitle.contains(CONTENT_DELIMITER)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                int indexPos \u003d pageTitle.indexOf(CONTENT_DELIMITER);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                pageTitle \u003d pageTitle.substring(0, indexPos).trim();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            if (pageTitle.isBlank()) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                throw new InvalidPageException(pageTitle);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            return pageTitle;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidPageException(input);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * Parses the page contents of the user\u0027s input."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @param input is the user\u0027s input."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @return contents in the page input by the user."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     * @throws InvalidPageException when the user\u0027s input does not contain the page content delimiter, or when there"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     *                              is no content."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public String parsePageContent(String input) throws InvalidPageException, EmptyPageException {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            int dividerPos \u003d input.indexOf(CONTENT_DELIMITER);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            input \u003d input.substring(dividerPos);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            throw new InvalidPageException(input);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (input.startsWith(CONTENT_DELIMITER)) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            String content \u003d input.substring(CONTENT_DELIMITER.length()).trim();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (content.isBlank()) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                throw new EmptyPageException();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            return content;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidPageException(input);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public String[] parseTagDescription(String input) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return input.split(TASK_DELIMITER, 2);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public CliCommand getCommandFromInput(String userInput, AppState appState) throws ZeroNoteException {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String trimmedInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String[] input \u003d trimmedInput.split(\" \", 2); // split input into command and arguments"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String commandWord \u003d input[0];"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String argument \u003d \"\";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        if (input.length \u003e 1) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            argument \u003d input[1].trim();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "longngng"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        case AddCommandTimetableMode.COMMAND_WORD:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            if (appState.getAppMode() \u003d\u003d AppMode.TIMETABLE) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                return new AddCommandTimetableMode(argument, appState);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                String titleToAdd;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                String contentToAdd;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                if (appState.getAppMode() \u003d\u003d AppMode.NOTEBOOK_SHELF) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                    if (argument.contains(SECTION_DELIMITER) || argument.contains(PAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                        throw new InvalidNotebookException(argument);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    titleToAdd \u003d parseNotebookTitle(argument);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    return new AddCommandNotebookMode(titleToAdd, appState);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                } else if (appState.getAppMode() \u003d\u003d AppMode.NOTEBOOK_BOOK) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                    if (argument.contains(PAGE_DELIMITER) || argument.contains(NOTEBOOK_DELIMITER)) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                        throw new InvalidSectionException(argument);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    titleToAdd \u003d parseSectionTitle(argument);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    return new AddCommandNotebookMode(titleToAdd, appState);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                } else if (appState.getAppMode() \u003d\u003d AppMode.NOTEBOOK_SECTION) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                    if (!argument.contains(CONTENT_DELIMITER) || argument.contains(NOTEBOOK_DELIMITER)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                            || argument.contains(SECTION_DELIMITER)) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                        throw new InvalidPageException(argument);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                    titleToAdd \u003d parsePageTitle(argument);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                    contentToAdd \u003d parsePageContent(argument);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    return new AddCommandNotebookMode(titleToAdd, contentToAdd, appState);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                    throw new InvalidCommandException(userInput);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        case FindCommandTimetableMode.COMMAND_WORD:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            String[] splitParams \u003d parseTagDescription(argument);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (appState.getAppMode() \u003d\u003d AppMode.TIMETABLE \u0026\u0026 argument.contains(\"/t\")) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                return new FindCommandTimetableMode(splitParams[0].trim(), splitParams[1].trim(), appState);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } else if (appState.getAppMode() \u003d\u003d AppMode.TIMETABLE \u0026\u0026 !argument.contains(\"/t\")) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                return new FindCommandTimetableMode(splitParams[0].trim(), \"\", appState);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } else if (argument.contains(\"/t\")) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                return new FindCommandNotebookMode(splitParams[0].trim(), splitParams[1].trim(), appState);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                return new FindCommandNotebookMode(splitParams[0].trim(), \"\", appState);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        case ListCommandTimetableMode.COMMAND_WORD:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (appState.getAppMode() \u003d\u003d AppMode.TIMETABLE) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                return new ListCommandTimetableMode(argument, appState);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                return new ListCommandNotebookMode(argument, appState);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        case SelectCommandNotebookMode.COMMAND_WORD:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (appState.getAppMode() !\u003d AppMode.TIMETABLE) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                return new SelectCommandNotebookMode(argument, appState);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                throw new IncorrectAppModeException();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        case TagCommandTimetableMode.COMMAND_WORD:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            splitParams \u003d parseTagDescription(argument);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (appState.getAppMode() \u003d\u003d AppMode.TIMETABLE) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                int index \u003d parseTaskIndex(splitParams[0].trim());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    return new TagCommandTimetableMode(index, splitParams[1].trim(), appState);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    throw new InvalidTagException(argument);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    return new TagCommandNotebookMode(splitParams[1].trim(), appState);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    throw new InvalidTagException(argument);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        case RemoveCommandTimetableMode.COMMAND_WORD:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (appState.getAppMode() \u003d\u003d AppMode.TIMETABLE) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                return new RemoveCommandTimetableMode(parseTaskIndex(argument), appState);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                String notebookTitleToRemove \u003d \"\";"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                String sectionTitleToRemove \u003d \"\";"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                int pageNumberToRemove \u003d -1;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                if (argument.contains(NOTEBOOK_DELIMITER)) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    notebookTitleToRemove \u003d parseNotebookTitle(argument);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                if (argument.contains(SECTION_DELIMITER)) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    sectionTitleToRemove \u003d parseSectionTitle(argument);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                if (argument.contains(PAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                    //TODO change this to remove based on title"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                    //pageNumberToRemove \u003d parsePageTitle(argument);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    if (pageNumberToRemove \u003c 0) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                        throw new InvalidPageException(Integer.toString(pageNumberToRemove + 1));"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                return new RemoveCommandNotebookMode(notebookTitleToRemove,"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                        sectionTitleToRemove, pageNumberToRemove, appState);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        case Exit.COMMAND_WORD:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            return new Exit(argument, appState);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        case Help.COMMAND_WORD:"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            return new Help(argument);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        case DoneCommandTimetableMode.COMMAND_WORD:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            if (appState.getAppMode() \u003d\u003d AppMode.TIMETABLE) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                return new DoneCommandTimetableMode(argument, appState);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                throw new InvalidModeException();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "longngng"
        },
        "content": "        case ModeSwitch.COMMAND_WORD:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "longngng"
        },
        "content": "            return new ModeSwitch(argument, appState);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "longngng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            throw new InvalidCommandException(userInput);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 216,
      "Lusi711": 186,
      "yAOwzers": 5,
      "neilbaner": 37,
      "longngng": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/PersonalMesssageGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "package seedu.duke.userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class PersonalMesssageGenerator {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private static String personalMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private static final int NUMBER_OF_MESSAGES \u003d 14;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private static String chosenName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private static String firstTimeUserName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * Generates a random personal encouragement message as taken from txt/personalMessages.txt file along"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * with a random user name from txt/nameOfUser file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @return the generated message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @author neilbaner"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     * @author yAOwzers"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static String generatePersonalisedMessage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        ClassLoader classLoader \u003d PersonalMesssageGenerator.class.getClassLoader();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        InputStream personalMessageStream \u003d classLoader.getResourceAsStream(\"txt/personalMessages.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        InputStream namesOfUserInputStream \u003d classLoader.getResourceAsStream(\"txt/nameOfUser.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            BufferedReader personalMessageReader \u003d new BufferedReader(new InputStreamReader(personalMessageStream));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            int messageToDisplay \u003d (int) (Math.random() * (NUMBER_OF_MESSAGES));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            String chosenMessage \u003d personalMessageReader.readLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            for (int i \u003d 0; i \u003c messageToDisplay; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                chosenMessage \u003d personalMessageReader.readLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            if (chosenName \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                personalMessage \u003d chosenMessage + \", \" + firstTimeUserName + \". \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                BufferedReader namesReader \u003d new BufferedReader(new InputStreamReader(namesOfUserInputStream));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                chosenName \u003d namesReader.readLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                personalMessage \u003d chosenMessage + \", \" + chosenName + \". \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            System.out.println(\"no file detected!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            return personalMessage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static void greetFirstTimeUser() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        System.out.println(\"It\u0027s nice to meet you \" + firstTimeUserName + \"!\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + \" How may I be of service?\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void setChosenName(String chosenName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        this.firstTimeUserName \u003d chosenName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public void greetUser() throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        ClassLoader classLoader \u003d PersonalMesssageGenerator.class.getClassLoader();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        InputStream namesOfUserInputStream \u003d classLoader.getResourceAsStream(\"txt/nameOfUser.txt\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        BufferedReader namesReader \u003d new BufferedReader(new InputStreamReader(namesOfUserInputStream));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        chosenName \u003d namesReader.readLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        System.out.println(\"Welcome back \" + chosenName + \"!\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                + \" Great to have you again.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 75
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/CliCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.exceptions.IncorrectAppModeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public abstract class CliCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mode\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    protected AppState appState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "longngng"
        },
        "content": "    protected String commandParams;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private static final boolean isAutoSave \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public static String getCommandWord() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public abstract void execute() throws InvalidCommandException, IncorrectAppModeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public AppState getAppState() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "longngng"
        },
        "content": "        return appState;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void setAppState(AppState appState) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.appState \u003d appState;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public String getCommandParams() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        return commandParams;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void setCommandParams(String params) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        commandParams \u003d params;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public boolean isTriggerAutoSave() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return isAutoSave;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 5,
      "Lusi711": 1,
      "yAOwzers": 5,
      "neilbaner": 20,
      "longngng": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/Exit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.CliMessages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class Exit extends CliCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public Exit(String argument, AppState appState) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.setAppState(appState);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.setCommandParams(argument);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        CliMessages messages \u003d new CliMessages();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        messages.printGoodBye();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 10,
      "longngng": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/Help.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.CliMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This class is to be instantiated when the user enters the keyword \"help\". The arguments for the command are then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * passed into the Help object, and executing it will display help appropriately."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author neilbaner"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class Help extends CliCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    // the arguments added by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    String commandArgs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Constructor for Help."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param commandArgs the arguments input by the user. Precondition: these must be all lowercase, and with all"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *                    leading and trailing spaces stripped."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public Help(String commandArgs) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.commandArgs \u003d commandArgs.toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Executes the command, based on the arguments entered by the user. If the arguments are not recognised, then we"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * print all the help available."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        CliMessages messages \u003d new CliMessages();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        switch (commandArgs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        case \"notebook\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            messages.printNotebookModeHelp();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        case \"timetable\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            messages.printTimetableModeHelp();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            messages.printAllHelp();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 47
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/ModeSwitch.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.userinterface.AppMode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class ModeSwitch extends CliCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mode\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public ModeSwitch(String argument, AppState appState) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.setAppState(appState);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.setCommandParams(argument);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public void execute() throws InvalidCommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "longngng"
        },
        "content": "        switch (commandParams) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "longngng"
        },
        "content": "        case (\"/t\"):"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "longngng"
        },
        "content": "            appState.setAppMode(AppMode.TIMETABLE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(\"You are now in \" + appState.getAppMode() + \" mode\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "longngng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "longngng"
        },
        "content": "        case (\"/n\"):"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "longngng"
        },
        "content": "            appState.setAppMode(AppMode.NOTEBOOK_SHELF);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(\"You are now in \" + appState.getAppMode() + \" mode\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "longngng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "longngng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "longngng"
        },
        "content": "            throw new InvalidCommandException(\"Invalid option after mode\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 2,
      "neilbaner": 7,
      "longngng": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/notebook/AddCommandNotebookMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface.command.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.AddCommandNotebookException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.ZeroNoteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.notebooks.Notebook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.notebooks.NotebookShelf;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.notebooks.Section;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.CliCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class AddCommandNotebookMode extends CliCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public static final String NOTEBOOK_DELIMITER \u003d \"/n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public static final String SECTION_DELIMITER \u003d \"/s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public static final String PAGE_DELIMITER \u003d \"/p\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public static final String CONTENT_DELIMITER \u003d \";\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    private final NotebookShelf currentBookshelf;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    private final Notebook currentNotebook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    private final Section currentSection;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private static final boolean isAutoSave \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public AddCommandNotebookMode(String title, AppState appState) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.appState \u003d appState;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        assert title !\u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        currentBookshelf \u003d appState.getCurrentBookShelf();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        currentNotebook \u003d appState.getCurrentNotebook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        currentSection \u003d appState.getCurrentSection();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public AddCommandNotebookMode(String title, String content, AppState appState) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this(title, appState);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            switch (appState.getAppMode()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            case NOTEBOOK_SHELF:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                currentBookshelf.addNotebook(title);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                System.out.println(\"Added notebook with title: \" + title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            case NOTEBOOK_BOOK:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                currentNotebook.addSection(title);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                System.out.println(\"Added section with title : \" + title);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            case NOTEBOOK_SECTION:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                currentSection.addPage(title, content);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                System.out.println(\"Added page with title: \" + title);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                throw new AddCommandNotebookException(title);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        } catch (ZeroNoteException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            e.printErrorMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public boolean isTriggerAutoSave() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return isAutoSave;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 16,
      "yAOwzers": 7,
      "neilbaner": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/notebook/FindCommandNotebookMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "package seedu.duke.userinterface.command.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.Notebook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.NotebookShelf;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.Page;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.Section;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.CliMessages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.command.CliCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "public class FindCommandNotebookMode extends CliCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private boolean isPersonalised \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private ArrayList\u003cString\u003e notebookMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private ArrayList\u003cString\u003e sectionMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private ArrayList\u003cString\u003e pageMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public FindCommandNotebookMode(String keyword, String tag, AppState appState) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.appState \u003d appState;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        CliMessages cliMessages \u003d new CliMessages();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (tag.equals(\"\") \u0026\u0026 !keyword.equals(\"\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            getAllWithTitleContainingKeyword();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            System.out.println(\"I\u0027ve found these for keyword: \" + keyword);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else if (!tag.equals(\"\") \u0026\u0026 keyword.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            getAllWithTagsContainingKeyword();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            System.out.println(\"I\u0027ve found these for tag: \" + tag);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            System.out.println(\"Missing keyword/tag\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            System.out.println(\"Format: find [KEYWORD] or find /t[TAG]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (!notebookMessages.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            System.out.println(\"Notebooks:\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            cliMessages.printFoundNotebooksMessages(notebookMessages);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (!sectionMessages.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            System.out.println(\"Sections:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            cliMessages.printFoundNotebooksMessages(sectionMessages);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (!pageMessages.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            System.out.println(\"Pages:\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            cliMessages.printFoundNotebooksMessages(pageMessages);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private void getAllWithTitleContainingKeyword() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        NotebookShelf currentNotebookShelf \u003d appState.getCurrentBookShelf();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        for (Notebook notebook : currentNotebookShelf.getNotebooksArrayList()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            String notebookTitle \u003d notebook.getTitle();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (isMatching(notebookTitle, keyword)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                notebookMessages.add(notebookTitle);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            getSectionsWithTitleContainingKeyword(notebook);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private void getSectionsWithTitleContainingKeyword(Notebook notebook) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        for (Section section : notebook.getSectionArrayList()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            String sectionTitle \u003d section.getTitle();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (isMatching(sectionTitle, keyword)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                sectionMessages.add(notebook.getTitle() + \" |-- \" + sectionTitle);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            getPagesWithTitleContainingKeyword(notebook, section);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private void getPagesWithTitleContainingKeyword(Notebook notebook, Section section) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        for (Page page : section.getPageArrayList()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            String pageTitle \u003d page.getTitle();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (isMatching(pageTitle, keyword)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                pageMessages.add(notebook.getTitle() +  \" |-- \" + section.getTitle() + \" |-- \" + page.getTitle());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private void getAllWithTagsContainingKeyword() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        NotebookShelf currentNotebookShelf \u003d appState.getCurrentBookShelf();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        for (Notebook notebook : currentNotebookShelf.getNotebooksArrayList()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            String notebookTag \u003d notebook.getTag();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (!notebookTag.equals(\"\") \u0026\u0026 notebookTag.equals(tag)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                notebookMessages.add(notebook.getTitle());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            getSectionsWithTagContainingKeyword(notebook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private void getSectionsWithTagContainingKeyword(Notebook notebook) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        for (Section section : notebook.getSectionArrayList()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            String sectionTag \u003d section.getTag();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (!sectionTag.equals(\"\") \u0026\u0026 sectionTag.equals(tag)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                sectionMessages.add(notebook.getTitle() + \" |-- \" + section.getTitle());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            getPagesWithTagContainingKeyword(notebook, section);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private void getPagesWithTagContainingKeyword(Notebook notebook, Section section) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        for (Page page : section.getPageArrayList()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            String pageTag \u003d page.getTag();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (!pageTag.equals(\"\") \u0026\u0026 pageTag.equals(tag)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                pageMessages.add(notebook.getTitle() +  \" |-- \" + section.getTitle() + \" |-- \" + page.getTitle());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private boolean isMatching(String title, String keyword) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        Set\u003cString\u003e wordsInTitle \u003d new HashSet\u003c\u003e(getWordsInTitle(title));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        for (String word : wordsInTitle) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (word.contains(keyword)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private List\u003cString\u003e getWordsInTitle(String title) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return Arrays.asList(title.toLowerCase().split(\" \"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 133,
      "yAOwzers": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/notebook/ListCommandNotebookMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface.command.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.exceptions.IncorrectAppModeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.notebooks.Notebook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.notebooks.NotebookShelf;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.notebooks.Page;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.notebooks.Section;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.CliCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class ListCommandNotebookMode extends CliCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private boolean isPersonalised \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public ListCommandNotebookMode(String argument, AppState appState) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.setAppState(appState);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.setCommandParams(argument);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private static void listBookshelf_nsp(NotebookShelf notebookShelf) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "longngng"
        },
        "content": "        for (Notebook notebook : notebookShelf.getNotebooksArrayList()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(\"* \" + notebook.getTitle());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "longngng"
        },
        "content": "            for (Section section : notebook.getSectionArrayList()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "longngng"
        },
        "content": "                System.out.println(\"  |-- \" + section.getTitle());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "longngng"
        },
        "content": "                for (Page page : section.getPageArrayList()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "longngng"
        },
        "content": "                    System.out.println(\"        |-- \" + page.getTitle());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "longngng"
        },
        "content": "                    System.out.println(\"            \" + page.getContent());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "longngng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "longngng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private static void listBookshelf_ns(NotebookShelf notebookShelf) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "longngng"
        },
        "content": "        for (Notebook notebook : notebookShelf.getNotebooksArrayList()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(\"* \" + notebook.getTitle());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "longngng"
        },
        "content": "            for (Section section : notebook.getSectionArrayList()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "longngng"
        },
        "content": "                System.out.println(\"  |-- \" + section.getTitle());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "longngng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private static void listBookshelf_n(NotebookShelf notebookShelf) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "longngng"
        },
        "content": "        for (Notebook notebook : notebookShelf.getNotebooksArrayList()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(\"* \" + notebook.getTitle());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private static void listNotebook_sp(Notebook notebook) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "longngng"
        },
        "content": "        for (Section section : notebook.getSectionArrayList()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(\"* \" + section.getTitle());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "longngng"
        },
        "content": "            for (Page page : section.getPageArrayList()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "longngng"
        },
        "content": "                System.out.println(\"  |-- \" + page.getTitle());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "longngng"
        },
        "content": "                System.out.println(\"        \" + page.getContent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "longngng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private static void listNotebook_s(Notebook notebook) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "longngng"
        },
        "content": "        for (Section section : notebook.getSectionArrayList()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(\"* \" + section.getTitle());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private static void listSection(Section section) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "longngng"
        },
        "content": "        for (Page page : section.getPageArrayList()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(\"* \" + page.getTitle());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(\"    \" + page.getContent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public void execute() throws IncorrectAppModeException, InvalidCommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        switch (appState.getAppMode()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        case NOTEBOOK_SHELF:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            switch (commandParams) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            case (\"/s\"):"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                listBookshelf_ns(appState.getCurrentBookShelf());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            case (\"/a\"):"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                listBookshelf_nsp(appState.getCurrentBookShelf());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "longngng"
        },
        "content": "            case(\"\"):"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                listBookshelf_n(appState.getCurrentBookShelf());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "longngng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "longngng"
        },
        "content": "                throw new InvalidCommandException(\"There not exists such options\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        case NOTEBOOK_BOOK:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            switch (commandParams) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            case (\"/a\"):"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "longngng"
        },
        "content": "                listNotebook_sp(appState.getCurrentNotebook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "longngng"
        },
        "content": "            case(\"\"):"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "longngng"
        },
        "content": "                listNotebook_s(appState.getCurrentNotebook());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "longngng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "longngng"
        },
        "content": "                throw new InvalidCommandException(\"There not exists such options\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        case NOTEBOOK_SECTION:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "longngng"
        },
        "content": "            switch (commandParams) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "longngng"
        },
        "content": "            case(\"\"):"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                listSection(appState.getCurrentSection());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "longngng"
        },
        "content": "                throw new InvalidCommandException(\"There not exists such options\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "longngng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "longngng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "longngng"
        },
        "content": "            throw new IncorrectAppModeException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 28,
      "yAOwzers": 3,
      "neilbaner": 10,
      "longngng": 75
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/notebook/RemoveCommandNotebookMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface.command.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.IncorrectAppModeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.InvalidNotebookException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.InvalidPageException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.InvalidSectionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.ZeroNoteException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.Notebook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.NotebookShelf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.Page;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.Section;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.CliMessages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.CliCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class RemoveCommandNotebookMode extends CliCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private CliMessages cliMessages \u003d new CliMessages();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private NotebookShelf currentBookshelf;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private Notebook currentNotebook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private String notebookTitleToRemove;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private Section currentSection;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private String sectionTitleToRemove;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private int pageNumberToRemove;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private static final boolean isAutoSave \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public RemoveCommandNotebookMode(String notebookTitle, String sectionTitle,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                                     int pageNumber, AppState appState) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.appState \u003d appState;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        notebookTitleToRemove \u003d notebookTitle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        sectionTitleToRemove \u003d sectionTitle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        pageNumberToRemove \u003d pageNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        currentBookshelf \u003d appState.getCurrentBookShelf();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        currentNotebook \u003d appState.getCurrentNotebook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        currentSection \u003d appState.getCurrentSection();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            switch (appState.getAppMode()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            case NOTEBOOK_SHELF:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                if (notebookTitleToRemove.equals(\"\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    throw new InvalidNotebookException(notebookTitleToRemove);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                removeFromNotebookShelf();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            case NOTEBOOK_BOOK:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                if (!notebookTitleToRemove.equals(\"\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    throw new IncorrectAppModeException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                removeFromNotebook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            case NOTEBOOK_SECTION:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                if (!notebookTitleToRemove.equals(\"\") || !sectionTitleToRemove.equals(\"\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    throw new IncorrectAppModeException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                removeFromSection();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                throw new IncorrectAppModeException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } catch (ZeroNoteException zne) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            zne.printErrorMessage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private void removeFromSection() throws InvalidPageException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        Page pageRemoved \u003d currentSection.removePage(pageNumberToRemove);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        cliMessages.printRemovePageMessage(pageRemoved);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private void removeFromNotebook() throws InvalidPageException, InvalidSectionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (!sectionTitleToRemove.equals(\"\") \u0026\u0026 pageNumberToRemove \u003e -1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            int indexOfSectionToRemove \u003d currentNotebook.findSection(sectionTitleToRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            Section section;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                section \u003d currentNotebook.getSectionAtIndex(indexOfSectionToRemove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } catch (IndexOutOfBoundsException ioe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                throw new InvalidSectionException(sectionTitleToRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            Page pageRemoved \u003d section.removePage(pageNumberToRemove);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            cliMessages.printRemovePageMessage(pageRemoved);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else if (!sectionTitleToRemove.equals(\"\") \u0026\u0026 pageNumberToRemove \u003d\u003d -1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            int indexOfSectionToRemove \u003d currentNotebook.findSection(sectionTitleToRemove);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                Section sectionRemoved \u003d currentNotebook.removeSection(indexOfSectionToRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                cliMessages.printRemoveSectionMessage(sectionRemoved);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } catch (IndexOutOfBoundsException ioe) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                throw new InvalidSectionException(sectionTitleToRemove);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidSectionException(sectionTitleToRemove);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private void removeFromNotebookShelf() throws InvalidNotebookException, InvalidSectionException,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            InvalidPageException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        int indexOfNotebookToRemove \u003d currentBookshelf.findNotebook(notebookTitleToRemove);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (!notebookTitleToRemove.equals(\"\") \u0026\u0026 !sectionTitleToRemove.equals(\"\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            Notebook notebook;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                notebook \u003d currentBookshelf.getNotebookAtIndex(indexOfNotebookToRemove);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } catch (IndexOutOfBoundsException ioe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                throw new InvalidNotebookException(notebookTitleToRemove);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            int indexOfSectionToRemove \u003d notebook.findSection(sectionTitleToRemove);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (pageNumberToRemove \u003e -1) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                Section section;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    section \u003d notebook.getSectionAtIndex(indexOfSectionToRemove);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                } catch (IndexOutOfBoundsException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    throw new InvalidSectionException(sectionTitleToRemove);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                Page pageRemoved \u003d section.removePage(pageNumberToRemove);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                cliMessages.printRemovePageMessage(pageRemoved);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } else if (pageNumberToRemove \u003d\u003d -1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                Section sectionRemoved \u003d notebook.removeSection(indexOfSectionToRemove);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                cliMessages.printRemoveSectionMessage(sectionRemoved);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                throw new InvalidPageException(Integer.toString(pageNumberToRemove + 1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else if (!notebookTitleToRemove.equals(\"\") \u0026\u0026 sectionTitleToRemove.equals(\"\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                \u0026\u0026 pageNumberToRemove \u003d\u003d -1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                Notebook notebookRemoved \u003d currentBookshelf.removeNotebook(indexOfNotebookToRemove);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                cliMessages.printRemoveNotebookMessage(notebookRemoved);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } catch (IndexOutOfBoundsException ioe) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                throw new InvalidNotebookException(notebookTitleToRemove);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (sectionTitleToRemove.equals(\"\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidSectionException(sectionTitleToRemove);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (pageNumberToRemove \u003d\u003d -1) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            throw new InvalidPageException(Integer.toString(pageNumberToRemove + 1));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public boolean isTriggerAutoSave() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return isAutoSave;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 136,
      "yAOwzers": 6,
      "neilbaner": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/notebook/SelectCommandNotebookMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface.command.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.InvalidSelectCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.ZeroNoteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.InputParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.CliCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class SelectCommandNotebookMode extends CliCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public static final String SHOW_ALL \u003d \"/all\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    private final String argument;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public SelectCommandNotebookMode(String argument, AppState uiMode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        this.setAppState(uiMode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        this.argument \u003d argument;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            switch (appState.getAppMode()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            case NOTEBOOK_SHELF:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            case NOTEBOOK_BOOK:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            case NOTEBOOK_SECTION:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            case NOTEBOOK_PAGE:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                parser.extractParams(argument, appState);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                throw new InvalidSelectCommandException(argument);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        } catch (ZeroNoteException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            e.printErrorMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 28,
      "neilbaner": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/notebook/TagCommandNotebookMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "package seedu.duke.userinterface.command.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.IncorrectAppModeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.InvalidTagException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.ZeroNoteException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.Notebook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.Page;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.notebooks.Section;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.CliMessages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.command.CliCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "public class TagCommandNotebookMode extends CliCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private final Notebook currentNotebook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private final Section currentSection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private final Page currentPage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private CliMessages cliMessages \u003d new CliMessages();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private static final boolean isAutoSave \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public TagCommandNotebookMode(String params, AppState appState) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.appState \u003d appState;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.setCommandParams(params);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        assert this.commandParams !\u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        currentNotebook \u003d appState.getCurrentNotebook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        currentSection \u003d appState.getCurrentSection();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        currentPage \u003d appState.getCurrentPage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        CliMessages cliMessages \u003d new CliMessages();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            switch (appState.getAppMode()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            case NOTEBOOK_BOOK:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                currentNotebook.setTag(commandParams);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                cliMessages.printTagNotebookMessage(currentNotebook.getTitle(), currentNotebook.getTag());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            case NOTEBOOK_SECTION:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                currentSection.setTag(commandParams);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                cliMessages.printTagNotebookMessage(currentSection.getTitle(), currentSection.getTag());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            case NOTEBOOK_PAGE:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                currentPage.setTag(commandParams);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                cliMessages.printTagNotebookMessage(currentPage.getTitle(), currentPage.getTag());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                throw new IncorrectAppModeException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } catch (ZeroNoteException zne) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            zne.printErrorMessage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public boolean isTriggerAutoSave() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return isAutoSave;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 53,
      "yAOwzers": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/timetable/AddCommandTimetableMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.TaskWrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.ZeroNoteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.CliMessages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.InputParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.CliCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class AddCommandTimetableMode extends CliCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public static final String TASK_DELIMITER \u003d \"/t\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    public static final String DEADLINE_DELIMITER \u003d \"/by\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    private final String argument;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    private final CliMessages messages \u003d new CliMessages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private static final boolean isAutoSave \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public AddCommandTimetableMode(String argument, AppState appState) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.appState \u003d appState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.argument \u003d argument;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        TaskList currentTaskList \u003d appState.getTaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            if (argument.contains(DEADLINE_DELIMITER)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                String title \u003d parser.parseTaskTitle(argument);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                String deadline \u003d parser.parseDeadline(argument);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                currentTaskList.addTask(new Task(title, deadline));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                messages.printAddedTaskMessage(currentTaskList, title);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "                throw new TaskWrongFormatException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException a) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            System.out.println(\"\\tPlease type in the format: add /tTITLE /byDEADLINE\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        } catch (ZeroNoteException z) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            z.printErrorMessage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public boolean isTriggerAutoSave() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return isAutoSave;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 29,
      "Lusi711": 1,
      "yAOwzers": 6,
      "neilbaner": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/timetable/DoneCommandTimetableMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.CliMessages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.CliCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class DoneCommandTimetableMode extends CliCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public static final boolean isAutoSave \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private AppState appState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private String argument;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private CliMessages messages \u003d new CliMessages();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public DoneCommandTimetableMode(String argument, AppState appState) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.argument \u003d argument;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.appState \u003d appState;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        taskList \u003d appState.getTaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        int numberOfTasks \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        numberOfTasks \u003d taskList.getNumberOfTasks();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int indexOfNumberAfterDone \u003d Integer.parseInt(this.argument);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            Task taskDone \u003d this.appState.markTaskAsDone(indexOfNumberAfterDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            messages.printMarkDone(taskDone);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            if (numberOfTasks \u003e 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                System.out.println(\"Please enter a valid index between 1 and \" + numberOfTasks + \".\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "                System.out.println(\"There are no tasks in the list.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            System.out.println(\"I\u0027m sorry, please enter a valid number!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public boolean isTriggerAutoSave() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return isAutoSave;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 1,
      "yAOwzers": 15,
      "neilbaner": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/timetable/FindCommandTimetableMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "package seedu.duke.userinterface.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.command.CliCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "public class FindCommandTimetableMode extends CliCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public FindCommandTimetableMode(String keyword, String tag, AppState appState) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.appState \u003d appState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        ArrayList\u003cTask\u003e tasksFound;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        TaskList tasks \u003d appState.getTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        if (tag.equals(\"\") \u0026\u0026 !keyword.equals(\"\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            tasksFound \u003d getTasksWithTitleContainingKeyword(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else if (!tag.equals(\"\") \u0026\u0026 keyword.equals(\"\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            tasksFound \u003d getTasksWithTagsContainingKeyword(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            System.out.println(\"Missing keyword/tag\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            System.out.println(\"Format: find [KEYWORD] or find /t[TAG]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        System.out.println(\"Here are the tasks I found:\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        for (Task task : tasksFound) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            System.out.println(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private ArrayList\u003cTask\u003e getTasksWithTitleContainingKeyword(TaskList tasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        ArrayList\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        for (Task task : tasks.getTaskArrayList()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            Set\u003cString\u003e wordsInTitle \u003d new HashSet\u003c\u003e(getWordsInTitle(task.getTitle()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            for (String word : wordsInTitle) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                if (word.contains(keyword)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                    matchedTasks.add(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return matchedTasks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private ArrayList\u003cTask\u003e getTasksWithTagsContainingKeyword(TaskList tasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        ArrayList\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        for (Task task : tasks.getTaskArrayList()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            String taskTag \u003d task.getTag();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (!taskTag.equals(\"\") \u0026\u0026 taskTag.contains(tag)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                matchedTasks.add(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return matchedTasks;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private List\u003cString\u003e getWordsInTitle(String title) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        return Arrays.asList(title.toLowerCase().split(\" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 70,
      "yAOwzers": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/timetable/ListCommandTimetableMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.CliCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "longngng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "longngng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class ListCommandTimetableMode extends CliCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public ListCommandTimetableMode(String argument, AppState appState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.setAppState(appState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "longngng"
        },
        "content": "        this.commandParams \u003d argument;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "longngng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public void execute() throws InvalidCommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "longngng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "longngng"
        },
        "content": "            switch (commandParams) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "longngng"
        },
        "content": "            case \"/d\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "longngng"
        },
        "content": "                printDoneTasks();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "longngng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "longngng"
        },
        "content": "            case \"/u\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "longngng"
        },
        "content": "                printUndoneTasks();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "longngng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "longngng"
        },
        "content": "            case \"/urgent\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "longngng"
        },
        "content": "                printUrgentTasks();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "longngng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "longngng"
        },
        "content": "            case \"\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "longngng"
        },
        "content": "                printAllTasks();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "longngng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "longngng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "longngng"
        },
        "content": "                throw new InvalidCommandException(\"There not exists such options\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "longngng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "longngng"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(\"The list of tasks is empty\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private void printUrgentTasks() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "longngng"
        },
        "content": "        ArrayList\u003cTask\u003e urgentTaskLists \u003d appState.getTaskList().getTaskArrayList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "longngng"
        },
        "content": "        Collections.sort(urgentTaskLists, new SortByDate());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "longngng"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "longngng"
        },
        "content": "        for (Task task : urgentTaskLists) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "longngng"
        },
        "content": "            if (task.isDone() \u003d\u003d true) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "longngng"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "longngng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.print(i++ + \":\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "longngng"
        },
        "content": "            if (i \u003d\u003d 4) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "longngng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "longngng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "longngng"
        },
        "content": "        if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(\"The list of urgent tasks is empty\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private void printAllTasks() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "longngng"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "longngng"
        },
        "content": "        for (Task task : appState.getTaskList().getTaskArrayList()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.print(i++ + \":\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "longngng"
        },
        "content": "        if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(\"The list of tasks is empty\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private void printDoneTasks() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "longngng"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "longngng"
        },
        "content": "        for (Task task : appState.getTaskList().getTaskArrayList()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "longngng"
        },
        "content": "            if (task.isDone()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "longngng"
        },
        "content": "                System.out.print(i++ + \":\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "longngng"
        },
        "content": "                System.out.println(task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "longngng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "longngng"
        },
        "content": "        if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(\"The list of done tasks is empty\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "longngng"
        },
        "content": "    private void printUndoneTasks() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "longngng"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "longngng"
        },
        "content": "        for (Task task : appState.getTaskList().getTaskArrayList()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "longngng"
        },
        "content": "            if (!task.isDone()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "longngng"
        },
        "content": "                System.out.print(i++ + \":\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "longngng"
        },
        "content": "                System.out.println(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "longngng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "longngng"
        },
        "content": "        assert i \u003d\u003d (appState.getTaskList().getNumberOfTasks() + 1) : \"i should be equal to number of tasks plus 1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "longngng"
        },
        "content": "        if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "longngng"
        },
        "content": "            System.out.println(\"The list of undone tasks is empty\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "longngng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 1,
      "neilbaner": 4,
      "longngng": 95
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/timetable/RemoveCommandTimetableMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.CliMessages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.CliCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class RemoveCommandTimetableMode extends CliCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private final int indexToRemove;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private static final boolean isAutoSave \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public RemoveCommandTimetableMode(int indexToRemove, AppState uiMode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.setAppState(uiMode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.indexToRemove \u003d indexToRemove;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        CliMessages cliMessages \u003d new CliMessages();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        TaskList taskList \u003d appState.getTaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        int numberOfTasks \u003d taskList.getNumberOfTasks();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            Task deletedTask \u003d taskList.removeTask(indexToRemove);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            numberOfTasks--;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            cliMessages.printRemoveTaskMessage(deletedTask, numberOfTasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } catch (IndexOutOfBoundsException ioe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (numberOfTasks \u003e 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                System.out.println(\"Please enter a valid index between 1 and \" + numberOfTasks + \".\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } else if (numberOfTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                System.out.println(\"Index can only be 1.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                System.out.println(\"There are no tasks in the list.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public boolean isTriggerAutoSave() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return isAutoSave;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 31,
      "yAOwzers": 8,
      "neilbaner": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/timetable/SortByDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "longngng"
        },
        "content": "package seedu.duke.userinterface.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "longngng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "longngng"
        },
        "content": "public class SortByDate implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "longngng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "longngng"
        },
        "content": "    public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "longngng"
        },
        "content": "        if (o1.getDueDateTime() \u003d\u003d null || o2.getDueDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "longngng"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "longngng"
        },
        "content": "        return o1.getDueDateTime().compareTo(o2.getDueDateTime());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "longngng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "longngng": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/userinterface/command/timetable/TagCommandTimetableMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "package seedu.duke.userinterface.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.InvalidTagException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.CliMessages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.command.CliCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "public class TagCommandTimetableMode extends CliCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private boolean isPersonalised \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    private static final boolean isAutoSave \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public TagCommandTimetableMode(int index, String tag, AppState appState) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        assert this.tag !\u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        this.appState \u003d appState;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        CliMessages cliMessages \u003d new CliMessages();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            Task targetTask \u003d appState.getTaskList().getTask(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            targetTask.setTag(tag);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            cliMessages.printTagTaskMessage(targetTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } catch (IndexOutOfBoundsException ioe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            int numberOfTasks \u003d appState.getTaskList().getNumberOfTasks();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            if (numberOfTasks \u003e 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                System.out.println(\"Please enter a valid index between 1 and \" + numberOfTasks + \".\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } else if (numberOfTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                System.out.println(\"Index can only be 1.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "                System.out.println(\"There are no tasks in the list.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        } catch (InvalidTagException ite) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            ite.setProblematicInput(\"tag \" + index + \" /t\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            ite.printErrorMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    public boolean isTriggerAutoSave() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        return isAutoSave;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 41,
      "yAOwzers": 8
    }
  },
  {
    "path": "src/main/resources/txt/personalMessages.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Great idea"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "You’re amazing"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "You have such creative ideas"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "That’s the way to do it"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Sensational"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "I like how you think"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Good remembering"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "You know just what to do"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "You expressed yourself so well"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "You are a creative thinker"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Yes sure"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Wow sure thing"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "Ok will do"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "You\u0027re doing great"
      }
    ],
    "authorContributionMap": {
      "yAOwzers": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/userinterface/InputParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "package seedu.duke.userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.exceptions.IncorrectDeadlineFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.exceptions.ZeroNoteException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "class InputParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    void parseTaskIndex_validNumber_success() throws InvalidIndexException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        String num \u003d \"2\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        assertEquals(1,parser.parseTaskIndex(num));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    void parseTaskIndex_InvalidString_numberFormatExceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        String num \u003d \"num\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        Assertions.assertThrows(InvalidIndexException.class, () -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "            parser.parseTaskIndex(num);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        });"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void parseTaskTitle_correctFormat() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String input \u003d \"/tBlowing Bubbles /by2020-10-10\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            assertEquals(\"Blowing Bubbles\", parser.parseTaskTitle(input));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            Assertions.fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void parseTaskTitle_withSpaces() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String input \u003d \"/t Blowing Bubbles /by 2020-10-10\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            assertEquals(\"Blowing Bubbles\", parser.parseTaskTitle(input));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            Assertions.fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void parseTaskTitle_noDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String input \u003d \"/t Blowing Bubbles\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertThrows(ZeroNoteException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String output \u003d parser.parseTaskTitle(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void parseDeadline_validFormat() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String input \u003d \"/tBlowing Bubbles /by10-10-2020 1000\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            assertEquals(\"10-10-2020 1000\", parser.parseDeadline(input));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            Assertions.fail();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void parseDeadline_validFormatWithSpaces() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String input \u003d \"/t Blowing Bubbles /by 10-10-2020 1000\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            assertEquals(\"10-10-2020 1000\", parser.parseDeadline(input));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            Assertions.fail();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void parseDeadline_invalidFormat() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String input \u003d \"/tBlowing Bubbles /by 2020-10-10 12\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertThrows(IncorrectDeadlineFormatException.class, () -\u003e parser.parseDeadline(input));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void parseDeadline_noDate() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String input \u003d \"/tBlowing Bubbles\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertThrows(IncorrectDeadlineFormatException.class, () -\u003e parser.parseDeadline(input));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void parseDeadline_blankDate() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String input \u003d \"/tBlowing Bubbles /by\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertThrows(IncorrectDeadlineFormatException.class, () -\u003e parser.parseDeadline(input));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 25,
      "neilbaner": 77
    }
  },
  {
    "path": "src/test/java/seedu/duke/userinterface/command/HelpTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package seedu.duke.userinterface.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * Tests for the \"help\" command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author neilbaner"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class HelpTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    String lineSeparator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    String expectedOutputNotebook \u003d \"Here are some commands to help you work with the Notebook mode: \" + lineSeparator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"To add a notebook into the notebook shelf: \" + lineSeparator + \"add /n[NOTEBOOK]\" + lineSeparator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"Example of usage: \" + lineSeparator + \"add /nCS2101\" + lineSeparator + \"\" + lineSeparator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"To add a section into the selected notebook: \" + lineSeparator + \"add /s[SECTION]\" + lineSeparator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"Example of usage: \" + lineSeparator + \"add /sW1: Java\" + lineSeparator + \"\" + lineSeparator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"To add a page into the selected section:\" + lineSeparator + \"add /p[PAGE]; [PAGE CONTENT]\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + lineSeparator + \"Example of usage: \" + lineSeparator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"add /pHELLO WORLD; System.out.println(\\\"Hello World!\\\");\" + lineSeparator + \"\" + lineSeparator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"To select a notebook, section, page, or a combination of the three: \" + lineSeparator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"select /n[NOTEBOOK] /s[SECTION] /p[NUMBER]\" + lineSeparator + \"Examples of usage: \" + lineSeparator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"In any context: \" + lineSeparator + \"select /nCS2101 /sW2 /p1\" + lineSeparator + \"select /nCS2101 /sW2\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + lineSeparator + \"select /nCS2101\" + lineSeparator + \"select /all\" + lineSeparator + \"\" + lineSeparator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"In a selected notebook\" + lineSeparator + \"select /s1: What is OOP? /p1\" + lineSeparator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"select /s1: What is OOP?\" + lineSeparator + \"\" + lineSeparator + \"In a selected section\" + lineSeparator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"select /p1\" + lineSeparator + \"\" + lineSeparator + \"To delete and existing notebook, section or page: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + lineSeparator + \"delete /n[NOTEBOOK] /s[SECTION] /p[NUMBER]\" + lineSeparator + \"Examples of usage: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + lineSeparator + \"delete /nCS2113T /sW10 /p1\" + lineSeparator + \"delete /nCS2113T /sW10\" + lineSeparator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"delete /nCS2113T\" + lineSeparator + \"\" + lineSeparator;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    String expectedOutputTimetable \u003d \"Here are some commands to help you work with the Timetable mode: \" + lineSeparator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"To add a task with a deadline to the task list: \" + lineSeparator + \"add /t[TASK] /by[dd/MM/yyyy] [hhmm]\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + lineSeparator + \"Example of usage: \" + lineSeparator + \"add /tcoding /by19-10-2020 1900\" + lineSeparator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"\" + lineSeparator + \"To delete an existing task from the task list: \" + lineSeparator + \"delete [INDEX]\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + lineSeparator + \"Example of usage: \" + lineSeparator + \"delete 1\" + lineSeparator + \"\" + lineSeparator;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    String expectedOutputNoParams \u003d \"Here are all the commands you need to know to operate Zer0Note: \" + lineSeparator"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"Here are some general commands that will work throughout Zer0Note: \" + lineSeparator"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"To switch to timetable mode: \" + lineSeparator + \"mode /t\" + lineSeparator"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"To switch to notebook mode: \" + lineSeparator + \"mode /n\" + lineSeparator + \"\" + lineSeparator"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"To quit Zer0Note:\" + lineSeparator + \"exit\" + lineSeparator + expectedOutputNotebook"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + expectedOutputTimetable + \"Access the full user guide for Zer0Note online, at: \" + lineSeparator"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            + \"https://ay2021s1-cs2113t-t12-3.github.io/tp/UserGuide.html\" + lineSeparator + lineSeparator;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void help_noParams() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OutputStream os \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        PrintStream ps \u003d new PrintStream(os);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        Help help \u003d new Help(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertDoesNotThrow(help::execute);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        output \u003d os.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertEquals(output, expectedOutputNoParams);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void help_randomParams() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OutputStream os \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        PrintStream ps \u003d new PrintStream(os);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        Help help \u003d new Help(\"lmao rekt\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertDoesNotThrow(help::execute);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        output \u003d os.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertEquals(output, expectedOutputNoParams);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void help_notebook() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OutputStream os \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        PrintStream ps \u003d new PrintStream(os);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        Help help \u003d new Help(\"notebook\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertDoesNotThrow(help::execute);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        output \u003d os.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertEquals(output, expectedOutputNotebook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void help_notebookMixedCase() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OutputStream os \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        PrintStream ps \u003d new PrintStream(os);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        Help help \u003d new Help(\"nOtEbOoK\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertDoesNotThrow(help::execute);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        output \u003d os.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertEquals(output, expectedOutputNotebook);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void help_timetable() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OutputStream os \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        PrintStream ps \u003d new PrintStream(os);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        Help help \u003d new Help(\"timetable\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertDoesNotThrow(help::execute);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        output \u003d os.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertEquals(output, expectedOutputTimetable);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void help_timetableMixedCase() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OutputStream os \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        PrintStream ps \u003d new PrintStream(os);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        Help help \u003d new Help(\"TiMeTaBlE\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertDoesNotThrow(help::execute);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        output \u003d os.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        assertEquals(output, expectedOutputTimetable);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 140
    }
  },
  {
    "path": "src/test/java/seedu/duke/userinterface/command/notebook/AddNotebookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.userinterface.command.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.AppMode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.InputParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@chuckiex3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "public class AddNotebookTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    void addNotebook_wrongFormat_expectException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        AppState appState \u003d new AppState();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        appState.setAppMode(AppMode.NOTEBOOK_PAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        String inputString \u003d \"add notebook\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            parser.getCommandFromInput(inputString, appState);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    void addNotebook_wrongMode_expectException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        AppState appState \u003d new AppState();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        appState.setAppMode(AppMode.NOTEBOOK_PAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        String inputString \u003d \"add /nNOTEBOOK\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            parser.getCommandFromInput(inputString, appState);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 34
    }
  },
  {
    "path": "src/test/java/seedu/duke/userinterface/command/notebook/ListCommandNotebookModeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "longngng"
        },
        "content": "package seedu.duke.userinterface.command.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "longngng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.exceptions.IncorrectAppModeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.userinterface.AppMode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "longngng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "longngng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@longngng"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "longngng"
        },
        "content": "class ListCommandNotebookModeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "longngng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "longngng"
        },
        "content": "    void execute_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "longngng"
        },
        "content": "        AppState appState \u003d new AppState();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "longngng"
        },
        "content": "        String input \u003d \"list /d\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "longngng"
        },
        "content": "        ListCommandNotebookMode listCommandNotebookMode \u003d new ListCommandNotebookMode(input, appState);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "longngng"
        },
        "content": "        appState.setAppMode(AppMode.NOTEBOOK_SHELF);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "longngng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "longngng"
        },
        "content": "            listCommandNotebookMode.execute();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "longngng"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "longngng"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "longngng"
        },
        "content": "            assertEquals(\"There not exists such options\", e.problematicInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "longngng"
        },
        "content": "        } catch (IncorrectAppModeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "longngng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "longngng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 1,
      "longngng": 30
    }
  },
  {
    "path": "src/test/java/seedu/duke/userinterface/command/notebook/SelectNotebookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.userinterface.command.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.IncorrectAppModeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.AppMode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.InputParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@chuckiex3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "public class SelectNotebookTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    void selectNotebook_in_wrongMode() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        AppState appState \u003d new AppState();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        appState.setAppMode(AppMode.TIMETABLE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        String inputString \u003d \"select /nNOTEBOOK\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        assertThrows(IncorrectAppModeException.class, () -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            parser.getCommandFromInput(inputString, appState);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 23
    }
  },
  {
    "path": "src/test/java/seedu/duke/userinterface/command/timetable/AddTaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.userinterface.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.IncorrectDeadlineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.exceptions.ZeroNoteException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import seedu.duke.userinterface.InputParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@chuckiex3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "public class AddTaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    void addTask_dateFormat_expectException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        String inputString \u003d \"/by18 Oct\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        assertThrows(IncorrectDeadlineFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            parser.parseDeadline(inputString);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    void addTask_correctFormat() throws IncorrectDeadlineFormatException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        String inputString \u003d \"/by18-10-2020 1900\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        String expectedString \u003d \"18-10-2020 1900\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        assertEquals(expectedString, parser.parseDeadline(inputString));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    void addTask_emptyTask_expectException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        String inputString \u003d \"add /t /by18-10-2020 1900\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        assertThrows(ZeroNoteException.class, () -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            parser.parseTaskTitle(inputString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    void addTask_emptyEverything_expectException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        InputParser parser \u003d new InputParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        String inputString \u003d \"add /t /by\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        assertThrows(ZeroNoteException.class, () -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "            parser.parseTaskTitle(inputString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 48
    }
  },
  {
    "path": "src/test/java/seedu/duke/userinterface/command/timetable/ListCommandTimetableModeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "longngng"
        },
        "content": "package seedu.duke.userinterface.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "longngng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "longngng"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "longngng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "longngng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@longngng"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "longngng"
        },
        "content": "class ListCommandTimetableModeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "longngng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "longngng"
        },
        "content": "    void execute_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "longngng"
        },
        "content": "        AppState appState \u003d new AppState();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "longngng"
        },
        "content": "        String input \u003d \"list /d\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "longngng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "longngng"
        },
        "content": "        ListCommandTimetableMode listCommandTimetableMode \u003d new ListCommandTimetableMode(input, appState);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "longngng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "longngng"
        },
        "content": "            listCommandTimetableMode.execute();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "longngng"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "longngng"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "longngng"
        },
        "content": "            assertEquals(\"There not exists such options\", e.problematicInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "longngng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "longngng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "longngng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 1,
      "longngng": 25
    }
  },
  {
    "path": "src/test/java/seedu/duke/userinterface/command/timetable/MarkAsDoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.userinterface.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import seedu.duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import seedu.duke.userinterface.command.timetable.AddCommandTimetableMode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import seedu.duke.userinterface.command.timetable.DoneCommandTimetableMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@yAOwzers"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "public class MarkAsDoneTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    void execute_MarkAsDoneTwo_IndexOutOfBound() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        AppState appState \u003d new AppState();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        String input \u003d \"add /tTask1 /by12-10-2020 2252\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        AddCommandTimetableMode addTimetableMode \u003d new AddCommandTimetableMode(input, appState);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        addTimetableMode.execute();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "            appState.getTaskList().markAsDone(2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "        });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 2,
      "yAOwzers": 24
    }
  },
  {
    "path": "src/test/java/seedu/duke/userinterface/command/timetable/RemoveTaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "package seedu.duke.userinterface.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import seedu.duke.userinterface.AppState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.timetable.AddCommandTimetableMode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import seedu.duke.userinterface.command.timetable.RemoveCommandTimetableMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuckiex3"
        },
        "content": "//@@Lusi711"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "class RemoveTaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    void execute_DeleteTaskOne_NoTasksInTaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        TaskList taskslist \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        AppState appState \u003d new AppState();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        String input \u003d \"add /tTask1 /by12-10-2020 2252\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        AddCommandTimetableMode addTimetableMode \u003d new AddCommandTimetableMode(input,appState);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        addTimetableMode.execute();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        RemoveCommandTimetableMode removeTimetableMode \u003d new RemoveCommandTimetableMode(1,appState);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        removeTimetableMode.execute();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lusi711"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "        assertEquals(taskslist.getNumberOfTasks(), 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuckiex3": 2,
      "Lusi711": 19,
      "neilbaner": 6
    }
  },
  {
    "path": "tasks.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "2"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "19-10-2020 1800"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "true"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "Return book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "27-10-2020 1830"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "false"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 7
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "add /ttask /by15-10-2020 2359"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yAOwzers"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "mode /n"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "add /nNotebook 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "select /nNotebook 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "add /sSection 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "select /sSection 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "add /pPage 1; some text"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "add /pPage 3; some text"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "mode /n"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "delete /nNotebook 1 /sSection 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lusi711"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "Lusi711": 10,
      "yAOwzers": 3,
      "neilbaner": 2
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew clean shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "FC ACTUAL.TXT EXPECTED-WIN.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 1,
      "-": 18
    }
  }
]
