[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    maven {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        url  \"https://dl.bintray.com/patriques82/maven\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    compile \u0027org.patriques:alphavantage4j:1.4\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    mainClassName \u003d \"seedu.duke.PaperTrade\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    archiveBaseName \u003d \"paperTrade\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "trolommonm": 4,
      "-": 44,
      "yokemin": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wly99"
        },
        "content": "# About us(in-progress)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Alvin | [Github](https://github.com/trolommonm) | [Portfolio](docs/team/alvin.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yoke Min | [Github](https://github.com/yokemin) | [Portfolio](docs/team/yokemin.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Liang Yi | [Github](https://github.com/wly99) | [Portfolio](docs/team/liangyi.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jun Xian | [Github](https://github.com/JunxianAng) | [Portfolio](docs/team/junxian.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Shao Jing | [Github](https://github.com/shaojingle) | [Portfolio](docs/team/shaojing.md)"
      }
    ],
    "authorContributionMap": {
      "wly99": 1,
      "-": 3,
      "yokemin": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "It is recommended that you read through the user guide to familiarize yourself with the program before using the "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "developer guide."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "# Setting up PaperTrade"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "Fork the repository and clone the fork into your computer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "To set up the project:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "1. Ensure that you have JDK 11 installed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "2. Import the project as a Gradle project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "3. To build the project, run \"./gradlew build\" on a Unix machine or run \"gradlew build\" on Windows."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "![](./diagrams/Packages.png)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "The Package Diagram above gives a high level view of the project structure and the classes in each package. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "![](./diagrams/Architecture.png)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "The Architecture Diagram above gives a high level design of PaperTrade. Below is a quick overview of each component."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "### Overview"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "* `PaperTrade`: The main entry point into the program. It initializes the Controller object which then takes over the "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "execution of the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "* `Controller`: Acts as an interface between all the other classes, to process all the business logic incoming commands"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "from the user. Manipulates the data through `PortfolioManager` and interact with `Ui` to display information to the "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "* `PortfolioManager`: Responsible for managing the persistency of the user\u0027s data through the `Storage` class and holds "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "all the data for the program at a point in time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "* `Ui`: Responsible for displaying information to the user and getting input from the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "* `Parser`: Responsible for parsing the user input and returning a `Command` object corresponding to the user command "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "requested."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "* `StockPriceFetcher`: Responsible for calling the AlphaVantage API to retrieve stock information."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "* `Storage`: Responsible for managing the storing of data for persistency."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "### Lifecycle of PaperTrade"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "The sequence diagram below shows how different packages and classes interact with each other throughout the lifecycle "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "of PaperTrade."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "![](./diagrams/Lifecycle.png)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yokemin"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yokemin"
        },
        "content": "### Buy/Sell Stock Feature"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yokemin"
        },
        "content": "#### Current implementation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Buy and sell stock commands are largely similar, with the only difference being the way values of attributes in "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yokemin"
        },
        "content": "the objects instantiated are updated and the condition for throwing exceptions. "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Other than that, the way the functions work is the same."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Below is the explanation of the implementation of based on buy stock command, "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yokemin"
        },
        "content": "which can be applied to the sell stock command as well."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Given below is an example usage scenario and how buy stock command behaves at each step."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yokemin"
        },
        "content": "![](./diagrams/BuyStockState0.png)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yokemin"
        },
        "content": "**Step 1** : The user calls the buy stock command from the `Parser`. "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Buy stock command is instantiated by `Parser`, which calls the `buyParse` method to get the attribute values "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yokemin"
        },
        "content": "for `symbol` and `quantity` required to instantiate `buyCommand`. The `Controller` instantiates `Ui`, `PortfolioManager`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yokemin"
        },
        "content": "and `StockPriceFetcher`, which gets the `price` of stock. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yokemin"
        },
        "content": "In the `Controller`, we check for the instance of `buyCommand` object and calls the `buyStock` method."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Below is a table of what each parameter corresponds to in the state diagram of the program."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yokemin"
        },
        "content": "|Parameter|Corresponds to"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yokemin"
        },
        "content": "|:---:|:---:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yokemin"
        },
        "content": "|`symbol`| Ticker symbol of Stock to buy"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yokemin"
        },
        "content": "|`quantity`| Integer number of shares to be "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yokemin"
        },
        "content": "|`price`| Price of stock at current time "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yokemin"
        },
        "content": "**Step 2** : `buyStock()` is called from the `PortfolioManager` with the values of `symbol` and `quantity` "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yokemin"
        },
        "content": "and `price` passed to them. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yokemin"
        },
        "content": "**Step 3** : `Portfolio` is instantiated and its `buyStock` method is called as well. "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yokemin"
        },
        "content": " "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yokemin"
        },
        "content": " ![](./diagrams/BuyStockState1.png)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yokemin"
        },
        "content": " "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yokemin"
        },
        "content": "**Step 4** : `Wallet` and `Stock` are instantiated. "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yokemin"
        },
        "content": "It then checks if there is sufficient fund in the wallet. If so, `buyStock` method is called from the `wallet` instance."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Then, new `Transaction` object is instantiated. "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yokemin"
        },
        "content": "The `transaction` object stores details of the stock bought."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Below is a table of what each attribute in `Transaction` corresponds to in the program."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yokemin"
        },
        "content": "|Attribute|Corresponds to"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yokemin"
        },
        "content": "|:---:|:---:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yokemin"
        },
        "content": "|`TransactionType`| Buy or Sell stock"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yokemin"
        },
        "content": "|`Quantity`| Integer number of shares to be bought"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yokemin"
        },
        "content": "|`BuyPrice`| Cost price of a stock at a specific time "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yokemin"
        },
        "content": "|`LocalDateTime`| the time when the command is called "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yokemin"
        },
        "content": "**Step 5** : Following that, _if a stock with the same symbol has not been instantiated before_, "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yokemin"
        },
        "content": "a new \u0027Stock\u0027 object is also instantiated. Otherwise, the `Stock` object of that stock symbol will be used. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yokemin"
        },
        "content": "The method `addTransaction` in the `stock` object is then called, with the `transaction` object as a parameter, "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yokemin"
        },
        "content": "to update the value of the attribute `totalQuantity` in `Stock`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yokemin"
        },
        "content": "![](./diagrams/BuyStockState2.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yokemin"
        },
        "content": "**Step 6** : `Portfolio`, `Wallet`, `Transaction` and `Stock` are terminated first."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yokemin"
        },
        "content": "The `save` method is then called. "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yokemin"
        },
        "content": "**Step 7**: `Controller` then calls the relevant methods from `Ui` to print the information about the stock bought and "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yokemin"
        },
        "content": "the amount left in the wallet. `StockPriceFetcher`, `Ui` and `PortfolioManager` are then terminated."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yokemin"
        },
        "content": "![](./diagrams/BuyStockState3.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yokemin"
        },
        "content": "The following sequence diagram summarizes what happens when the user executes an `BuyCommand` :"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yokemin"
        },
        "content": "![](./diagrams/BuyStockSequence.png)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yokemin"
        },
        "content": "#### Design consideration"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yokemin"
        },
        "content": "The following explains the design considerations when implementing commands:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yokemin"
        },
        "content": "* Make `BuyCommand` As a class by itself"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    * Reason: Increases modularity of code, higher overall code quality "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yokemin"
        },
        "content": "* Alternatives: have a `buyCommand` method, increases coupling and reduces testability"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "### View Portfolio feature"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "#### Current implementation"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "View portfolio command is executed by `Controller`. It allows users to access, retrieve and view array list of stocks "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "owned and their historical transactions. This is done by instantiating a new `PortfolioManager` which is able to "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "access `Portfolio`. The `Portfolio` object encapsulates `Stock` and `Transaction`."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "Addtionally, `Stock` object is able to retrieve latest live prices by instantiating `StockPriceFetcher` to call "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "AlphaVantage API. This allows users to view not only their stocks historial transactions, but to see their profit/loss  "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "based on current latest price. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "Given below is an example usage scenario and how view portfolio command behaves at each step."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "![](./diagrams/ViewPortfolioState0.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "**Step 1**: `Parser` will initialise `ViewCommand` and call `viewPortfolio()` command from the `Controller`. `Ui` is initialised to call `view()`. The method "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "takes in an parameter of an array list of stock to be displayed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "|Parameter|Corresponds to"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "|:---:|:---:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "|`Stock`| Stock objects"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "**Step 2**: To obtain an array list of stock to be used as an arugment in `Ui` `view()` method, `PortfolioManager` is initialised to call `getAllStocks()` method."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "The method returns an array list of `Stock` by initialising `Portfolio` which is keeps a HashMap of `Stock` objects. Below is a table of what each attribute in"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "`Stock`corresponds to in the program."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "|Attribute|Corresponds to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "|:---:|:---:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "|`Symbol`| Ticker Symbol of Stock in possession"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "|`totalQuantity`| Integer number of shares currently owned"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "|`transactions`| An array list of `Transaction` object "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "![](./diagrams/ViewPortfolioState1.png)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "**Step 3**: For each of the `Stock` object to be displayed, `getTransaction()` method is called to obtained historial"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "records of user\u0027s stock transactions."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "Below is a table of what each attribute in `Transaction` corresponds to in the program. "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "|Attribute|Corresponds to"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "|:---:|:---:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "|`TransactionType`| Buy or Sell stock"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "|`Quantity`| Integer number of shares to be bought"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "|`BuyPrice`| Cost price of a stock at a specific time "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "|`LocalDateTime`| the time when the command is called "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "**Step 4**: For each of the `Stock` object to be displayed, `getLatestPrice()` method is called by instantiating a new `StockPriceFetcher`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "which calls out to AlphaVantage API to obtain latest stock price. "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "User\u0027s latest profit/loss will be displayed through calculation of latest stock price"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "against historical buy price. "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "![](./diagrams/ViewPortfolioState2.png)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "**Step 5**: `Parser`, `ViewCommand`, `Stock`, `Transaction`, `StockPriceFetcher` are terminated. "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wly99"
        },
        "content": "We are targeting people below 25 who have never traded stocks before."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wly99"
        },
        "content": "Paper trading allows inexperienced people to get a feel of what trading feels like so that they can used to it without the downside of losing real money."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wly99"
        },
        "content": "|Version| As a/an ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wly99"
        },
        "content": "|v1.0|new investor|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wly99"
        },
        "content": "|v1.0|new investor|trade without putting my money at risk|learn from my mistakes and experience without losing money|"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wly99"
        },
        "content": "|v1.0|investor|search for stocks I can buy|have more information to make a more informed decision|"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wly99"
        },
        "content": "|v1.0|investor|buy stocks|profit from any capital gains or dividends|"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wly99"
        },
        "content": "|v1.0|investor|sell stocks|realise my gains or reallocate my money to other stocks|"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wly99"
        },
        "content": "|v1.0|investor|view my portfolio|see what stocks I have and my past transactions|"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wly99"
        },
        "content": "|v2.0|investor|keep track of what stocks I have bought or sold|see how much money I\u0027ve made or lost|"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wly99"
        },
        "content": "|v2.0|investor|see how much cash I have left|decide how much to buy or sell|"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yokemin"
        },
        "content": "|v2.0|investor|have a watchlist of stocks|track the price movements of individual stocks|"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yokemin"
        },
        "content": "|v2.1|investor|see the performance of my portfolio|see if I\u0027m on track for my financial goals|"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wly99"
        },
        "content": "1. Program should not take more than 5s to run for every command."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wly99"
        },
        "content": "2. Program should give some loading indicator when fetching stock prices from API calls."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "JunxianAng": 55,
      "trolommonm": 39,
      "wly99": 13,
      "-": 31,
      "yokemin": 82
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wly99"
        },
        "content": "{Paper trading command line app}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wly99"
        },
        "content": "* [User Guide](UserGuide.md)(Read more about how to use our application!)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wly99"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)(Good to read for devs working on our app!)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wly99"
        },
        "content": "* [About Us](AboutUs.md)(The awesome team behind this!)"
      }
    ],
    "authorContributionMap": {
      "wly99": 4,
      "-": 4
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "PaperTrade is a command line trading simulator that lets you try your hand at trading stocks with no risk!"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{Give steps to get started quickly}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "2. Down the latest version of `PaperTrade` from [here](https://github.com/AY2021S1-CS2113-T16-3/tp/releases/tag/v1.0)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yokemin"
        },
        "content": "### Buying a stock: `buy /aapl quantity`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wly99"
        },
        "content": "Buys the specified stock at market price"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Format: `buy /STOCK_TICKER quantity`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wly99"
        },
        "content": "* The `STOCK_TICKER` is the stock\u0027s short form"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yokemin"
        },
        "content": "* `quantity` refers to the quantity of stocks user wants to buy; is an integer"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "Example of usage and output: "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "To buy 2 shares of TSLA:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "```"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "What would you like to do today?"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "buy /tsla 2"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "You have successfully purchased 2 of tsla at 421.725."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "You currently have $96049.14 in your wallet."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "```"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "To buy 1 share of FB:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "What would you like to do today?"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "buy /fb 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "You have successfully purchased 1 of fb at 282.485."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "You currently have $95766.65 in your wallet."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yokemin"
        },
        "content": "### Selling a stock: `sell /aapl quantity`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wly99"
        },
        "content": "Sells the specified stock at market price"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Format: `sell /STOCK_TICKER quantity`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wly99"
        },
        "content": "* The `STOCK_TICKER` is the stock\u0027s short form"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yokemin"
        },
        "content": "* `quantity` refers to the quantity of stocks user wants to sell; is an integer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "Example of usage and output: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "To sell 1 share of GOOG:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "What would you like to do today?"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "sell /goog 1"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "You have successfully sold 1 of goog at 1602.13."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "You currently have $95766.65 in your wallet."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wly99"
        },
        "content": "### Searching for info about a stock: `search /aapl`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wly99"
        },
        "content": "Shows information about a stock like price and volume"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wly99"
        },
        "content": "Format: `search /STOCK_TICKER`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wly99"
        },
        "content": "* The `STOCK_TICKER` is the stock\u0027s short form"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wly99"
        },
        "content": "`search /nflx`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wly99"
        },
        "content": "`search /shop`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wly99"
        },
        "content": "### View your portfolio: `view`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wly99"
        },
        "content": "Shows the stocks you have, its quantity and current price. Also shows transaction history."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wly99"
        },
        "content": "Format: `view`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wly99"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "What would you like to do today?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "view"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "1. Symbol: aapl, total quantity: 1, Current Price: 116.14500000000001"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "\tBUY 1 at 116.14500000000001 on 2020-10-28T19:50:31.555462"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "Total holding asset \u003d $116.15"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "Total cost \u003d $116.15"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "Total Profit/Loss \u003d $0.0"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "2. Symbol: msft, total quantity: 1, Current Price: 209.695"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "\tBUY 1 at 209.695 on 2020-10-28T19:50:36.916125"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "Total holding asset \u003d $209.7"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "Total cost \u003d $209.7"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "Total Profit/Loss \u003d $0.0"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wly99"
        },
        "content": "### Check your wallet: `wallet`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wly99"
        },
        "content": "Shows you how much cash you have left in your wallet to buy stocks, how much you have allocated to stocks and your net profit."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wly99"
        },
        "content": "Format: `wallet`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "What would you like to do today?"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "wallet"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "You currently have $99674.16 in your wallet."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "Current market value of all your equities owned: $325.84"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "Loss of : -$0.00"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "```"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yokemin"
        },
        "content": "### Bookmark stocks to keep on watchlist: `mark /STOCK_TICKER`, `unmark /STOCK_TICKER`, `bookmarks`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Allows you to bookmark stocks for easy access of stocks that you are actively watching"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yokemin"
        },
        "content": "* The `STOCK_TICKER` is the stock\u0027s short form"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yokemin"
        },
        "content": "#### Marking Stocks: "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Format: `mark /STOCK_TICKER`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Example of usage: mark /tsla"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yokemin"
        },
        "content": "#### Unmarking Stocks: "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Format: `unmark /STOCK_TICKER`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Example of usage: unmark /tsla"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yokemin"
        },
        "content": "#### Viewing info of all bookmarked stocks: "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Format: `bookmarks`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yokemin"
        },
        "content": "Example of usage: bookmarks"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wly99"
        },
        "content": "### Exit: `bye`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wly99"
        },
        "content": "Exits the program. Duke will save your info for the next time you come back!"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wly99"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wly99"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wly99"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wly99"
        },
        "content": "**A**: Just copy the txt file over."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "{Give a \u0027cheat sheet\u0027 of commands here}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yokemin"
        },
        "content": "* Buy a stock `buy /aapl quantity`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yokemin"
        },
        "content": "* Sell a stock `sell /aapl quantity`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wly99"
        },
        "content": "* Search for a stock\u0027s info `search /aapl`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wly99"
        },
        "content": "* View portfolio `view`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wly99"
        },
        "content": "* Check your wallet `wallet`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wly99"
        },
        "content": "* Exit program `bye`"
      }
    ],
    "authorContributionMap": {
      "trolommonm": 65,
      "wly99": 42,
      "-": 37,
      "yokemin": 30
    }
  },
  {
    "path": "docs/team/alvin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "# Alvin - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "yokemin": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/junxian.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "# Jun Xian - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "yokemin": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/liangyi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "# Liang Yi - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "yokemin": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/shaojing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "# Shao Jing - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "yokemin": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/yokemin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "# Yoke Min - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "yokemin": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/PaperTrade.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.controller.Controller;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "public class PaperTrade {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        Controller c \u003d new Controller();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        c.runApp();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "trolommonm": 4,
      "-": 9,
      "yokemin": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/api/Api.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.net.URLEncoder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public class Api {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private static final String API_KEY \u003d \"O8EVQ7YSWDW08BN9\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public static final String SYMBOL \u003d \"IBM\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public Api() throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        StringBuilder request \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        request.append(\"https://www.alphavantage.co/query?\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        Map\u003cString, String\u003e parameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        parameters.put(\"symbol\", SYMBOL);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        parameters.put(\"function\", \"TIME_SERIES_DAILY_ADJUSTED\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        String paramsToAppend \u003d buildParamsString(parameters);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        request \u003d request.append(paramsToAppend);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        // Creating a Request"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        URL url \u003d new URL(request.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        URLConnection con \u003d url.openConnection();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        HttpURLConnection http \u003d (HttpURLConnection) con;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        http.setRequestMethod(\"GET\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        // Prints response from API call"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        String response \u003d FullResponseBuilder.getFullResponse(http);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        // System.out.println(response);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    // Builds a string to append relevant the params to append to URL"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public static String buildParamsString(Map\u003cString, String\u003e params)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            throws UnsupportedEncodingException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            result.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            result.append(\"\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            result.append(URLEncoder.encode(entry.getValue(), \"UTF-8\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            result.append(\"\u0026\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        result.append(\"apikey\u003d\" + API_KEY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        String resultString \u003d result.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        return resultString.length() \u003e 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yokemin"
        },
        "content": "                ? resultString.substring(0, resultString.length() - 1)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yokemin"
        },
        "content": "                : resultString;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yokemin": 64
    }
  },
  {
    "path": "src/main/java/seedu/duke/api/FullResponseBuilder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public class FullResponseBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public static String getFullResponse(HttpURLConnection con) throws IOException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        Reader streamReader \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        if (con.getResponseCode() \u003e 299) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            streamReader \u003d new InputStreamReader(con.getErrorStream());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            streamReader \u003d new InputStreamReader(con.getInputStream(), \"utf-8\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(streamReader);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        String responseLine \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        StringBuilder content \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        while ((responseLine \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            content.append(responseLine);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        br.close();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        StringBuilder fullResponseBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        fullResponseBuilder.append(\"Response: \")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yokemin"
        },
        "content": "                .append(content);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        return fullResponseBuilder.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yokemin": 35
    }
  },
  {
    "path": "src/main/java/seedu/duke/api/StockPriceFetcher.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "package seedu.duke.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import org.patriques.AlphaVantageConnector;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import org.patriques.TimeSeries;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import org.patriques.input.timeseries.Interval;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import org.patriques.input.timeseries.OutputSize;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import org.patriques.output.AlphaVantageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import org.patriques.output.timeseries.IntraDay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import org.patriques.output.timeseries.data.StockData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "public class StockPriceFetcher {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"tp\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private String[] apiKeys \u003d {\"O8EVQ7YSWDW08BN9\", \"3FPNCQ0JNYEE8BTK\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private int timeout \u003d 3000;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public StockPriceFetcher() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        timeout \u003d 3000;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public double fetchLatestPrice(String symbol) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        logger.log(Level.INFO, \"fetching latest stock data for \" + symbol);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        StockData stockData \u003d fetchLatestStockData(symbol);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return (stockData.getHigh() + stockData.getLow()) / 2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public StockData fetchLatestStockData(String symbol) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        String randomApiKey \u003d apiKeys[random.nextInt(apiKeys.length)];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        AlphaVantageConnector apiConnector \u003d new AlphaVantageConnector(randomApiKey, timeout);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        TimeSeries stockTimeSeries \u003d new TimeSeries(apiConnector);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            IntraDay response \u003d stockTimeSeries.intraDay(symbol, Interval.ONE_MIN, OutputSize.COMPACT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            List\u003cStockData\u003e stockData \u003d response.getStockData();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            return stockData.get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } catch (AlphaVantageException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            logger.log(Level.INFO, \"failed to fetch price from API\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            throw new DukeException(\"Failed to retrieve price! Please try again.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "trolommonm": 49,
      "yokemin": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddBookmarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public class AddBookmarkCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private String symbol;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public AddBookmarkCommand(String symbol) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yokemin": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/BuyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public class BuyCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private String symbol;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public BuyCommand(String symbol, int quantity) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "trolommonm": 15,
      "yokemin": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ByeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yokemin": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yokemin": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/InvalidCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    String errorMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public InvalidCommand(String errorMessage) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "trolommonm": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/RemoveBookmarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public class RemoveBookmarkCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private String symbol;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public RemoveBookmarkCommand(String symbol) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yokemin": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/SearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private String searchKey;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public SearchCommand(String searchKey) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        this.searchKey \u003d searchKey;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public String getSearchKey() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return searchKey;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "trolommonm": 8,
      "yokemin": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/SellCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public class SellCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private String symbol;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public SellCommand(String symbol, int quantity) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yokemin": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ViewBookmarkedStocksCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public class ViewBookmarkedStocksCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wly99": 1,
      "yokemin": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "trolommonm": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/WalletCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaojingle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "public class WalletCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaojingle": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/Controller.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "package seedu.duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import org.patriques.output.timeseries.data.StockData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.api.StockPriceFetcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.AddBookmarkCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.BuyCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.RemoveBookmarkCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.SearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.SellCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.ViewBookmarkedStocksCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.ViewCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "import seedu.duke.command.WalletCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.DoNotOwnStockException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.InsufficientFundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.InsufficientQtyException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.model.BookmarksManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.model.PortfolioManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "import seedu.duke.model.Stock;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "public class Controller {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private StockPriceFetcher stockPriceFetcher;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private PortfolioManager portfolioManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private BookmarksManager bookmarksManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public Controller() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        stockPriceFetcher \u003d new StockPriceFetcher();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        portfolioManager \u003d new PortfolioManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        bookmarksManager \u003d new BookmarksManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private void buyStock(String symbol, int quantity) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            double price \u003d stockPriceFetcher.fetchLatestPrice(symbol);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            portfolioManager.buyStock(symbol, quantity, price);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            ui.printWithDivider(\"You have successfully purchased \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yokemin"
        },
        "content": "                    + quantity + \" of \" + symbol + \" at \" + price + \".\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "            ui.printWithDivider(\"You currently have $\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                    + String.format(\"%.02f\", portfolioManager.getWalletCurrentAmount()) + \" in your wallet.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } catch (DukeException | InsufficientFundException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            ui.printWithDivider(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private void sellStock(String symbol, int quantity) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            double price \u003d stockPriceFetcher.fetchLatestPrice(symbol);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            portfolioManager.sellStock(symbol, quantity, price);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            ui.printWithDivider(\"You have successfully sold \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yokemin"
        },
        "content": "                    + quantity + \" of \" + symbol + \" at \" + price + \".\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "            ui.printWithDivider(\"You currently have $\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                    + String.format(\"%.02f\", portfolioManager.getWalletCurrentAmount()) + \" in your wallet.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } catch (DoNotOwnStockException | InsufficientQtyException | DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            ui.printWithDivider(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public void runApp() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        ui.greetUser();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            String userInput \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            Command command \u003d Parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            if (!executeCommand(command)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public void addBookmark(String symbol) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            stockPriceFetcher.fetchLatestPrice(symbol);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            ui.printWithDivider(\"Invalid stock!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            bookmarksManager.addToBookmarks(symbol);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            ui.printWithDivider(\"You have added \" + symbol + \" to bookmarks.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            ui.printWithDivider(e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public void removeBookmark(String symbol) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            bookmarksManager.removeBookmark(symbol);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            ui.printWithDivider(\"You have removed \" + symbol + \" from bookmarks.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            ui.printWithDivider(e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private boolean executeCommand(Command command) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        if (command instanceof SearchCommand) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            SearchCommand searchCommand \u003d (SearchCommand) command;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            searchSymbol(searchCommand.getSearchKey());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } else if (command instanceof InvalidCommand) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            InvalidCommand invalidCommand \u003d (InvalidCommand) command;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            ui.printWithDivider(invalidCommand.getErrorMessage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } else if (command instanceof ByeCommand) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            ui.printWithDivider(\"Goodbye! Hope to see you again.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } else if (command instanceof BuyCommand) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            BuyCommand buyCommand \u003d (BuyCommand) command;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            buyStock(buyCommand.getSymbol(), buyCommand.getQuantity());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } else if (command instanceof SellCommand) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            SellCommand sellCommand \u003d (SellCommand) command;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            sellStock(sellCommand.getSymbol(), sellCommand.getQuantity());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } else if (command instanceof ViewCommand) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            viewPortfolio();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "        } else if (command instanceof WalletCommand) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "            viewWallet();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } else if (command instanceof AddBookmarkCommand) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            AddBookmarkCommand addBookmarkCommand \u003d (AddBookmarkCommand) command;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            addBookmark(addBookmarkCommand.getSymbol());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } else if (command instanceof RemoveBookmarkCommand) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            RemoveBookmarkCommand removeBookmarkCommand \u003d (RemoveBookmarkCommand) command;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            removeBookmark(removeBookmarkCommand.getSymbol());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } else if (command instanceof ViewBookmarkedStocksCommand) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            viewBookmarkedStocks();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private void viewBookmarkedStocks() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        for (String symbol : bookmarksManager.getBookmarks().getBookmarkedStocks()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            searchSymbol(symbol);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public void viewPortfolio() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        ui.view(portfolioManager.getAllStocks());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "    public void viewWallet() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "        double amount \u003d 0.00;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "        for (Stock stock : portfolioManager.getAllStocks()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "                amount +\u003d (stockPriceFetcher.fetchLatestPrice(stock.getSymbol())) * stock.getTotalQuantity();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "                ui.printWithDivider(e.getMessage());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        ui.viewWallet(portfolioManager.getWalletCurrentAmount(), portfolioManager.getWalletInitialAmount(), amount);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaojingle"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public void searchSymbol(String symbol) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            StockData stockData \u003d stockPriceFetcher.fetchLatestStockData(symbol);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            ui.printWithDivider("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                    \"Here is the latest information on \" + symbol + \":\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                    \"date:   \" + stockData.getDateTime(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                    \"open:   \" + stockData.getOpen(),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                    \"high:   \" + stockData.getHigh(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                    \"low:    \" + stockData.getLow(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                    \"close:  \" + stockData.getClose(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                    \"volume: \" + stockData.getVolume()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            );"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            ui.printWithDivider(e.getMessage());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaojingle": 17,
      "trolommonm": 89,
      "yokemin": 70
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DoNotOwnStockException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "public class DoNotOwnStockException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public DoNotOwnStockException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        super(\"You do not own this stock!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "trolommonm": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DukeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "trolommonm": 1,
      "yokemin": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InsufficientFundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "public class InsufficientFundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public InsufficientFundException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        super(\"You have insufficient fund in your wallet. Please try again.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "trolommonm": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InsufficientQtyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "public class InsufficientQtyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public InsufficientQtyException(int quantityOwned) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        super(\"You only own \" + quantityOwned + \" of this stock!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "trolommonm": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Bookmarks.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public class Bookmarks implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private ArrayList\u003cString\u003e bookmarkedStocks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public Bookmarks() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        bookmarkedStocks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public Bookmarks(ArrayList\u003cString\u003e bookmarkedStocks) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        this.bookmarkedStocks \u003d bookmarkedStocks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public ArrayList\u003cString\u003e getBookmarkedStocks() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        return bookmarkedStocks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public void addToBookmarks(String symbol) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        if (bookmarkedStocks.contains(symbol)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            throw new DukeException(\"Already bookmarked this stock!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        bookmarkedStocks.add(symbol);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public void removeBookmark(String symbol) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        if (!bookmarkedStocks.contains(symbol)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            throw new DukeException(\"This stock is not bookmarked!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        bookmarkedStocks.remove(symbol);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yokemin": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/BookmarksManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.InvalidClassException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public class BookmarksManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private Bookmarks bookmarks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public BookmarksManager() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        load();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public Bookmarks getBookmarks() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        return bookmarks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public void addToBookmarks(String symbol) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        bookmarks.addToBookmarks(symbol);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public void removeBookmark(String symbol) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        bookmarks.removeBookmark(symbol);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private void load() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            FileInputStream fis \u003d new FileInputStream(\"data/bookmarks.ser\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            ObjectInputStream ois \u003d new ObjectInputStream(fis);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            bookmarks \u003d (Bookmarks) ois.readObject();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            ois.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            fis.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            bookmarks \u003d new Bookmarks();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } catch (InvalidClassException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            bookmarks \u003d new Bookmarks();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private void save() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            FileOutputStream fos \u003d new FileOutputStream(\"data/bookmarks.ser\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            oos.writeObject(bookmarks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            oos.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            fos.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yokemin": 65
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Portfolio.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.DoNotOwnStockException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.InsufficientFundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.InsufficientQtyException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "public class Portfolio implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    HashMap\u003cString, Stock\u003e stocks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    Wallet wallet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public Portfolio() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        stocks \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        wallet \u003d new Wallet(100000);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        assert getWalletInitialAmount() \u003c\u003d 100000;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public void buyStock(String symbol, int quantity, double buyPrice) throws InsufficientFundException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "        assert buyPrice \u003e 0 : \"buyPrice should be more than 0\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        if (wallet.getCurrentAmount() \u003c buyPrice * quantity) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            throw new InsufficientFundException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        wallet.buyStock(quantity, buyPrice);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        Transaction transaction \u003d new Transaction(TransactionType.BUY, quantity, buyPrice, LocalDateTime.now());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        if (stocks.get(symbol) \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            Stock stock \u003d new Stock(symbol);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            stock.addTransaction(transaction);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            stocks.put(symbol, stock);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            Stock stock \u003d stocks.get(symbol);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            stock.addTransaction(transaction);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public void sellStock(String symbol, int quantity, double sellPrice)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            throws InsufficientQtyException, DoNotOwnStockException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        if (stocks.get(symbol) \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            throw new DoNotOwnStockException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } else if (stocks.get(symbol).getTotalQuantity() \u003c quantity) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            throw new InsufficientQtyException(stocks.get(symbol).getTotalQuantity());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        assert sellPrice \u003e 0 : \"sellPrice should be more than 0\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        wallet.sellStock(quantity, sellPrice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        Transaction transaction \u003d new Transaction(TransactionType.SELL, quantity, sellPrice, LocalDateTime.now());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        Stock stock \u003d stocks.get(symbol);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        stock.addTransaction(transaction);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        if (stock.getTotalQuantity() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            stocks.remove(symbol);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public double getWalletCurrentAmount() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return wallet.getCurrentAmount();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public double getWalletInitialAmount() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return wallet.getInitialAmount();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public ArrayList\u003cStock\u003e getAllStocks() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        ArrayList\u003cStock\u003e stocksArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        for (Stock stock : stocks.values()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            stocksArrayList.add(stock);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return stocksArrayList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaojingle"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaojingle": 1,
      "JunxianAng": 1,
      "trolommonm": 66,
      "yokemin": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/PortfolioManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.DoNotOwnStockException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.InsufficientFundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.InsufficientQtyException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.io.InvalidClassException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "public class PortfolioManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private Portfolio portfolio;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"tp\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public PortfolioManager() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        File directory \u003d new File(\"data\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public void buyStock(String symbol, int quantity, double buyPrice) throws InsufficientFundException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "        logger.log(Level.INFO, \"buying stock ...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        portfolio.buyStock(symbol, quantity, buyPrice);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public void sellStock(String symbol, int quantity, double sellPrice)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            throws InsufficientQtyException, DoNotOwnStockException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "        logger.log(Level.INFO, \"selling stock ...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        portfolio.sellStock(symbol, quantity, sellPrice);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public double getWalletCurrentAmount() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return portfolio.getWalletCurrentAmount();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public double getWalletInitialAmount() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return portfolio.getWalletInitialAmount();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public ArrayList\u003cStock\u003e getAllStocks() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return portfolio.getAllStocks();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private void load() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            FileInputStream fis \u003d new FileInputStream(\"data/portfolio.ser\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            ObjectInputStream ois \u003d new ObjectInputStream(fis);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            portfolio \u003d (Portfolio) ois.readObject();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            ois.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            fis.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            portfolio \u003d new Portfolio();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } catch (InvalidClassException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            portfolio \u003d new Portfolio();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private void save() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            FileOutputStream fos \u003d new FileOutputStream(\"data/portfolio.ser\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            oos.writeObject(portfolio);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            oos.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            fos.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunxianAng": 5,
      "trolommonm": 72,
      "yokemin": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Stock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "import seedu.duke.api.StockPriceFetcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "public class Stock implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private String symbol;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private int totalQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private ArrayList\u003cTransaction\u003e transactions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public Stock(String symbol) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        assert transactions !\u003d null : \"ArrayList of transactions not initialised!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        switch (transaction.getTransactionType()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        case BUY:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            totalQuantity +\u003d transaction.getQuantity();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        case SELL:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            totalQuantity -\u003d transaction.getQuantity();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            assert false : \"How did you end up here?!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        transactions.add(transaction);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public ArrayList\u003cTransaction\u003e getTransactions() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return transactions;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public int getTotalQuantity() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return totalQuantity;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "    public double getLatestPrice() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "        StockPriceFetcher stockPriceFetcher \u003d new StockPriceFetcher();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "            double price \u003d stockPriceFetcher.fetchLatestPrice(getSymbol());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "            return price;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "            ui.print(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "        return \"Symbol: \" + getSymbol() + \", total quantity: \" + getTotalQuantity() + \", Current Price: \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "                + getLatestPrice();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunxianAng": 17,
      "trolommonm": 39,
      "yokemin": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Transaction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "public class Transaction implements Serializable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private TransactionType transactionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private double unitPrice;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    LocalDateTime dateTimeOfTransaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public Transaction(TransactionType transType, int quantity, double unitPrice, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        this.transactionType \u003d transType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        this.unitPrice \u003d unitPrice;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        this.dateTimeOfTransaction \u003d dateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "    public double getUnitPrice() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "        return unitPrice;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public TransactionType getTransactionType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return transactionType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return transactionType + \" \" + quantity + \" at \" + unitPrice + \" on \" + dateTimeOfTransaction;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunxianAng": 4,
      "trolommonm": 17,
      "yokemin": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/TransactionType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public enum TransactionType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    BUY,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    SELL"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yokemin": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Wallet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaojingle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "public class Wallet implements Serializable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private double currentAmount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private double initialAmount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaojingle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public Wallet(double initialAmount) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        this.initialAmount \u003d initialAmount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        currentAmount \u003d initialAmount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaojingle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public double getCurrentAmount() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return currentAmount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public double getInitialAmount() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return initialAmount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaojingle"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "    public void sellStock(int quantity, double price) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        currentAmount \u003d currentAmount + price * quantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaojingle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "    public void buyStock(int quantity, double price) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        currentAmount \u003d currentAmount - (price * quantity);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaojingle": 13,
      "trolommonm": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.AddBookmarkCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.BuyCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.RemoveBookmarkCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.SearchCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.SellCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.ViewBookmarkedStocksCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.command.ViewCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "import seedu.duke.command.WalletCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"tp\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public static Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        logger.log(Level.INFO, \"going to start processing command\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        String[] userInputSplit \u003d userInput.trim().split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        String commandString \u003d userInputSplit[0].toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        switch (commandString) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                return parseSearch(userInputSplit);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                return new InvalidCommand(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        case \"buy\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                return parseBuy(userInputSplit);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                return new InvalidCommand(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        case \"sell\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yokemin"
        },
        "content": "                return parseSell(userInputSplit);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yokemin"
        },
        "content": "                return new InvalidCommand(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            return new ViewCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "        case \"wallet\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "            return new WalletCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        case \"mark\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yokemin"
        },
        "content": "                return parseMark(userInputSplit);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yokemin"
        },
        "content": "                return new InvalidCommand(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        case \"unmark\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yokemin"
        },
        "content": "                return parseUnmark(userInputSplit);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yokemin"
        },
        "content": "                return new InvalidCommand(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        case \"bookmarks\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            return new ViewBookmarkedStocksCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            logger.log(Level.WARNING, \"processing error when parsing command\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            return new InvalidCommand(\"Invalid command! Please try again.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public static Command parseMark(String[] userInputSplit) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            if (!userInputSplit[1].startsWith(\"/\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yokemin"
        },
        "content": "                throw new DukeException(\"Please enter the ticker symbol of the company that you want to mark!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            String symbol \u003d userInputSplit[1].substring(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            return new AddBookmarkCommand(symbol);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            throw new DukeException((\"Wrong input format! E.g. mark /MSFT\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public static Command parseUnmark(String[] userInputSplit) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            if (!userInputSplit[1].startsWith(\"/\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yokemin"
        },
        "content": "                throw new DukeException(\"Please enter the ticker symbol of the company that you want to unmark!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            String symbol \u003d userInputSplit[1].substring(1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            return new RemoveBookmarkCommand(symbol);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            throw new DukeException((\"Wrong input format! E.g. unmark /MSFT\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public static Command parseBuy(String[] userInputSplit) throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            if (!userInputSplit[1].startsWith(\"/\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                throw new DukeException(\"Please enter the ticker symbol of the company that you want to buy!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            int quantity \u003d Integer.parseInt(userInputSplit[2]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            String symbol \u003d userInputSplit[1].substring(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            BuyCommand buyCommand \u003d new BuyCommand(symbol, quantity);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            return buyCommand;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            throw new DukeException((\"Wrong input format! E.g. buy /MSFT 11\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            throw new DukeException(\"Please enter a valid integer for the quantity of stocks that you want to buy!\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    public static Command parseSell(String[] userInputSplit) throws DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            if (!userInputSplit[1].startsWith(\"/\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yokemin"
        },
        "content": "                throw new DukeException(\"Please enter the ticker symbol of the company that you want to buy!\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            int quantity \u003d Integer.parseInt(userInputSplit[2]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            String symbol \u003d userInputSplit[1].substring(1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            SellCommand sellCommand \u003d new SellCommand(symbol, quantity);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            return sellCommand;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            throw new DukeException(\"Wrong input format! E.g. sell /MSFT 11\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            throw new DukeException(\"Please enter a valid integer for the quantity of stocks that you want to sell!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public static Command parseSearch(String[] userInputSplit) throws DukeException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            if (!userInputSplit[1].startsWith(\"/\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                throw new DukeException(\"Please enter the ticker symbol of the company!\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            throw new DukeException((\"Please enter the ticker symbol of the company you would like to search for!\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        SearchCommand searchCommand \u003d new SearchCommand(userInputSplit[1].substring(1));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        return searchCommand;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "    public static double parsePrice(double price) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "        String strPrice \u003d String.format(\"%.2f\", price);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "        double formattedPrice \u003d Double.parseDouble(strPrice);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "        return formattedPrice;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaojingle": 3,
      "JunxianAng": 6,
      "trolommonm": 51,
      "yokemin": 90
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.model.Stock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.model.Transaction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "import seedu.duke.model.TransactionType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yokemin"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private final String dividerLine \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    private final String logo \u003d \"__________                              ___________                  .___\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            + \"\\\\______   \\\\_____  ______   ___________  \\\\__    ___/___________     __| _/____\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            + \" |     ___/\\\\__  \\\\ \\\\____ \\\\_/ __ \\\\_  __ \\\\   |    |  \\\\_  __ \\\\__  \\\\   / __ |/ __ \\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            + \" |    |     / __ \\\\|  |_\u003e \u003e  ___/|  | \\\\/   |    |   |  | \\\\// __ \\\\_/ /_/ \\\\  ___/\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            + \" |____|    (____  /   __/ \\\\___  \u003e__|      |____|   |__|  (____  /\\\\____ |\\\\___  \u003e\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            + \"                \\\\/|__|        \\\\/                              \\\\/      \\\\/    \\\\/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public void greetUser() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        print(logo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        printWithDivider(\"Welcome to the Command Line Paper Trading App!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public void printWithDivider(String... messages) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        print(dividerLine);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        for (String message : messages) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            print(message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        print(dividerLine);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        print(\"What would you like to do today?\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        String userInput \u003d scan.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public void view(ArrayList\u003cStock\u003e stocks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        print(dividerLine);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        if (stocks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            print(\"You currently have an empty portfolio. Try buying a stock!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        for (int i \u003d 0; i \u003c stocks.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            print((i + 1) + \". \" + stocks.get(i).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "            int totalStocksBought \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "            double totalCost \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            for (Transaction t : stocks.get(i).getTransactions()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                print(\"\\t\" + t.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "                if (t.getTransactionType() \u003d\u003d TransactionType.BUY) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "                    totalCost +\u003d t.getUnitPrice() * t.getQuantity();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "                    totalStocksBought +\u003d t.getQuantity();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "            double totalAsset \u003d stocks.get(i).getLatestPrice() * stocks.get(i).getTotalQuantity();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "            double weightedAverageCost \u003d (totalCost / totalStocksBought) * stocks.get(i).getTotalQuantity();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "            print(\"Total holding asset \u003d $\" + Parser.parsePrice(totalAsset));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "            print(\"Total cost \u003d $\" + Parser.parsePrice(weightedAverageCost));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "            if (totalAsset !\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "                double earnings \u003d Parser.parsePrice(totalAsset) - Parser.parsePrice(weightedAverageCost);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "                print(\"Total Profit/Loss \u003d $\" + Parser.parsePrice(earnings));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunxianAng"
        },
        "content": "                print(\"Total Profit/Loss \u003d error!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        print(dividerLine);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public void viewWallet(double currentAmount, double initialAmount, double allStocksPrice) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "        print(dividerLine);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        System.out.println(\"You currently have $\" + String.format(\"%.02f\", currentAmount) + \" in your wallet.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        System.out.println(\"Current market value of all your equities owned: $\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "                + String.format(\"%.02f\", allStocksPrice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        double difference \u003d (currentAmount + allStocksPrice) - initialAmount;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "        if (difference \u003e\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "            System.out.println(\"Profit of: +$\" + String.format(\"%.02f\", difference));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "            System.out.println(\"Loss of : -$\" + String.format(\"%.02f\", Math.abs(difference)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "        print(dividerLine);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaojingle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaojingle"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    public void printStocks(ArrayList\u003cStock\u003e stocks) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        String[] stockNames \u003d new String[stocks.size()];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        for (int i \u003d 0; i \u003c stocks.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            stockNames[i] \u003d (i + 1) + \". \" + stocks.get(i).toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        printWithDivider(stockNames);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaojingle": 9,
      "JunxianAng": 20,
      "trolommonm": 44,
      "yokemin": 25
    }
  },
  {
    "path": "src/test/java/seedu/duke/PaperTradeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "class PaperTradeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "trolommonm": 1,
      "-": 9,
      "yokemin": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/AddBookmarkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wly99"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wly99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wly99"
        },
        "content": "import seedu.duke.command.AddBookmarkCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wly99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wly99"
        },
        "content": "public class AddBookmarkCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wly99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wly99"
        },
        "content": "    public void getSymbol_noInputRequired_symbolString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wly99"
        },
        "content": "        AddBookmarkCommand addBookmarkCommand \u003d new AddBookmarkCommand(\"aapl\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wly99"
        },
        "content": "        assertEquals(addBookmarkCommand.getSymbol(), \"aapl\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wly99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wly99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wly99": 15
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/BookmarksTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yokemin"
        },
        "content": "class BookmarksTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    void addToBookmarks_bookmarkedStock_expectException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        String symbol \u003d \"aapl\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        ArrayList\u003cString\u003e bookmarkedStocks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        bookmarkedStocks.add(symbol);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        Bookmarks bookmarks \u003d new Bookmarks(bookmarkedStocks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            bookmarks.addToBookmarks(symbol);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    void removeBookmark_unbookmarkedStock_expectException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        String symbol \u003d \"aapl\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        ArrayList\u003cString\u003e bookmarkedStocks \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        Bookmarks bookmarks \u003d new Bookmarks(bookmarkedStocks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            bookmarks.removeBookmark(symbol);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yokemin": 33
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/BuyCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wly99"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wly99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wly99"
        },
        "content": "import seedu.duke.command.BuyCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wly99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wly99"
        },
        "content": "public class BuyCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wly99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wly99"
        },
        "content": "    public void getSymbol_noInputRequired_symbolString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wly99"
        },
        "content": "        BuyCommand buyCommand \u003d new BuyCommand(\"aapl\", 10);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wly99"
        },
        "content": "        assertEquals(buyCommand.getSymbol(), \"aapl\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wly99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wly99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wly99"
        },
        "content": "    public void getQuantity_noInputRequired_int() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wly99"
        },
        "content": "        BuyCommand buyCommand \u003d new BuyCommand(\"aapl\", 10);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wly99"
        },
        "content": "        assertEquals(buyCommand.getQuantity(), 10);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wly99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wly99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wly99": 21
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/InvalidCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wly99"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wly99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wly99"
        },
        "content": "import seedu.duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wly99"
        },
        "content": "import seedu.duke.command.SearchCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wly99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wly99"
        },
        "content": "public class InvalidCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wly99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wly99"
        },
        "content": "    public void getSearchKey_noInputRequired_symbolString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wly99"
        },
        "content": "        InvalidCommand invalidCommand \u003d new InvalidCommand(\"Invalid command!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wly99"
        },
        "content": "        assertEquals(invalidCommand.getErrorMessage(), \"Invalid command!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wly99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wly99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wly99": 16
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/PortfolioTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import seedu.duke.api.StockPriceFetcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "import seedu.duke.exception.InsufficientQtyException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yokemin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yokemin"
        },
        "content": "class PortfolioTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    void searchStock_invalidStock_expectException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        StockPriceFetcher stockPriceFetcher \u003d new StockPriceFetcher();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        String symbol \u003d \"zzzzzzz\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "            stockPriceFetcher.fetchLatestStockData(symbol);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trolommonm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    void sellStock_invalidStock_expectException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        Portfolio portfolio \u003d new Portfolio();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        StockPriceFetcher stockPriceFetcher \u003d new StockPriceFetcher();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        String symbol \u003d \"abcdefg\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        int quantity \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        // Use a lambda"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            portfolio.sellStock(symbol, quantity, stockPriceFetcher.fetchLatestPrice(symbol));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    void sellStock_higherQuantityThanBought_expectException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        Portfolio portfolio \u003d new Portfolio();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        StockPriceFetcher stockPriceFetcher \u003d new StockPriceFetcher();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        String symbol \u003d \"aapl\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        int buyQuantity \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        int sellQuantity \u003d 2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yokemin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        // Use a lambda"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trolommonm"
        },
        "content": "        assertThrows(InsufficientQtyException.class, () -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            // buy 1 aapl stock"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            portfolio.buyStock(symbol, buyQuantity, stockPriceFetcher.fetchLatestPrice(symbol));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            // attempt to sell 2 aapl stock"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yokemin"
        },
        "content": "            portfolio.sellStock(symbol, sellQuantity, stockPriceFetcher.fetchLatestPrice(symbol));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yokemin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yokemin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yokemin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "trolommonm": 12,
      "yokemin": 37
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/RemoveBookmarkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wly99"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wly99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wly99"
        },
        "content": "import seedu.duke.command.RemoveBookmarkCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wly99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wly99"
        },
        "content": "public class RemoveBookmarkCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wly99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wly99"
        },
        "content": "    public void getSymbol_noInputRequired_symbolString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wly99"
        },
        "content": "        RemoveBookmarkCommand removeBookmarkCommand \u003d new RemoveBookmarkCommand(\"aapl\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wly99"
        },
        "content": "        assertEquals(removeBookmarkCommand.getSymbol(), \"aapl\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wly99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wly99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wly99": 15
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/SearchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wly99"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wly99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wly99"
        },
        "content": "import seedu.duke.command.SearchCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wly99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wly99"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wly99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wly99"
        },
        "content": "    public void getSearchKey_noInputRequired_symbolString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wly99"
        },
        "content": "        SearchCommand searchCommand \u003d new SearchCommand(\"aapl\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wly99"
        },
        "content": "        assertEquals(searchCommand.getSearchKey(), \"aapl\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wly99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wly99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wly99": 15
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/SellCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wly99"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wly99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wly99"
        },
        "content": "import seedu.duke.command.SellCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wly99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wly99"
        },
        "content": "public class SellCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wly99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wly99"
        },
        "content": "    public void getSymbol_noInputRequired_symbolString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wly99"
        },
        "content": "        SellCommand sellCommand \u003d new SellCommand(\"aapl\", 10);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wly99"
        },
        "content": "        assertEquals(sellCommand.getSymbol(), \"aapl\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wly99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wly99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wly99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wly99"
        },
        "content": "    public void getQuantity_noInputRequired_int() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wly99"
        },
        "content": "        SellCommand sellCommand \u003d new SellCommand(\"aapl\", 10);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wly99"
        },
        "content": "        assertEquals(sellCommand.getQuantity(), 10);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wly99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wly99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wly99": 21
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yokemin"
        },
        "content": "view"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yokemin"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "yokemin": 2
    }
  }
]
