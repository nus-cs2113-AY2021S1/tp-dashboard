[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    implementation \u0027org.apache.commons:commons-lang3:3.5\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        attributes("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \u0027Main-Class\u0027: \u0027seedu.duke.Duke\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        )"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 3,
      "wgzesg": 7,
      "-": 47
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://i.imgur.com/W2LwmOA.png\" width\u003d\"100\" height\u003d\"100\"\u003e | Nguyen Tien Khoa | [Github](https://github.com/tienkhoa16) | [Portfolio](docs/team/tienkhoa.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://i.imgur.com/3pna8mw.png\" width\u003d\"100\" height\u003d\"100\"\u003e | Zeon Chua Feiyi | [Github](https://github.com/CFZeon) | [Portfolio](docs/team/zeon.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://avatars0.githubusercontent.com/u/57080256?s\u003d400\u0026u\u003d677af6062d8d0cdeae80ee9f00b50aa01e2c4b84\u0026v\u003d4\" width\u003d\"100\" height\u003d\"100\"\u003e | Zhang Shukai | [Github](https://github.com/zsk612) | [Portfolio](docs/team/shukai.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://i.imgur.com/1mhi7tF.jpeg\" width\u003d\"100\" height\u003d\"100\"\u003e | Yu Jinyang| [Github](https://github.com/yujinyang1998) | [Portfolio](docs/team/jinyang.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://avatars1.githubusercontent.com/u/53573749?s\u003d400\u0026u\u003d624be60ee5061b89cabc5c04b54795fdd4956a72\u0026v\u003d4\" width\u003d\"100\" height\u003d\"100\"\u003e | Wang Zesong | [Github](https://github.com/wgzesg) | [Portfolio](../docs/team/zesong.md)"
      }
    ],
    "authorContributionMap": {
      "zsk612": 5,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "By: `CS2113T-F11-1` Since: `2020`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Supported Java versions](https://img.shields.io/badge/Java-11-blue.svg) ![Supported OS](https://img.shields.io/badge/Supported%20OS-Windows|MacOS|Linux-yellow.svg) "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Java CI](https://github.com/AY2021S1-CS2113T-F11-1/tp/workflows/Java%20CI/badge.svg)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Introduction**](#intro)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1.1. [Background](#background)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1.2. [Purpose](#purpose)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1.3. [Scope](#scope)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "2. [**Setting Up**](#setting-up)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "2.1. [Prerequisites](#prerequisites)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "2.2. [Setting up the Project in Your Computer](#setting-up-the-project-in-your-computer)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3. [**Design**](#design)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.1. [Architecture](#architecture)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.2. [Ui Component](#ui-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.3. [Logic Component](#logic-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.4. [Model Component](#model-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.5. [Storage Component](#storage-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.6. [Common Classes](#common-classes)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4. [**Implementation**](#implementation)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4.1. [Main Menu-related Features](#main-menu-related-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.1. [Help Command for Main Menu](#main-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.2. [Redirecting to Profile Menu](#redirection-to-profile-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.3. [Redirecting to Diet Menu](#redirection-to-diet-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.4. [Redirecting to Workout Menu](#redirecting-to-workout-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4.2. [Profile-related Features](#profile-related-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.1. [Adding a Profile](#adding-a-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.2. [Viewing a Profile](#viewing-a-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.3. [Editing a Profile](#editing-a-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.4. [Deleting a Profile](#deleting-a-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4.3. [Diet-related Features](#43-diet-related-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.1. [List out all commands](#431-list-out-all-commands)\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2. [Start recording diet data](#432-start-recording-diet-data)\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.1. [Showing help message](#4321-showing-help-message)\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.2. [Adding food items for the current diet](#4322-adding-food-items-for-the-current-diet)\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.3. [Listing data for the current diet](#4323-listing-data-for-the-current-diet)\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.4. [Deleting data from the current diet](#4324-deleting-data-from-the-current-diet)\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.5. [Clearing data from the current diet](#4325-clearing-data-from-the-current-diet)\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.6. [Stopping the recording of diet data](#4326-stopping-the-recording-of-diet-data)\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.3. [List all past diet sessions](#433-list-all-past-diet-sessions)\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.4. [Edit a past diet session](#434-edit-a-past-diet-session)\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.5. [Delete a past diet session](#435-delete-a-past-diet-session)\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.6. [Clear all past diet sessions](#436-clear-all-past-diet-sessions)\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.7. [Exit the diet manager](#437-exit-the-diet-manager)\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4.4. [Workout-related Features](#workout-related-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1. [Creating a New Workout Session](#creating-a-new-workout-session)\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.1. [Adding an Exercise](#adding-an-exercise)\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.2. [Deleting an Exercise](#deleting-an-exercise)\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.3. [Listing All Exercises in This Session](#listing-all-exercises-in-this-session)\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.4. [Allowing users to view help commands](#4414-Allowing-users-to-view-help-commands)\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.5. [Searching for related exercises](#4415-Searching-for-related-exercises)\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.6. [Ending the workout session](#4416-Ending-the-workout-session)\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.2. [Listing past workout sessions](#442-listing-past-workout-sessions)\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.3. [Editing workout session](#443-editing-workout-session)\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.4. [Deleting a workout session](#444-deleting-a-workout-session)\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.5. [Searching based on conditions](#445-searching-based-on-conditions)\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4.5. [Storage](#storage)\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.1. [Storage for Profile](#storage-for-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.2. [Storage for Diet](#storage-for-diet)\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.3. [Storage for Workout](#storage-for-workout)\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4.6. [Logging](#logging)\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  * [**Appendices**](#appendices)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix A: Product Scope](#appendix-a-product-scope)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix B: User Stories](#appendix-b-user-stories)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix C: Value proposition - Use cases](#appendix-c-value-proposition---use-cases)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix D: Non-Functional Requirements](#appendix-d-non-functional-requirements)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix E: Glossary](#appendix-e-glossary)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix F: Instructions for Manual Testing](#appendix-f-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    + [Appendix G: Supported Formats of Date Input](#appendix-g-supported-formats-of-date-input)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "## 1. \u003ca id\u003d\"intro\"\u003eIntroduction\u003c/a\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 1.1.  \u003ca id\u003d\"background\"\u003eBackground\u003c/a\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The Schwarzenegger is a desktop command line interface-based app for managing all your needs regarding fitness. With the built-in personal assistant, you are able to track your daily workout and diet sessions based on your profile. If you can type fast, The Schwarzenegger can help you maximise your efficiency for maintaining fitness."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 1.2. \u003ca id\u003d\"purpose\"\u003ePurpose\u003c/a\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This document contains the specified architecture and software design specifications for the application, The Schwarzenegger. "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 1.3. \u003ca id\u003d\"scope\"\u003eScope\u003c/a\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This document describes the software architecture and software design requirements for The Schwarzenegger. This guide is mainly for developers, designers and software engineers that are or going to work on The Schwarzenegger. "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "## 2. \u003ca id\u003d\"setting-up\"\u003eSetting Up\u003c/a\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 2.1. \u003ca id\u003d\"prerequisites\"\u003ePrerequisites\u003c/a\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. JDK `11`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. IntelliJ IDEA IDE."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 2.2. \u003ca id\u003d\"setting-up-the-project-in-your-computer\"\u003eSetting up the Project in Your Computer\u003c/a\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Fork [this repository](https://github.com/AY2021S1-CS2113T-F11-1/tp), and clone the fork to your computer."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "2. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Set up the correct JDK version for Gradle  "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "   2. If `JDK 11` is listed in the drop down, select it. Otherwise, click `New…` and select the directory where you installed `JDK 11`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "   3. Click `OK`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. Click `Import Project`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "5. Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "6. Click `Open as Project`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "7. Click `OK` to accept the default settings if prompted. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "## 3. \u003ca id\u003d\"design\"\u003eDesign\u003c/a\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This section provides a high level overview of our application, The Schwarzenegger."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.1. \u003ca id\u003d\"architect\"\u003eArchitecture\u003c/a\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Architecture](pictures/zesong/Architecture.png)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The image above explains the design of the application, The Schwarzenegger. "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The main driver of the application is `Main: Duke`. It is responsible for mainly two phases:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- At application launch"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    - This class will initialise the components in the correct sequence and is in charge of connecting them with each other."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- At shut down"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    - This class will invoke cleanup method for the components when necessary."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "In addition to that, the architecture of The Schwarzenegger is broken down into several packages, mainly the following: "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- `Ui`: This class mainly handles the interactions with user of the application."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Parser`: This class mainly handles the parsing and handling of user commands."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Command`: This class handles the type of command."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Profile`: This class manages the data of the user."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Diet`: This class manages the diet recording sessions."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Workout`: This class manages the data workout recording sessions."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Storage`: This class reads data from and writes data back into a text file for future uses."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.2. \u003ca id\u003d\"ui-component\"\u003eUi Component\u003c/a\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Ui Component](images/UI_Component.png)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "API: `Ui.java`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CFZeon"
        },
        "content": " "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The `Ui` package is a combination class where all interaction will be made through this component"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CFZeon"
        },
        "content": " "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The `Ui` component,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Takes in user input"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Prints out response messages"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3. \u003ca id\u003d\"logic-component\"\u003eLogic Component\u003c/a\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Logic Component](images/logic_update.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. `The Schwarzenegger` uses `Parser` classes to parse the user command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. This splits the user input into interpretable portions by other functions."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4. \u003ca id\u003d\"model-component\"\u003eModel Component\u003c/a\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "![Model Component](pictures/zesong/model.png)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The Model component contains `Profile`, `DietManager`,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "`PastRecord` and `WorkoutSession` classes."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "* Profile: Stores the user profile data."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "* DietManager: Stores all past diet records."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "* PastRecord: Stores meta information of each WorkoutSession files."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "* WorkoutSession: Stores the exercise data done in each workout session."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.5. \u003ca id\u003d\"storage-component\"\u003eStorage Component\u003c/a\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Storage Class Diagram](images/Storage.png)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Profiles, Diet sessions and Workout sessions are stored in separate folders. "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The Storage package contains subpackages for profile, diet manager and workout manager."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The readDietSession() method in storage.diet package is used for loading saved diet sessions, which are loaded when the user wants to edit a past diet session."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "readPastRecords() and readFileContents() methods in storage.workout package are used for loading saved workout managers and workout sessions respectively. It is called when the user accesses the workout manager."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "loadData() from storage.profile is used to load user profile data and is called when the program starts up. "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The writeToStorageDietSession() method in storage.diet package saves the diet session and is called when the user exits it."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "writePastRecords() and writeToStorage() methods in storage.workout package are used to save the workout managers and workout sessions respectively. It is called when the user exists the workout manager."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The saveData() method in storage.profile is called after the user creates the user profile or edits it."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "readData() is storage.profile is called when duke starts up."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.6. \u003ca id\u003d\"common-classes\"\u003eCommon Classes\u003c/a\u003e "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Classes used by multiple components are in the `seedu.duke` and the `ui` package, specifically Constant.java and CommonUi.java."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "## 4. \u003ca id\u003d\"implementation\"\u003eImplementation\u003c/a\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This section describes some details on how the features are being implemented. All profile/ diet/ workout-related features."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "All profile/ diet/ workout-related features can be broken down into 4 distinct functionality, addition, viewing/ listing, deletion and editing."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "For diet and workout-related features, there is an additional functionality of searching."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 4.1. \u003ca id\u003d\"main-menu-related-features\"\u003eMain Menu-related Features\u003c/a\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.1.1. \u003ca id\u003d\"main-help\"\u003eHelp Command for Main Menu\u003c/a\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The `help` command allows users to view all the available commands in the main page. The command for showing help message is `help`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.1.2. \u003ca id\u003d\"redirecting-to-profile-menu\"\u003eRedirecting to Profile Menu\u003c/a\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The redirection to profile page allows the user to enter Profile Menu to create, edit, view and delete user profile. The command for this redirection is `profile`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.1.3. \u003ca id\u003d\"redirecting-to-diet-menu\"\u003eRedirecting to Diet Menu\u003c/a\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The redirection to profile page allows the user to enter Diet Menu to create, edit, list and delete diet sessions. The command for this redirection is `diet`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.1.4. \u003ca id\u003d\"redirecting-to-workout-menu\"\u003eRedirecting to Workout Menu\u003c/a\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The redirection to profile page allows the user to enter Workout Menu to create, edit, list and delete workout sessions. The command for this redirection is `workout`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 4.2. \u003ca id\u003d\"profile-related-features\"\u003eProfile-related Features\u003c/a\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.2.1. \u003ca id\u003d\"adding-a-profile\"\u003eAdding a Profile\u003c/a\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This feature allows user to add a new profile. The failure to do so will trigger an exception where the user will be notified of the reason, e.g. invalid command format. The action will be aborted, and the program will advise the user to type \"help\" for command syntax reference. "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "If the creation is successful, a confirmation message on the newly created profile will be displayed to the user. "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "When the user attempts to add a new profile, the ProfileSession, Ui, ProfileParser, Command, CommandLib, ProfileStorage, Profile and CommandResult classes will be accessed, and the following sequence of actions is called to prompt execution result to user:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. User executes `add /n Schwarzenegger /h 188 /w 113 /e 100 /c 2500`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `Ui.getCommand()` to receive user input."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `ProfileParser.parseCommand()` to parse user input into a string array."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Creating `ProfileAdd` object."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. Based on the parsed input, `ProfileSession` calls `CommandLib` to return the correct Command Object `ProfileAdd`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Executing command."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `ProfileAdd.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileAdd` calls `ProfileStorage.loadData()` to load existing profile in the system. If there is an existing profile, `ProfileAdd` returns a failure result to `ProfileSession`. Otherwise, the process continues with step `iii`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileAdd` calls `ProfileParser.extractCommandTagAndInfo()` to parse user input into specific tags and information. "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. Based on the parsed information from `ProfileParser.extractCommandTagAndInfo()`, `ProfileAdd` creates a new `Profile`."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileAdd` calls `ProfileStorage.saveData()` to save the `Profile` object."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileAdd` returns a successful result to `ProfileSession`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Prompting result to user."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `Ui.showToUser()` to show result to the user."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "All descriptions, warnings and responses will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The sequence diagram below summarizes how creating a new profile works:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "![Load Data Sequence Diagram](pictures/khoa/AddProfile.png)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Design considerations**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Parsing of the user’s input command:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 1 (current choice): User’s command is split into size 2 array first containing command type and command arguments. Then arguments are split into command tag and information pairs.  "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | Command tags do not have to follow a fixed order.|"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Cons** | It takes multiple steps in parsing the command.|"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 2: User’s command is divided by space"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                 "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | The parsing can be easily done by calling Java built-in function .split(). Supports multiple tags or no tags.|"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Cons** | Values for each variable cannot contain spaces which makes the application restrictive, especially for user\u0027s name.|"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.2.2. \u003ca id\u003d\"viewing-a-profile\"\u003eViewing a Profile\u003c/a\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This feature allows user to view added profile with calculated BMI based on height and weight. The failure to do so will trigger an exception where the user will be notified of the reason, e.g. redundant parameters. The action will be aborted, and the program will advise the user to type \"help\" for command syntax reference. "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "If the data loading is successful, a message on the added profile will be displayed to the user. "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "When the user attempts to view an added profile, the ProfileSession, Ui, ProfileParser, Command, CommandLib, ProfileStorage, Profile, DietManager and CommandResult classes will be accessed. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. User executes `view`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. ProfileSession` calls `ProfileParser.parseCommand()` to parse user input into a string array."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Creating `ProfileView` object."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. Based on the parsed input, `ProfileSession` calls `CommandLib` to return the correct Command Object `ProfileView`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Executing command."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `ProfileView.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileView` calls `ProfileStorage.loadData()` to load existing profile in the system. If there is no existing profile, `ProfileView` returns a failure result to `ProfileSession`. Otherwise, the process continues with step `iii`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileView` calls `DietManager.getTodayTotalCalories()` to get user\u0027s calories intake today."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. Based on user\u0027s calories intake today and string representation of `Profile`, `ProfileView` returns a result to `ProfileSession`.    "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Prompting result to user."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `CommandResult.getCommandResult()` to get the `CommandResult` object."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `Ui.showToUser()` to show result to the user."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "All descriptions, warnings and responses will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The sequence diagram below summarizes how viewing an added profile works:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "![Load Data Sequence Diagram](pictures/khoa/ViewProfile.png)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Design considerations**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Aspects: Loading of stored data"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 1 (current choice): call public methods of Storage class to "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "load the profile from hard disk every time the user wants to view profile."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | Profile data is up-to-date if the user prefers to edit it in text file rather than using commands in The Schwarzenegger.|  "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Cons** | Execution time is slow down due to multiple times of loading the data.|"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 2: call public methods of Storage class to load the profile from hard disk only when user enters Profile Menu."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | Execution time is fast.|  "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Cons** | Profile data is not updated in real time if user edits it in text editor while running The Schwarzenegger.|"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.2.3. \u003ca id\u003d\"editing-a-profile\"\u003eEditing a Profile\u003c/a\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This feature allows user to anytime go back to edit a profile created in the past such as editing physique data and expected daily calories intake. The failure to do so will trigger an exception where the user will be notified of the reason, e.g. invalid command format. The action will be aborted, and the program will advise the user to type \"help\" for command syntax reference. "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "If the editing is successful, a confirmation message on the edited profile will be displayed to the user. "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "When the user attempts to edit a profile, the ProfileSession, Ui, ProfileParser, Command, CommandLib, ProfileStorage, Profile and CommandResult classes will be accessed, and the following sequence of actions is called to prompt execution result to user:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. User executes `edit /w 60`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `Ui.getCommand()` to receive user input."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `ProfileParser.parseCommand()` to parse user input into a string array."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Creating `ProfileEdit` object."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. Based on the parsed input, `ProfileSession` calls `CommandLib` to return the correct Command Object `ProfileEdit`."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Executing command."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `ProfileEdit.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileEdit` calls `ProfileStorage.loadData()` to load existing profile in the system. If there is no existing profile, `ProfileAdd` returns a failure result to `ProfileSession`. Otherwise, the process continues with step `iii`."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileEdit` calls `ProfileParser.extractCommandTagAndInfo()` to parse user input into specific tags and information."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. Based on the parsed information from `ProfileParser.extractCommandTagAndInfo()`, `ProfileEdit` creates a new `Profile`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileEdit` calls `Profile.equals()` to compare the edited and existing profile. If there are no changes, `ProfileEdit` returns a failure result to `ProfileSession`. Otherwise, the process continues with step `vi`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileEdit` calls `ProfileStorage.saveData()` to save the edited `Profile` object."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileAdd` returns a successful result to `ProfileSession`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Prompting result to user."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `Ui.showToUser()` to show result to the user."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "All descriptions, warnings and responses will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The sequence diagram below summarizes how creating a new profile works:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "![Load Data Sequence Diagram](pictures/khoa/EditProfile.png)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Design considerations**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Parsing of the user’s input command:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 1 (current choice): User’s command is split into size 2 array first containing command type and command arguments. Then arguments are split into command tag and information pairs.  "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | Command tags do not have to follow a fixed order.|"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Cons** | It takes multiple steps in parsing the command.|"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 2: User’s command is divided by space"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                 "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | The parsing can be easily done by calling Java built-in function .split(). Supports multiple tags or no tags.|"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Values for each variable cannot contain spaces which makes the application restrictive.|"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.2.4. \u003ca id\u003d\"deleting-a-profile\"\u003eDeleting a Profile\u003c/a\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This feature allows user to delete a profile created in the past. The failure to do so will trigger an exception where the user will be notified of the reason, e.g. redundant parameters. The action will be aborted, and the program will advise the user to type \"help\" for command syntax reference. "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "If the deletion is successful, a confirmation message on the profile deletion will be displayed to the user. "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "When the user attempts to delete an added profile, the ProfileSession, Ui, ProfileParser, Command, CommandLib, ProfileStorage, Profile and CommandResult classes will be accessed. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. User executes `delete`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. ProfileSession` calls `ProfileParser.parseCommand()` to parse user input into a string array."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Creating `ProfileDelete` object."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "   1. Based on the parsed input, `ProfileSession` calls `CommandLib` to return the correct Command Object `ProfileDelete`."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Executing command."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `ProfileDelete.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileDelete` calls `ProfileStorage.loadData()` to load existing profile in the system. If there is no existing profile, `ProfileDelete` returns a failure result to `ProfileSession`. Otherwise, the process continues with step `iii`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileDelete` calls `Ui.CheckConfirmation()` to get user\u0027s confirmation on the deletion since this action is irrevocable. If user  fails to confirm, `ProfileDelete` returns an abort result to `ProfileSession`. Otherwise, the process continues with step `iv`."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileDelete` calls `ProfileStorage.saveData()` to save a `null` object which represents a deleted profile."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileDelete` returns a result to `ProfileSession`.   "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Prompting result to user."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `Ui.showToUser()` to show result to the user."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "All descriptions, warnings and responses will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The sequence diagram below summarizes how deleting an added profile works:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "![Load Data Sequence Diagram](pictures/khoa/DeleteProfile.png)"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Design considerations**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Aspects: Loading of stored data"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 1 (current choice): call public methods of Storage class to load the profile from hard disk every time the user wants to delete profile."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | Profile data is up-to-date if the user prefers to edit it in text file rather than using commands in The Schwarzenegger.|  "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Cons** | Execution time is slow down due to loading the data.|"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 2: call public methods of Storage class to load the profile from hard disk when user enter Profile Menu."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | Execution time is fast.|  "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Cons** | Profile data is not updated in real time if user edits it in text file while running The Schwarzenegger.|"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 4.3. Diet-related Features"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.1. Listing out all commands: `help`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This command lists out all help commands in a typed list that indicates to the user all the commands available and how to use them."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**  "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `help` in a Diet Manager instance, the following sequence occurs. "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `help`."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of `DietSessionHelp` command object from input"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a `DietSessionHelp()` instantiation of which the method `execute()` is called."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The execute() method will call print out the list of commands onto the console with printHelpFormatter() from static CommonUi.java."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2. Start recording diet data: `new`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to start recording diet data. "
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**  "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zsk612"
        },
        "content": "When the user types `new \u003c/d [DATE]\u003e \u003c/t [TAG]\u003e` the following sequence occurs. "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `new /d 2020-05-04 /t breakfast`."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`, which splits the input into the `command` and the `input`.   "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create an instantiation DietSessionCreate() command object of which the method execute() is called."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The newly created object will then create an instantiation of a `DietSession`, and call the `start()` method."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zsk612"
        },
        "content": "The sequence diagram below summarizes how creating new diet session works:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zsk612"
        },
        "content": "![Load Data Sequence Diagram](pictures/Shukai/CreateDietSession.png)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2.1. Showing help message: `help`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This command lists out all help commands in a typed list that indicates to the user all the commands available and how to use them."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**  "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `help` the following sequence occurs. "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `help`."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` instantiation calls `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a `FoodItemHelp()` instantiation of which the method `execute()` is called."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The newly created object will then print out the list of commands onto the console with printHelpFormatter() from static CommonUi.java."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2.2. Adding food items for the current diet: `add`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to add food items into the current diet session. "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**  "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "zsk612"
        },
        "content": "When the user types `add [FOOD_NAME] /c [CALORIES]` the following sequence occurs. "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `add bologna /c 123`."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a `FoodItemAdd()` instantiation of which the method `execute()` is called."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The food component `bologna` and calories component `123` are passed into the constructor of a Food instantiation."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The newly created food object will then be added to the `ArrayList\u003cFood\u003e foodList` in diet session."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The sequence diagram below summarizes how adding a new food to the diet session works:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Load Data Sequence Diagram](pictures/Zeon/FoodItemAdd.png)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2.3. Listing data for the current diet: `list`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This command allows users to view all food items in the current diet session. "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**  "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `list` the following sequence occurs. "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `list`."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The input is then parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a FoodItemList() instantiation of which the method execute() is called."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A for loop iterates through the entire ArrayList\u003cFood\u003e and prints out every item with their calories."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The total calories of the current meal is also printed."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2.4. Deleting data from the current diet session: `delete`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to remove food items into the current diet session. "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**  "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "zsk612"
        },
        "content": "When the user types `delete [INDEX_OF_FOOD]` the following sequence occurs. "
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `delete 1`."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a `FoodItemDelete()` instantiation of which the method execute() is called."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The Food ID according to the index based on the ArrayList\u003cFood\u003e is deleted."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2.5. Clearing all data from the current diet session `clear`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to remove food items into the current diet session. "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**  "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `clear` the following sequence occurs. "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `clear`."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a FoodItemClear() instantiation of which the method execute() is called."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The ArrayList Clear method is called and removes all Food entries from the ArrayList."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2.6. Stopping the recording of diet session data: `end`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to end the current diet session and return back to the diet manager."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**  "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `end` the following sequence occurs. "
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `end`."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Exiting of inputLoop()"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    The inputLoop() exits when userInput.equals(\"end\")."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.3. List all past diet sessions: `list`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to view all past created diet sessions."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**  "
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `list` in a diet manager instance the following sequence occurs. "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `list`."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a FoodItemList() instantiation of which the method execute() is called."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A for loop iterates through the entire ArrayList\u003cFood\u003e and prints out every item with their calories."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The sequence diagram below summarizes how listing past Diet sessions work:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Load Data Sequence Diagram](pictures/Zeon/DietSessionList.png)"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.4. Edit a past diet session: `edit`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to edit previously created diet sessions."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**  "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "zsk612"
        },
        "content": "When the user types `edit [INDEX_OF_SESSION]` the following sequence occurs. "
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `edit 1`."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of `DietSessionEdit` command object from input"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionEdit()` command class instantiation is created and the execute() method is called."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will call `readDietSession()` from `storage.diet.DietStorage` and it reads the file stored at `saves/diet`."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The `start()` method is then called in the diet session, starting a diet session instance."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. After Execution"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The diet session instance is then saved by calling `writeToStorageDietSession()` from `DietStorage`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "zsk612"
        },
        "content": "The sequence diagram below summarizes how editing Diet session works:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "zsk612"
        },
        "content": "![Load Data Sequence Diagram](pictures/Zeon/DietSessionEdit.png)"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "**Design considerations**"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Saving of the user’s Diet sessions:  "
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 1 (current choice): Saving at the end of a diet session"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | The cost of saving is low, file writes only happen once per Diet session instance|"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | If any crashes occur during a diet session, no input data will be saved|"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Saving during any alterations made to the Diet session"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | The files will still be saved even if a crash occurs|  "
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Saving often might be taxing on the user\u0027s computer especially on slower models|"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.5. Delete a previously created diet session: `delete`"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to delete previously created diet sessions."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**  "
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "zsk612"
        },
        "content": "When the user types `delete [INDEX_OF_SESSION]` from a Diet manager instance the following sequence occurs. "
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `delete 1`."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The input is then parsed in `processCommand()` which splits the input into a command portion and the input parameters.   "
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of `DietSessionDelete()` command object from input"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The `CommandLib` is referenced to find information on `DietSessionDelete()`."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    2. A `DietSessionDelete()` command class instantiation is created and the `execute()` method is called."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `DietSessionDelete()` will then delete the diet session at index `1` based on the `list` command."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The sequence diagram below summarizes how Diet sessions are deleted:"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Delete_Diet_Session_Sequence_Diagram](pictures/Zeon/DietSessionDelete.png)"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.6. Edit a past diet session: `clear`"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to clear all previously created diet sessions at once."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**  "
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `clear` the following sequence occurs. "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `clear`."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of `DietSessionClear()` command object from input"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The `CommandLib` is referenced to find information on `DietSessionClear()`."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    2. A `DietSessionClear()` command class instantiation is created and the `execute()` method is called."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will iterate through every file in saves/diet/ and delete it."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The sequence diagram below summarizes how Diet sessions are all cleared:"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Delete_Diet_Session_Sequence_Diagram](pictures/Zeon/DietSessionClear.png)"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.7. Exit the Diet manager: `end`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The function returns the user back to the main menu of The Schwarzenegger."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**  "
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `end` the following sequence occurs. "
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `end`."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.  "
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Exiting of inputLoop()"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    The inputLoop() exits when userInput.equals(\"end\"), returning to the `Start()` method, then ending the `DietManager` instance."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 4.4. \u003ca id\u003d\"workout-related-features\"\u003eWorkout-related Features\u003c/a\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.4.1. \u003ca id\u003d\"creating-a-new-workout-session\"\u003eCreating a New Workout Session\u003c/a\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Users can create a new workout session. The failure to do so will trigger an exception where the user will be notified "
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "of the reason, e.g. invalid command or IO related errors. The action will be aborted. If the creation is successful, "
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "the user will go into the new workout session to edit the exercises in that session."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The user can specify tags for the session. Creation time, last edit time and saving file name will be auto generated "
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "by the application and saved. "
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When the user attempts to create a new workout session, the Ui, WorkoutManagerParser "
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "and CommandLib class will be accessed and the following sequence of "
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "actions are called to return a command object NewWs."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. User executes `new /t leg chest`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `NewWs`."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `NewWS.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `NewWS` parse the arguments to identify the tags"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    3. `NewWS` calls `PastRecordList.add()` to create a new file to store information in this session. "
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    If the creation fails, the action is aborted. Else, this record will be stored and the file path will "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    be returned."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    4. `NewWS` creates a new `WorkoutSession` Object with the file path. "
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    5.  `NewWS` calls `workoutSession. workoutSessionStart()` so that user can add information into this session."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    6. After user exits this workout, `WorkoutManager` returns a `CommandResult`."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. Based on `CommandResult`, correct response will be printed to user."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "All description, warnings and response will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The following sequence diagram shows how the new command works"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The sequence diagram below summarizes how creating new workout session works:"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "![Load Data Sequence Diagram](pictures/zesong/NewWS.png)"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Design considerations**"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Parsing of the user’s input command:  "
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "zsk612"
        },
        "content": "- Alternative 1 (current choice): User’s commands are divided by space"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | The parsing can be easily done by calling Java built-in function .split(). Supports multiple tags or no tags.|"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Values for each variable cannot contain spaces which makes the application restrictive.|"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Multiple prompts for user’s input of a workout data"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Users would not have to make sure that their command is syntactically right.|  "
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | The constant prompting could subject the application to a negative experience in the difficulty to use the commands.|"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.4.1.1. \u003ca id\u003d\"adding-an-exercise\"\u003eAdding an Exercise\u003c/a\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Users can add a new exercise. The failure to do so will trigger an exception where the user will be notified of "
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "the reason, e.g. invalid command or IO related errors. The action will be aborted. If the addition is successful, "
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "a new exercise will be added to the exerciselist."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "When the user attempts to add a new exercise, the Ui, WorkoutSessionParser "
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "and CommandLib class will be accessed and the following sequence of "
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "actions are called."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "1. User executes `add benchpress /n 6 /w 120`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     1. `WorkoutSession` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     2. `WorkoutSession` calls `WorkoutSessionParser.workoutSessionParser` to convert the input to a string array."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `WorkoutSessionAdd`."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    1. `WorkoutManager` calls `WorkoutSessionAdd.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    2. `WorkoutSessionAdd` parse the arguments to identify the repetitions and weight for the exercise."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    3. `WorkoutSessionAdd` calls `WorkOutSession.Storage.writeToFile()` to store information of all exercises recorded. "
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "All description, warnings and response will be handled by `ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The following sequence diagram shows how the add command works"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The sequence diagram below summarizes how creating new workout session works:"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "![Load Data Sequence Diagram](pictures/jinyang/WorkoutSessionAdd.png)"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.4.1.2. \u003ca id\u003d\"deleting-an-exercise\"\u003eDeleting an Exercise\u003c/a\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Users can delete an exercise from a pre-existing list of exercise. The failure to do so will trigger an exception where the user will be notified of "
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "the reason, e.g. invalid command or IO related errors. The action will be aborted. If the addition is successful, "
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "a new exercise will be added to the exerciselist."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "When the user attempts to delete an exercise, the Ui, WorkoutSessionParser "
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "and CommandLib class will be accessed and the following sequence of "
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "actions are called to return a command object NewWs."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "1. User executes `delete 1`"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     1. `WorkoutSession` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     2. `WorkoutSession` calls `WorkoutSessionParser.workoutSessionParser` to convert the input to a string array."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `WorkoutSessionDelete`."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    1. `WorkoutManager` calls `WorkoutSessionDelete.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    2. `WorkoutSessionDelete` parse the arguments to identify the repetitions and weight for the exercise."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    3. `WorkoutSessionDelete` calls `WorkOutSession.Storage.writeToFile()` to store information of all exercises recorded. "
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "All description, warnings and response will be handled by `ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The following sequence diagram shows how the add command works"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The sequence diagram below summarizes how creating new workout session works:"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "![Load Data Sequence Diagram](pictures/jinyang/WorkoutSessionDelete.png)"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.4.1.3. \u003ca id\u003d\"listing-all-exercises-in-this-session\"\u003eListing All Exercises in This Session\u003c/a\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "![Load Data Sequence Diagram](pictures/jinyang/WorkoutSessionList.png)"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "#### 4.4.1.4. Allowing users to view help commands"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "![Load Data Sequence Diagram](pictures/jinyang/WorkoutSessionHelp.png)"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "#### 4.4.1.5. Searching for related exercises"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "![Load Data Sequence Diagram](pictures/jinyang/WorkoutSessionSearch.png)"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "#### 4.4.1.6. Ending the workout session"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "![Load Data Sequence Diagram](pictures/jinyang/WorkoutSessionEnd.png)"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "#### 4.4.2. Listing past workout sessions"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature to list workoutSessions allows the user to view a summary of all the history workout sessions, including their index, creation date and tags."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user attempts to list workoutSessions, the WorkoutManger, WorkoutManagerParse, ListWS and WorkoutManagerStorage class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. User executes `list /s 20201010 /e 20201025`"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `ListWS`."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `ListWS.execute()` to execute the command"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    3. `ListWS` calls `PastRecordList.list()`"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `PastRecordList` will return formatted list."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    6. `WorkoutManager` returns a `CommandResult` which contains the formated list and execution result."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. Based on `CommandResult`, correct response will be printed to user."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Load Data Sequence Diagram](pictures/zesong/ListWS.png)"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Design considerations**"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Aspects: Security of stored data"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 1 (current choice): call public methods of Storage class to "
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "print the list"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | pastRecord are private and it can only be manipulated through designed public methods. Only selected data will be printed and viewed.|  "
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Most methods Storage needs to be a static.|"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 2: Storage return a readonly list of pastRecord."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | More versatile operations can be done.|  "
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | All data of pastRecord will be exposed.|"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "#### 4.4.3. Editing workout session"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "User can anytime go back to edit a workout session created in the past such as"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "adding or removing exercies in that session."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Each past workout session is stored in a different file name following its creation time."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The meta information of these past records such as file name, creation time are"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "stored in another file which will be loaded as the program initlises."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The actual workout session record will only be loaded if needed e.g. when editting is called. "
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user attempts to edit a past workout session, the Ui, WorkoutManagerParser, CommandLib and WorkoutStorage class will be accessed and the following sequence of "
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "actions are called."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. User executes `edit 1`"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `EditWS`."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `EditWS.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    3. `EditWS` calls `PastRecordList.edit()` to locate the file. If the does not exist, the action is aborted. Else, `PastRecordList` updates the meta information of the file and write to local storage. The file path will be returned."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    4. `EditWS` creates a new `WorkoutSession` Object with the file path. `WorkoutSession` is initilised by loading the data in the file."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    5.  `EditWS` calls `workoutSession.workoutSessionStart()` so that user start editing this session."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    6. After user exits this workout, `WorkoutManager` returns a `CommandResult`."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. Based on `CommandResult`, correct response will be printed to user."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "All description, warnings and response will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The following sequence diagram shows how the new command works"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The sequence diagram below summarizes how editting past record works:"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "![Load Data Sequence Diagram](pictures/zesong/EditWS.png)"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Design considerations**"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Past record storage and model design:  "
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 1 (current choice): store past workout sessions in different files and their "
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "meta information in a separate file"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Initialization will be faster as data loaded grows little even in long terms.|"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Deleting files and creating files need to handle file names carefully.|"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Load all past records during initilization."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Run time can retrieve data faster as there is no need to access data in hard disk.|  "
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | The application initialization will grow quickly as the application scales.|"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "#### 4.4.4. Deleting a workout session"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "User can delete a workout session created in the past by giving its index."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Each past workout session is stored in a different file name following its creation time. The meta information of these past records such as file name, creation time are stored in another file which will be loaded as the program initlises. When the user tries to delete a file, the application refers to the meta information of the file to locate the file and delete it. Then the meta information of the record will be deleted."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "User can clear all data by iteratively delete the record until the meta data file is empty. To simplify that, user can use `clear` command to achieve that."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When the user attempts to delete a past workout session, the Ui, WorkoutManagerParser, CommandLib"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "and WorkoutStorage class will be accessed and the following sequence of actions are called."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. User executes `delete 1` or `clear`"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `DeleteWS`"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     or `clearWS`."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `DeleteWS.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    3. `DeleteWS` calls `PastRecorList.delete()` to locate the file. If the does not exist, the action is aborted. Else, `PastRecorList` remove the meta information of the file and delete the local storage file."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    6. After user exits this workout, `WorkoutManager` returns a `CommandResult`."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. Based on `CommandResult`, correct response will be printed to user."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "All description, warnings and response will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The sequence diagram below summarizes how deleting past record works:"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Load Data Sequence Diagram](pictures/zesong/DeleteWS.png)"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Design considerations**"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 1 (current choice): Delete `workoutSession` by specifying index of it."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Quick and easy deletion by using ArrayList.get().|"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | DLesser alternatives for the user and user would have to identify the index first by executing `list` to get index of the session to be deleted.|"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 2: Delete `workoutSession` by specifying `workoutSession` tags or dates."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | More alternatives for users. Can bulk delete files with certain attributes|  "
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Tags and dates does not uniquely identify the record hence may result in accidental wrong deletion|"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "#### 4.4.5. Searching based on conditions"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The feature `search` allows the user to view a summary of all the history "
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "workout sessions which satisfies certain conditions."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The user can search by the date of creation, or the tags that the session has. User can put in 0"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "or 1 or 2 criteria during search. "
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The user can attach variable number of tags after `/t` and one date after `/d`. The date must be specified in certain formats for it to be recognisable. Else, it will be treated as there is no date criteria given."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[See here](#appendix-g-supported-formats-of-date-input) for all supported formats."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The tag criterion selects sessions which contains all the tags that the user specified in the search. The date criterion selects the sessions which is created on that date. Only sessions that satisfies all conditions will be selected and displayed."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The result is displayed in a table with the index of the selected records so that users can easily do further operations on them, e.g. `delete` or `edit`."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " "
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "CFZeon"
        },
        "content": " **Implementation**"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "CFZeon"
        },
        "content": " "
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user attempts to list workoutSessions, the WorkoutManger, DeleteWS, WorkoutManagerStorage and WorkoutManagerParse class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. User executes `search /t leg /d 20201017`"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `SearchWS`."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `SearchWS.execute()` to execute the command"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    3. `SearchWS` calls `PastRecorList.search()`"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `PastRecorList` will call `WorkoutManagerParser.parse` to parse the arguments into an array of predicates"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `PastRecorList` filters the pastRecord arraylist and return a string representation of the filtered records to `WorkoutManager`"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    6. `WorkoutManager` returns a `CommandResult`."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. Based on `CommandResult`, correct response will be printed to user."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The sequence diagram below summarizes how searching record works:"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "![Load Data Sequence Diagram](pictures/zesong/SearchWS.png)"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Design considerations**"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Aspects: indexing the selected results"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The index of a record is not stored in the schema because it easily varies with addition and deletion. Thus given a record, searching for its index will have higher time complexity."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 1 (current choice): print out the actual index of the record "
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "in the meta info file."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | The index is useful for user to use for future actions.|  "
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Checking for the actual location complicates the search time complexity.|"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 2: print out the index of the element in the result list."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Easy to implement. Low time complexity|  "
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Since the index in result list is not the same as the index in actual record meta, user cannot use the index for further actions|"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 4.5. \u003ca id\u003d\"storage\"\u003eStorage\u003c/a\u003e"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Storage in the application refers to storing files of user profile and workout, diet sessions into respective local subdirectories sorted based on time in a local directory called `/saves` which is in the same directory as the project root."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.5.1. \u003ca id\u003d\"storage-for-profile\"\u003eStorage for Profile"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Storage for profile saves user profile created as `profile.json` in the `/saves/profile` directory. Profile data file is created as follows:"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- `profile.json` is updated in the local hard disk after the user adds/ edits a profile by calling `ProfileAdd.execute()`/ `ProfileEdit.execute()`."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- `profile.json` content will be cleared after the user deletes a profile by calling `ProfileDelete.execute()`."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Profile storage handles reading of file data by calling `loadData()` and overwriting of file data by calling `saveData()`."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.5.2. \u003ca id\u003d\"storage-for-diet\"\u003eStorage for Diet"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Storage for diet saves diet sessions created as individual files sorted based on the time created in the `/saves/diet` directory. Each diet session file is created as follows:"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "zsk612"
        },
        "content": "- Each file is created as a json file and named as `[DATE] [TAG].json`."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- A corresponding file is updated in the local file after the user edits a diet session by calling DietSessionEdit.execute()."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "zsk612"
        },
        "content": "- A corresponding file is deleted in the local file when the user deletes a diet session by calling DietSessionDelete.execute() or clears all diet sessions by calling DietSessionClear.execute()."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Storage handles reading of file data by calling readDietSession() and overwriting of file data by calling writeToStorageDietSession()."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.5.3. \u003ca id\u003d\"storage-for-workout\"\u003eStorage for Workout"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Storage for workout saves workout sessions created as individual files named based on the time created in `/saves/workout` directory. The metainformation of the files such as createion date and last edit date is saved in  `/saves/workout/history.json`."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Only history.json file is load when initilizing the application. The rest of Session files are load on request, e.g. `edit`. When a new workout session is created, a new file will be stored and its meta information will be appended to `history.json`. When a workout session is deleted, the file will be removed and its record will be removed from `history.json`."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Meta information file can be overwritten with `writePastRecords()` and be read with `readPastRecords()`."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 4.6. \u003ca id\u003d\"logging\"\u003eLogging\u003c/a\u003e"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Logging in the application refers to storing exceptions, warnings and messages that occur during the execution of Kitchen Helper. It was included to help developers to identify bugs and to simplify their debugging process. "
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The `java.util.logging` package in Java is used for logging. The logging mechanism can be managed from the `SchwarzeneggerLogger` class through the `logger` attribute. "
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "All controls of the logger for the application can be viewed/ altered in the class construction. The current settings for the logger are as follow:"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- All information is logged into a log file, `SchwarzeneggerLogs.log`."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Logging is made to be displayed in the `SimpleFormatter` style where the date, class and error description are logged."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Logging Levels:"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.SEVERE`: a serious failure, which prevents normal execution of the program, for end users and system administrators."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.WARNING`: a potential problem, for end users and system administrators."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.INFO`: reasonably significant informational message for end users and system administrators."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.CONFIG`: hardware configuration, such as CPU type."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.FINE`, `Level.FINER`, `Level.FINEST`: three levels used for providing tracing information for the software developers."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "`SchwarzeneggerLogger` follows singleton design pattern. Thus, other classes can access the `logger` by calling `SchwarzeneggerLogger.getInstanceLogger()`, and logging can be done by invoking the function `log()`. This will ensure that all loggings will be made to the same file across the various classes. "
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "An example is shown below:"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "```"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "logger.log(Level.WARNING, DESCRIPTION_OF_WARNING, e.toString());"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "```"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "## Appendices "
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix A: Product Scope"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Target user profile__:"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Can type fast.    "
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Comfortable with using command line interface.  "
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Gyms regularly"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix B: User Stories"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|New user|View user guide easily|I can learn more about the product before I use it|"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|New user|Create a user profile|I can store my profile in the database|"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|New user|Create a new workout session|I can start a recorded workout session|"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|User|Create a new workout session|I can start a recorded workout session|"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|User|Edit user profile|I can change my data if something changes|"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|User|Add actions into a session|I can personalise each workout session|"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|User|Delete session record|I can correct accidental errors|"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix C: Value proposition - Use cases"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix D: Non-Functional Requirements"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "2. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Should not require user to install program file."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. Should work for single user."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "5. Should be able to run without internet connection."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix E: Glossary"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* *Mainstream OS* - Windows, Linux, Unix, OS-X  "
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix F: Instructions for Manual Testing"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### F.1. Launch and Shutdown"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### Appendix G: Supported Formats of Date Input"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Here shows all 14 valid formats."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd HH:mm`"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd HH:mm`"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd HH:mm`"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd HH:mm`"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd HHmm`"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd HHmm`"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd HHmm`"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd HHmm`"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd`"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd`"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd`"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd`"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    `dd MM yyyy`"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    `ddMMyyyy`"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      }
    ],
    "authorContributionMap": {
      "zsk612": 28,
      "yujinyang1998": 78,
      "tienkhoa16": 269,
      "wgzesg": 179,
      "CFZeon": 559,
      "-": 20
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "By: `Team F11-1` Since: `Sept 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Introduction**](#intro)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Quick Start**](#quickstart)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Features**](#features)\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.1. [Main Menu](#main-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.1. [Viewing Help: `help`](#main-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.2. [Entering Profile Menu: `profile`](#main-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.3. [Entering Diet Menu: `diet`](#main-diet)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.4. [Entering Workout Menu: `workout`](#main-workout)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.5.  [Ending The Schwarzenegger: `end`](#main-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.2. [Profile Menu](#profile-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.1. [Viewing Help: `help`](#profile-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.2. [Adding a Profile: `add`](#profile-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.3. [Viewing a Profile: `view`](#profile-view)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.4. [Editing a Profile: `edit`](#profile-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.5. [Deleting a Profile: `delete`](#profile-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.6. [Returning to Main Menu: `end`](#profile-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.3. [Diet Menu](#diet-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.1. [Viewing Help: `help`](#diet-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2. [Starting to a New Diet Session: `new`](#diet-start)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.1. [Viewing Help in Diet Session: `help`](#meal-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.2. [Adding Food Items to the Current Diet Session: `add`](#meal-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.3. [Listing Food Items from the Current Diet Session: `list`](#meal-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.4. [Deleting Food Items from the Current Diet Session: `delete`](#meal-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.5. [Clearing All Food Items from the Current Diet Session: `clear`](#meal-clear)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.6. [Ending the Current Diet Session: `end`](#meal-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.3. [Listing All Past Diet Sessions: `list`](#diet-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.4. [Editing a Past Diet Session: `edit`](#diet-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.5. [Deleting a Past Diet Session: `delete`](#diet-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.6. [Clearing All Past Diet Sessions: `clear`](#diet-clear)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.7. [Searching for Past Diet Sessions: `search`](#diet-search)\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.8. [Returning to Main Menu: `end`](#diet-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.4. [Workout Menu](#workout-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1. [Viewing Help: `help`](#workout-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2. [Starting a New Workout Session: `new`](#workout-start)\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2.1. [Viewing Help in Workout Session: `help`](#ws-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2.2. [Adding a Move to the Current Workout Session: `add`](#ws-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2.3. [Listing All Moves from the Current Workout Session: `list`](#ws-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2.4. [Deleting a Move From the Current Workout Session: `delete`](#ws-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2.5. [Searching for a keyword in the Current Workout Session: `search`](#ws-search)\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2.6. [Ending the Current Workout Session: `end`](#ws-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.3. [Listing All Past Workout Sessions: `list`](#workout-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.4. [Editing a Workout Session: `edit`](#workout-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.5. [Deleting a Workout Session: `delete`](#workout-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.6. [Searching a List of Workout Session: `search`](#workout-search)\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.7. [Clearing All Workout Sessions: `clear`](#workout-clear)\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.8. [Returning to Main Menu: `end`](#workout-end)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Command Summary**](#command-summary)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Notes**](#notes)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**FAQ**](#faq)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "## 1. \u003ca id\u003d\"intro\"\u003eIntroduction\u003c/a\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The Schwarzenegger is a desktop command line interface-based app for managing all your needs regarding fitness. With the built-in personal assistant, you are able to track your daily workout and diet sessions based on your profile. If you can type fast, The Schwarzenegger can help you maximise your efficiency for maintaining fitness."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "## 2. \u003ca id\u003d\"quickstart\"\u003eQuick Start\u003c/a\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When you first start using The Schwarzenegger, please ensure that you follow the instructions below:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Download the latest `duke.jar` from [here](https://github.com/AY2021S1-CS2113T-F11-1/tp/releases)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Copy the file to the folder you want to use as the home folder for The Schwarzenegger."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Open command prompt (on Windows)  or terminal (on macOS/ Linux) and change to the directory of the folder of the application in step 3."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Key in `java -jar duke.jar`. If the setup is correct, you should see something like below:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Welcome new user to Schwarzenegger! :D"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Please add your profile under Profile Menu."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        For more information on command syntax, please type \"help\"."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "   "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. To use The Schwarzenegger, simply type a valid command into the terminal and press \u003ckbd\u003eEnter\u003c/kbd\u003e to run the command.\u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Example: Typing `help` command in Main Menu and pressing \u003ckbd\u003eEnter\u003c/kbd\u003e will show you a list of available commands in Main Menu of The Schwarzenegger and their descriptions."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Some example commands you can try:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    - `profile` : Directs you to Profile Menu where you can add and manage your profile."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    - `diet` : Directs you to Diet Menu where you can add and manage your diet records."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    - `workout` : Directs you to Workout Menu where you can add and manage your workout records."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. The text before the cursor indicates which menu you are currently in (e.g. `Main menu \u003e\u003e\u003e\u003e\u003e` indicates that you are currently in the Main Menu)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. A summary of all the supported commands in The Schwarzenegger can be found in [Section 4. Command Summary](#command-summary).\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You can refer to [Section 3. Features](#features) for the detailed instructions of the various features in The Schwarzenegger."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "## 3. \u003ca id\u003d\"features\"\u003eFeatures\u003c/a\u003e "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This section includes 4 sub-sections which will guide you through the features available in Main Menu, Profile Menu, Workout Menu and Diet Menu of the Schwarzenegger. In explaining the syntax, we will adhere to the following format:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "***"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Command Format**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Words that are in `[UPPER_CASE]` format are the parameters to be supplied by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Example: in `add /n [NAME] /h [HEIGHT] /w [CURRENT_WEIGHT] /e [EXPECTED_WEIGHT] /c [DAILY_CALORIE_INTAKE]` command, `[NAME]`, `[HEIGHT]`, `[CURRENT_WEIGHT]`, `[EXPECTED_WEIGHT]` and `[DAILY_CALORIE_INTAKE]` are parameters which can be used as `add /n Schwarzenegger /h 188 /w 113 /e 100 /c 2500`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Words that are enclosed with `\u003c` and `\u003e` are optional parameters. However, if all the parameters in a command are optional, you need to supply at least 1 of them.\u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Example: in `edit \u003c/n [NAME]\u003e \u003c/h [HEIGHT]\u003e \u003c/w [CURRENT_WEIGHT]\u003e \u003c/e [EXPECTED_WEIGHT]\u003e \u003c/c [DAILY_CALORIE_INTAKE]\u003e` command, `\u003c/n [NAME]\u003e`, `\u003c/h [HEIGHT]\u003e`, `\u003c/w [CURRENT_WEIGHT]\u003e`, `\u003c/e [EXPECTED_WEIGHT]\u003e` and `\u003c/c [DAILY_CALORIE_INTAKE]\u003e` are optional parameters which can be used as `edit /h 180`, `edit /h 180 /w 50` or `edit /h 180 /w 50 /e 55`. Since all of them are optional parameters, you need to supply at least 1 of them."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Optional parameters with `…` after them can be used multiple times including zero times. \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Example: for `\u003cTAG\u003e...`, the following format for Search Command in Workout Menu: `search \u003c/d [DATE]\u003e \u003c/t [TAG]...\u003e` can be used as `search /t le` or `search /t chest, bicep`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Notations Used**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Below are the meaning of icons for you to take note of while using a feature. "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- :bulb: indicates a tip."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- :warning: indicates a warning.  "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "***"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.1. \u003ca id\u003d\"main-menu\"\u003eMain Menu\u003c/a\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You can get access to Profile Menu, Diet Menu and Workout Menu from Main Menu."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The available commands in Main Menu are listed below:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.1. \u003ca id\u003d\"main-help\"\u003eViewing Help: `help`\u003c/a\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You can see a complete list of available commands under Main Menu and how to use them."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "__Format:__ `help`\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Example: `help`\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    ______________________________________________________________________________"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Profile  - profile"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "             Go to Profile Menu to manage your profile"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Workout  - workout"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "             Go to Workout Menu to manage your workout records and create new workout records"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Diet     - diet"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "             Go to Diet Menu to manage your past diet records and create new diet records"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    End      - end"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "             Exit The Schwarzenegger"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    ______________________________________________________________________________"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.2. \u003ca id\u003d\"main-profile\"\u003eEntering Profile Menu: `profile`\u003c/a\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The program will direct you to the Profile Menu."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `profile`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "  "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `profile`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Starting Profile Menu......"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|:bulb:| You can verify that you are in Profile Menu if the text before your cursor becomes `Profile Menu \u003e\u003e\u003e\u003e\u003e`. |"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|------|:-----------|"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.3. \u003ca id\u003d\"main-diet\"\u003eEntering Diet Menu: `diet`\u003c/a\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The program will direct you to the Diet Menu."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `diet`  "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `diet`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Starting Diet Menu..."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|:bulb:| You can verify that you are in Diet Menu if the text before your cursor becomes `Diet Menu \u003e\u003e\u003e\u003e\u003e`. |"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|------|:-----------|"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.4. \u003ca id\u003d\"main-workout\"\u003eEntering Workout Menu: `workout`\u003c/a\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The program will direct you to the Workout Menu."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `workout`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `workout`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Starting Workout Menu..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|:bulb:| You can verify that you are in Workout Menu if the text before your cursor becomes `Workout Menu \u003e\u003e\u003e\u003e\u003e`. |"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|------|:-----------|"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.5. \u003ca id\u003d\"main-end\"\u003eEnding The Schwarzenegger: `end`\u003c/a\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You enter this command when you want to terminate The Schwarzenegger."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `end`  "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    ______________________________________________________________________________"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Bye, you have exited The Schwarzenegger."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    ______________________________________________________________________________"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.2. \u003ca id\u003d\"profile-menu\"\u003eProfile Menu\u003c/a\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Profile Menu manages your profile including your name, physique data and expected daily calories intake. "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.1. \u003ca id\u003d\"profile-help\"\u003eViewing Help: `help`\u003c/a\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You can see a complete list of available commands under Profile Menu and how to use them."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `help`  "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Add      - add /n [NAME] /h [HEIGHT] /w [CURRENT_WEIGHT] /e [EXPECTED_WEIGHT] /c [DAILY_CALORIE_INTAKE]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "             Add your new profile"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    View     - view"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "             View your profile"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Edit     - edit \u003c/n [NAME]\u003e \u003c/h [HEIGHT]\u003e \u003c/w [CURRENT_WEIGHT]\u003e \u003c/e [EXPECTED_WEIGHT]\u003e \u003c/c [DAILY_CALORIE_INTAKE]\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "             Edit your existing profile. You may edit from 1 field to all fields"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Delete   - delete"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "             Delete your existing profile"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    End      - end"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "             Go back to Main Menu"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.2. \u003ca id\u003d\"profile-add\"\u003eAdding a Profile: `add`\u003c/a\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You can add your profile for the most customized experience in The Schwarzenegger. Your height should in centimeters, your current weight and expected weight should be in kilograms, and your expected daily calorie intake should be in calories."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "__Format:__ `add /n [NAME] /h [HEIGHT] /w [CURRENT_WEIGHT] /e [EXPECTED_WEIGHT] /c [DAILY_CALORIE_INTAKE]`  "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Example: `add /n Schwarzenegger /h 188 /w 113 /e 100 /c 2500`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This command adds a profile with the name Schwarzenegger, height 188 cm, weight 113 kg, expected weight 100 kg and expected daily intake of 2500 calories."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Got it. Here\u0027s a confirmation of your profile:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Name: Schwarzenegger"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Height: 188 cm"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Weight: 113.0 kg"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Expected Weight: 100.0 kg"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Expected daily calories intake: 2500.0 calories"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Your BMI: 32.0 (Obesity Class 1)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|:warning:| The Schwarzenegger currently does not support name containing \"/\" character. |"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|------|:-----------|"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.3. \u003ca id\u003d\"profile-view\"\u003eViewing a Profile: `view`\u003c/a\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You can view your profile recorded in the program. The Schwarzenegger will also show 2 additional information:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Your current BMI classification so that you can have a good suggestion on your current fitness level."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Comparison between your calorie intake today with your expected daily calorie intake."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `view`  "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `view`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Here\u0027s your profile:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Name: Schwarzenegger"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Height: 188 cm"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Weight: 113.0 kg"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Expected Weight: 100.0 kg"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Expected daily calories intake: 2500.0 calories"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Your BMI: 32.0 (Obesity Class 1)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    By the way, take 2500.0 more calories to achieve your target for today!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.4. \u003ca id\u003d\"profile-edit\"\u003eEditing a Profile: `edit`\u003c/a\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "You can edit the profile after adding to the program."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "__Format:__ `edit \u003c/n [NAME]\u003e \u003c/h [HEIGHT]\u003e \u003c/w [WEIGHT]\u003e \u003c/e [EXPECTED_WEIGHT]\u003e \u003c/c [DAILY_CALORIES_INTAKE]\u003e`  "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Example: \u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- `edit /h 180`\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This command edits your current height to 180 centimeters.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ______________________________________________________________________________"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Yay! Your profile is edited successfully. Here\u0027s your new profile:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Name: Schwarzenegger"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Height: 180 cm"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Weight: 113.0 kg"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Expected Weight: 100.0 kg"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Expected daily calories intake: 2500.0 calories"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Your BMI: 32.0 (Obesity Class 1)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ______________________________________________________________________________`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- `edit /h 180 /w 50`\u003cbr\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This command edits your current height to 180 centimeters and current weight to 50 kilograms.\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:\u003cbr\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "         ______________________________________________________________________________"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "         Yay! Your profile is edited successfully. Here\u0027s your new profile:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Name: Schwarzenegger"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Height: 180 cm"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Weight: 50.0 kg"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Expected Weight: 100.0 kg"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Expected daily calories intake: 2500.0 calories"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Your BMI: 15.4 (Underweight)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "         ______________________________________________________________________________"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- `edit /h 180 /w 50 /e 55`\u003cbr\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This command edits your current height to 180 centimeters, current weight to 50 kilograms and expected weight to 55 kilograms.\u003cbr\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:\u003cbr\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "         ______________________________________________________________________________"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "         Yay! Your profile is edited successfully. Here\u0027s your new profile:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Name: Schwarzenegger"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Height: 180 cm"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Weight: 50.0 kg"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Expected Weight: 55.0 kg"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Expected daily calories intake: 2500.0 calories"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Your BMI: 15.4 (Underweight)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "         ______________________________________________________________________________"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|:bulb:| You may edit from 1 field to all fields in your profile. |"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|------|:-----------|      "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.5. \u003ca id\u003d\"profile-delete\"\u003eDeleting a Profile: `delete`\u003c/a\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This command is dangerous as you will not be able to recover the data. After typing this command, you will be asked to reconfirm it by typing in `YES`. Any other input will abort the deletion."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "__Format:__ `delete`  "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Example: `delete`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Are you sure you want to clear your profile? This action is irrevocable."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Key in \"YES\" to confirm."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Profile Menu \u003e\u003e\u003e\u003e\u003e YES"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Alright! I\u0027ve deleted your profile."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.6. \u003ca id\u003d\"profile-end\"\u003eReturning to Main Menu: `end`\u003c/a\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You use this command to exit Profile Menu and return to the Main Menu."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `end`  "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    Returning to Main Menu..."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3. \u003ca id\u003d\"diet-menu\"\u003eDiet Menu\u003c/a\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Diet Menu manages your diet sessions which record food items and calories intake."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.1. \u003ca id\u003d\"diet-help\"\u003eViewing Help: `help`\u003c/a\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You can see a complete list of available commands under Diet Menu and how to use them."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `help`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     New      - new \u003c/d [DATE]\u003e \u003c/t [TAG]\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zsk612"
        },
        "content": "              Create a new diet session"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     List     - list"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "              Show all past diet sessions"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     Delete   - delete [INDEX]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zsk612"
        },
        "content": "              Delete the diet session at the input index"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     Edit     - edit [INDEX]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zsk612"
        },
        "content": "              Edit the diet session at the input index"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     Search   - search \u003c/s [STARTING_DATE]\u003e \u003c/e [END_DATE]\u003e \u003c/t [TAG]\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "              Search the diet session in between starting and end dates with a specific tag"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     Clear    - clear"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zsk612"
        },
        "content": "              Clear all past diet sessions"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     End      - end"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zsk612"
        },
        "content": "              Go back to Main Menu"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.2. \u003ca id\u003d\"diet-start\"\u003eStarting to a New Diet Session: `new`\u003c/a\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This command creates a new diet session. The date and tag can be added on creation with \"/d\" for date and \"/t\" for meal type. "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You will be directed immediately into the new diet session. You may verify that by looking at the cursor changes from "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "`Diet Menu \u003e\u003e\u003e\u003e\u003e `"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "to"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```Diet Menu \u003e New Diet Session \u003e\u003e\u003e\u003e\u003e ```. "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zsk612"
        },
        "content": "__Format:__ `new \u003c/d [DATE]\u003e \u003c/t [TAG]\u003e`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "CFZeon"
        },
        "content": " "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- `new`\u003cbr\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This command creates a new diet session tagged as unspecified with today\u0027s date.\u003cbr\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     No date input is detected."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     I\u0027ve replaced it with today\u0027s date."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     No tag is detected, and the session is tagged as \"unspecified\"."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     Starting Diet Session!"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- `new /d 2020-05-04 /t breakfast`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This command creates a diet session with date 2020-05-04 and type breakfast.\u003cbr\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     Starting Diet Session!"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|:warning:| You may choose not to add the date or tag, but diet sessions with the same date and tag will be overwritten!|"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|------|:-----------|"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "  "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.1. \u003ca id\u003d\"meal-help\"\u003eViewing Help in Diet Session: `help`\u003c/a\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You can see a complete list of available commands under Diet Session and how to use them."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `help` "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t Add      - add [FOOD_NAME] /c [CALORIES]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t          Add a new food item"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t List     - list"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t          Show all food items"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t Delete   - delete [INDEX_OF_FOOD]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t          Delete the food item at the input index"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\t Search   - search [FOOD_NAME]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\t          Search the diet session for food with the name specified"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t Clear    - clear"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t          Clear all food items"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t End      - end"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t          Go back to the Diet Menu."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.2. \u003ca id\u003d\"meal-add\"\u003eAdding Food Items to the Current Diet Session: `add`\u003c/a\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This command adds a food item into the current diet session."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "zsk612"
        },
        "content": "__Format:__ `add [FOOD_NAME] /c [CALORIES]` "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `add chicken nuggets /c 120`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t Yay! You have added chicken nuggets with calories: 120.0"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.3. \u003ca id\u003d\"meal-list\"\u003eListing Food Items from the Current Diet Session: `list`\u003c/a\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Lists all the added food items for the current diet session, with a numbered sequence according to sequence entered."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `list` "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `list`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\t Index   Food            Calories "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\t 1       chicken nuggets 120.0"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\t Your total calories for this meal is 120.0."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.4. \u003ca id\u003d\"meal-delete\"\u003eDeleting Food Items from the Current Diet Session: `delete`\u003c/a\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Deletes the food item according to the index in the current meal session list."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "__Format:__ `delete [INDEX]`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Example: `delete 1`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t You have deleted chicken nuggets with calories: 120.0 from your list!"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "zsk612"
        },
        "content": "``` "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.5. \u003ca id\u003d\"meal-clear\"\u003eClearing All Food Items from the Current Diet Session: `clear`\u003c/a\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Clears all the food items in the current diet session list."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This command is dangerous as you will not be able to recover the data. After typing this command, you will be asked to reconfirm it by typing in `YES`. Any other input will abort the clearing."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `clear` "
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `clear`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     Are you sure you want to clear all records? This action is irrevocable."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     Key in \"YES\" to confirm."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "zsk612"
        },
        "content": " "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "zsk612"
        },
        "content": " Diet Menu \u003e New Diet Session \u003e\u003e\u003e\u003e\u003e YES"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     Oops you have cleared all the food items."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.6. \u003ca id\u003d\"meal-end\"\u003eEnding the Current Diet Session: `end`\u003c/a\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Ends the current diet session, saves the data and returns to Diet Menu."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `end` "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t Exiting Diet Session!"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.3. \u003ca id\u003d\"diet-list\"\u003eListing All Past Diet Sessions: `list`\u003c/a\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Obtains a list of information about past diet sessions together with their numbered index."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `list`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `list`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    You have 2 records"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    Index   Tags        Date        Calories"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1       dinner      2020-10-29  110.0"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    2       lunch       2020-10-29  120.0"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.4. \u003ca id\u003d\"diet-edit\"\u003eEditing a Past Diet Session: `edit`\u003c/a\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Edits a previous diet session based on a numbered index that can be found in the list."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "__Format:__ `edit [INDEX]`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Example: `edit 2` "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t Starting Diet Session!"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Diet Menu \u003e Diet Session 2 \u003e\u003e\u003e\u003e\u003e "
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.5. \u003ca id\u003d\"diet-delete\"\u003eDeleting a Past Diet Session: `delete`\u003c/a\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Deletes a previous diet session based on a numbered index that can be found in the list."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "__Format:__ `delete [INDEX]`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Example: `delete 2`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     Oh no! You have deleted 2020-10-29 lunch"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.6. \u003ca id\u003d\"diet-clear\"\u003eClearing All Past Diet Sessions: `clear`\u003c/a\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Clears all previous diet sessions. "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This command is dangerous as you will not be able to recover the data. After typing this command, you will be asked to reconfirm it by typing in `YES`. Any other input will abort the clearing."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `clear`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `clear`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t Are you sure you want to clear all records? This action is irrevocable."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t Key in \"YES\" to confirm."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Diet Menu \u003e\u003e\u003e\u003e\u003e YES"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t You have cleared all diet sessions!"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 3.3.7. \u003ca id\u003d\"diet-search\"\u003eSearching for Past Diet Sessions: `search`\u003c/a\u003e"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Searches for specified range of diet sessions with identifiers such as start date, end date and tags."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "zsk612"
        },
        "content": "__Format:__ `search \u003c/s [START DATE]\u003e \u003c/e [END DATE]\u003e \u003c/t [TAG]\u003e`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `search /s 2020-05-06 /e 2020-05-10 /t breakfast`"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t Here are the search results!"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t \t1. 2020-05-08 breakfast"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "zsk612"
        },
        "content": "### 3.3.8. \u003ca id\u003d\"diet-end\"\u003eReturning to Main Menu: `end`\u003c/a\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You use this command to exit Diet Menu and return to the Main Menu."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `end`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t Returning to Main Menu..."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\t _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "zsk612"
        },
        "content": "```"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4. \u003ca id\u003d\"workout-menu\"\u003eWorkout Menu\u003c/a\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.1. \u003ca id\u003d\"workout-help\"\u003eViewing Help: `help`\u003c/a\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You can see a complete list of available commands under Workout Menu and how to use them."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `help`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "_________________________________________________________________________________________________"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t New      - new \u003c/t [TAG]...\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t          Create a new workout session and tags. Multiple tags are separated by \u0027,\u0027."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t List     - list \u003c/s [START_DATE]\u003e \u003c/e [END_DATE]\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t          Show all past sessions. Can display sessions between a certain period"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t Delete   - delete [INDEX]"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t          Delete the record indexed at x"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t Edit     - edit [INDEX]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t          Edit the record indexed at x"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t Clear    - clear"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t          Clear all past results"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t Search   - search \u003c/t [TAG]...\u003e \u003c/d [DATE]\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t          Search records based on tags and dates. Multiple tags are seperated by \u0027,\u0027."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t End      - end"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t          Go back to Main Menu"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "_________________________________________________________________________________________________"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.2. \u003ca id\u003d\"workout-start\"\u003eStarting a New Workout Session: `new`\u003c/a\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Creates a new workout session and go into the session. "
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You can add tags with “/t”. Tags are optional and more than one tag can be attached to a session."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "If more than one tag is added, each one should be separated by `,`. After `new`, user will be directed into workout session to manage the given session. You may verify that by looking at the cursor changes from "
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "`Workout Menu \u003e\u003e\u003e\u003e\u003e `"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "to"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```Workout Menu \u003e New Workout Session \u003e\u003e\u003e\u003e\u003e ```."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `new \u003c/t [TAG]...\u003e`  "
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example: `new /t legs day, tricep`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t ______________________________________________________________________________"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t You have started a new workout session!"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t ______________________________________________________________________________"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Workout Menu \u003e New Workout Session \u003e\u003e\u003e\u003e\u003e "
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.4.2.1. \u003ca id\u003d\"ws-help\"\u003eViewing Help in Workout Session: `help`\u003c/a\u003e"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You can see a complete list of available commands under Workout Session and how to use them."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "__Format:__ `help`  "
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     Add      - add [NAME_OF_MOVE] /n [NUMBER_OF_REPETITIONS] /w [WEIGHT]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "              Add a new move."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     List     - list"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "              Show all moves in this current session."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     Delete   - delete [INDEX]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "              Delete a move according to the index in the list."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     Search   - search [NAME_OF_MOVE]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "              Show a list of moves that match the entered keyword."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     End      - end"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "              Go back to the Workout Menu."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.4.2.2. \u003ca id\u003d\"ws-add\"\u003eAdding a Move to the Current Workout Session: `add`\u003c/a\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Adds a move with number of moves per set and weights of equipment (if the move does not require weights, input 0 for weight)."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "zsk612"
        },
        "content": "__Format:__ `add [NAME_OF_MOVE] /n [NUMBER_OF_MOVES_PER_SET] /w [WEIGHT]`  "
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `add squat /n 15 /w 40`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     Yay! You have added squat to your list."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     [Repetitions: 15 || Weight: 40]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.4.2.3. \u003ca id\u003d\"ws-list\"\u003eListing All Moves from the Current Workout Session: `list`\u003c/a\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Lists all the added moves for the current workout session, with a numbered sequence according to sequence entered."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `list`  "
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `list`"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     Index   Exercise             Repetitions Weight"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     1       squat                15          40"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.4.2.4. \u003ca id\u003d\"ws-delete\"\u003eDeleting a Move From the Current Workout Session: `delete`\u003c/a\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Deletes a move according to move index in the current workout session list."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "__Format:__ `delete [INDEX]`  "
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `delete 1`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     You have deleted squat from your list!"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     [Repetitions: 15 || Weight: 40]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "#### 3.4.2.5. \u003ca id\u003d\"ws-search\"\u003eSearching for a keyword in the Current Workout Session: `search`\u003c/a\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Searches the current workout session for the keyword and shows the relevant data found in a neat list."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `search [NAME_OF_MOVE]`  "
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `search bench`"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "```"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     \t Index   Exercise             Repetitions Weight    "
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     \t 1       bench                324         342"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     \t 2       benchpress           324         342"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     \t 3       bench press          324         342"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "```"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "#### 3.4.2.6. \u003ca id\u003d\"ws-end\"\u003eEnding the Current Workout Session: `end`\u003c/a\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Ends the current workout session and saves the relevant data."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `end`  "
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     Congratulations! You have finished today\u0027s workout!"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "```"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.3. \u003ca id\u003d\"workout-list\"\u003eListing All Past Workout Sessions: `list`\u003c/a\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can see all your past workout sessions. They will be summarised and printed in a table with their index, creation date and tags."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can specify start date and end date to show sessions created in a selected period using `\\s` for start date and `\\e` for end date. If start date is not specified, it will take the earliest date a start date. If end date is not specified, it will take today as the end date."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "__Format:__ `list \u003c/s [START_DATE]\u003e \u003c/e [END_DATE]\u003e`  "
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example `list /e 20201026`"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t ______________________________________________________________________________"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\t You have 2 records in the given period:"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t Index   Creation date   Tags    "
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t 1       2020-10-26      [legs day, tricep]"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\t 2       2020-10-26      [chest]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t ______________________________________________________________________________"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.4. \u003ca id\u003d\"workout-edit\"\u003eEditing a Workout Session: `edit`\u003c/a\u003e"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can edit a past workout session in the record list."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "__Format:__ `edit [INDEX]` "
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You will go into the specific workout session after typing this command. You may verify by seeing the cursor changes from "
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```Workout Menu \u003e\u003e\u003e\u003e\u003e``` "
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "to"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```Workout Menu \u003e Workout Session X \u003e\u003e\u003e\u003e\u003e``` ."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The index can be found by listing all results or searching the target record."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Example: `edit 1`"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Workout Menu \u003e Workout Session 1 \u003e\u003e\u003e\u003e\u003e "
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.5. \u003ca id\u003d\"workout-delete\"\u003eDeleting a Workout Session: `delete`\u003c/a\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can delete a past workout session in the record list."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "__Format:__ `delete [INDEX]` "
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The index can be found by listing the results"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example："
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    ______________________________________________________________________________"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    You have deleted that record!"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    ______________________________________________________________________________"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.6. \u003ca id\u003d\"workout-search\"\u003eSearching a List of Workout Sessions: `search`\u003c/a\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You can search for a list of workout sessions that match certain conditions. For example, you can search for sessions created on a specific day or sessions that contain certain tags."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "__Format:__ `search \u003c/d [DATE]\u003e \u003c/t [TAG]...\u003e`"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Tag condition"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "You can search records containing (a list of) tags with `/t` followed by the tags. Multiple tags should be separated by `,`. If you give multiple tags, only sessions that contains all the tags will be selected. You can search with part of the tag as well. For example searching with tag `leg` will match any tags that contains `leg`, e.g. `legs`."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Date condition"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can search records created on a specific day with `/d` followed by a date. Date should be keyed in  following one of the supported formats. [See here](#notes) for a complete list of format supported. If the format is wrong, sessions created on any day will be accepted."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Both date and tag conditions are optional. You may have zero, one or both conditions while searching. If both conditions are given, only sessions that meet both conditions will be selected."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can see all the sessions that meet the conditions. They will be summarised and printed in a table with their index, creation date and tags."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example: `search /t le`"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t ______________________________________________________________________________"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t 1  records are found:"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t Index   Creation date   Tags    "
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t 2       2020-10-26      [legs day, tricep]"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t ______________________________________________________________________________"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.7. \u003ca id\u003d\"workout-clear\"\u003eClearing All Workout Sessions: `clear`\u003c/a\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can erase all workout sessions."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `clear`"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "This command is dangerous as you will not be able to "
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "recover the data."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "After typing this command, you will be asked to reconfirm it by typing in"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "`YES`. Any other input will abort the clearing. "
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example `clear`"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t ______________________________________________________________________________"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t Are you sure you want to clear all records? This action is irrevocable."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t Key in \"YES\" to confirm."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t ______________________________________________________________________________"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Workout Menu \u003e\u003e\u003e\u003e\u003e YES"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t ______________________________________________________________________________"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t You have cleared all records!"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t ______________________________________________________________________________"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Workout Menu \u003e\u003e\u003e\u003e\u003e "
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.8. \u003ca id\u003d\"workout-end\"\u003eReturning to Main Menu: `end`\u003c/a\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "You can return to the main menu."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `end`"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "After typing in this, you will see your prompt in your terminal"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "changes from `Workout Menu\u003e\u003e\u003e` to `Main Menu\u003e\u003e\u003e`. "
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " "
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example `end`"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Expected output"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t ______________________________________________________________________________"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t Returning to Main menu..."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "\t ______________________________________________________________________________"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Main Menu \u003e\u003e\u003e\u003e\u003e "
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "```"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "## 4. \u003ca id\u003d\"command-summary\"\u003eCommand Summary\u003c/a\u003e"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Main Menu**"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Action** |  **Format**"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "--------|----------------------"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Help|`help`"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Profile Menu |`profile`"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Diet Menu|`diet`"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Workout Menu|`workout`"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "End|`end`"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Profile Menu**"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Action** |  **Format**"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "--------|----------------------"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Help|`help`"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Add |`add /n [NAME] /h [HEIGHT] /w [CURRENT_WEIGHT] /e [EXPECTED_WEIGHT] /c [DAILY_CALORIE_INTAKE]`\u003cbr\u003e\u003cbr\u003eE.g. `add /n Schwarzenegger /h 188 /w 113 /e 100 /c 2500`"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "View|`view`"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Edit|`edit \u003c/n [NAME]\u003e \u003c/h [HEIGHT]\u003e \u003c/w [CURRENT_WEIGHT]\u003e \u003c/e [EXPECTED_WEIGHT]\u003e \u003c/c [DAILY_CALORIE_INTAKE]\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `edit /w 110`, `edit /h 175 /w 110`, `edit /h 175 /w 110 /e 90`"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Delete|`delete`"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Return to Main Menu|`end`"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Diet Menu**"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "**Action** |  **Format**"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "--------|----------------------"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Help|`help`"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Start diet session |`new \u003c/d [DATE]\u003e \u003c/t [TAG]\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `new /d 2020-05-04 /t breakfast`"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "List|`list`"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Edit|`edit [INDEX]`\u003cbr\u003e\u003cbr\u003eE.g. `edit 1`"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Delete|`delete [INDEX]`\u003cbr\u003e\u003cbr\u003eE.g. `delete 1`"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Search|`search \u003c/s [STARTING_DATE]\u003e \u003c/e [END_DATE]\u003e \u003c/t [TAG]\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `search /t lunch`"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Clear|`clear`"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Return to Main Menu|`end`"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Diet Session**"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "**Action** |  **Format**"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "--------|----------------------"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Help|`help`"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Add |`add [FOOD_NAME] /c [CALORIES]`\u003cbr\u003e\u003cbr\u003eE.g. `add spinach /c 90`"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "List|`list`"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Delete|`delete [INDEX]`\u003cbr\u003e\u003cbr\u003eE.g. `delete 1`"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Clear|`clear`"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Return to Diet Menu|`end`"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Workout Menu**"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Action** |  **Format**"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|----------------------"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Help|`help`"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Start workout session |`new \u003c/t [TAG]...\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `new /t leg, chest`"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "List|`list \u003c/s [START_DATE]\u003e \u003c/e [END_DATE]\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `list /s 20201001 /e 2020/10/25`"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Edit|`edit \u003cINDEX\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `edit 1`"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Delete|`delete [INDEX]`\u003cbr\u003e\u003cbr\u003eE.g. `delete 1`"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Search|`search \u003c/t [TAG]...\u003e \u003c/d [DATE]\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `search /t leg day, chest /d 2020-10-18`"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Clear|`clear`"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Return to Main Menu|`end`"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Workout Session**"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "--------|----------------------"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Help|`help`"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Add |`add [NAME_OF_MOVE] /n [NUMBER_OF_REPETITIONS] /w [WEIGHT]`\u003cbr\u003e\u003cbr\u003eE.g. `add squat /n 15 /w 40`"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "List|`list`"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Delete|`delete [INDEX]`\u003cbr\u003e\u003cbr\u003eE.g. `delete 1`"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Return to Workout Menu|`end`"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "## 5. \u003ca id\u003d\"notes\"\u003eNotes\u003c/a\u003e"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[1] Here shows all 14 valid formats."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd HH:mm`"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd HH:mm`"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd HH:mm`"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd HH:mm`"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd HHmm`"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd HHmm`"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd HHmm`"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd HHmm`"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd`"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd`"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd`"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd`"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `dd MM yyyy`"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `ddMMyyyy`"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "## 6. \u003ca id\u003d\"faq\"\u003eFAQ\u003c/a\u003e"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Below are the answers to some frequently asked questions about The Schwarzenegger:"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Q**: Can I use The Schwarzenegger on another operating systems apart from Windows?\u003cbr\u003e"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**A**: Yes. The Schwarzenegger is compatible with Windows, macOS and Linux."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**A**: Install The Schwarzenegger in the other computer and overwrite the `saves` folder it creates with the `saves` folder of your previous The Schwarzenegger."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Q**: Can I exit The Schwarzenegger without typing `end` command?\u003cbr\u003e"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**A**: Yes. Your data is saved automatically to `saves` folder whenever it changes. Therefore, you can exit The Schwarzenegger worry-free."
      }
    ],
    "authorContributionMap": {
      "zsk612": 139,
      "yujinyang1998": 85,
      "tienkhoa16": 539,
      "wgzesg": 181,
      "CFZeon": 73,
      "-": 20
    }
  },
  {
    "path": "docs/team/jinyang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Yu Jinyang - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/shukai.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Zhang Shukai - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Develop Diet Manager."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 6
    }
  },
  {
    "path": "docs/team/tienkhoa.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Nguyen Tien Khoa - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Develop User Profile Manager."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 6
    }
  },
  {
    "path": "docs/team/zeon.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Zeon Chua Feiyi - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Develop Diet Manager."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 6
    }
  },
  {
    "path": "docs/team/zesong.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Zesong - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidCommandWordException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.diet.InvalidSearchDateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.profile.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import models.ExerciseList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A base class for command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static CommonUi ui \u003d new CommonUi();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes the command with given arguments."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Array of user\u0027s input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return An object CommandResult containing the executing status and feedback message to be displayed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *         to user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Executing \" + this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes the command with user\u0027s input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return An object CommandResult containing the executing status and feedback message to be displayed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *         to user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"Executing \" + this);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return new CommandResult();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes the command with user\u0027s input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param input User\u0027s input for command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Diet Storage to load and save data."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidCommandWordException If command word is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidCommandFormatException If command format is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidDateFormatException If date format is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidSearchDateException If search date is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, DietStorage storage) throws InvalidCommandWordException,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            InvalidCommandFormatException, InvalidDateFormatException, InvalidSearchDateException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes the command with user\u0027s input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param input User\u0027s input for command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Diet Storage to load and save data."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param index Integer variable that shows the index of diet session"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidCommandWordException If command word is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                        DietStorage storage, Integer index) throws InvalidCommandWordException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes the command with user\u0027s input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param inputs Array of user\u0027s input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param exerciseList List of exercise."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param filePath Path to data file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Workout Session Storage to load and save data."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param hasEndedWorkoutSessions Array of booleans indicating if user has ended workout sessions."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidCommandWordException If command word is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, storage.workout.Storage storage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        boolean[] hasEndedWorkoutSessions) throws InvalidCommandWordException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 7,
      "yujinyang1998": 7,
      "tienkhoa16": 54,
      "wgzesg": 29
    }
  },
  {
    "path": "src/main/java/commands/CommandLib.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietmanager.DietSessionClear;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionCreate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionDelete;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionEdit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietmanager.DietSessionHelp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietmanager.DietSessionSearch;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionWrong;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemAdd;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietsession.FoodItemClear;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemDelete;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietsession.FoodItemHelp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.diet.dietsession.FoodItemSearch;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemWrong;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.main.MainHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.main.MainWrong;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.main.ToDiet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.main.ToProfile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.main.ToWorkout;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileDelete;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileEdit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileEnd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileHelp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileWrong;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ByeWS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ClearWS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.DeleteWS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.EditWS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.HelpWS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ListWS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.NewWS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.workout.workoutmanager.SearchWS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.WrongWS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionDelete;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionEnd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionSearch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionWrong;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_ADD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_CLEAR;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_DELETE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_DIET;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_EDIT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_END;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_HELP;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_LIST;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_NEW;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_PROFILE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_SEARCH;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_VIEW;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_WORKOUT;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_WRONG;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class for extracting the correct Command object for each command word."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class CommandLib {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public Hashtable\u003cString, Command\u003e library;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs CommandLib object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public CommandLib() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        library \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Initializes the commandLib with main menu\u0027s commands."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void initMainMenu() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_WRONG, new MainWrong());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_HELP, new MainHelp());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_DIET, new ToDiet());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_PROFILE, new ToProfile());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_WORKOUT, new ToWorkout());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Initializes the commandLib with profile menu\u0027s commands."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void initProfileSessionCL() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_HELP, new ProfileHelp());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_ADD, new ProfileAdd());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_DELETE, new ProfileDelete());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_VIEW, new ProfileView());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_EDIT, new ProfileEdit());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_END, new ProfileEnd());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_WRONG, new ProfileWrong());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Initializes the commandLib with workout menu\u0027s commands."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void initWorkoutManagerCL() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_LIST, new ListWS());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_NEW, new NewWS());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_DELETE, new DeleteWS());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_END, new ByeWS());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_EDIT, new EditWS());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_CLEAR, new ClearWS());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_HELP, new HelpWS());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_WRONG, new WrongWS());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_SEARCH, new SearchWS());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Initialize the commandLib with workout session\u0027s commands."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void initWorkoutSessionCL() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_ADD, new WorkoutSessionAdd());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_DELETE, new WorkoutSessionDelete());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_LIST, new WorkoutSessionList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_END, new WorkoutSessionEnd());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_HELP, new WorkoutSessionHelp());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_SEARCH, new WorkoutSessionSearch());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_WRONG, new WorkoutSessionWrong());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Initialize the commandLib with diet manager\u0027s commands."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void initDietManagerCL() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_LIST, new DietSessionList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        library.put(COMMAND_WORD_NEW, new DietSessionCreate());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_HELP, new DietSessionHelp());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_CLEAR, new DietSessionClear());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_SEARCH, new DietSessionSearch());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_EDIT, new DietSessionEdit());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_DELETE, new DietSessionDelete());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_WRONG, new DietSessionWrong());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Initialize the commandLib with diet session\u0027s commands."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void initDietSessionCL() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_ADD, new FoodItemAdd());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_DELETE, new FoodItemDelete());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_HELP, new FoodItemHelp());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_CLEAR, new FoodItemClear());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        library.put(COMMAND_WORD_SEARCH, new FoodItemSearch());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_LIST, new FoodItemList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_WRONG, new FoodItemWrong());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets specific Command object based on command keyword."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param keyword Keyword specifying type of command."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Command object."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Command getCommand(String keyword) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (library.containsKey(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return library.get(keyword.toLowerCase());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return library.get(COMMAND_WORD_WRONG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 25,
      "yujinyang1998": 11,
      "tienkhoa16": 78,
      "wgzesg": 57
    }
  },
  {
    "path": "src/main/java/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EMPTY_STRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class representing result shown to user after executing the requested command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private String feedbackMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private ExecutionResult status;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs CommandResult object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param feedbackMessage Feedback message after executing command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult(String feedbackMessage, ExecutionResult status) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.feedbackMessage \u003d feedbackMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs CommandResult object with status OK."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param feedbackMessage Feedback message after executing command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult(String feedbackMessage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.feedbackMessage \u003d feedbackMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        status \u003d ExecutionResult.OK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs CommandResult object with empty feedback message and status OK."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        feedbackMessage \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        status \u003d ExecutionResult.OK;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets execution status."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Execution status."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public ExecutionResult getStatus() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets feedback message to user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Feedback message to user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String getFeedbackMessage() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return feedbackMessage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 49,
      "wgzesg": 8
    }
  },
  {
    "path": "src/main/java/commands/ExecutionResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Enumerations of execution result status."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public enum ExecutionResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    OK,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    ABORTED,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    FAILED,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    SKIPPED"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 4,
      "wgzesg": 7
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionClear.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionClear extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for clear command to clear all diet sessions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (ui.checkConfirmation(\"Diet Menu\", \"clear all records\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                File folder \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                for (int index \u003d 0; index \u003c Objects.requireNonNull(listOfFiles).length; index++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                    listOfFiles[index].delete();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                ui.showToUser(\"You have cleared all diet sessions!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                logger.log(Level.INFO, \"Cleared all diet sessions\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                ui.showToUser(\"You have aborted clear operation.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Sorry, there is no diet session to be cleared!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"No sessions in dietManager for deletion\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 23,
      "tienkhoa16": 5,
      "CFZeon": 11
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionCreate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietmanager.DietManagerParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import diet.dietsession.DietSession;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.profile.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DietSessionCreate extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final DietManagerParser parser \u003d new DietManagerParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for create command to create new diet sessions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            StringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"new\", input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String date \u003d parser.extractNewDate(parsedParams, message);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String tag \u003d parser.extractNewTag(parsedParams, message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (message.length() !\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                ui.showToUser(message.toString().trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            DietSession ds \u003d new DietSession(tag, date, true, -1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            assert ds !\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Diet session successfully created\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            ds.start(true, -1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            saveToFile(storage, ds);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"It seems like we ran into some problems saving your session...\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (InvalidDateFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Wrong date format\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Please key in correct date.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (InvalidCommandFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Invalid command in dietSessionCreate\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Wrong format, please enter in the format: \\n\\t \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    + \"new \u003c/d [DATE]\u003e \u003c/t [TAG]\u003e\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs method to save changes to storage file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param ds dietSession that is being changed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void saveToFile(DietStorage storage, DietSession ds) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            storage.init(ds.getDate().toString() + \" \" + ds.getTypeInput());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            storage.writeToStorageDietSession(ds.getDate().toString() + \" \" + ds.getTypeInput(), ds);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"Diet session successfully saved\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.WARNING, \"save profile session failed\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Failed to save your diet session!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 49,
      "yujinyang1998": 1,
      "tienkhoa16": 6,
      "wgzesg": 2,
      "CFZeon": 11
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionDelete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import org.apache.commons.lang3.ObjectUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DietSessionDelete extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for delete command to delete diet sessions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File folder \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            assert !input.isEmpty() : \"No files to delete or wrong folder\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            assert listOfFiles !\u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String fileName \u003d listOfFiles[Integer.parseInt(input) - 1]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    .getName().replaceFirst(\"[.][^.]+$\", \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Oh no! You have deleted \" + fileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            listOfFiles[Integer.parseInt(input) - 1].delete();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Deleted Diet Session successfully\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Wrong format, please enter in the format:\\n\\t \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                    + \"delete [INDEX]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"No or wrong index for deletion in dietManager\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Sorry, there is no file at that index.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"No input for session index\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            ui.showToUser(\"It looks like you have no sessions saved!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 28,
      "yujinyang1998": 1,
      "tienkhoa16": 5,
      "wgzesg": 2,
      "CFZeon": 7
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionEdit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.DietSession;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionEdit extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for edit command to edit diet sessions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File folder \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            DietSession ds \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            assert listOfFiles !\u003d null : \"List of files should not be null\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            ds \u003d storage.readDietSession(listOfFiles[Integer.parseInt(input) - 1].getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            ds.start(false, Integer.parseInt(input));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            saveToFile(storage, ds);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"Diet session in edit mode\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException | FileNotFoundException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                | NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Wrong format, please enter in the format:\\n\\t \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    + \"edit [INDEX_OF_SESSION]\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"No file found at array index\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"failed to execute diet session\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Sorry, there is no file at that index.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs method to save changes to storage file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "     * @param ds dietSession that is being changed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void saveToFile(DietStorage storage, DietSession ds) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.init(ds.getDate().toString() + \" \" + ds.getTypeInput());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.writeToStorageDietSession(ds.getDate().toString() + \" \" + ds.getTypeInput(), ds);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Diet session successfully saved\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.WARNING, \"save profile session failed\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Failed to save your diet session!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 33,
      "yujinyang1998": 3,
      "tienkhoa16": 9,
      "CFZeon": 18
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionHelp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionHelp extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for help command to display help information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietManagerUi.printHelp();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"Displayed help in dietManager\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 19,
      "tienkhoa16": 3
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import diet.dietsession.DietSession;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import models.Exercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static ui.CommonUi.LS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DietSessionList extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for list command to list diet sessions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File folder \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        StringBuilder listResult \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assert folder.exists();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            String dietSessionListSize \u003d \"You have \" + listOfFiles.length + \" records\" + LS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            String dietSessionList \u003d formatList(listOfFiles, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            listResult.append(dietSessionListSize);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            listResult.append(dietSessionList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            ui.showToUser(listResult.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Listed all available diet sessions\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (NullPointerException | NoSuchElementException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            ui.showToUser(\"Sorry! It seems like you have no diet sessions saved!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.WARNING, \"No instances of diet sessions saved\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    private String formatList(File[] listOfFiles, DietStorage storage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        ArrayList\u003cFile\u003e fileArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        Collections.addAll(fileArrayList, listOfFiles);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        ArrayList\u003cString\u003e fileNames \u003d (ArrayList\u003cString\u003e) fileArrayList.stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                .map(f -\u003e f.getName().split(\" \", 2)[1].trim()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        int descriptionMaxLenInt \u003d Math.max(8,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                fileNames.stream().max(Comparator.comparingInt(String::length)).get().length());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String descriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt + 1) + \"s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String returnString \u003d String.format(\"%-8s\", \"Index\") + String.format(descriptionFormat, \"Tags\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                + String.format(\"%-12s\", \"Date\") + String.format(\"%-10s\", \"Calories\") + LS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        StringBuilder infoBuilder \u003d new StringBuilder(returnString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String listDescriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt) + \"s %-11s %s\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        for (int i \u003d 0; i \u003c fileArrayList.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            DietSession ds \u003d storage.readDietSession(listOfFiles[i].getName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            double totalCalories \u003d ds.getTotalCalories();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            String rowContent \u003d String.format(listDescriptionFormat,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                    fileArrayList.get(i).getName().replaceFirst(\"[.][^.]+$\", \"\").split(\" \",2)[1],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                    fileArrayList.get(i).getName().replaceFirst(\"[.][^.]+$\", \"\").split(\" \",2)[0],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                    totalCalories);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            String row \u003d String.format(\"%-8s\", i + 1) + rowContent + LS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            infoBuilder.append(row);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        returnString \u003d infoBuilder.toString().trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 18,
      "tienkhoa16": 5,
      "wgzesg": 2,
      "CFZeon": 52
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionSearch.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.DateParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietmanager.DietManagerParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.diet.InvalidSearchDateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.profile.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_SEARCH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionSearch extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final DietManagerParser parser \u003d new DietManagerParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for search command to search diet sessions."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for search command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws InvalidDateFormatException if the date is in wrong format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws InvalidSearchDateException if the starting date is later than end date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, DietStorage storage) throws InvalidDateFormatException,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            InvalidSearchDateException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File folder \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assert folder.exists();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        StringBuilder searchResult \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"search\", input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            LocalDateTime startDate \u003d parser.extractStartDates(parsedParams, searchResult);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            LocalDateTime endDate \u003d parser.extractEndDates(parsedParams, searchResult);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (startDate.compareTo(endDate) \u003e 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                throw new InvalidSearchDateException(\"Starting date should be earlier than end date.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String tag \u003d parser.extractSearchTag(parsedParams, searchResult);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            printSearchResult(listOfFiles, searchResult, startDate, endDate, tag);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException | InvalidCommandFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Wrong format, please enter in the format:\\n\\t \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    + \"search \u003c/s [STARTING_DATE]\u003e \u003c/e [END_DATE]\u003e \u003c/t [TAG]\u003e\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (InvalidDateFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            searchResult.append(\"Wrong format for date input.\\n\\t \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(searchResult.toString().trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Invalid date format in diet session search\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (InvalidSearchDateException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Invalid date format in diet session search\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new InvalidSearchDateException(\"Starting date should be earlier than end date.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Prints search results."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param listOfFiles list of files from local storage"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param searchResult string builder that accumulates warning messages"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param startDate starting date for search"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param endDate end date for search"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param tag tag for search"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws InvalidDateFormatException if date is in wrong format"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private void printSearchResult(File[] listOfFiles, StringBuilder searchResult, LocalDateTime startDate,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                                   LocalDateTime endDate, String tag) throws InvalidDateFormatException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (tag.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                searchResult.append(\"Tag is empty, \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                        + \"all the sessions within input dates will be shown.\\n\\t \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            searchResult.append(\"Here are the search results!\\n\\t \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (Objects.requireNonNull(listOfFiles).length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                searchResult.append(\"It seems like you do not have any meal sessions stored!\\n\\t \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            int numberOfResults \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            for (int i \u003d 0; i \u003c Objects.requireNonNull(listOfFiles).length; i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                LocalDateTime fileDate \u003d DateParser.parseDate(listOfFiles[i].getName().split(\" \", 2)[0]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                String fileTag \u003d listOfFiles[i].getName().split(\" \", 2)[1]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                        .replaceFirst(\"[.][^.]+$\", \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (startDate.compareTo(fileDate) \u003c\u003d 0 \u0026\u0026 endDate.compareTo(fileDate) \u003e\u003d 0 \u0026\u0026 fileTag.contains(tag)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    searchResult.append(\"\\t\" + (++numberOfResults) + \". \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + listOfFiles[i].getName().replaceFirst(\"[.][^.]+$\", \"\") + \"\\n\\t \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (numberOfResults \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                searchResult.append(\"Sorry! There seems to be no diet sessions found with your searched tag.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(searchResult.toString().trim());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"Listed all searched diet sessions\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            ui.showToUser(\"Sorry! It seems like you have no meal sessions saved!\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"No instances of diet sessions saved\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 100,
      "tienkhoa16": 3,
      "CFZeon": 3
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionWrong.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidCommandWordException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DietSessionWrong extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for wrong command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String input, DietStorage storage) throws InvalidCommandWordException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        throw new InvalidCommandWordException();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 9,
      "yujinyang1998": 3,
      "tienkhoa16": 4,
      "wgzesg": 2,
      "CFZeon": 1
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.DietSessionParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import exceptions.diet.NegativeCaloriesException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.diet.NoNameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import exceptions.profile.InvalidCaloriesException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietsession.DietSessionUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class FoodItemAdd extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for add command to add food items."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param foodList arraylist that stored all the food items"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet session"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param index Integer variable that shows the index of the session"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage, Integer index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietSessionParser parser \u003d new DietSessionParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            assert !input.isEmpty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            Food temp \u003d new Food(parser.processFoodName(input), parser.processFoodCalories(input));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            foodList.add(temp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Yay! You have added \" + temp.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Added food to arraylist\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Wrong format, please enter in the format:\\n\\t \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    + \"add [FOOD_NAME] /c [CALORIES]\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Did not put food name or calories\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Please input a number for calories.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Put calories in a wrong format\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (NegativeCaloriesException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            ui.showToUser(\"Please enter a positive number for calories!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Put negative calories\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NoNameException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Please enter food name!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"no food name\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 36,
      "tienkhoa16": 4,
      "wgzesg": 1,
      "CFZeon": 9
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemClear.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class FoodItemClear extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for clear command to clear all food items."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param foodList arraylist that stored all the food items"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet session"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param index Integer variable that shows the index of the session"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage, Integer index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String prompt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            prompt \u003d \"Diet Menu \u003e New Diet Session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            prompt \u003d \"Diet Menu \u003e Diet Session \" + index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (ui.checkConfirmation(prompt, \"clear all records\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            foodList.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Oops you have cleared all the food items.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"Cleared all food in arraylist\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"You have aborted clear operation.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 33,
      "tienkhoa16": 3
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemDelete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class FoodItemDelete extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for delete command to delete food items."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param foodList arraylist that stored all the food items"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet session"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param index Integer variable that shows the index of the session"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage, Integer index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            assert !input.isEmpty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            int indexOfSession \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            Food temp \u003d foodList.get(indexOfSession - 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"You have deleted \" + temp.toString() + \" from your list!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            foodList.remove(temp);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Removed food from arraylist\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Sorry, there is no food item at that index.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Did not input index\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Wrong format, please enter in the format:\\n\\t \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                    + \"delete [INDEX]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Did not input correct index\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 29,
      "yujinyang1998": 1,
      "tienkhoa16": 3,
      "wgzesg": 1,
      "CFZeon": 4
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemHelp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietsession.DietSessionUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class FoodItemHelp extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for help command to display help information for dietSession."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param foodList arraylist that stored all the food items"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet session"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param index Integer variable that shows the index of the session"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage, Integer index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietSessionUi.printHelp();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"Displayed help in dietSession\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 25,
      "tienkhoa16": 2
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import models.Exercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static ui.CommonUi.LS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class FoodItemList extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for list command to list food items."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param foodList arraylist that stored all the food items"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet session"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param index Integer variable that shows the index of the session"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage, Integer index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            double totalCalories \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            StringBuilder listResult \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            if (foodList.size() \u003e 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                for (int i \u003d 0; i \u003c foodList.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                    totalCalories +\u003d foodList.get(i).getCalories();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                String totalMealCalories \u003d LS + \"Your total calories for this meal is \" + totalCalories + \".\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                String formattedList \u003d formatList(foodList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                listResult.append(formattedList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                listResult.append(totalMealCalories);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                ui.showToUser(listResult.toString().trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                logger.log(Level.INFO, \"Listed all foods in Diet Session\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                listResult.append(\"Sorry, there is nothing in your food list.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                ui.showToUser(listResult.toString().trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Sorry, there is nothing in your food list.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"No item in food list\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    private String formatList(ArrayList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        ArrayList\u003cString\u003e foodNames \u003d (ArrayList\u003cString\u003e) foodList.stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                .map(Food::getName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        int descriptionMaxLenInt \u003d Math.max(10,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                foodNames.stream().max(Comparator.comparingInt(String::length)).get().length());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String descriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt + 1) + \"s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String returnString \u003d String.format(\"%-8s\", \"Index\") + String.format(descriptionFormat, \"Food\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                + String.format(\"%-9s\", \"Calories\") + LS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        StringBuilder infoBuilder \u003d new StringBuilder(returnString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String listDescriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt) + \"s %-9s \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        for (int i \u003d 0; i \u003c foodList.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            String rowContent \u003d String.format(listDescriptionFormat, foodList.get(i).getName(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                    foodList.get(i).getCalories());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            String row \u003d String.format(\"%-8s\", i + 1) + rowContent + LS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            infoBuilder.append(row);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        returnString \u003d infoBuilder.toString().trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 28,
      "yujinyang1998": 3,
      "tienkhoa16": 3,
      "CFZeon": 40
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemSearch.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietsession.DietSessionUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class FoodItemSearch extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    DietSessionUi ui \u003d new DietSessionUi();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for search command to search food items."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param foodList arraylist that stored all the food items"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet session"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param index Integer variable that shows the index of the session"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage, Integer index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            int numberOfResults \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            StringBuilder searchResult \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            searchResult.append(\"Here is the search result: \\n\\t \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            for (Food food : foodList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (food.toString().contains(input.trim())) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                    searchResult.append(\" \" + (++numberOfResults) + \". \" + food.toString() + \"\\n\\t \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (numberOfResults \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                searchResult.append(\"Sorry, there is nothing found in your food list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(searchResult.toString().trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"Listed all searched foods in Diet Session\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Sorry, there is nothing in your food list.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"No item in food list for search\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 40,
      "yujinyang1998": 2,
      "tienkhoa16": 2
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemWrong.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidCommandWordException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class FoodItemWrong extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for wrong command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     * @param input user input for command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     * @param foodList arraylist that stored all the food items."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     * @param storage storage for diet session."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param index Integer variable that shows the index of the session"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                        DietStorage storage, Integer index) throws InvalidCommandWordException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        throw new InvalidCommandWordException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 14,
      "yujinyang1998": 6,
      "tienkhoa16": 3,
      "wgzesg": 1,
      "CFZeon": 1
    }
  },
  {
    "path": "src/main/java/commands/main/MainHelp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import org.apache.commons.lang3.StringUtils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_DIET;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_END;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_PROFILE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_WORKOUT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.CommonUi.helpFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for showing help message in Main Menu."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class MainHelp extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes help command in Main Menu."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Help message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        StringBuilder helpMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_PROFILE), COMMAND_WORD_PROFILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Go to Profile Menu to manage your profile\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_WORKOUT), COMMAND_WORD_WORKOUT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Go to Workout Menu to manage your workout records and create new workout records\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_DIET), COMMAND_WORD_DIET,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Go to Diet Menu to manage your past diet records\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                        + \" and create new diet records\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_END), \"end\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Exit The Schwarzenegger\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ui.showToUser(helpMessage.toString().trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(\"\", ExecutionResult.OK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 23,
      "wgzesg": 18
    }
  },
  {
    "path": "src/main/java/commands/main/MainWrong.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidCommandWordException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of invalid command in Main Menu."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class MainWrong extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Notifies user invalid input command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Invalid input command message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) throws InvalidCommandWordException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        throw new InvalidCommandWordException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 1,
      "yujinyang1998": 2,
      "tienkhoa16": 9,
      "wgzesg": 10
    }
  },
  {
    "path": "src/main/java/commands/main/ToDiet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import diet.dietmanager.DietManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for redirecting to Diet Menu from Main Menu."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ToDiet extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes redirecting to Diet Menu command from Main Menu."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Redirecting to Diet Menu message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        DietManager dietManager \u003d new DietManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        dietManager.start();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(\"\", ExecutionResult.OK);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 8,
      "wgzesg": 17
    }
  },
  {
    "path": "src/main/java/commands/main/ToProfile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import profile.ProfileSession;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for redirecting to Profile Menu from Main Menu."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ToProfile extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes redirecting to Profile Menu command from Main Menu."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Redirecting to Profile Menu message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ui.printOpening(\"Profile Menu...\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ProfileSession profileSession \u003d new ProfileSession();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        profileSession.run();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(\"\", ExecutionResult.OK);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 9,
      "wgzesg": 18
    }
  },
  {
    "path": "src/main/java/commands/main/ToWorkout.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import workout.workoutmanager.WorkoutManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for redirecting to Workout Menu from Main Menu."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ToWorkout extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes redirecting to Workout Menu command from Main Menu."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Redirecting to Workout Menu message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ui.printOpening(\"Workout Menu\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        WorkoutManager workoutManager \u003d new WorkoutManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        workoutManager.start();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ui.printReturning(\"Main Menu\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(\"\", ExecutionResult.OK);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 10,
      "wgzesg": 17
    }
  },
  {
    "path": "src/main/java/commands/profile/ProfileAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import models.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.FAILED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.OK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_CREATE_PROFILE_ACK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_PROFILE_EXIST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractCalories;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractCommandTagAndInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractExpectedWeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractHeight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractWeight;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_ADD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for adding profile."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileAdd extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute the add profile command requested by user\u0027s input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super.execute(commandArgs, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profile \u003d storage.loadData();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(MESSAGE_PROFILE_EXIST, FAILED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (InvalidSaveFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            HashMap\u003cString, String\u003e parsedParams \u003d extractCommandTagAndInfo(COMMAND_WORD_ADD, commandArgs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profile \u003d new Profile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    extractName(parsedParams),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    extractHeight(parsedParams),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    extractWeight(parsedParams),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    extractExpectedWeight(parsedParams),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    extractCalories(parsedParams)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            storage.saveData(profile);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CREATE_PROFILE_ACK, profile.toString()), OK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 58
    }
  },
  {
    "path": "src/main/java/commands/profile/ProfileDelete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import models.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.FAILED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.OK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_DELETE_NOTHING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_DELETE_PROFILE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.CLEAR_ABORTED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for deleting user profile."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileDelete extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute the delete profile command requested by user\u0027s input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super.execute(commandArgs, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profile \u003d storage.loadData();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!ui.checkConfirmation(\"Profile Menu\", \"clear your profile\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                return new CommandResult(CLEAR_ABORTED, ExecutionResult.ABORTED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            storage.saveData(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_PROFILE, OK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (InvalidSaveFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_NOTHING, FAILED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 48
    }
  },
  {
    "path": "src/main/java/commands/profile/ProfileEdit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import models.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.FAILED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.OK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.SKIPPED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractCalories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractCommandTagAndInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractExpectedWeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractHeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractWeight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_EDIT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_EDIT_NOTHING;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_EDIT_PROFILE_ACK;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_PROFILE_NOT_EXIST;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for editing profile."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileEdit extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute the edit profile command requested by user\u0027s input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super.execute(commandArgs, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profile \u003d storage.loadData();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            assert profile !\u003d null : \"profile should not be null after loading\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Profile editedProfile \u003d createEditedProfile(commandArgs, profile);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (profile.equals(editedProfile)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                return new CommandResult(MESSAGE_EDIT_NOTHING, SKIPPED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            storage.saveData(editedProfile);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PROFILE_ACK, editedProfile.toString()), OK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (InvalidSaveFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_PROFILE_NOT_EXIST, COMMAND_WORD_EDIT), FAILED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Creates a new Profile object from edited information."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param profile User\u0027s existing profile."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Edited Profile object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private Profile createEditedProfile(String commandArgs, Profile profile) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        HashMap\u003cString, String\u003e parsedParams \u003d extractCommandTagAndInfo(COMMAND_WORD_EDIT, commandArgs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String name \u003d parsedParams.containsKey(\"/n\") ? extractName(parsedParams) : profile.getName();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        int height \u003d parsedParams.containsKey(\"/h\") ? extractHeight(parsedParams) : profile.getHeight();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        double weight \u003d parsedParams.containsKey(\"/w\") ? extractWeight(parsedParams) : profile.getWeight();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        double expectedWeight \u003d parsedParams.containsKey(\"/e\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ? extractExpectedWeight(parsedParams) : profile.getExpectedWeight();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        double calories \u003d parsedParams.containsKey(\"/c\") ? extractCalories(parsedParams) : profile.getCalories();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return new Profile(name, height, weight, expectedWeight, calories);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 81
    }
  },
  {
    "path": "src/main/java/commands/profile/ProfileEnd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.EndException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for exiting Profile Menu."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileEnd extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute end command requested by user\u0027s input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super.execute(commandArgs, storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        throw new EndException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 27
    }
  },
  {
    "path": "src/main/java/commands/profile/ProfileHelp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import org.apache.commons.lang3.StringUtils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.ADD_PROFILE_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EDIT_PROFILE_FORMAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_ADD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_DELETE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_EDIT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_END;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_VIEW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.CommonUi.helpFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for showing help message in Profile Menu."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileHelp extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute help command requested by user\u0027s input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super.execute(commandArgs, storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        StringBuilder helpMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_ADD), ADD_PROFILE_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Add your new profile\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_VIEW), COMMAND_WORD_VIEW,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"View your profile\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_EDIT), EDIT_PROFILE_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Edit your existing profile. You may edit from 1 field to all fields\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_DELETE), COMMAND_WORD_DELETE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Delete your existing profile\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_END), COMMAND_WORD_END,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Go back to Main Menu\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return new CommandResult(helpMessage.toString().trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 45,
      "wgzesg": 4
    }
  },
  {
    "path": "src/main/java/commands/profile/ProfileView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import diet.dietmanager.DietManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import models.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.FAILED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_VIEW;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_ENOUGH_CALORIES;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_MORE_CALORIES;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_PROFILE_NOT_EXIST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_VIEW_PROFILE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for viewing profile."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileView extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute the view profile command requested by user\u0027s input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super.execute(commandArgs, storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profile \u003d storage.loadData();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            assert profile !\u003d null : \"profile should not be null after loading\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            double todayCalories \u003d new DietManager().getTodayTotalCalories();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            double caloriesToGoal \u003d profile.getCalories() - todayCalories;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            String caloriesMessage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (caloriesToGoal \u003e 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                caloriesMessage \u003d String.format(MESSAGE_MORE_CALORIES, caloriesToGoal);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                caloriesMessage \u003d MESSAGE_ENOUGH_CALORIES;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEW_PROFILE, profile.toString(), caloriesMessage));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (InvalidSaveFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_PROFILE_NOT_EXIST, COMMAND_WORD_VIEW), FAILED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 55
    }
  },
  {
    "path": "src/main/java/commands/profile/ProfileWrong.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidCommandWordException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of invalid command in Profile Menu."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileWrong extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Notifies user invalid input command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super.execute(commandArgs, storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        throw new InvalidCommandWordException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 1,
      "tienkhoa16": 26
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/ByeWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.EndException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ByeWS extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Terminates workout manager and return to main menu."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return null."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        throw new EndException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 6,
      "tienkhoa16": 6,
      "wgzesg": 10
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/ClearWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastRecordList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.CLEAR_ABORTED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.CLEAR_SUCCESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ClearWS extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes all workout sessions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status OK and feedback message if the execution is affirmed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *         Status ABORTED if the execution is withdrawn."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (!ui.checkConfirmation(\"Workout Menu\", \"clear all records\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return new CommandResult(CLEAR_ABORTED, ExecutionResult.ABORTED);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastRecordList.getInstance().clear();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"Cleared successfully\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(CLEAR_SUCCESS, ExecutionResult.OK);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 8,
      "wgzesg": 24
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/DeleteWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.workout.workoutmanager.OutOfArrayException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastRecordList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import workout.workoutmanager.WorkoutManagerParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.DELETE_SUCCESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DeleteWS extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Deletes a record at a specific index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status OK and feedback message if file is deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int index \u003d WorkoutManagerParser.parseIndex(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            PastRecordList.getInstance().delete(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new OutOfArrayException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"deleted successfully\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(DELETE_SUCCESS, ExecutionResult.OK);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 6,
      "yujinyang1998": 1,
      "tienkhoa16": 7,
      "wgzesg": 20
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/EditWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.workout.workoutmanager.InsufficientArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.workout.workoutmanager.NotANumberException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.workout.workoutmanager.OutOfArrayException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastRecordList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import workout.workoutsession.WorkoutSession;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.EDIT_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class EditWS extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Edits a record at a given index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status OK and feedback message if file is edit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            index \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.warning(\"Number format exception caught\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new NotANumberException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.warning(\"Insufficient arguments given!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InsufficientArgumentException(\"edit [INDEX]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            filePath \u003d PastRecordList.getInstance().edit(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.warning(\"Index Out Of Bounds Exception caught\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new OutOfArrayException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        WorkoutSession ws \u003d new WorkoutSession(filePath, false, index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"editing workout session created\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ws.workoutSessionStart();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"edited successfully\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(EDIT_SUCCESS, ExecutionResult.OK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 4,
      "tienkhoa16": 8,
      "wgzesg": 41
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/HelpWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.CommonUi.helpFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class HelpWS extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes help command in Workout Menu."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status OK and information to be printed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String helpMessage \u003d helpFormatter(\"New\", \"new \u003c/t [TAG]...\u003e\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Create a new workout session and tags. Multiple tags are separated by \u0027,\u0027.\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                + helpFormatter(\"List\", \"list \u003c/s [START_DATE]\u003e \u003c/e [END_DATE]\u003e\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Show all past sessions. Can display sessions between a certain period\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                + helpFormatter(\"Delete\", \"delete [INDEX]\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Delete the record indexed at x\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                + helpFormatter(\"Edit\", \"edit [INDEX]\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Edit the record indexed at x\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                + helpFormatter(\"Clear\", \"clear\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Clear all past results\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                + helpFormatter(\"Search\", \"search \u003c/t [TAG]...\u003e \u003c/d [DATE]\u003e\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Search records based on tags and dates. Multiple tags are seperated by \u0027,\u0027.\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                + helpFormatter(\"End\", \"end\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Go back to Main Menu\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(helpMessage.trim(), ExecutionResult.OK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 10,
      "wgzesg": 28
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/ListWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastRecordList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.OK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ListWS extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Lists past record of workout sessions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status OK and all past records in a table."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String formattedInfo \u003d PastRecordList.getInstance().list(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"Listed successfully\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(formattedInfo, OK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 4,
      "tienkhoa16": 8,
      "wgzesg": 14
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/NewWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastRecordList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import workout.workoutsession.WorkoutSession;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.OK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.NEW_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.START_NEW_SESSION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseTags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class NewWS extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Creates new workout session."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status OK and feedback message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d parseTags(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String filePath \u003d PastRecordList.getInstance().add(tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        WorkoutSession ws \u003d new WorkoutSession(filePath, true, -1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"New workout session created\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ui.showToUser(START_NEW_SESSION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        ws.workoutSessionStart();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"Ended workout session\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(NEW_SUCCESS, OK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 11,
      "yujinyang1998": 3,
      "tienkhoa16": 6,
      "wgzesg": 20
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/SearchWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastRecordList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class SearchWS extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Searches workout session."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status OK and information to be printed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String formattedInfo \u003d PastRecordList.getInstance().search(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return new CommandResult(formattedInfo, ExecutionResult.OK);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 5,
      "wgzesg": 20
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/WrongWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidCommandWordException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class WrongWS extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Notifies user invalid input command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status MISSING and COMMAND_NOT_FOUND feedback."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        throw new InvalidCommandWordException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 2,
      "tienkhoa16": 6,
      "wgzesg": 13
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.workout.workoutsession.AddFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.Exercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.WorkoutSessionParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.ExerciseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionAdd extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            exerciseList.exerciseList.add(WorkoutSessionParser.addParser(inputs));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.writeToStorage(filePath, exerciseList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            Exercise addedExercise \u003d exerciseList.exerciseList.get(exerciseList.exerciseList.size() - 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.addExerciseSuccess(addedExercise);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.addFormatError();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (AddFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.addFormatNegativeError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 32
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionDelete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.Exercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.WorkoutSessionParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.ExerciseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionDelete extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            int removeIndex \u003d WorkoutSessionParser.deleteParser(inputs);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            Exercise deletedExercise \u003d exerciseList.exerciseList.get(removeIndex - 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            exerciseList.exerciseList.remove(removeIndex - 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.writeToStorage(filePath, exerciseList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.deleteExerciseSuccess(deletedExercise);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.deleteFormatError();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.deleteIndexError();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.deleteFormatError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 32
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionEnd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.ExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionEnd extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        setEndWorkoutSessionT(hasEndedWorkoutSessions);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.writeToStorage(filePath, exerciseList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private void setEndWorkoutSessionT(boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        hasEndedWorkoutSessions[0] \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 26
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionHelp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.ExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionHelp extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        WorkoutSessionUi.printHelp();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 15
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.PastWorkoutSessionRecord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.ExerciseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import static ui.CommonUi.LS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionList extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            printList(exerciseList.exerciseList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.writeToStorage(filePath, exerciseList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private void printList(ArrayList\u003cExercise\u003e exercise) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assert exercise !\u003d null : \"exercise list not found\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        if (exercise.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.emptyListError();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            ui.showToUser(formatList(exercise));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private String formatList(ArrayList\u003cExercise\u003e exercise) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e exerciseNames \u003d (ArrayList\u003cString\u003e) exercise.stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                .map(Exercise::getDescription).collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        int descriptionMaxLenInt \u003d Math.max(20,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                exerciseNames.stream().max(Comparator.comparingInt(String::length)).get().length());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String descriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt + 1) + \"s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String returnString \u003d String.format(\"%-8s\", \"Index\") + String.format(descriptionFormat, \"Exercise\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                + String.format(\"%-12s\", \"Repetitions\") + String.format(\"%-10s\", \"Weight\") + LS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        StringBuilder infoBuilder \u003d new StringBuilder(returnString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String listDescriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt) + \"s %-11s %s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (int i \u003d 0; i \u003c exercise.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            String rowContent \u003d String.format(listDescriptionFormat, exercise.get(i).getDescription(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                    exercise.get(i).getRepetitions(), exercise.get(i).getWeight());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            String row \u003d String.format(\"%-8s\", i + 1) + rowContent + LS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            infoBuilder.append(row);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        returnString \u003d infoBuilder.toString().trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 66
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionSearch.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.WorkoutSessionParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.ExerciseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import static ui.CommonUi.LS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionSearch extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private boolean isEmptySearchResult \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String searchTerm \u003d WorkoutSessionParser.searchParser(inputs).toLowerCase();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        if (searchTerm.length() \u003e 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            String searchResult \u003d formatList(exerciseList.exerciseList, searchTerm);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            if (!isEmptySearchResult) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                ui.showToUser(searchResult);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                WorkoutSessionUi.searchResultsEmpty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.searchInputError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private String formatList(ArrayList\u003cExercise\u003e exercise, String searchTerm) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e exerciseNames \u003d (ArrayList\u003cString\u003e) exercise.stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                .map(Exercise::getDescription).collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        int descriptionMaxLenInt \u003d Math.max(20,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                exerciseNames.stream().max(Comparator.comparingInt(String::length)).get().length());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String descriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt + 1) + \"s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String returnString \u003d String.format(\"%-8s\", \"Index\") + String.format(descriptionFormat, \"Exercise\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                + String.format(\"%-12s\", \"Repetitions\") + String.format(\"%-10s\", \"Weight\") + LS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        StringBuilder infoBuilder \u003d new StringBuilder(returnString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String listDescriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt) + \"s %-11s %s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (int i \u003d 0; i \u003c exercise.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            if (exercise.get(i).getDescription().toLowerCase().contains(searchTerm)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                String rowContent \u003d String.format(listDescriptionFormat, exercise.get(i).getDescription(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        exercise.get(i).getRepetitions(), exercise.get(i).getWeight());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                String row \u003d String.format(\"%-8s\", i + 1) + rowContent + LS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                infoBuilder.append(row);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                isEmptySearchResult \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        returnString \u003d infoBuilder.toString().trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 66
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionWrong.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidCommandWordException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.ExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionWrong extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        boolean[] hasEndedWorkoutSessions) throws InvalidCommandWordException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        throw new InvalidCommandWordException();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 16
    }
  },
  {
    "path": "src/main/java/diet/DateParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package diet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e dtFormatters \u003d Arrays.asList("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd HH:mm\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd HH:mm\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd HHmm\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e dFormatters \u003d Arrays.asList("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd MM yyyy\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"ddMMyyyy\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     * Parses a given string following one of the accepted format into date-time format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     * @param targetString String input to be parsed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     * @return Parsed result in the form of LocalDateTime or null if no value parsing is found."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static LocalDateTime parseDate(String targetString) throws InvalidDateFormatException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        for (DateTimeFormatter dtf : dtFormatters) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                return LocalDateTime.parse(targetString, dtf);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        for (DateTimeFormatter dtf : dFormatters) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                return LocalDate.parse(targetString, dtf).atStartOfDay();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 4,
      "yujinyang1998": 56
    }
  },
  {
    "path": "src/main/java/diet/dietmanager/DietManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import diet.dietsession.DietSession;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.ExceptionHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidCommandWordException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.diet.InvalidSearchDateException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.profile.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_END;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietManager {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final CommandLib cl;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final DietManagerParser parser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private final DietManagerUi dietManagerUi;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private final DietStorage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs DietManager and initializes command library for dietManager."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public DietManager() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        storage \u003d new DietStorage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        parser \u003d new DietManagerParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        dietManagerUi \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Starts diet manager to read user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        dietManagerUi.printOpening(\"Diet Menu\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String input \u003d dietManagerUi.getCommand(\"Diet Menu\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assert input !\u003d null : \"Null input before input loop\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        while (!input.equals(COMMAND_WORD_END)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                processCommand(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } catch (InvalidCommandWordException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                dietManagerUi.showToUser(ExceptionHandler.handleCheckedExceptions(e));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            input \u003d dietManagerUi.getCommand(\"Diet Menu\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        dietManagerUi.printReturning(\"Main Menu\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Processes the user input to interpret correct command words."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     * @param input user input for command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     * @throws InvalidCommandWordException handles InvalidCommandWordException."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private void processCommand(String input) throws InvalidCommandWordException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] commParts \u003d parser.parse(input.trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Command command \u003d cl.getCommand(commParts[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            command.execute(commParts[1].trim(), storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | InvalidCommandFormatException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Invalid command in diet session\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new InvalidCommandWordException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (InvalidDateFormatException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Wrong format for date input.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (InvalidSearchDateException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            dietManagerUi.showToUser(\"Starting date should be earlier than end date.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Gets total calories of the diet session today."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return total calories"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    public double getTodayTotalCalories() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        double todayTotalCalories \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        File folder \u003d new File(\"saves/diet/\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        StringBuilder listResult \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assert folder.exists();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            if (Objects.requireNonNull(listOfFiles).length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                listResult.append(\"It seems like you have not eaten anything today!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            for (int i \u003d 0; i \u003c Objects.requireNonNull(listOfFiles).length; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                DietSession ds \u003d storage.readDietSession(listOfFiles[i].getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                if (ds.getDate().equals(java.time.LocalDate.now())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                    todayTotalCalories +\u003d ds.getTotalCalories();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Calculated total calories so far today\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.WARNING, \"No instances of diet sessions saved\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        return todayTotalCalories;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 47,
      "yujinyang1998": 7,
      "tienkhoa16": 18,
      "wgzesg": 1,
      "CFZeon": 35
    }
  },
  {
    "path": "src/main/java/diet/dietmanager/DietManagerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.DateParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.profile.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietManagerParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Parses user input to extract command words and instructions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param comm user input for command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return a string array containing command words and instructions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String[] parse(String comm) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (comm.contains(\" \")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return comm.split(\" \", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return new String[]{comm, \"filler\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Extracts out date and time by looking for date strings in YYYY-MM-DD format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param parsedParams user input for new diet session"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param extractDateMessage string builder that appends warnings and messages"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return date in MMM dd yyyy if the user inputs date in YYYY-MM-DD format;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *         else returns original string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IllegalStateException if the date is in wrong state"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws InvalidDateFormatException if the date is in wrong format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String extractNewDate(HashMap\u003cString, String\u003e parsedParams, StringBuilder extractDateMessage)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throws IllegalStateException, InvalidDateFormatException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String dateString \u003d parsedParams.get(\"/d\").trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (!dateString.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                return DateParser.parseDate(dateString).format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                extractDateMessage.append(\"Date input is empty.\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (InvalidDateFormatException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            extractDateMessage.append(\"No date input is detected.\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        extractDateMessage.append(\"\\t I\u0027ve replaced it with today\u0027s date.\\n\\t \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return dtf.format(now);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Extracts out tag of the diet session."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param parsedParams user input for new diet session"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param extractMealMessage string builder that appends warnings and messages"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return tag input if there is any;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *         else returns \"unspecified\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws NullPointerException if there is nothing in tag input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String extractNewTag(HashMap\u003cString, String\u003e parsedParams, StringBuilder extractMealMessage)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throws NullPointerException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String tag \u003d parsedParams.get(\"/t\").trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (tag.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                extractMealMessage.append(\"Tag input is empty, \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                        + \"and it is replaced with \\\"unspecified\\\".\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                return \"unspecified\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                return tag;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            extractMealMessage.append(\"No tag is detected, \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    + \"and the session is tagged as \\\"unspecified\\\".\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return \"unspecified\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Extracts out starting date, end date and tag information."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param cmd user command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param commandArgs user input"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return a hashmap where each information corresponds to the correct separator"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws InvalidCommandFormatException if user enters invalid commands"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public HashMap\u003cString, String\u003e extractDietManagerCommandTagAndInfo(String cmd, String commandArgs)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throws InvalidCommandFormatException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        HashMap\u003cString, String\u003e parsedParams \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        int startIndex \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        int endIndex \u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if ((cmd.equals(\"search\")) \u0026\u0026 (commandArgs.isEmpty() || !(commandArgs.contains(\"/t\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                || commandArgs.contains(\"/s\") || commandArgs.contains(\"/e\")))) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new InvalidCommandFormatException(\"Wrong format, please enter in the format:\\n\\t \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    + \"search \u003c/s [STARTING_DATE]\u003e \u003c/e [END_DATE]\u003e \u003c/t [TAG]\u003e\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            while (commandArgs.indexOf(\"/\", startIndex) !\u003d -1) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                endIndex \u003d commandArgs.indexOf(\"/\", startIndex + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (endIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    endIndex \u003d commandArgs.length();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                String parsedOption \u003d commandArgs.substring(startIndex + 2, endIndex).trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                String optionIndicator \u003d commandArgs.substring(startIndex, startIndex + 2).trim().toLowerCase();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                parsedParams.put(optionIndicator, parsedOption);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                startIndex \u003d endIndex;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return parsedParams;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (cmd.equals(\"search\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                logger.log(Level.WARNING, \"Wrong format for search input\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                throw new InvalidCommandFormatException(\"Wrong format, please enter in the format:\\n\\t \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                        + \"search \u003c/s [STARTING_DATE]\u003e \u003c/e [END_DATE]\u003e \u003c/t [TAG]\u003e\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } else if (cmd.equals(\"new\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                logger.log(Level.WARNING, \"Wrong format for create input\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                throw new InvalidCommandFormatException(\"Wrong format, please enter in the format:\\n\\t \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                        + \"new /d [DATE] /t [TAG]\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                throw new InvalidCommandFormatException(\"Wrong format\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Extracts out search tag."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param parsedParams a hashmap that contains information about tag"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param searchResult string build that contains warning messages"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return search tag"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String extractSearchTag(HashMap\u003cString, String\u003e parsedParams, StringBuilder searchResult) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String tag \u003d parsedParams.get(\"/t\").trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return tag;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"It looks like there is no input for search tag\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Extracts out starting date."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param parsedParams a hashmap that contains information about starting date"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param searchResult string build that contains warning messages"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return starting date"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws InvalidDateFormatException if the date is in wrong format"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public LocalDateTime extractStartDates(HashMap\u003cString, String\u003e parsedParams, StringBuilder searchResult)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throws InvalidDateFormatException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String startDate \u003d parsedParams.get(\"/s\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return DateParser.parseDate(startDate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"I do not understand your date input in start date\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"It looks like there is no date input in start date\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (InvalidDateFormatException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Invalid date in start date\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        searchResult.append(\"Starting date is empty, \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \"and it is replaced with the earliest date.\\n\\t \");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return DateParser.parseDate(\"0001-01-01\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Extracts out end date."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param parsedParams a hashmap that contains information about end date"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param searchResult string build that contains warning messages"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return end date"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws InvalidDateFormatException if the date is in wrong format"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public LocalDateTime extractEndDates(HashMap\u003cString, String\u003e parsedParams, StringBuilder searchResult)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throws InvalidDateFormatException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String startDate \u003d parsedParams.get(\"/e\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return DateParser.parseDate(startDate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"I do not understand your date input in end date\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"It looks like there is no date input in end date\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (InvalidDateFormatException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Invalid date in start date\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        searchResult.append(\"End date is empty, \""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \"and it is replaced with the latest date.\\n\\t \");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return DateParser.parseDate(\"9999-12-12\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 214
    }
  },
  {
    "path": "src/main/java/diet/dietsession/DietSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import diet.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.ExceptionHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidCommandWordException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.diet.dietsession.DietSessionUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSession {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final ArrayList\u003cFood\u003e foodList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final String dateInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final String typeInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private boolean isNew;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private final DietSessionUi dietSessionUi;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private transient CommandLib cl;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private final DietStorage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final DietSessionParser parser \u003d new DietSessionParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public boolean endDietSession \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Constructs DietSession and initialize command library for dietSession."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public DietSession(String typeInput, String dateInput, boolean isNew, int index) throws InvalidDateFormatException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.dateInput \u003d dateInput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.date \u003d DateParser.parseDate(dateInput).toLocalDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.typeInput \u003d typeInput;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        storage \u003d new DietStorage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        dietSessionUi \u003d new DietSessionUi();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.isNew \u003d isNew;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String getDateInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return dateInput;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String getTypeInput() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return typeInput;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void setEndDietSession(Boolean hasEnded) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.endDietSession \u003d hasEnded;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Starts dietSession and initializes command library for dietSession."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IOException handles input/output exception"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void start(boolean isNew, int index) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"starting diet session\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        dietSessionUi.printOpening();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        setEndDietSession(false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.isNew \u003d isNew;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        dietSessionInputLoop();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        setEndDietSession(true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        dietSessionUi.printExit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Starts reading user input for dietSession commands."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private void dietSessionInputLoop() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        if (isNew) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            input \u003d dietSessionUi.getCommand(\"Diet Menu \u003e New Diet Session\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            input \u003d dietSessionUi.getCommand(\"Diet Menu \u003e Diet Session \" + index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        while (!input.equals(\"end\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                processCommand(input);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                dietSessionUi.showToUser(ExceptionHandler.handleUncheckedExceptions(e));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } catch (InvalidCommandWordException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                dietSessionUi.showToUser(ExceptionHandler.handleCheckedExceptions(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            if (isNew) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                input \u003d dietSessionUi.getCommand(\"Diet Menu \u003e New Diet Session\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                input \u003d dietSessionUi.getCommand(\"Diet Menu \u003e Diet Session \" + index);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Processes user input for dietSession commands."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws NullPointerException handles null pointer exception"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private void processCommand(String input) throws NullPointerException, InvalidCommandWordException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] commParts \u003d parser.parse(input);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Command command \u003d cl.getCommand(commParts[0]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(commParts[1].trim(), foodList, storage, index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    public double getTotalCalories() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        double totalCalories \u003d 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        for (int i \u003d 0; i \u003c foodList.size(); i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            totalCalories +\u003d foodList.get(i).getCalories();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        return totalCalories;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 72,
      "yujinyang1998": 26,
      "tienkhoa16": 22,
      "wgzesg": 1,
      "CFZeon": 14
    }
  },
  {
    "path": "src/main/java/diet/dietsession/DietSessionParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import exceptions.diet.NegativeCaloriesException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.diet.NoNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import exceptions.profile.InvalidCaloriesException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String[] parse(String comm) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (comm.contains(\" \")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return comm.split(\" \", 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return new String[]{comm, \"filler\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Processes the name of the food item."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param food string for food content"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return food name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IndexOutOfBoundsException handles exception for not inputting food name or calories"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String processFoodName(String food) throws IndexOutOfBoundsException, NoNameException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] temp \u003d food.trim().split(\"/c\", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (temp[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new NoNameException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return temp[0].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Processes the calories of the food item."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param food string for food content"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return food calories"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws NumberFormatException handles exception for wrong calories input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    public double processFoodCalories(String food) throws NumberFormatException, NegativeCaloriesException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] temp \u003d food.trim().split(\"/c\", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        if (Double.parseDouble(temp[1]) \u003c 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            throw new NegativeCaloriesException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"Processed food calories successfully\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return Double.parseDouble(temp[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 46,
      "tienkhoa16": 5,
      "CFZeon": 6
    }
  },
  {
    "path": "src/main/java/diet/dietsession/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    protected double calories;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public Food(String name, double calories) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        this.calories \u003d Math.min(calories, 200000);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return this.name + \" with calories: \" + this.calories;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    public double getCalories() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 14,
      "CFZeon": 9
    }
  },
  {
    "path": "src/main/java/exceptions/EndException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_END;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when user wants to return to Main Menu."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class EndException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs EndException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public EndException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_END);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 16
    }
  },
  {
    "path": "src/main/java/exceptions/ExceptionHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that deals with handling exceptions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ExceptionHandler {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Handles checked exceptions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param e Checked exceptions in The Schwarzenegger."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Error message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static String handleCheckedExceptions(SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        logger.log(Level.WARNING, \"handling Schwarzenegger Exception: \" + e.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Handles unchecked exceptions."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param e Unchecked exception in Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Error message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static String handleUncheckedExceptions(Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        logger.log(Level.WARNING, \"handling unchecked exception: \" + e.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return e.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 8,
      "tienkhoa16": 27
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidCommandWordException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_INVALID_COMMAND_WORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when command word is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidCommandWordException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidCommandWordException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidCommandWordException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_COMMAND_WORD);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 1,
      "tienkhoa16": 15
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidDateFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": " * Represents exception when date time format is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class InvalidDateFormatException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     * Constructs InvalidDateFormatException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public InvalidDateFormatException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        super(\"Wrong format, please enter in the format: \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \"\\t new /d [DATE: DD-MM-YYYY]\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 1,
      "yujinyang1998": 14
    }
  },
  {
    "path": "src/main/java/exceptions/SchwarzeneggerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A base class for the checked exceptions in Schwarzenegger."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public abstract class SchwarzeneggerException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs SchwarzeneggerException object inheriting class Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param message Error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public SchwarzeneggerException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 16
    }
  },
  {
    "path": "src/main/java/exceptions/diet/InvalidSearchDateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package exceptions.diet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when search date is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class InvalidSearchDateException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidSearchDateException object inheriting class SchwarzeneggerException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param message Error message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public InvalidSearchDateException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 14,
      "tienkhoa16": 4
    }
  },
  {
    "path": "src/main/java/exceptions/diet/NegativeCaloriesException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package exceptions.diet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static ui.diet.dietsession.DietSessionUi.MESSAGE_NEGATIVE_CALORIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class NegativeCaloriesException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "     * Constructs NegativeCaloriesException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    public NegativeCaloriesException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        super(MESSAGE_NEGATIVE_CALORIES);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CFZeon": 16
    }
  },
  {
    "path": "src/main/java/exceptions/diet/NoNameException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package exceptions.diet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import static ui.diet.dietsession.DietSessionUi.MESSAGE_NO_FOOD_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class NoNameException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Constructs SchwarzeneggerException object inheriting class Exception."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public NoNameException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        super(MESSAGE_NO_FOOD_NAME);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 15
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidCaloriesException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_INVALID_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when input calories is invalid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidCaloriesException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidCaloriesException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidCaloriesException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_CALORIES);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 18
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidCommandFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when command format is invalid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidCommandFormatException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidCommandFormatException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param format Correct format of the command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidCommandFormatException(String format) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(String.format(MESSAGE_INVALID_COMMAND_FORMAT, format));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 20
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidHeightException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_INVALID_HEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when input height is invalid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidHeightException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidHeightException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidHeightException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_HEIGHT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 18
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidNameException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_INVALID_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when input name is invalid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidNameException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidNameException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidNameException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 18
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidSaveFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_INVALID_SAVE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when there is corruption in data save format."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidSaveFormatException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidSaveFormatException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param filePath Path to file with invalid save format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public InvalidSaveFormatException(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        super(String.format(MESSAGE_INVALID_SAVE_FORMAT, filePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 2,
      "tienkhoa16": 19
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidWeightException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_INVALID_WEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when input weight is invalid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidWeightException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidWeightException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidWeightException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_WEIGHT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 18
    }
  },
  {
    "path": "src/main/java/exceptions/profile/LoadingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_LOADING_ERROR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception while loading data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class LoadingException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs LoadingException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param message The cause of the error."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public LoadingException(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(String.format(MESSAGE_LOADING_ERROR, message));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 20
    }
  },
  {
    "path": "src/main/java/exceptions/profile/SavingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_SAVING_ERROR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception while saving data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class SavingException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs SavingException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param message The cause of the error."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public SavingException(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(String.format(MESSAGE_SAVING_ERROR, message));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 20
    }
  },
  {
    "path": "src/main/java/exceptions/workout/workoutmanager/InsufficientArgumentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package exceptions.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.MESSAGE_INSUFFICIENT_ARGUMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when user inputs insufficient arguments to command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class InsufficientArgumentException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InsufficientArgumentException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param format Correct format of command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InsufficientArgumentException(String format) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(String.format(MESSAGE_INSUFFICIENT_ARGUMENT, format));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 1,
      "tienkhoa16": 8,
      "wgzesg": 11
    }
  },
  {
    "path": "src/main/java/exceptions/workout/workoutmanager/NotANumberException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package exceptions.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.MESSAGE_NOT_A_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when input is not a number."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class NotANumberException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs NotANumberException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public NotANumberException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super(MESSAGE_NOT_A_NUMBER);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 1,
      "tienkhoa16": 4,
      "wgzesg": 13
    }
  },
  {
    "path": "src/main/java/exceptions/workout/workoutmanager/OutOfArrayException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package exceptions.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.MESSAGE_OUT_OF_ARRAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when index is out of array."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class OutOfArrayException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs OutOfArrayException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public OutOfArrayException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super(MESSAGE_OUT_OF_ARRAY);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 1,
      "tienkhoa16": 6,
      "wgzesg": 11
    }
  },
  {
    "path": "src/main/java/exceptions/workout/workoutmanager/SchwIoException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package exceptions.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when IOException is thrown in WorkoutManagerStorage."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class SchwIoException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs SchwIoException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param content Content of the error message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public SchwIoException(String content) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 1,
      "tienkhoa16": 8,
      "wgzesg": 9
    }
  },
  {
    "path": "src/main/java/exceptions/workout/workoutsession/AddFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package exceptions.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when add format in WorkoutSession is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class AddFormatException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs AddFormatException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public AddFormatException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        super(\"AddFormatException\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 9,
      "tienkhoa16": 7
    }
  },
  {
    "path": "src/main/java/exceptions/workout/workoutsession/DeleteFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package exceptions.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when delete format in WorkoutSession is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class DeleteFormatException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs DeleteFormatException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public DeleteFormatException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        super(\"DeleteFormatException\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 9,
      "tienkhoa16": 7
    }
  },
  {
    "path": "src/main/java/logger/SchwarzeneggerLogger.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package logger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.PATH_TO_LOG_FILE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class to handle file logging."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class SchwarzeneggerLogger {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static SchwarzeneggerLogger singleInstance \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private Logger logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs SchwarzeneggerLogger object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private SchwarzeneggerLogger() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            File file \u003d new File(PATH_TO_LOG_FILE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            SimpleFormatter formatter \u003d new SimpleFormatter();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            FileHandler fh \u003d new FileHandler(PATH_TO_LOG_FILE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            fh.setFormatter(formatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger \u003d Logger.getLogger(\"SchwarzeneggerLogger\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (SecurityException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets logger attribute of SchwarzeneggerLogger."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Logger."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static Logger getInstanceLogger() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (singleInstance \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            singleInstance \u003d new SchwarzeneggerLogger();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return singleInstance.logger;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 52
    }
  },
  {
    "path": "src/main/java/models/Exercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private String moveName \u003d null;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private int repetitions \u003d 0;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private int weight \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public Exercise(String moveName, int repetitions, int weight) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.moveName \u003d moveName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.repetitions \u003d repetitions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return moveName"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \", Repetitions:\" + repetitions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \", Weight\u003d\" + weight;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return moveName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public String getRepetitions() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return Integer.toString(repetitions);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public String getWeight() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return Integer.toString(weight);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 19,
      "yujinyang1998": 16
    }
  },
  {
    "path": "src/main/java/models/ExerciseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class ExerciseList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public ArrayList\u003cExercise\u003e exerciseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 7
    }
  },
  {
    "path": "src/main/java/models/PastRecordList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.workout.workoutmanager.SchwIoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import storage.workout.WorkOutManagerStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.CommonUi.LS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseSearchConditions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A singleton class representing list of past records."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class PastRecordList {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final int OFFSET \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static PastRecordList singlePastFile \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static List\u003cPastWorkoutSessionRecord\u003e pastFiles;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    WorkOutManagerStorage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs PastRecordList object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private PastRecordList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        storage \u003d new WorkOutManagerStorage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        storage.init();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            pastFiles \u003d storage.readPastRecords();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.log(Level.INFO, \"Workout records loaded.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (SchwIoException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            pastFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.log(Level.INFO, \"Workout records cannot be loaded.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"got bug\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets instance of PastRecordList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Instance of PastRecordList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static PastRecordList getInstance() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (singlePastFile \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            singlePastFile \u003d new PastRecordList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return singlePastFile;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Clears all the local storage file and past records."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error occurred writing to file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void clear() throws SchwIoException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        while (pastFiles.size() !\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            delete(1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.WARNING, \"Record is cleared.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Deletes a file and its past record at a given index."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param index Index of the file to be cleared."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error occurred while writing to file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void delete(int index) throws SchwIoException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord deletedRecord;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        deletedRecord \u003d pastFiles.get(index - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        pastFiles.remove(index - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        File myFile \u003d new File(deletedRecord.getFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        myFile.delete();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        storage.writePastRecords(pastFiles);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Record is deleted.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Searches based on conditions and returns a string representation of all the records"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * that satisfies the condition."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args String of user input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return String representation of all the records that satisfies the condition."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String search(String args) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e conditions \u003d parseSearchConditions(args);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cPastWorkoutSessionRecord\u003e result \u003d pastFiles.stream()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                .filter(conditions.stream().reduce(x -\u003e true, Predicate::and))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String info;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (result.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            info \u003d \"You do not have any records that satisfies the condition.\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.log(Level.INFO, \"Search completed.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return info;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        info \u003d result.size() + \"  records are found:\" + LS;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        info \u003d getListInTable(result, info);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Search completed.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return info;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private String getListInTable(List\u003cPastWorkoutSessionRecord\u003e result, String info) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        info +\u003d String.format(\"%-8s\", \"Index\") + String.format(\"%-16s\", \"Creation date\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                + String.format(\"%-8s\", \"Tags\") + LS;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        StringBuilder infoBuilder \u003d new StringBuilder(info);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (PastWorkoutSessionRecord wsr : result) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            index \u003d pastFiles.indexOf(wsr);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String row \u003d String.format(\"%-8s\", index + OFFSET) + wsr.toString() + LS;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            infoBuilder.append(row);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        info \u003d infoBuilder.toString().trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return info;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Edits a file and its past record at a given index."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param index Index of the file to be edited."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error occurred while reading or writing to file."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String edit(int index) throws SchwIoException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord editedRecord;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        editedRecord \u003d pastFiles.get(index - 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord newRecord \u003d editedRecord.edit();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        pastFiles.set(index - 1, newRecord);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        storage.writePastRecords(pastFiles);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Edit completed.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return newRecord.getFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Adds a new file and records."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param tags Tags on the new record."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error occurred while reading or writing to file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String add(ArrayList\u003cString\u003e tags) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String newFilePath \u003d storage.createfile();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord newRecord \u003d new PastWorkoutSessionRecord(newFilePath, tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        pastFiles.add(newRecord);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        storage.writePastRecords(pastFiles);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Add completed.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return newFilePath;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Lists all records."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args User\u0027s input."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String list(String args) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e conditions \u003d parseList(args);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cPastWorkoutSessionRecord\u003e result \u003d pastFiles.stream()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                .filter(conditions.stream().reduce(x -\u003e true, Predicate::and))"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String info;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (pastFiles.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            info \u003d \"You do not have any record yet. Key in \u0027new\u0027 to start one.\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.log(Level.INFO, \"List completed.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return info;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } else if (result.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            info \u003d \"You do not have any records between that period.\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.log(Level.INFO, \"List completed.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return info;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (conditions.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            info \u003d \"You have \" + pastFiles.size() + \" records:\" + LS;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            info \u003d \"You have \" + result.size() + \" records in the given period:\" + LS;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        info \u003d getListInTable(result, info);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"List completed.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return info;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 1,
      "tienkhoa16": 38,
      "wgzesg": 154
    }
  },
  {
    "path": "src/main/java/models/PastWorkoutSessionRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class PastWorkoutSessionRecord implements Comparable\u003cPastWorkoutSessionRecord\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final LocalDateTime creationTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final LocalDateTime lastEditTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructor of a new PastWorkoutSessionRecord."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param filePath File path of where the records of the session are stored."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param tags Tags attached to this session."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public PastWorkoutSessionRecord(String filePath, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        creationTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        lastEditTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public PastWorkoutSessionRecord(String filePath, LocalDateTime creationTime,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                                    LocalDateTime lastEditTime, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.creationTime \u003d creationTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.lastEditTime \u003d lastEditTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Checks if this record contains all the given tag."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param tgs list of tags specified."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return True if all contained; otherwise false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public boolean containsAll(ArrayList\u003cString\u003e tgs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (String s : tgs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            if (!isContained(s)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private boolean isContained(String s) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (String t : tags) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            if (t.contains(s)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Checks if this record is created on a given date."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param date the given date"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return True if it is created on that day; otherwise false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public boolean isCreatedOn(LocalDate date) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return date.equals(creationTime.toLocalDate());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Check if this record is created after a given date(inclusive)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param date the given date."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return True if it is created after or on that day; otherwise false."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public boolean isCreatedAfter(LocalDate date) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return date.equals(creationTime.toLocalDate()) || date.isBefore(creationTime.toLocalDate());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Check if this record is created before a given date(inclusive)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param date the given date."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return True if it is created before or on that day; otherwise false."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public boolean isCreatedBefore(LocalDate date) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return date.equals(creationTime.toLocalDate()) || date.isAfter(creationTime.toLocalDate());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return String.format(\"%-15s %s\", creationTime.toLocalDate(), tags.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public int compareTo(PastWorkoutSessionRecord o) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (creationTime.isBefore(o.creationTime)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (!(o instanceof PastWorkoutSessionRecord)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return creationTime.equals(((PastWorkoutSessionRecord) o).creationTime)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \u0026\u0026 lastEditTime.equals(((PastWorkoutSessionRecord) o).lastEditTime)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \u0026\u0026 tags.equals(((PastWorkoutSessionRecord) o).tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Updates last edited time when edited."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return A new PastWorkoutSessionRecord with updated lastEdit time."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public PastWorkoutSessionRecord edit() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new PastWorkoutSessionRecord(filePath, creationTime, LocalDateTime.now(), this.tags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 25,
      "tienkhoa16": 11,
      "wgzesg": 88
    }
  },
  {
    "path": "src/main/java/models/Profile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.PROFILE_STRING_REPRESENTATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Utils.checkValidProfile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that manages user profile."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected int height;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected double weight;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected double expectedWeight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected double calories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs Profile object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param name User\u0027s name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param height User\u0027s height in centimeters."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param weight User\u0027s weight in kilograms."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param expectedWeight User\u0027s expected weight in kilograms."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param calories User\u0027s expected calories intake daily."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Profile(String name, int height, double weight, double expectedWeight, double calories) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.expectedWeight \u003d expectedWeight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides toString method of class Object to get string presentation of Profile object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return String presentation of Profile object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assert checkValidProfile(this) : \"Profile is invalid\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return String.format(PROFILE_STRING_REPRESENTATION, getName(), getHeight(), getWeight(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                getExpectedWeight(), getCalories(), getBmiClassification());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s name."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s height."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s height."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s weight."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s weight."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s expected weight."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s expected weight."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public double getExpectedWeight() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return expectedWeight;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s expected calories intake daily.."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s expected calories intake daily.."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public double getCalories() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s bmi index and classification."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s bmi index and classification."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String getBmiClassification() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String classification;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        double bmiIndex \u003d weight / Math.pow((double) height / 100, 2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (bmiIndex \u003c 18.5) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Underweight\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (bmiIndex \u003c\u003d 24.9) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Normal Weight\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (bmiIndex \u003c\u003d 29.9) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Overweight\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (bmiIndex \u003c\u003d 34.9) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Obesity Class 1\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (bmiIndex \u003c\u003d 39.9) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Obesity Class 2\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Extreme Obesity Class 3\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return String.format(\"%.1f (%s)\", bmiIndex, classification);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides equals method of class Object to compare Profile object."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param o Object to compare."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return True if this Profile object is the same as the obj"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *         argument; false otherwise."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile \u003d (Profile) o;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return name.equals(profile.name)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 calories \u003d\u003d profile.calories"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 height \u003d\u003d profile.height"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 Double.compare(profile.weight, weight) \u003d\u003d 0"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 Double.compare(profile.expectedWeight, expectedWeight) \u003d\u003d 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 139
    }
  },
  {
    "path": "src/main/java/profile/Constants.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.CommonUi.LS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Constants used in profile package."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int COMMAND_ARGS_INDEX \u003d 1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int COMMAND_SPLIT_LIMIT \u003d 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int COMMAND_TYPE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String ADD_PROFILE_FORMAT \u003d \"add /n [NAME] /h [HEIGHT] \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"/w [CURRENT_WEIGHT] /e [EXPECTED_WEIGHT] /c [DAILY_CALORIE_INTAKE]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String EDIT_PROFILE_FORMAT \u003d \"edit \u003c/n [NAME]\u003e \u003c/h [HEIGHT]\u003e \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"\u003c/w [CURRENT_WEIGHT]\u003e \u003c/e [EXPECTED_WEIGHT]\u003e \u003c/c [DAILY_CALORIE_INTAKE]\u003e\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String EXAMPLE_BMI \u003d \"32.0 (Obesity Class 1)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double EXAMPLE_CALORIES \u003d 2500;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double EXAMPLE_EXPECTED_WEIGHT \u003d 100;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int EXAMPLE_HEIGHT \u003d 188;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String EXAMPLE_NAME \u003d \"Schwarzenegger\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double EXAMPLE_WEIGHT \u003d 113;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String GREEDY_WHITE_SPACE \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int HEIGHT_LOWER_BOUND \u003d 63;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int HEIGHT_UPPER_BOUND \u003d 231;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String PROFILE_STRING_REPRESENTATION \u003d \"\\tName: %s\" + LS"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"\\tHeight: %d cm\" + LS + \"\\tWeight: %.1f kg\" + LS + \"\\tExpected Weight: %.1f kg\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + LS + \"\\tExpected daily calories intake: %.1f calories\" + LS + \"\\tYour BMI: %s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String EXAMPLE_PROFILE_STRING \u003d String.format(PROFILE_STRING_REPRESENTATION, EXAMPLE_NAME,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            EXAMPLE_HEIGHT, EXAMPLE_WEIGHT, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES, EXAMPLE_BMI);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double WEIGHT_LOWER_BOUND \u003d 2.1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double WEIGHT_UPPER_BOUND \u003d 635;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double CALORIES_UPPER_BOUND \u003d 200000;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double CALORIES_LOWER_BOUND \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 37
    }
  },
  {
    "path": "src/main/java/profile/ProfileParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidCaloriesException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidHeightException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidNameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidWeightException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.workout.workoutmanager.InsufficientArgumentException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import org.apache.commons.lang3.text.WordUtils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.ADD_PROFILE_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_ARGS_INDEX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_SPLIT_LIMIT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_TYPE_INDEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EDIT_PROFILE_FORMAT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EMPTY_STRING;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.GREEDY_WHITE_SPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_ADD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_EDIT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_HELP;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that deals with making sense of user\u0027s command inside Profile Session."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Parses and returns the Command associated with the user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param userInputString User\u0027s raw input string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Size 2 array; first element is the command type and second element is the arguments string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String[] parseCommand(String userInputString) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String[] split \u003d userInputString.trim().split(GREEDY_WHITE_SPACE, COMMAND_SPLIT_LIMIT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String commandType \u003d split[COMMAND_TYPE_INDEX].toLowerCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String commandArgs \u003d (split.length \u003d\u003d COMMAND_SPLIT_LIMIT ? split[COMMAND_ARGS_INDEX] : EMPTY_STRING);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return new String[]{commandType, commandArgs};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Extracts command tags from user input to get option indicator and parsed option."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param command Command being executed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return HashMap containing option indicator and parsed option pairs."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static HashMap\u003cString, String\u003e extractCommandTagAndInfo(String command, String commandArgs)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (!commandArgs.contains(\"/\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throwInvalidCommandFormat(command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        HashMap\u003cString, String\u003e parsedParams \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        int startIndex \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        int endIndex \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            while (commandArgs.indexOf(\"/\", startIndex) !\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                endIndex \u003d commandArgs.indexOf(\"/\", startIndex + 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                if (endIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    endIndex \u003d commandArgs.length();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                String parsedOption \u003d commandArgs.substring(startIndex + 2, endIndex).trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                String optionIndicator \u003d commandArgs.substring(startIndex, startIndex + 2).trim().toLowerCase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                parsedParams.put(optionIndicator, parsedOption);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                startIndex \u003d endIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!checkSufficientParams(command, parsedParams)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throwInsufficientArgument(command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throwInvalidCommandFormat(command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return parsedParams;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Checks if user inputs sufficient number of params to the command."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param command Type of command being executed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param parsedParams HashMap containing option indicator and parsed option pairs."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return If the number of params input to the command is sufficient."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static boolean checkSufficientParams(String command, HashMap\u003cString, String\u003e parsedParams) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        boolean isSufficient \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        case COMMAND_WORD_ADD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!parsedParams.containsKey(\"/n\") || !parsedParams.containsKey(\"/h\") || !parsedParams.containsKey(\"/w\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    || !parsedParams.containsKey(\"/e\") || !parsedParams.containsKey(\"/c\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                isSufficient \u003d false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        case COMMAND_WORD_EDIT:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!(parsedParams.containsKey(\"/n\") || parsedParams.containsKey(\"/h\") || parsedParams.containsKey(\"/w\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    || parsedParams.containsKey(\"/e\") || parsedParams.containsKey(\"/c\"))) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                isSufficient \u003d false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            isSufficient \u003d true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return isSufficient;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Throws InsufficientArgumentException with the correct param based on the command."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param command Command with invalid format."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InsufficientArgumentException If command has invalid format."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static void throwInsufficientArgument(String command)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throws InsufficientArgumentException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (command.equals(COMMAND_WORD_ADD)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InsufficientArgumentException(ADD_PROFILE_FORMAT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (command.equals(COMMAND_WORD_EDIT)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InsufficientArgumentException(EDIT_PROFILE_FORMAT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InsufficientArgumentException(COMMAND_WORD_HELP);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Throws InvalidCommandFormatException with the correct param based on the command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param command Command with invalid format."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidCommandFormatException If command has invalid format."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static void throwInvalidCommandFormat(String command) throws InvalidCommandFormatException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (command.equals(COMMAND_WORD_ADD)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidCommandFormatException(ADD_PROFILE_FORMAT);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (command.equals(COMMAND_WORD_EDIT)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidCommandFormatException(EDIT_PROFILE_FORMAT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidCommandFormatException(COMMAND_WORD_HELP);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Extracts name from parsed HashMap."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param parsedParams HashMap containing option indicator and parsed option pairs."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s name."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidNameException If input name is empty."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static String extractName(HashMap\u003cString, String\u003e parsedParams) throws InvalidNameException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String name \u003d WordUtils.capitalizeFully(parsedParams.get(\"/n\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (!Utils.checkValidName(name)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidNameException();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Extracts calories from parsed HashMap."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param parsedParams HashMap containing option indicator and parsed option pairs."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s calories."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidCaloriesException If input calories amount is invalid."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static double extractCalories(HashMap\u003cString, String\u003e parsedParams) throws InvalidCaloriesException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            double calories \u003d Double.parseDouble(parsedParams.get(\"/c\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!Utils.checkValidCalories(calories)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throw new InvalidCaloriesException();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return calories;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidCaloriesException();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Extracts height from parsed HashMap."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param parsedParams HashMap containing option indicator and parsed option pairs."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s height."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidHeightException If input height is invalid."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static int extractHeight(HashMap\u003cString, String\u003e parsedParams) throws InvalidHeightException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            int height \u003d Integer.parseInt(parsedParams.get(\"/h\"));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!Utils.checkValidHeight(height)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throw new InvalidHeightException();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return height;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidHeightException();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Extracts weight from parsed HashMap."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param parsedParams HashMap containing option indicator and parsed option pairs."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s weight."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidWeightException If input weight is invalid."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static double extractWeight(HashMap\u003cString, String\u003e parsedParams) throws InvalidWeightException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            double weight \u003d Double.parseDouble(parsedParams.get(\"/w\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!Utils.checkValidWeight(weight)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throw new InvalidWeightException();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return weight;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidWeightException();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Extracts expected weight from parsed HashMap."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param parsedParams HashMap containing option indicator and parsed option pairs."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s expected weight."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidWeightException If input expected weight is invalid."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static double extractExpectedWeight(HashMap\u003cString, String\u003e parsedParams) throws InvalidWeightException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            double expectedWeight \u003d Double.parseDouble(parsedParams.get(\"/e\"));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!Utils.checkValidWeight(expectedWeight)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throw new InvalidWeightException();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return expectedWeight;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidWeightException();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 246
    }
  },
  {
    "path": "src/main/java/profile/ProfileSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.EndException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.ExceptionHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_ARGS_INDEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_TYPE_INDEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that is responsible for interacting with user in Profile Session."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileSession {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private CommonUi ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private ProfileStorage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private ProfileParser profileParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private CommandLib cl;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs ProfileSession object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public ProfileSession() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"initialising ProfileSession object\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ui \u003d new CommonUi();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        storage \u003d new ProfileStorage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        profileParser \u003d new ProfileParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Runs Profile Session."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        runCommandLoopTillEnd();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Starts up Profile Session."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"starting profile session\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s command and executes repeatedly until user requests to exit Profile Session."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void runCommandLoopTillEnd() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"executing profile session loop\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            String userCommand \u003d ui.getCommand(\"Profile Menu\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            assert userCommand !\u003d null : \"input should not be null before process loop\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            String[] commParts \u003d profileParser.parseCommand(userCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            assert commParts !\u003d null : \"parsed array should not be null before process loop\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                processCommand(commParts);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(ExceptionHandler.handleCheckedExceptions(e));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                if (e instanceof EndException) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(ExceptionHandler.handleUncheckedExceptions(e));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"exiting profile session loop\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Processes and displays parsed user input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commParts Size 2 array; first element is the command type and second element is the arguments string."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void processCommand(String[] commParts) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Command command \u003d cl.getCommand(commParts[COMMAND_TYPE_INDEX]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assert command !\u003d null : \"command object should not be null null\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandResult result \u003d command.execute(commParts[COMMAND_ARGS_INDEX], storage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assert result !\u003d null : \"command result object should not be null null\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ui.showToUser(result.getFeedbackMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 99
    }
  },
  {
    "path": "src/main/java/profile/Utils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import models.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.CALORIES_LOWER_BOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.CALORIES_UPPER_BOUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.HEIGHT_LOWER_BOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.HEIGHT_UPPER_BOUND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.WEIGHT_LOWER_BOUND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.WEIGHT_UPPER_BOUND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class containing utility methods used in Profile Menu."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input when creating profile is valid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param profile User Profile object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether input profile is valid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidProfile(Profile profile) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return (profile !\u003d null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 checkValidName(profile.getName())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 checkValidCalories(profile.getCalories())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 checkValidHeight(profile.getHeight())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 checkValidWeight(profile.getWeight())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 checkValidWeight(profile.getExpectedWeight()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input name is not empty string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param name User\u0027s input name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether input name is valid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return name !\u003d null \u0026\u0026 !name.isEmpty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input calories is not negative."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param calories User\u0027s expected calories intake daily."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether calories amount is not negative."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidCalories(double calories) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return (calories \u003e\u003d CALORIES_LOWER_BOUND \u0026\u0026 calories \u003c\u003d CALORIES_UPPER_BOUND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input height is in the valid range"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * (between {@link HEIGHT_LOWER_BOUND} and {@link HEIGHT_UPPER_BOUND} inclusive)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param height User\u0027s input height."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether input height is valid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidHeight(int height) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return (height \u003e\u003d HEIGHT_LOWER_BOUND \u0026\u0026 height \u003c\u003d HEIGHT_UPPER_BOUND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input weight is in the valid range"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * (between {@link WEIGHT_LOWER_BOUND} and {@link WEIGHT_UPPER_BOUND} inclusive)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param weight User\u0027s input weight."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether input weight is valid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidWeight(double weight) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return (weight \u003e\u003d WEIGHT_LOWER_BOUND \u0026\u0026 weight \u003c\u003d WEIGHT_UPPER_BOUND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 72
    }
  },
  {
    "path": "src/main/java/seedu/duke/Constant.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class Constant {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_DIET \u003d \"diet\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_PROFILE \u003d \"profile\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_WORKOUT \u003d \"workout\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_NEW \u003d \"new\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_END \u003d \"end\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_CLEAR \u003d \"clear\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_SEARCH \u003d \"search\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_WRONG \u003d \"wrong\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String PROJECT_ROOT \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String DATA_FOLDER \u003d \"saves\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final Path PATH_TO_PROFILE_FILE \u003d Paths.get(PROJECT_ROOT, DATA_FOLDER, \"profile\", \"profile.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final Path PATH_TO_PROFILE_FOLDER \u003d Paths.get(PROJECT_ROOT, DATA_FOLDER, \"profile\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String PATH_TO_WORKOUT_SESSION_HISTORY \u003d Paths.get(PROJECT_ROOT, DATA_FOLDER, \"workout\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            \"history.json\").toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String PATH_TO_WORKOUT_SESSION_FOLDER \u003d Paths.get(PROJECT_ROOT, DATA_FOLDER, \"workout\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            \"workoutSession\").toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String PATH_TO_DIET_SESSION_HISTORY \u003d Paths.get(PROJECT_ROOT, DATA_FOLDER, \"diet\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            \"history.json\").toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String PATH_TO_DIET_SESSION_FOLDER \u003d Paths.get(PROJECT_ROOT, DATA_FOLDER, \"diet\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            \"dietSession\").toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String PATH_TO_LOG_FILE \u003d Paths.get(PROJECT_ROOT, \"logs\", \"SchwarzeneggerLogs.log\").toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 4,
      "tienkhoa16": 20,
      "wgzesg": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.ExceptionHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import models.Profile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_WELCOME_EXISTING_USER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_WELCOME_NEW_USER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_WELCOME_WITH_INVALID_SAVE_FORMAT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_END;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * The Schwarzenegger program implements an application that keeps track of the user\u0027s gym and diet record."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final CommandLib cl;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final CommonUi ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private Duke() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initMainMenu();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ui \u003d new CommonUi();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Main entry-point for the java.seedu.duke.Duke application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Unused in Schwarzenegger."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Runs Schwarzenegger."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        runCommandLoopTillEnd();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        end();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Starts up Duke with greeting message."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profile \u003d new ProfileStorage().loadData();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_WELCOME_EXISTING_USER, profile.getName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (e instanceof InvalidSaveFormatException) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(MESSAGE_WELCOME_WITH_INVALID_SAVE_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(ExceptionHandler.handleCheckedExceptions(e));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(MESSAGE_WELCOME_NEW_USER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!(e instanceof NullPointerException)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(ExceptionHandler.handleUncheckedExceptions(e));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            ui.showToUser(MESSAGE_WELCOME_NEW_USER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s command and executes repeatedly until user requests to end Schwarzenegger."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void runCommandLoopTillEnd() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.info(\"running main menu loop\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String response \u003d ui.getCommand(\"Main Menu\").trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String dummy \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        while (!response.equals(COMMAND_WORD_END)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Command cm \u003d cl.getCommand(response);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                CommandResult rs \u003d cm.execute(dummy);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } catch (SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(ExceptionHandler.handleCheckedExceptions(e));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(ExceptionHandler.handleUncheckedExceptions(e));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            response \u003d ui.getCommand(\"Main Menu\").trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Ends Schwarzenegger."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void end() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ui.showToUser(\"Bye, you have exited The Schwarzenegger.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 3,
      "tienkhoa16": 79,
      "wgzesg": 17,
      "-": 9
    }
  },
  {
    "path": "src/main/java/storage/RuntimeTypeAdapterFactory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Copyright (C) 2011 Google Inc."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *      http://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.JsonPrimitive;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.TypeAdapter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.TypeAdapterFactory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.internal.Streams;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.stream.JsonWriter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Adapts values whose runtime type may differ from their declaration type. This"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * is necessary when a field\u0027s type is not the same type that GSON should create"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * when deserializing that field. For example, consider these types:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   abstract class Shape {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int x;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int y;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   class Circle extends Shape {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int radius;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   class Rectangle extends Shape {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   class Diamond extends Shape {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   class Drawing {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     Shape bottomShape;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     Shape topShape;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cp\u003eWithout additional type information, the serialized JSON is ambiguous. Is"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * the bottom shape in this drawing a rectangle or a diamond? \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * This class addresses this problem by adding type information to the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * serialized JSON and honoring that type information when the JSON is"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * deserialized: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"type\": \"Diamond\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"type\": \"Circle\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Both the type field name ({@code \"type\"}) and the type labels ({@code"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \"Rectangle\"}) are configurable."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003ch3\u003eRegistering Types\u003c/h3\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * name to the {@link #of} factory method. If you don\u0027t supply an explicit type"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * field name, {@code \"type\"} will be used. \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \u003d RuntimeTypeAdapterFactory.of(Shape.class, \"type\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Next register all of your subtypes. Every subtype must be explicitly"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * registered. This protects your application from injection attacks. If you"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * don\u0027t supply an explicit type label, the type\u0027s simple name will be used."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Rectangle.class, \"Rectangle\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Circle.class, \"Circle\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Diamond.class, \"Diamond\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Finally, register the type adapter factory in your application\u0027s GSON builder:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .registerTypeAdapterFactory(shapeAdapterFactory)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .create();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Like {@code GsonBuilder}, this API supports chaining: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory \u003d RuntimeTypeAdapterFactory.of(Shape.class)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .registerSubtype(Rectangle.class)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .registerSubtype(Circle.class)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .registerSubtype(Diamond.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003ch3\u003eSerialization and deserialization\u003c/h3\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * In order to serialize and deserialize a polymorphic object,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * you must specify the base type explicitly."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   Diamond diamond \u003d new Diamond();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   String json \u003d gson.toJson(diamond, Shape.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * And then:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   Shape shape \u003d gson.fromJson(json, Shape.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zsk612"
        },
        "content": " */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public final class RuntimeTypeAdapterFactory\u003cT\u003e implements TypeAdapterFactory {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final Class\u003c?\u003e baseType;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final String typeFieldName;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final Map\u003cString, Class\u003c?\u003e\u003e labelToSubtype \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final Map\u003cClass\u003c?\u003e, String\u003e subtypeToLabel \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final boolean maintainType;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private RuntimeTypeAdapterFactory(Class\u003c?\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (typeFieldName \u003d\u003d null || baseType \u003d\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.baseType \u003d baseType;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.typeFieldName \u003d typeFieldName;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.maintainType \u003d maintainType;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * {@code maintainType} flag decide if the type will be stored in pojo or not."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, typeFieldName, maintainType);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, typeFieldName, false);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Creates a new runtime type adapter for {@code baseType} using {@code \"type\"} as"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * the type field name."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, \"type\", false);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Registers {@code type} identified by {@code label}. Labels are case"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * sensitive."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IllegalArgumentException if either {@code type} or {@code label}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *     have already been registered on this type adapter."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type, String label) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (type \u003d\u003d null || label \u003d\u003d null) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new IllegalArgumentException(\"types and labels must be unique\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        labelToSubtype.put(label, type);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        subtypeToLabel.put(type, label);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Registers {@code type} identified by its {@link Class#getSimpleName simple"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * name}. Labels are case sensitive."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IllegalArgumentException if either {@code type} or its simple name"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *     have already been registered on this type adapter."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return registerSubtype(type, type.getSimpleName());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public \u003cR\u003e TypeAdapter\u003cR\u003e create(Gson gson, TypeToken\u003cR\u003e type) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (type.getRawType() !\u003d baseType) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        final Map\u003cString, TypeAdapter\u003c?\u003e\u003e labelToDelegate"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        final Map\u003cClass\u003c?\u003e, TypeAdapter\u003c?\u003e\u003e subtypeToDelegate"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        for (Map.Entry\u003cString, Class\u003c?\u003e\u003e entry : labelToSubtype.entrySet()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            TypeAdapter\u003c?\u003e delegate \u003d gson.getDelegateAdapter(this,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    TypeToken.get(entry.getValue()));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            labelToDelegate.put(entry.getKey(), delegate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            subtypeToDelegate.put(entry.getValue(), delegate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return new TypeAdapter\u003cR\u003e() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            @Override public R read(JsonReader in) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                JsonElement jsonElement \u003d Streams.parse(in);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                JsonElement labelJsonElement;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (maintainType) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    labelJsonElement \u003d jsonElement.getAsJsonObject().get(typeFieldName);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    labelJsonElement \u003d jsonElement.getAsJsonObject().remove(typeFieldName);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (labelJsonElement \u003d\u003d null) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    throw new JsonParseException(\"cannot deserialize \" + baseType"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + \" because it does not define a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                String label \u003d labelJsonElement.getAsString();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                TypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) labelToDelegate.get(label);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    throw new JsonParseException(\"cannot deserialize \""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + baseType + \" subtype named \""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + label + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                return delegate.fromJsonTree(jsonElement);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            @Override public void write(JsonWriter out, R value) throws IOException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                Class\u003c?\u003e srcType \u003d value.getClass();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                final String label \u003d subtypeToLabel.get(srcType);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                TypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) subtypeToDelegate.get(srcType);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    throw new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                JsonObject jsonObject \u003d delegate.toJsonTree(value).getAsJsonObject();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (maintainType) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    Streams.write(jsonObject, out);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                JsonObject clone \u003d new JsonObject();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (jsonObject.has(typeFieldName)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    throw new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + \" because it already defines a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                clone.add(typeFieldName, new JsonPrimitive(label));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                for (Map.Entry\u003cString, JsonElement\u003e e : jsonObject.entrySet()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    clone.add(e.getKey(), e.getValue());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                Streams.write(clone, out);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }.nullSafe();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 280
    }
  },
  {
    "path": "src/main/java/storage/diet/DietStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package storage.diet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.DietSession;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * This class holds the data loaded during runtime and read and writes to the local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class DietStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static Gson gson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static File file \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Initialise the database with locally stored data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * If the local file is not found. It creates the relevant file and folder."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IOException If director or file cannot be created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void init(String filePath) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"creating diet session save file\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        gson \u003d new GsonBuilder().setPrettyPrinting()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                .create();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String fileName \u003d \"saves/diet/\" + filePath + \".json\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file \u003d new File(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Writes the content in dietSession to a local file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * If the local file is not found. It creates the relevant file and folder."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IOException If director or file cannot be created."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void writeToStorageDietSession(String filePath, DietSession dietSession) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"saving file to location\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(FILEPATH + filePath + \".json\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        FileWriter writer \u003d new FileWriter(file.getPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        gson.toJson(dietSession, writer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"file saving complete\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        writer.flush();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    public DietSession readDietSession(String filePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietSession dietSession;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        dietSession \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            File file \u003d new File(System.getProperty(\"user.dir\") + \"/\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                    + FILEPATH + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            Reader reader \u003d new FileReader(file.getPath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            dietSession \u003d gson.fromJson(reader, DietSession.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            System.out.println(\"There seems to be no file\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return dietSession;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 63,
      "yujinyang1998": 1,
      "tienkhoa16": 5,
      "CFZeon": 15
    }
  },
  {
    "path": "src/main/java/storage/profile/ProfileStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package storage.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.JsonSyntaxException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.LoadingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.SavingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import models.Profile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Utils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EMPTY_STRING;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.PATH_TO_PROFILE_FILE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.PATH_TO_PROFILE_FOLDER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that saves and loads user profile data on local hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileStorage {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs Storage object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public ProfileStorage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Loads user profile from data file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User profile."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws LoadingException If there are failed or interrupted I/O operations."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidSaveFormatException If data file saving format is corrupted."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Profile loadData() throws LoadingException, InvalidSaveFormatException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (Files.exists(PATH_TO_PROFILE_FOLDER)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.INFO, \"starting to decode profile data\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                profile \u003d decodeProfile(PATH_TO_PROFILE_FILE.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                assert profile !\u003d null : \"profile should not be null\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.INFO, \"finishing profile data decoding\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                createDataFile(PATH_TO_PROFILE_FILE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            createDataFolder(PATH_TO_PROFILE_FOLDER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            createDataFile(PATH_TO_PROFILE_FILE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return profile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Decodes user profile save data to a profile object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param filePath Path to data file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Profile object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidSaveFormatException If the saving format is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws FileNotFoundException If data file is not found."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Profile decodeProfile(String filePath) throws InvalidSaveFormatException, FileNotFoundException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"decoding profile data\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Type profileType \u003d new TypeToken\u003cProfile\u003e() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }.getType();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            JsonReader reader \u003d new JsonReader(new FileReader(file.getPath()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Profile profile \u003d gson.fromJson(reader, profileType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (profile \u003d\u003d null || !Utils.checkValidProfile(profile)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.WARNING, \"processing invalid profile data\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                throw new InvalidSaveFormatException(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return profile;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (JsonSyntaxException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.WARNING, \"processing invalid syntax in data file\", e);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            throw new InvalidSaveFormatException(filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Creates data file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param pathToDataFile Path to data file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws LoadingException If there are failed or interrupted I/O operations."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void createDataFile(Path pathToDataFile) throws LoadingException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Files.createFile(pathToDataFile);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"created data/profile/profile.txt\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new LoadingException(e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Creates data folder."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param pathToDataFolder Path to data folder."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws LoadingException If there are failed or interrupted I/O operations."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void createDataFolder(Path pathToDataFolder) throws LoadingException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Files.createDirectories(pathToDataFolder);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"created data/profile\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new LoadingException(e.getMessage());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Saves user profile data to hard disk after profile changes."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param profile User\u0027s profile."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SavingException If there are failed or interrupted I/O operations."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void saveData(Profile profile) throws SavingException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"starting to save profile data\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            FileWriter fw \u003d new FileWriter(PATH_TO_PROFILE_FILE.toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (profile \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                fw.write(EMPTY_STRING);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                gson.toJson(profile, fw);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                fw.flush();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"finishing data saving\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.WARNING, \"processing IOException while saving data\", e);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new SavingException(e.getMessage());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 2,
      "tienkhoa16": 153
    }
  },
  {
    "path": "src/main/java/storage/workout/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package storage.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import com.google.gson.JsonSyntaxException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.Exercise;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.ExerciseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * This class holds the data loaded during runtime and read and writes to the local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static final String FILEPATH \u003d \"./saves/workout\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private static Gson gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static File file \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Write the content in TaskList to a local file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * If the local file is not found. It creates the relevant file and folder."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IOException If director or file cannot be created."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void writeToStorage(String filePath, ExerciseList exerciseList) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        FileWriter writer \u003d new FileWriter(file.getPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        gson.toJson(exerciseList.exerciseList, writer);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        writer.flush();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void readFileContents(String filePath, ExerciseList exerciseList) throws FileNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        Type taskListType \u003d new TypeToken\u003cArrayList\u003cExercise\u003e\u003e() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }.getType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        JsonReader reader \u003d new JsonReader(new FileReader(file.getPath()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        exerciseList.exerciseList.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            exerciseList.exerciseList.addAll(gson.fromJson(reader, taskListType));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            System.out.printf(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (JsonSyntaxException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.saveCorruptedError(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 42,
      "yujinyang1998": 19
    }
  },
  {
    "path": "src/main/java/storage/workout/WorkOutManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package storage.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import com.google.gson.JsonSyntaxException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.workout.workoutmanager.SchwIoException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastWorkoutSessionRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import seedu.duke.Constant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkOutManagerStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * This list contains all the past record files\u0027 file name and some other relevant info."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * It is saved in a file called history.json."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Each time it initialises, it will read history.json file and save it to this list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Each time adding/removing record will update this list and write again to local storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * This variable keeps track of file name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private int recordCount \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Reads all past records."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return A list of PastWorkoutSessionRecord."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error in reading the file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public ArrayList\u003cPastWorkoutSessionRecord\u003e readPastRecords() throws SchwIoException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"Start loading files\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPastWorkoutSessionRecord\u003e pastFiles;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        File file \u003d new File(Constant.PATH_TO_WORKOUT_SESSION_HISTORY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Type taskListType \u003d new TypeToken\u003cArrayList\u003cPastWorkoutSessionRecord\u003e\u003e() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }.getType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            JsonReader reader \u003d new JsonReader(new FileReader(file.getPath()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            pastFiles \u003d gson.fromJson(reader, taskListType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.info(\"File is not found.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            createMetaFile(Constant.PATH_TO_WORKOUT_SESSION_HISTORY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            pastFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (JsonSyntaxException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.info(\"File is corrupted.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            pastFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (pastFiles \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            pastFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assert (pastFiles !\u003d null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        recordCount \u003d pastFiles.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"Loading completed\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return pastFiles;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Writes all past records to local storage."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param pastFiles The list of records to be stored."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error occurs in writing to file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void writePastRecords(List\u003cPastWorkoutSessionRecord\u003e pastFiles) throws SchwIoException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"Saving the changes...\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        File file \u003d new File(Constant.PATH_TO_WORKOUT_SESSION_HISTORY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        FileWriter writer;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            writer \u003d new FileWriter(file.getPath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            gson.toJson(pastFiles, writer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.info(\"Error occured when saving the progress.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new SchwIoException(\"Error occured when saving the progress...\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"All changes saved.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        recordCount \u003d pastFiles.size();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private void createMetaFile(String path) throws SchwIoException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.info(\"File cannot be created at \" + path + \".\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new SchwIoException(\"The local storage file cannot be created at \" + path);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Creates a new file to store a new workout session data."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return File path of new created file"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error occurs in creating the file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String createfile() throws SchwIoException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String newFilePath \u003d Constant.PATH_TO_WORKOUT_SESSION_FOLDER + recordCount + \".json\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        File file \u003d new File(newFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return newFilePath;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.info(\"File is not created at \" + newFilePath + \".\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new SchwIoException(\"The local storage file cannot be created at \" + newFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 55,
      "yujinyang1998": 3,
      "tienkhoa16": 19,
      "wgzesg": 51
    }
  },
  {
    "path": "src/main/java/ui/CommonUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EMPTY_STRING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.GREEDY_WHITE_SPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.HELP_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class CommonUi {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected static final String LINE_PREFIX \u003d \"\\t \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String LS \u003d System.lineSeparator() + LINE_PREFIX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static final String HORIZONTAL_LINE \u003d LINE_PREFIX"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            + \"_________________________________________________________________________________________________\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected static final String MESSAGE_FORMAT_GENERAL \u003d HORIZONTAL_LINE + LS + \"%s\" + System.lineSeparator()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + HORIZONTAL_LINE + System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Shows a message to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param result Message to be displayed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void showToUser(String result) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assert result !\u003d null : \"result should not be null\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        System.out.println(String.format(MESSAGE_FORMAT_GENERAL, result));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void showUser(String result) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(String.format(MESSAGE_FORMAT_GENERAL, result));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static String helpFormatter(String commandName, String commandFormat, String description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return String.format(HELP_FORMAT, commandName, commandFormat, EMPTY_STRING, description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets input from user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param menuName Current menu name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User input in a string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String getCommand(String menuName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.print(menuName + \" \u003e\u003e\u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String inputLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        // Silently consume all blank lines"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        while (inputLine.trim().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.print(menuName + \" \u003e\u003e\u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            inputLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return inputLine.trim().replaceAll(GREEDY_WHITE_SPACE, \" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user confirmation a specific command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param menuName Current menu name."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param action Action description."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return If user confirms the command execution."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public boolean checkConfirmation(String menuName, String action) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String message \u003d String.format(\"Are you sure you want to %s? This action is irrevocable.\\n\\t \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                + \"Key in \\\"YES\\\" to confirm.\", action);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        showToUser(message);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String input \u003d getCommand(menuName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return input.equals(\"YES\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Prints opening message to user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param menuName Name of menu entering."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void printOpening(String menuName) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        showToUser(String.format(\"Starting %s...\", menuName));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Prints returning message to user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param menuName Name of menu to return to."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void printReturning(String menuName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        showToUser(String.format(\"Returning to %s...\", menuName));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 1,
      "yujinyang1998": 2,
      "tienkhoa16": 62,
      "wgzesg": 22
    }
  },
  {
    "path": "src/main/java/ui/diet/dietmanager/DietManagerUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietManagerUi extends CommonUi {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        StringBuilder helpMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"New\", \"new \u003c/d [DATE]\u003e \u003c/t [TAG]\u003e\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Create a new diet session\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(\"List\", \"list\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Show all past diet sessions\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(\"Delete\", \"delete [INDEX]\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Delete the diet session at the input index\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(\"Edit\", \"edit [INDEX]\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Edit the diet session at the input index\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"Search\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"search \u003c/s [STARTING_DATE]\u003e \u003c/e [END_DATE]\u003e \u003c/t [TAG]\u003e\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Search the diet session in between starting and end dates with a specific tag\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"Clear\", \"clear\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Clear all past diet sessions\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"End\", \"end\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Go back to Main Menu\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        showUser(helpMessage.toString().trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 20,
      "tienkhoa16": 7
    }
  },
  {
    "path": "src/main/java/ui/diet/dietsession/DietSessionUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionUi extends CommonUi {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        StringBuilder helpMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"Add\", \"add [FOOD_NAME] /c [CALORIES]\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Add a new food item\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"List\", \"list\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Show all food items\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(\"Delete\", \"delete [INDEX]\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Delete the food item at the input index\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        helpMessage.append(helpFormatter(\"Search\", \"Search [FOOD_NAME]\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                \"Search the diet session for food with the name specified\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"Clear\", \"clear\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Clear all food items\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"End\", \"end\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Go back to the Diet Menu.\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        showUser(helpMessage.toString().trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void printOpening() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        showUser(\"Starting Diet Session!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    public static String MESSAGE_NEGATIVE_CALORIES \u003d \"The amount of calories in a food cannot be negative!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static String MESSAGE_NO_FOOD_NAME \u003d \"Please enter food name!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void printExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        showUser(\"Exiting Diet Session!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 26,
      "tienkhoa16": 6,
      "CFZeon": 4
    }
  },
  {
    "path": "src/main/java/ui/profile/ProfileUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.CALORIES_LOWER_BOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.CALORIES_UPPER_BOUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.HEIGHT_LOWER_BOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.HEIGHT_UPPER_BOUND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.WEIGHT_LOWER_BOUND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.WEIGHT_UPPER_BOUND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that contains templates of message to show to user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileUi extends CommonUi {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String HELP_FORMAT \u003d \"%-8s - %s\" + LS + \"%-8s %s\" + LS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_CREATE_PROFILE_ACK \u003d \"Got it. Here\u0027s a confirmation of your profile:\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + LS + \"%s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_DELETE_PROFILE \u003d \"Alright! I\u0027ve deleted your profile.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_EDIT_PROFILE_ACK \u003d \"Yay! Your profile is edited successfully. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"Here\u0027s your new profile:\" + LS + \"%s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_END \u003d \"Returning to Main Menu...\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_ENOUGH_CALORIES \u003d \"you\u0027ve achieved your target calories intake for today!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_HELP_FOR_MORE_INFO \u003d \"For more information on command syntax, please type \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"\\\"help\\\".\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Wrong format, please enter in the format:\" + LS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"%s\" + LS + MESSAGE_HELP_FOR_MORE_INFO;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_MORE_CALORIES \u003d \"take %.1f more calories to achieve your target for today!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_PROFILE_EXIST \u003d \"There\u0027s currently a profile in the database. \" + LS"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"Please delete it using \\\"delete\\\" command before adding a new one.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_PROFILE_NOT_EXIST \u003d \"There\u0027s no profile to %s. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"Please add a new one using \\\"add\\\" command :D\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_VIEW_PROFILE \u003d \"Here\u0027s your profile:\" + LS + \"%s\" + LS + \"By the way, %s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_WELCOME_EXISTING_USER \u003d \"Welcome back to Schwarzenegger, %s!\" + LS"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"How can I help you today?\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_WELCOME_NEW_USER \u003d \"Welcome new user to Schwarzenegger! :D\" + LS"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"Please add your profile under Profile Menu.\" + LS + MESSAGE_HELP_FOR_MORE_INFO;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_WELCOME_WITH_INVALID_SAVE_FORMAT \u003d \"Welcome back to Schwarzenegger!\" + LS"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"It seems like your profile data is corrupted!\" + LS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"Please add your profile again under Profile Menu.\" + LS + MESSAGE_HELP_FOR_MORE_INFO;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String SAD_FACE \u003d \":(  OOPS!!! \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_WEIGHT \u003d String.format("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            SAD_FACE + \"Please input current weight/ expected weight as a number from %.1f to %.1f.\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            WEIGHT_LOWER_BOUND, WEIGHT_UPPER_BOUND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_EDIT_NOTHING \u003d SAD_FACE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"The information you entered is the same as your current profile!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_DELETE_NOTHING \u003d SAD_FACE + \"You haven\u0027t added any profile yet!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_SAVING_ERROR \u003d SAD_FACE + \"An error has occurred while saving data.\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + LS + \"%s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_LOADING_ERROR \u003d SAD_FACE + \"An error has occurred while loading data.\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + LS + \"%s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_HEIGHT \u003d String.format("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            SAD_FACE + \"Please input height as an integer from %d to %d.\", HEIGHT_LOWER_BOUND, HEIGHT_UPPER_BOUND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_CALORIES \u003d SAD_FACE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + String.format(\"Please input expected daily calorie intake as a number from %.1f to %.1f\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            CALORIES_LOWER_BOUND, CALORIES_UPPER_BOUND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_NAME \u003d SAD_FACE + \"Name cannot be empty.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_SAVE_FORMAT \u003d SAD_FACE + \"Save format in %s is invalid.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_WORD \u003d SAD_FACE + \"Sorry, but I don\u0027t know what that means.\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + LS + \"Please enter \\\"help\\\" for a list of available commands.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 1,
      "tienkhoa16": 61
    }
  },
  {
    "path": "src/main/java/ui/workout/workoutmanager/WorkoutManagerUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.profile.ProfileUi.MESSAGE_HELP_FOR_MORE_INFO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class WorkoutManagerUi extends CommonUi {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String CLEAR_SUCCESS \u003d \"You have cleared all records!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String CLEAR_ABORTED \u003d \"You have aborted the action!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String DELETE_SUCCESS \u003d \"You have deleted that record!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static String EDIT_SUCCESS \u003d \"Congratulations! You have successfully edited the workout!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String NEW_SUCCESS \u003d \"Congratulations! You have finished today\u0027s workout!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String COMMAND_NOT_FOUND \u003d \"The command not recognised!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static String START_NEW_SESSION \u003d \"You have started a new workout session!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String MESSAGE_NOT_A_NUMBER \u003d \"Index must be a number. Your input is not a number!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static String MESSAGE_INSUFFICIENT_ARGUMENT \u003d \"Insufficient arguments are given! \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"Please follow this format:\" + LS + \"%s\" + LS + MESSAGE_HELP_FOR_MORE_INFO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String MESSAGE_OUT_OF_ARRAY \u003d \"The record specified is not found. Please check the index!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 5,
      "yujinyang1998": 2,
      "tienkhoa16": 5,
      "wgzesg": 10
    }
  },
  {
    "path": "src/main/java/ui/workout/workoutsession/WorkoutSessionUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionUi extends CommonUi {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printError() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        showUser(\"There is an error, please restart the session\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void addFormatError() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        showUser(\"Wrong format, please enter in the format:\\n\\t \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                + \"add [NAME_OF_MOVE] /n [NUMBER_OF_REPETITIONS] /w [WEIGHT]\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void addFormatNegativeError() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        showUser(\"Wrong format, please enter in the format:\\n\\t \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                + \"add [NAME_OF_MOVE] /n [NUMBER_OF_REPETITIONS] /w [WEIGHT]\\n\\t \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                + \"Please make sure [NUMBER_OF_REPETITIONS] and [WEIGHT] are numbers greater than zero.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void saveCorruptedError(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        showUser(\":( Save format in \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                + filePath + \" is invalid.\\n\\t \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                + \"File is cleared.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void emptyListError() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        showUser(\"List is empty. Please enter something.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void deleteFormatError() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        showUser(\"Wrong format, please enter in the format:\\n\\t delete [INDEX]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void deleteIndexError() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        showUser(\"Index does not exist. Please refer to the list.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        StringBuilder helpMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        helpMessage.append(helpFormatter(\"Add\", \"add [NAME_OF_MOVE] /n [NUMBER_OF_REPETITIONS] /w [WEIGHT]\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Add a new move.\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        helpMessage.append(helpFormatter(\"List\", \"list\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Show all moves in this current session.\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(\"Delete\", \"delete [INDEX]\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Delete a move according to the index in the list.\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        helpMessage.append(helpFormatter(\"Search\", \"search [NAME_OF_MOVE]\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Show a list of moves that match the entered keyword.\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        helpMessage.append(helpFormatter(\"End\", \"end\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Go back to the Workout Menu.\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        showUser(helpMessage.toString().trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void emptyInputError() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        showUser(\"Please enter something.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void searchInputError() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        showUser(\"Wrong format, please enter in the format:\\n\\t search [NAME_OF_MOVE]\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void searchResultsEmpty() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        showUser(\"No matching result has been found.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void addExerciseSuccess(Exercise exercise) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String toPrint \u003d String.format(\"Yay! You have added %s to your list.\\n\\t [Repetitions: %s || Weight: %s]\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                exercise.getDescription(), exercise.getRepetitions(), exercise.getWeight());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        showUser(toPrint);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void deleteExerciseSuccess(Exercise exercise) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String toPrint \u003d String.format(\"You have deleted %s from your list!\\n\\t [Repetitions: %s || Weight: %s]\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                exercise.getDescription(), exercise.getRepetitions(), exercise.getWeight());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        showUser(toPrint);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 4,
      "yujinyang1998": 69,
      "tienkhoa16": 7
    }
  },
  {
    "path": "src/main/java/workout/DateParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e dtFormaters \u003d Arrays.asList("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd HH:mm\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd HH:mm\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd HHmm\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    );"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e dFormaters \u003d Arrays.asList("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd MM yyyy\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            DateTimeFormatter.ofPattern(\"ddMMyyyy\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Parses a given string following one of the accepted format into date-time format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param targetString String input to be parsed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Parsed result in the form of LocalDateTime or null if no value parsing is found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static LocalDateTime parseDate(String targetString) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (DateTimeFormatter dtf : dtFormaters) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                return LocalDateTime.parse(targetString, dtf);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (DateTimeFormatter dtf : dFormaters) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                return LocalDate.parse(targetString, dtf).atStartOfDay();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 8,
      "tienkhoa16": 3,
      "wgzesg": 46
    }
  },
  {
    "path": "src/main/java/workout/workoutmanager/WorkoutManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.EndException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.workout.workoutmanager.WorkoutManagerUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkoutManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final CommandLib cl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final WorkoutManagerUi ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public WorkoutManager() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Initialised workout manager command library\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ui \u003d new WorkoutManagerUi();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Starts a workout manager. Goes into a REPL until \u0027end\u0027 command is given."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Entered workout manager\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            String command \u003d ui.getCommand(\"Workout Menu\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.log(Level.INFO, \"Received input\" + command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String[] commParts \u003d WorkoutManagerParser.parseCommandKw(command);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                processCommand(commParts);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (EndException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                logger.log(Level.INFO, \"exiting workout manager\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.WARNING, \"processing SchwarzeneggerException\", e);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void processCommand(String[] commands) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Command command \u003d cl.getCommand(commands[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandResult result \u003d command.execute((commands.length \u003e 1)  ? commands[1].trim() : \"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ui.showToUser(result.getFeedbackMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 24,
      "tienkhoa16": 12,
      "wgzesg": 20
    }
  },
  {
    "path": "src/main/java/workout/workoutmanager/WorkoutManagerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.workout.workoutmanager.NotANumberException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastWorkoutSessionRecord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import workout.DateParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkoutManagerParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String TAG_SPECIFIER \u003d \"/t\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String TAG_SPLITTER \u003d \",\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String DATE_SPECIFIER \u003d \"/d\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String START_DATE_SPECIFIER \u003d \"/s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String END_DATE_SPECIFIER \u003d \"/e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Parses user inputs into single words."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param comm User\u0027s raw input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return An array of strings."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String[] parseCommandKw(String comm) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return comm.split(\" \", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Parses user input into a list of tags."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param arr User inputs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return A list of tags."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static ArrayList\u003cString\u003e parseTags(String arr) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] content \u003d arr.split(\" \", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            if (!content[0].equals(TAG_SPECIFIER)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String[] tags \u003d content[1].split(TAG_SPLITTER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            for (String tag : tags) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                if (!result.contains(tag.trim())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    result.add(tag.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Parses user input into a list of predicates which will be used as search conditions."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param arr User input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return A list of predicate which will be used as search conditions."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e parseSearchConditions(String arr) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        // parse tag conditions"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String[] part1 \u003d arr.split(TAG_SPECIFIER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String[] tagPart \u003d part1[1].split(DATE_SPECIFIER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String[] tgs \u003d tagPart[0].split(\",\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            for (String t : tgs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                tags.add(t.trim());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            test.add(x -\u003e x.containsAll(tags));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            SchwarzeneggerLogger.getInstanceLogger().log(Level.INFO, \"No tag identifier is given.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        // parse date conditions"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String[] part2 \u003d arr.split(DATE_SPECIFIER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String[] datePart \u003d part2[1].split(TAG_SPECIFIER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            LocalDateTime finalDate \u003d DateParser.parseDate(datePart[0].trim());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            if (finalDate !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                test.add(x -\u003e x.isCreatedOn(finalDate.toLocalDate()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            SchwarzeneggerLogger.getInstanceLogger().log(Level.INFO, \"No date identifier is given.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return test;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Parses the given input into a integer index."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args user input."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return a integer which is the index given."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @throws NotANumberException if args is null, empty or not a number."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static int parseIndex(String args) throws NotANumberException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            index \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new NotANumberException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Parses user input into a list of predicates which will be used to limit period of record being listed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param args user input."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return predicates to limit period of record being listed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e parseList(String args) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        // parse start date"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String[] part2 \u003d args.split(START_DATE_SPECIFIER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String[] datePart \u003d part2[1].split(END_DATE_SPECIFIER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            LocalDateTime start \u003d DateParser.parseDate(datePart[0].trim());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            if (start !\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                test.add(x -\u003e x.isCreatedAfter(start.toLocalDate()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            SchwarzeneggerLogger.getInstanceLogger().log(Level.INFO, \"No start date identifier is given.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        // parse end date"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String[] part2 \u003d args.split(END_DATE_SPECIFIER);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String[] datePart \u003d part2[1].split(START_DATE_SPECIFIER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            LocalDateTime end \u003d DateParser.parseDate(datePart[0].trim());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            if (end !\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                test.add(x -\u003e x.isCreatedBefore(end.toLocalDate()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            SchwarzeneggerLogger.getInstanceLogger().log(Level.INFO, \"No end date identifier is given.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return test;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 8,
      "yujinyang1998": 1,
      "tienkhoa16": 9,
      "wgzesg": 126
    }
  },
  {
    "path": "src/main/java/workout/workoutsession/WorkoutSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.ExceptionHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidCommandWordException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.ExerciseList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkoutSession {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private String filePath \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private boolean[] endWorkoutSession;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public ExerciseList exerciseList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private boolean isNew;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private transient CommandLib cl;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private CommonUi ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public WorkoutSession(String filePath, boolean isNew, int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.exerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.endWorkoutSession \u003d new boolean[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.ui \u003d new CommonUi();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.isNew \u003d isNew;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private void setEndWorkoutSessionF() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.endWorkoutSession[0] \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Starts workout session."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void workoutSessionStart() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        setEndWorkoutSessionF();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        logger.log(Level.INFO, \"starting workout session\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.readFileContents(filePath, exerciseList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        while (!endWorkoutSession[0]) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                if (isNew) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                    workoutSessionProcessCommand(ui.getCommand(\"Workout Menu \u003e New Workout Session\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                    workoutSessionProcessCommand(ui.getCommand(\"Workout Menu \u003e Workout Session \" + index));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                WorkoutSessionUi.emptyInputError();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } catch (InvalidCommandWordException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                ui.showToUser(ExceptionHandler.handleCheckedExceptions(e));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private void workoutSessionProcessCommand(String input) throws NullPointerException, InvalidCommandWordException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] commParts \u003d WorkoutSessionParser.workoutSessionParser(input.trim());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Command command \u003d cl.getCommand(commParts[0]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        command.execute(commParts, exerciseList, filePath, storage, endWorkoutSession);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 28,
      "yujinyang1998": 43,
      "tienkhoa16": 5,
      "wgzesg": 5
    }
  },
  {
    "path": "src/main/java/workout/workoutsession/WorkoutSessionParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.workout.workoutsession.AddFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.workout.workoutsession.DeleteFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import models.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkoutSessionParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static String[] workoutSessionParser(String input) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return input.split(\" \");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static Exercise addParser(String[] input) throws NumberFormatException, AddFormatException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] returnString \u003d new String[4];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (int i \u003d 0; i \u003c returnString.length; i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            returnString[i] \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        int tracker \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        for (String s : input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (s.compareTo(\"/n\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                tracker \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } else if (s.compareTo(\"/w\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                tracker \u003d 3;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } else if (s.compareTo(\"add\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                tracker \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } else if (tracker \u003d\u003d 2 || tracker \u003d\u003d 3) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                returnString[tracker] \u003d s;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                returnString[tracker] +\u003d (s + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        int repetitions \u003d Integer.parseInt(returnString[2]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        int weight \u003d Integer.parseInt(returnString[3]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String description \u003d returnString[1].trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        if (repetitions \u003c 0 || weight \u003c 0 || description.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            throw new AddFormatException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        Exercise exercise \u003d new Exercise(description, repetitions, weight);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return exercise;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static int deleteParser(String[] input) throws DeleteFormatException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        int returnInt \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            returnInt \u003d Integer.parseInt(input[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            throw new DeleteFormatException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return returnInt;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static String searchParser(String[] input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String returnString \u003d new String();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (int i \u003d 1; i \u003c input.length; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            returnString +\u003d \" \" + input[i];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return returnString.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 22,
      "yujinyang1998": 41
    }
  },
  {
    "path": "src/test/java/commands/CommandLibTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionClear;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionCreate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionDelete;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionEdit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionHelp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionWrong;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemAdd;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemClear;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemDelete;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemHelp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemWrong;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.main.MainHelp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.main.ToDiet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.main.ToProfile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.main.ToWorkout;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.main.MainWrong;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileAdd;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileDelete;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileEdit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileEnd;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileWrong;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ByeWS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.DeleteWS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ListWS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.NewWS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.WrongWS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionDelete;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionEnd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionHelp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionSearch;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionWrong;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "class CommandLibTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_dietManagerUnrecognisedCommand_returnDietSessionWrong() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof DietSessionWrong);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_listDietSession_returnListCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof DietSessionList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_deleteDietSession_returnDeleteCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof DietSessionDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_newDietSession_returnNewCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertTrue(cl.getCommand(\"new\") instanceof DietSessionCreate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_clearDietSession_returnClearCommand() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"clear\") instanceof DietSessionClear);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_editDietSession_returnEditCommand() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"edit\") instanceof DietSessionEdit);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_helpDietSession_returnHelpCommand() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof DietSessionHelp);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_DietManagerUnrecognisedCommand_returnFoodItemWrong() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof FoodItemWrong);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_listFoodItem_returnListCommand() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof FoodItemList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_deleteFoodItem_returnDeleteCommand() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof FoodItemDelete);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_newFoodItem_returnNewCommand() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"add\") instanceof FoodItemAdd);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_clearFoodItem_returnClearCommand() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"clear\") instanceof FoodItemClear);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_helpFoodItem_returnHelpCommand() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof FoodItemHelp);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_WorkoutManagerUnrecognisedCommand_returnNull() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof WrongWS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_listWS_returnListCommand() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof ListWS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_deleteWS_returnDeleteCommand() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof DeleteWS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_newWS_returnNewCommand() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"new\") instanceof NewWS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_byeWS_returnByeCommand() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"end\") instanceof ByeWS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_WorkoutSessionUnrecognisedCommand_returnNull() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof WorkoutSessionWrong);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_workoutSessionList_returnListCommand() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof WorkoutSessionList);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_workoutSessionDelete_returnDeleteCommand() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof WorkoutSessionDelete);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_workoutSessionAdd_returnAddCommand() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"add\") instanceof WorkoutSessionAdd);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_workoutSessionEnd_returnEndCommand() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"end\") instanceof WorkoutSessionEnd);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_workoutSessionSearch_returnSearchCommand() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"search\") instanceof WorkoutSessionSearch);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_workoutSessionHelp_returnHelpCommand() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof WorkoutSessionHelp);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_profileSessionAddCommand_returnProfileAdd() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"add\") instanceof ProfileAdd);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_profileSessionDeleteCommand_returnProfileDelete() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof ProfileDelete);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_profileSessionEditCommand_returnProfileEdit() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"edit\") instanceof ProfileEdit);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_profileSessionEndCommand_returnProfileEnd() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"end\") instanceof ProfileEnd);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_profileSessionHelpCommand_returnProfileHelp() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof ProfileHelp);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_profileSessionViewCommand_returnProfileView() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"view\") instanceof ProfileView);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_profileSessionUnrecognisedCommand_returnProfileWrong() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof ProfileWrong);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_mainHelpCommand_returnHelp() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initMainMenu();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof MainHelp);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_mainDietCommand_returnToDiet() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initMainMenu();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"diet\") instanceof ToDiet);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_mainProfileCommand_returnToProfile() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initMainMenu();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"profile\") instanceof ToProfile);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_mainWorkoutCommand_returnToWorkout() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initMainMenu();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"workout\") instanceof ToWorkout);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_mainUnrecognisedCommand_returnWrong() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initMainMenu();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof MainWrong);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 1,
      "tienkhoa16": 303
    }
  },
  {
    "path": "src/test/java/commands/workout/workoutsession/WorkoutSessionAddTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "class WorkoutSessionAddTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 12
    }
  },
  {
    "path": "src/test/java/diet/DietTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidCommandWordException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemAdd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemDelete;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void extractDate_dateCorrectFormat_returnsDateString() throws InvalidDateFormatException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d 2020-11-11 /t lunch\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String dateString \u003d ui.extractDate(input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(dateString, \"11-11-2020\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void extract_dateWrongFormat_expectsException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d 2020-22-22 /t lunch\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e ui.extractDate(input));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void extract_dateNoDate_returnsCurrentDate() throws InvalidDateFormatException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String dateString \u003d ui.extractDate(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String outputString \u003d dtf.format(now);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(dateString, outputString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void extractMeal_mealCorrectFormat_returnsMealString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d 2020-11-11 /t lunch\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String mealString \u003d ui.extractMeal(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(mealString, \"lunch\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void extract_dateNoMeal_returnsUnspecified() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d 2020-11-11 /t\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String mealString \u003d ui.extractMeal(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(mealString, \"unspecified\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void toString_correctInput_returnsCorrectString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Food fd \u003d new Food(\"biscuit\", 400.00);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String output \u003d fd.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(\"biscuit with calories: 400.0\", output);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    DietStorage storage \u003d new DietStorage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void testAdd_correctInput_returnsMoreFood() throws InvalidCommandWordException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemAdd();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        command.execute(\"melon /c 500\", foodList, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(1, foodList.size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void testDelete_correctInput_returnsFewerFood() throws InvalidCommandWordException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemDelete();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        command.execute(\"1\", foodList, storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(0, foodList.size());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testAdd_noCalories_returnsWarning() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemAdd();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"melon\", foodList, storage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"Please specify your food info.\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(warning, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testAdd_wrongFormatForCalories_returnsWarning() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemAdd();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"melon /c no calories\", foodList, storage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"Please specify your food info.\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(warning, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testDelete_IndexTooLarge_returnsWarning() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemDelete();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(Integer.toString((foodList.size() + 4)), foodList, storage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"Sorry, the index is not found.\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(outputStreamCaptor.toString().trim(), warning);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testDelete_WrongFormatForIndex_returnsWarning() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemDelete();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"a\", foodList, storage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"Sorry, the index is not found.\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(outputStreamCaptor.toString().trim(), warning);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void processCommandForDietSession_WrongCommand_returnsWarning() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemWrong();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"hahaha\", foodList, null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"I do not understand your date input!\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \"I\u0027ve replaced it with today\u0027s date.\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \"Yay! You have added melon with calories: 500.0\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \"Sorry! It seems like you\u0027ve entered an invalid command!\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(warning, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void processCommandForDietManager_WrongCommand_returnsWarning() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        diet.dietmanager.command.Command command \u003d new DietSessionWrong();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"hahaha\", null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"I do not understand your date input!\\n\" +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"I\u0027ve replaced it with today\u0027s date.\\n\" +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Yay! You have added melon with calories: 500.0\\n\" +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Sorry! It seems like you\u0027ve entered an invalid command!\\n\" +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Sorry! It seems like you\u0027ve entered an invalid command!\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(warning, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 143,
      "yujinyang1998": 8,
      "tienkhoa16": 10,
      "wgzesg": 1,
      "CFZeon": 2
    }
  },
  {
    "path": "src/test/java/diet/dietmanager/CommandLibTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietmanager.DietSessionClear;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietmanager.DietSessionCreate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietmanager.DietSessionDelete;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietmanager.DietSessionEdit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietmanager.DietSessionHelp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietmanager.DietSessionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietmanager.DietSessionWrong;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class CommandLibTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_DietManagerUnrecognisedCommand_returnNull() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof DietSessionWrong);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_list_returnListCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof DietSessionList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_delete_returnDeleteCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof DietSessionDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_new_returnNewCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertTrue(cl.getCommand(\"new\") instanceof DietSessionCreate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_clear_returnClearCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"clear\") instanceof DietSessionClear);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_edit_returnEditCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"edit\") instanceof DietSessionEdit);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_help_returnHelpCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof DietSessionHelp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 1,
      "tienkhoa16": 6,
      "CFZeon": 57
    }
  },
  {
    "path": "src/test/java/diet/dietmanager/DietManagerParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class DietManagerParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void parseString_ValidInput_Success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"First Second\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietManagerParser parser \u003d new DietManagerParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] expected \u003d {\"First\", \"Second\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] result \u003d parser.parse(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertTrue(Arrays.equals(expected, result));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void parseString_InvalidInput_Failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String input \u003d \"FirstSecond\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietManagerParser parser \u003d new DietManagerParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String[] expected \u003d {\"First\", \"Second\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String[] result \u003d parser.parse(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        Assertions.assertFalse(Arrays.equals(expected, result));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 6,
      "CFZeon": 23
    }
  },
  {
    "path": "src/test/java/diet/dietsession/CommandLibTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietsession.FoodItemAdd;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietsession.FoodItemClear;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietsession.FoodItemDelete;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietsession.FoodItemHelp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietsession.FoodItemList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietsession.FoodItemWrong;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class CommandLibTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_DietManagerUnrecognisedCommand_returnNull() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof FoodItemWrong);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_list_returnListCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof FoodItemList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_delete_returnDeleteCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof FoodItemDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_new_returnNewCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"add\") instanceof FoodItemAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_clear_returnClearCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"clear\") instanceof FoodItemClear);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_help_returnHelpCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof FoodItemHelp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 6,
      "CFZeon": 51
    }
  },
  {
    "path": "src/test/java/diet/dietsession/DietSessionParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.DietSessionParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import exceptions.diet.NoNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class DietSessionParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void processFoodName_ValidInput_Success() throws NoNameException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"Food /c 123\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietSessionParser parser \u003d new DietSessionParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String expected \u003d \"Food\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String result \u003d parser.processFoodName(input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void processFoodCalories_ValidInput_Success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"Food /c 123\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietSessionParser parser \u003d new DietSessionParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Double expected \u003d 123.0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        double result \u003d parser.processFoodCalories(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void parseDate_ValidInput_Success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietSessionParser parser \u003d new DietSessionParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        LocalDate expected \u003d LocalDate.parse(\"2020-05-04\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"04/05/2020\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        LocalDate actual \u003d parser.parseDate(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 32,
      "CFZeon": 12
    }
  },
  {
    "path": "src/test/java/diet/dietsession/DietSessionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class DietSessionTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    static final String FILEPATH \u003d \"/saves/diet/\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void testSaveDietSession_noInput_returnsDietSession() throws FileNotFoundException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        SchwarzeneggerLogger.initSchwarzeneggerLogger();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietManagerUi dietManagerUi \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietSession ds \u003d new DietSession(dietManagerUi.extractMeal(null), dietManagerUi.extractDate(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        ds.saveToFile();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assertEquals(ds, storage.readDietSession(dietManagerUi.extractMeal(null) + \" \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                + dietManagerUi.extractDate(null) + \".json\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 3,
      "CFZeon": 17
    }
  },
  {
    "path": "src/test/java/diet/dietsession/DietSessionUiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.InvalidDateFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class DietSessionUiTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void extractDate_dateCorrectFormat_returnsDateString() throws InvalidDateFormatException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String input \u003d \"/d 2020-11-11 /t lunch\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String dateString \u003d ui.extractDate(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assertEquals(dateString, \"11-11-2020\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void extract_dateWrongFormat_expectsException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String input \u003d \"/d 2020-22-22 /t lunch\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e ui.extractDate(input));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 5,
      "CFZeon": 25
    }
  },
  {
    "path": "src/test/java/models/ProfileTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_CALORIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_EXPECTED_WEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_HEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_WEIGHT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "class ProfileTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testGetBmiClassification_underweightInput_returnUnderweight() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, 54, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(\"15.3 (Underweight)\", testProfile.getBmiClassification());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testGetBmiClassification_normalWeightInput_returnNormalWeight() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, 70, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(\"19.8 (Normal Weight)\", testProfile.getBmiClassification());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testGetBmiClassification_overweightInput_returnOverweight() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, 100, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(\"28.3 (Overweight)\", testProfile.getBmiClassification());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testGetBmiClassification_obesityClassOneInput_returnObesityClassOne() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, 113, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(\"32.0 (Obesity Class 1)\", testProfile.getBmiClassification());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testGetBmiClassification_obesityClassTwoInput_returnObesityClassTwo() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, 127, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(\"35.9 (Obesity Class 2)\", testProfile.getBmiClassification());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testGetBmiClassification_extremeObesityClassThreeInput_returnExtremeObesityClassThree() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, 148, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(\"41.9 (Extreme Obesity Class 3)\", testProfile.getBmiClassification());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testEquals_inputTwoIdenticalProfiles_returnTrue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile sampleProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT, EXAMPLE_EXPECTED_WEIGHT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profileToCompare \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT, EXAMPLE_EXPECTED_WEIGHT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(sampleProfile, profileToCompare);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testEquals_inputDifferentNames_returnFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile sampleProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profileToCompare \u003d new Profile(\"Duke\", EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(sampleProfile.equals(profileToCompare));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testEquals_inputDifferentHeights_returnFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile sampleProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profileToCompare \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT + 1, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertNotEquals(profileToCompare, sampleProfile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testEquals_inputDifferentWeights_returnFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile sampleProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profileToCompare \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT + 1,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertNotEquals(profileToCompare, sampleProfile);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testEquals_inputDifferentExpectedWeights_returnFalse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile sampleProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profileToCompare \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT + 1, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertNotEquals(profileToCompare, sampleProfile);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testEquals_inputDifferentCalories_returnFalse() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile sampleProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profileToCompare \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertNotEquals(profileToCompare, sampleProfile);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 105
    }
  },
  {
    "path": "src/test/java/profile/ProfileParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractCommandTagAndInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "class ProfileParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testParseCommand_inputTwoWords_returnNonEmptyStringInSecondElement() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ProfileParser profileParser \u003d new ProfileParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String rawUserInput \u003d \"add /n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String[] expectedSplit \u003d {\"add\", \"/n\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(Arrays.toString(expectedSplit),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Arrays.toString(profileParser.parseCommand(rawUserInput)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testParseCommand_inputOneWord_returnEmptyStringInSecondElement() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ProfileParser profileParser \u003d new ProfileParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String rawUserInput \u003d \"add\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String[] expectedSplit \u003d {\"add\", \"\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(Arrays.toString(expectedSplit),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Arrays.toString(profileParser.parseCommand(rawUserInput)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testExtractCommandTagAndInfo_missingSplashInput_throwInvalidCommandFormatException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                extractCommandTagAndInfo(\"add\", \"add n Schwarzenegger\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testExtractCommandTagAndInfo_excessiveSplashInput_throwInvalidCommandFormatException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                extractCommandTagAndInfo(\"add\", \"add //n Schwarzenegger\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testExtractCommandTagAndInfo_validInput_returnValidParsedParams() throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        HashMap\u003cString, String\u003e parsedParams \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        parsedParams.put(\"/n\", \"Schwarzenegger\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        parsedParams.put(\"/c\", \"2500\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        parsedParams.put(\"/h\", \"188\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        parsedParams.put(\"/w\", \"113\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        parsedParams.put(\"/e\", \"100\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String command \u003d \"add\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String commandArgs \u003d \"/n Schwarzenegger /c 2500 /h 188 /w 113 /e 100\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(parsedParams.toString(), extractCommandTagAndInfo(command, commandArgs).toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 58,
      "wgzesg": 4
    }
  },
  {
    "path": "src/test/java/profile/UtilsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import models.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_CALORIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_EXPECTED_WEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_HEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_WEIGHT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.HEIGHT_LOWER_BOUND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.HEIGHT_UPPER_BOUND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.WEIGHT_LOWER_BOUND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.WEIGHT_UPPER_BOUND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Utils.checkValidName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Utils.checkValidProfile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "class UtilsTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidProfile_validProfile_returnTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile validProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(checkValidProfile(validProfile));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidProfile_nullInput_returnFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(checkValidProfile(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidProfile_heightLessThanLowerBound_returnFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, HEIGHT_LOWER_BOUND - 1, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(checkValidProfile(inValidProfile));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidProfile_heightGreaterThanUpperBound_returnFalse() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, HEIGHT_UPPER_BOUND + 1, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(checkValidProfile(inValidProfile));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidProfile_weightLessThanLowerBound_returnFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, WEIGHT_LOWER_BOUND - 1,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(checkValidProfile(inValidProfile));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidProfile_weightGreaterThanUpperBound_returnFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, WEIGHT_UPPER_BOUND + 1,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(checkValidProfile(inValidProfile));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidProfile_negativeCalories_returnFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT, -1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(checkValidProfile(inValidProfile));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidName_validInput_returnTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(checkValidName(\"Schwarzenegger\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidName_emptyInput_returnFalse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(checkValidName(\"\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidName_nullInput_returnFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(checkValidName(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 83
    }
  },
  {
    "path": "src/test/java/storage/profile/ProfileStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package storage.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import models.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_PROFILE_STRING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "class ProfileStorageTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Tests decodeProfile method of class Storage when data from file is valid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are exceptions while decoding data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testDecodeProfile_exampleProfileData_returnsExampleProfileString() throws SchwarzeneggerException,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ProfileStorage storage \u003d new ProfileStorage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String inputFilePath \u003d \"src/test/java/storage/profile/exampleProfileData.json\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d storage.decodeProfile(inputFilePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(EXAMPLE_PROFILE_STRING, testProfile.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Tests decodeProfile method of class Storage when data from file is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testDecodeProfile_invalidDataInput_throwsInvalidSaveFormatException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ProfileStorage storage \u003d new ProfileStorage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String inputFilePath \u003d \"src/test/java/storage/profile/invalidProfileData.json\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertThrows(InvalidSaveFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            storage.decodeProfile(inputFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 41
    }
  },
  {
    "path": "src/test/java/workout/DateParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "class DateParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseDate_correctFormat_returnParsedDate() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        LocalDateTime dt \u003d LocalDateTime.of(2020, 10, 22, 0, 0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in1 \u003d \"2020/10/22\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(dt, DateParser.parseDate(in1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in2 \u003d \"20201022\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(dt, DateParser.parseDate(in2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in3 \u003d \"2020-10-22\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(dt, DateParser.parseDate(in3));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in4 \u003d \"2020 10 22\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(dt, DateParser.parseDate(in4));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseDate_wrongFormat_returnNull() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        LocalDateTime dt \u003d LocalDateTime.of(2020, 10, 22, 0, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in1 \u003d \"2020:10:22\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(null, DateParser.parseDate(in1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 34
    }
  },
  {
    "path": "src/test/java/workout/workoutmanager/CommandLibTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.WrongWS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ByeWS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.DeleteWS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ListWS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.NewWS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "class CommandLibTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_WorkoutManagerUnrecognisedCommand_returnNull() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof WrongWS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_list_returnListCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof ListWS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_delete_returnDeleteCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof DeleteWS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_new_returnNewCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"new\") instanceof NewWS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_bye_returnByeCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"end\") instanceof ByeWS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 10,
      "wgzesg": 39
    }
  },
  {
    "path": "src/test/java/workout/workoutmanager/WorkoutManagerParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import exceptions.workout.workoutmanager.NotANumberException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastWorkoutSessionRecord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseCommandKw;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseSearchConditions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseTags;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "class WorkoutManagerParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseTags_validInput_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String args \u003d \"/t legs, chest\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d parseTags(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        expected.add(\"legs\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        expected.add(\"chest\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseTags_missingOrWrongIdentifierKey_empty() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in1 \u003d \"/tt legs chest\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e out1 \u003d parseTags(in1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected, out1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in2 \u003d \"legs /t chest\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e out2 \u003d parseTags(in2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected, out2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in3 \u003d \"legs chest\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e out3 \u003d parseTags(in3);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected, out3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseSearchConditions_correctDateTagCondition_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                10,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                17,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                12,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                date, date, tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in1 \u003d \"/d 20201017\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected1 \u003d Arrays.asList(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d parseSearchConditions(in1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults1.add(t.test(record));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected1, testResults1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in2 \u003d \"/d 20201017 /t arms\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected2 \u003d Arrays.asList(false, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        tests \u003d parseSearchConditions(in2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults2.add(t.test(record));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected2, testResults2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in3 \u003d \"/d 20201017 /t legs, ch\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected3 \u003d Arrays.asList(true, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults3 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        tests \u003d parseSearchConditions(in3);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults3.add(t.test(record));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected3, testResults3);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseSearchConditions_wrongConditionFormat_emptyChecks() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                10,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                17,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                12,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                date, date, tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in1 \u003d \"20201017 /d\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d parseSearchConditions(in1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults1.add(t.test(record));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected1, testResults1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in2 \u003d \"20201017 arms\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        tests \u003d parseSearchConditions(in2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults2.add(t.test(record));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected2, testResults2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseCommandKw_correctFormat_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in1 \u003d \"list aa\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] ex1 \u003d {\"list\", \"aa\"};"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertArrayEquals(ex1, parseCommandKw(in1));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in \u003d \"list    /d 20201025\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] ex2 \u003d {\"list\", \"   /d 20201025\"};"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertArrayEquals(ex2, parseCommandKw(in));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseCommandKw_empty_emptyOutput() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in1 \u003d \"\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] ex1 \u003d {\"\"};"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertArrayEquals(ex1, parseCommandKw(in1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseIndex_correctInput_success() throws NotANumberException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(5, parseIndex(\"5\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseIndex_inputNotANumber_throwNotANumberException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertThrows(NotANumberException.class, () -\u003e parseIndex(\"5.0\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertThrows(NotANumberException.class, () -\u003e parseIndex(\"abc\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertThrows(NotANumberException.class, () -\u003e parseIndex(\"\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertThrows(NotANumberException.class, () -\u003e parseIndex(null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseList_correctFormat_success() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                10,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                17,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                12,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                0);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                date, date, tags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in1 \u003d \"/s 20201017\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected1 \u003d Arrays.asList(true);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d parseList(in1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults1.add(t.test(record));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected1, testResults1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in2 \u003d \"/e 20201019\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected2 \u003d Arrays.asList(true);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        tests \u003d parseList(in2);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults2.add(t.test(record));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected2, testResults2);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in3 \u003d \"/s 20201017 /e 20201019\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected3 \u003d Arrays.asList(true, true);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults3 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        tests \u003d parseList(in3);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults3.add(t.test(record));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected3, testResults3);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseList_wrongDateFormat_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                10,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                17,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                12,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                0);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                date, date, tags);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in1 \u003d \"/s aabb\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d parseList(in1);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults1.add(t.test(record));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected1, testResults1);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in2 \u003d \"/s 20201017 /e/e\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected2 \u003d Arrays.asList(true);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        tests \u003d parseList(in2);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults2.add(t.test(record));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected2, testResults2);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 1,
      "wgzesg": 232
    }
  },
  {
    "path": "src/test/java/workout/workoutsession/CommandLibTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionAdd;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionDelete;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionEnd;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionHelp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionSearch;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionWrong;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "class CommandLibTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_WorkoutSessionUnrecognisedCommand_returnNull() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof WorkoutSessionWrong);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_list_returnListCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof WorkoutSessionList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_delete_returnDeleteCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof WorkoutSessionDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_add_returnAddCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"add\") instanceof WorkoutSessionAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_End_returnEndCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"end\") instanceof WorkoutSessionEnd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_Search_returnSearchCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"search\") instanceof WorkoutSessionSearch);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_help_returnHelpCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof WorkoutSessionHelp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 58,
      "tienkhoa16": 7
    }
  },
  {
    "path": "src/test/java/workout/workoutsession/WorkoutSessionParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "class WorkoutSessionParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void workoutSessionParser_validInput_success() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void addParser_validInput_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void deleteParser_validInput_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void searchParser_validInput_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 22
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "zsk612": 1
    }
  }
]
