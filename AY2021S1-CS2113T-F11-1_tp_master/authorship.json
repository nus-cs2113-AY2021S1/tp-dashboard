[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        attributes("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \u0027Main-Class\u0027: \u0027seedu.duke.Duke\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        )"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 2,
      "wgzesg": 8,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://i.imgur.com/W2LwmOA.png\" width\u003d\"100\" height\u003d\"100\"\u003e | Nguyen Tien Khoa | [Github](https://github.com/tienkhoa16) | [Portfolio](docs/team/tienkhoa.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://i.imgur.com/3pna8mw.png\" width\u003d\"100\" height\u003d\"100\"\u003e | Zeon Chua Feiyi | [Github](https://github.com/CFZeon) | [Portfolio](docs/team/zeon.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://avatars0.githubusercontent.com/u/57080256?s\u003d400\u0026u\u003d677af6062d8d0cdeae80ee9f00b50aa01e2c4b84\u0026v\u003d4\" width\u003d\"100\" height\u003d\"100\"\u003e | Zhang Shukai | [Github](https://github.com/zsk612) | [Portfolio](docs/team/shukai.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://i.imgur.com/1mhi7tF.jpeg\" width\u003d\"100\" height\u003d\"100\"\u003e | Yu Jinyang| [Github](https://github.com/yujinyang1998) | [Portfolio](docs/team/jinyang.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://avatars1.githubusercontent.com/u/53573749?s\u003d400\u0026u\u003d624be60ee5061b89cabc5c04b54795fdd4956a72\u0026v\u003d4\" width\u003d\"100\" height\u003d\"100\"\u003e | Wang Zesong | [Github](https://github.com/wgzesg) | [Portfolio](../docs/team/zesong.md)"
      }
    ],
    "authorContributionMap": {
      "zsk612": 5,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "By: `CS2113T-F11-1` Since: `2020`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Supported Java versions](https://img.shields.io/badge/Java-11-blue.svg) ![Supported OS](https://img.shields.io/badge/Supported%20OS-Windows|MacOS|Linux-yellow.svg) "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Java CI](https://github.com/AY2021S1-CS2113T-F11-1/tp/workflows/Java%20CI/badge.svg)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- [Developer Guide](#developer-guide)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "  * [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [1.1. Background](#11--background)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [1.2. Purpose](#12-purpose)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [1.3. Scope](#13-scope)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "  * [2. Setting up](#2-setting-up)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [2.1. Prerequisites](#21-prerequisites)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [2.2. Setting up the project in your computer](#22-setting-up-the-project-in-your-computer)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "  * [3. Design](#3-design)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [3.1. Architecture](#31-architecture)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [3.2. Ui Component](#32-ui-component)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [3.3. Logic Component](#33-logic-component)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [3.4. Model Component](#34-model-component)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [3.5. Storage Component](#35-storage-component)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [3.6. Common Classes](#36-common-classes)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "  * [4. Implementation](#4-implementation)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [4.1. Main menu-related Features](#41-main-menu-related-features)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [4.2. Profile-related Features](#42-profile-related-features)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.1.1. Addition of ingredient](#411-addition-of-ingredient)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.1.2. List all/ specific ingredient(s)](#412-list-all-specific-ingredients)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.1.3. Delete specific ingredients(s)](#413-delete-specific-ingredientss)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.1.4. Search for ingredients based on keyword(s)](#414-search-for-ingredients-based-on-keywords)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.1.5. Notification for ingredients warning](#415-notification-for-ingredients-warning)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [4.3. Diet-related Features](#43-diet-related-features)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.2.1. Addition of recipe](#421-addition-of-recipe)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.2.2. List all/ specific recipe(s)](#422-list-all-specific-recipes)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.2.3. Cooking of recipe](#423-cooking-of-recipe)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.2.4. Delete a specific recipe](#424-delete-a-specific-recipe)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.2.5. Search for recipe based on keyword(s)](#425-search-for-recipe-based-on-keywords)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [4.4. Workout-related Features](#44-workout-related-features)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "      - [4.4.1. Creation of new workout session](#441-creation-of-new-workout-session)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "      - [4.4.2. Listing past workout sessions](#442-listing-past-workout-sessions)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "      - [4.4.3. Editing of workout session](#443-editing-of-workout-session)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "      - [4.4.4. Deletion of workout session](#444-deletion-of-workout-session)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "      - [4.4.5. Search based on conditions](#445-search-based-on-conditions)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [4.5. Storage](#45-storage)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.5.1. Storage for Profile](#441-select-files-to-load-from-and-save-to)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.5.2. Storage for Diet](#442-save-current-state)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.5.3. Storage for Workout](#443-insert-name-here)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [4.6. Recommendations-related Features](#46-recommendations-related-features) "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.5.1. Display expenditure](#451-display-expenditure)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [4.5.2. Expenditure functionality](#452-expenditure-functionality)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [4.7. Logging](#47-loggingToBeDeleted)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "  * [Appendices](#appendices)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix A: Product Scope](#appendix-a-product-scope)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix B: User Stories](#appendix-b-user-stories)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix C: Value proposition - Use cases](#appendix-c-value-proposition---use-cases)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix D: Non-Functional Requirements](#appendix-d-non-functional-requirements)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix E: Glossary](#appendix-e-glossary)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix F: Instructions for Manual Testing](#appendix-f-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [F.1. Launch and Shutdown](#f1-launch-and-shutdown)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [F.2. Add an ingredient](#f2-add-an-ingredient)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [F.3. List ingredient](#f3-list-ingredient)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "      - [F.4. Delete an ingredient](#f4-delete-an-ingredient)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    + [Appendix G: Supported Formats of Date Input](#appendix-g-supported-formats-of-date-input)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 1.1.  Background"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The Schwarzenegger is a desktop command line interface-based app for managing all your needs regarding fitness. If you can type fast, The Schwarzenegger can help you maximise your efficiency for maintaining fitness."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 1.2. Purpose"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The document contains the specified architecture and software design specifications for the application, The Schwarzenegger. "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 1.3. Scope"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This describes the software architecture and software design requirements for The Schwarzenegger. This guide is mainly for developers, designers and software engineers that are or going to work on The Schwarzenegger. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "## 2. Setting up"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 2.1. Prerequisites"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. JDK `11`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. IntelliJ IDE."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 2.2. Setting up the project in your computer"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. Fork this repository, and clone the fork to your computer."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Set up the correct JDK version for Gradle  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "   2. If `JDK 11` is listed in the drop down, select it. Otherwise, click `New…` and select the directory where you installed `JDK 11`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "   3. Click `OK`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. Click `Import Project`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "5. Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "6. Click `Open as Project`."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "7. Click `OK` to accept the default settings if prompted. "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This section provides a high level overview of our application, The Schwarzenegger."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 3.1. Architecture"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Architecture](images/KitchenHelperMain.png)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The image above explains the design of the application, The Schwarzenegger. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The main driver of the application is `Main: Kitchen Helper`. It is responsible for mainly two phases:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- At application launch"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    - This class will initialise the components in the correct sequence and is in charge of connecting them with each other."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- At shut down"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    - This class will invoke cleanup method for the components when necessary."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "In addition to that, the architecture of Kitchen Helper is broken down into seven classes, mainly the following: "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Ui`: This class mainly handles the UI of the application."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Parser`: This class mainly handles the parsing and handling of user commands."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Command`: This class handles the type of command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Ingredient`: This class manages the data of data type ingredient in memory."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Chore`: This class manages the data of data type chore in memory."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Recipe`: This class manages the data of data type recipe in memory."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Storage`: This class reads data from and writes data back into a text file for future uses."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 3.2. Ui Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Ui Component](images/UI_Component.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "API: `Ui.java`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CFZeon"
        },
        "content": " "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The `Ui` component is a singleton class where all interaction will be made through this component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CFZeon"
        },
        "content": " "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The `Ui` component,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Executes user commands using the command component"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Listens for changes and outputs messages from the Command component"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 3.3. Logic Component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Logic Component](images/logic_update.png)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. `Kitchen Helper` uses `Parser` class to parse the user command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. This results in a command object return back which is executed by `Kitchen Helper`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. The command execution can affect the object (e.g. adding an ingredient)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to `Ui` to display the message."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 3.4. Model Component"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Model Component](images/model.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The Model component contains `Ingredient`, `Recipe` and `Chore` classes, which store the user\u0027s input in Kitchen Helper."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Ingredient: Stores the ingredient data."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Recipe: Stores the recipe data."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Chore: Stores the chore data."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 3.5. Storage Component"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Storage Class Diagram](images/Storage.png)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "A Storage object is created by the KitchenHelper class to handle the loading and saving of ingredients, recipes, chores and expenditure data."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The Storage() method acts as a constructor with filepaths to local save files for ingredients, recipes, chores and expenditure data."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The getIngredientData(), getRecipeData(), getChoreData() and loadExpenditureData() methods are used to read saved data from local files into the current session of KitchenHelper. loadingIngredients() and loadingRecipeItems() methods are called in getIngredientData() and getRecipeData() respectively to sort out which Ingredient object class each object belongs to."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The saveIngredientData(), saveRecipeData(), saveChoreData() and saveExpenditureData() methods write the current state of KitchenHelper into the local save files by calling them in various command classes such as AddChoreCommand and DeleteIngredientCommand."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 3.6. Common Classes "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Classes used by multiple components are in the `seedu.duke` package."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This section describes some details on how the features are being implemented. All recipe/ ingredient/ chore-related features can be broken down into 4 distinct functionality, addition, listing, deletion and searching."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 4.1.Profile-related Features"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.1.1. Addition of ingredient"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The addition of the ingredient feature allows the user to keep track of the ingredients in the ingredient’s list.   "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "For example, `addingredient /n beef /c meat /q 2 /p 20 /e 18/02/2020` will add the ingredient `beef` "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "which have the following attributes:  category `meat`, quantity `2`, price `$20` and expiry `18/02/2020`  "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![addIngredientCommand](images/addIngredient_update.png) "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following steps explained “Sequence diagram for an example `addingredient` command”:  "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user enters `addingredient /n beef /c meat /q 2 /p 20 /e 18/02/2020`.  "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()`.  "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. `Parser#parseUserCommand()` will call its own method `Parser#prepareAddIngredient()`.  "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. `Parser#prepareAddIngredient()` will first validate the attributes and create an object `AddIngredientCommand` with the attributes if successful.  "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "5. `KitchenHelper` calls it own method `executeCommand()` to execute the method in `AddIngredientCommand#execute()`.  "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "6. On `AddIngredientCommand#execute()`, ingredient is added and return of the message.  "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.1.2. List all/ specific ingredient(s)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The list feature allows showing details of Ingredients added by the user.  All ingredients added will be shown in a sorted order, by expiry, and shown by categories. The function will require a valid string , which belongs to `all/dairy/drink/fruit/meat/miscellaneous/staple/vegetable`, "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "to be added as a parameter. Failure to do so will trigger an exception where the user will be notified of an invalid command and the syntax of the listing of the ingredients will be displayed. "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user attempts to list the details of a particular category of ingredients, the `listIngredientCommand`, ‘Parser’ and `Ingredient` class will be accessed and the following sequence of actions are called to list details of  a particular category Ingredient list: \u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following image below shows the sequence of steps for step 1 and 2:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![ListIngredient Sequence Diagram](images/listIngredientSequenceDiagramPart1.png)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. User executes `listingredient all` "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    2. A `Ui` object will be created and calls `Ui#getUserCommand()`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    3. Input will be parsed in `Command#parseUserCommand()` and identified with the keyword `listingredient`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![List Ingredient Step 1](images/listIngredient1.png)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Parsing of user input and creation of command object"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    2.This will automatically trigger the parsing of the user’s input string into a suitable format for the listing of a particular category of  `ingredient` object in `Command#prepareListIngredient()`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    3. A `ListIngredientCommand` object will be created."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![List Ingredient Step 2](images/ListIngredientCommand.png)   "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    The following image below shows the sequence for the next steps:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![ListIngredient Sequence Diagram](images/listIngredientSequenceDiagramPart2.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    2. The newly created object will call `#ListIngredientCommand#execute` which starts the process of listing a particular category’s ingredient details, thus calling `ListIngredientCommand#listIngredients()`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    3. The existing ingredientList arraylist and the category of the chosen ingredient category  will be passed through to the `ListIngredientCommand#listIngredients()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    4. The function will find if the category name is valid, thus, creates `CommandResult` result storing the details of the ingredient belonging to the particular category."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![List Ingredient Step 3](images/ListIngredientCommand2.png)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. The details will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following shows the full sequence diagram for this command:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![List Ingredient Sequence Diagram](images/listIngredientSequenceDiagram.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Aspect: Finding the category name and print out ingredient belonging to the category"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Alternative 1: Looping through the whole ingredientList arraylist to find out all possible category name, then, do sorting and return result"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | The program will be able to detect all category name inside the ingredientList arraylist. |"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | This method will be slow when facing a huge amount of data in the arraylist as the program may have to go through every single item in the arraylist. |"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Alternative 2 (current choice): Creating a fixed array which includes the order and all possible category names."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | Users would be able to get the details of the particular recipe accurately and fast. |"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Program will not be able to handle any ingredient which isn’t belonging to the category names in the fixed array.  |"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.1.3. Delete specific ingredients(s)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The deletion feature for ingredients allows the user to delete ingredients either by the name or index of the ingredients. In addition to that, it allows users to reduce the quantity of a specific ingredient. "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user attempts to reduce the quantity of ingredient at index 1 of the ingredients inventory by 4,  the `Kitchen Helper`, `Parser` and `DeleteIngredientCommand` class will be called upon. The following sequence of steps will then occur: "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following image below shows the sequence of steps for step 1 and 2:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![DeleteIngredient Sequence Diagram](images/deleteIngredientSequenceDiagramPart1.png)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keyed in `deleteingredient /i 1 /q 4`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "   "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `UI` object will be created and it will call `UI#getUserCommand()` method to take in the input that the user has keyed in."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `String` object will be returned and saved into the `userCommandInput` variable in `Kitchen Helper`."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The variable `userCommandInput` is being parsed into the `Parser` class as an argument for this method `Parser#parseUserCommand`."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![DeleteIngredient State 1](images/deleteIngredientState1.png) "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. The command inserted by the user is being parsed into the `Parser` and a new `Command` object is being created. "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The variable `userCommandInput` will be identified as `deleteingredient` in the `Parser#parseUserCommand()`.The `Parser#prepareDeleteIngredient()` is being called to prepare the `userCommandInput` string to create a `DeleteIngredientCommand` object."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The `DeleteIngredientCommand` object is created with the ingredientIndex and quantity set to 4. "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![DeleteIngredient State 2](images/deleteIngredientState2.png)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. After creating `DeleteIngredientCommand` object, this Command will now be executed. "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    The following image below shows the sequence for the next steps:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![DeleteIngredient Sequence Diagram](images/deleteIngredientSequenceDiagramPart2.png)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The `DeleteIngredientCommand#execute()` will be called which in turned called `DeleteIngredientCommand#deleteIngredientByIndex()`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Since the `quantity` of this ingredient is not null, the `DeleteIngredientCommand#deleteQuantity()` will be called to reduce the quantity of this ingredient.  "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. When `DeleteIngredientCommand#deleteQuantity()` has returned, the program will get the quantity of the current ingredient after deduction. If the quantity is zero or null, the `DeleteIngredientCommand#deleteIngredient()` will be called to remove `ingredient` from the `ingredientsList` which contains all the ingredients. "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Then, `Storage#saveIngredientData()` will be called to save the current `ingredientsList` into an output file."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Lastly, a String called `feedbackToUser`will be returned to the user to inform the user of the outcome of the command. "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    The following image shows the state diagram for the command execution:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![DeleteIngredient State 3](images/deleteIngredientState3.png)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4.  The details will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following shows the full sequence diagram for this command:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Delete Ingredient Sequence Diagram](images/deleteIngredientSequenceDiagram.png)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Other than deleting or reducing the quantity of an ingredient, `DeleteIngredientCommand` has an additional feature that is linked to [Display Expenditure](#451-display-expenditure) which will increase the cooking expenditure if the ingredients are used for cooking. "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "+ Aspect 1: How to differentiate `deleteingredientByQuantity` and `deleteIngredient` \u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + Alternative 1 (Current Choice): The `quantity` of ingredient in `DeleteIngredientCommand` constructor is set to the `quantity` that was inputted by the user. In the case where the user would like to delete an ingredient, the `quantity` variable will be set to `null`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Pros**|Only a `quantity` variable needs to be set. This increases more convenience and no overload of constructors.|"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Cons**|It is dependent on the variable to check if the ingredient is to be deleted. | "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + Alternative 2: Create 1 more constructor just for deduction of quantity for ingredients. \u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Pros**|This gives us more flexibility on what object can be created with different variables.|"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Cons**|There may be an overload of constructors.|"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    In the end, for `aspect 1`. we have chosen `alternative 1` because there will not be an overload of constructors."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "+ Aspect 2: Calling of function for deletion of `ingredient` when `ingredient` has the quantity of zero."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + Alternative 1 (Current Choice) : Two non-nested `if-else` blocks to cater for `deleteQuantity` and `deleteIngredient`."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Pros**|SLAP is not violated. |"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Cons**|Longer lengths of codes. | "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + Alternative 2: One nested `if-else` block to cater for `deleteQuantity`and `deleteIngredient`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Pros**|Concise block of `if-else`.|"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Cons**|The `if-else` block will be nested with another `if-else` block. This will violate the SLAP in code quality and the program will have to check for multiple conditions instead of one.|"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    In the end, for `aspect 2`, we have chosen `alternative 1` because there will be more concise blocks of `if-else` which helps to contribute to the non-violation of SLAP for the method."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "+ Aspect 3: Deletion by index instead of name for ingredients "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + Alternative 1 (Current Choice): Deletion by index only"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Pros**|Only a very specific ingredient can be deleted. Only need to get the ingredient from the list of ingredients by index. It is a more specific way to get the ingredient to delete. |"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Cons**|Users will not be able to delete the ingredient by name.| "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + Alternative 2: Deletion by both index and name "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Pros**|Users will be able to delete by ingredients\u0027 name and index. |"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Cons**|There may be confusion when it comes to the deletion by name for the users as the algorithm that was supposed to be implemented for deletion by name will delete the first instance of ingredient that is found. In the case, whereby the list of ingredients have two `apples` but different expiry date and the user just want to delete the second `apple` that has a later expiry date. It will not be able to do so through deletion of name as the first instance of `apple` is the one that has an earlier expiry date. | "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    In the end, for `aspect 3`, we have chosen `alternative 1` which is to delete by index for ingredients only so that the users can have a more convenient time in deleting the specific ingredient that they want to delete. However, deletion by name for ingredients may be implemented and enhanced in the future implementations once we have finalised our idea for its implementation. "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.1.4. Search for ingredients based on keyword(s)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The search for ingredients feature allows the user to find ingredients using a keyword in the ingredient’s list.  "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "For example, `searchingredient beef` will find all the ingredients that contain `beef`.  "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![SearchIngredientCommand](images/searchIngredient_update.png) "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following steps explained sequence diagram for `searchingredient` command:  "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user enters `searchingredient beef`.  "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()`.  "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. `SearchIngredientCommand` object is created with the keyword passed in.  "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. `KitchenHelper` calls it own method `executeCommand()` to execute the method in `SearchIngredientCommand#execute()`.  "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "5. On `SearchIngredientCommand#execute()`, display the list of ingredients that matches the keyword. "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Aspects: How `searchingredient` executes:  "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 1 (current choice): Find if the keyword is part of the substring of the ingredient, "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "`[Meat] Beef Qty:3 $20.00 Exp:18/03/2020.`  "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | 1. Easily to find by any attributes such as category, ingredient’s name,  quantity, price and expiry date.|  "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | 1. Searching `beef [meat]` will fail to show any matching result.|"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Take in all the predicates given by the user and find using the predicates as a keyword"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | 1. More accurate searching of the ingredient is available for the user.|  "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | 1. Requires users to enter more precise predicate keywords which could be more inconvenient.|"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.1.5. Notification for ingredients warning"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The notification for ingredients warning runs everytime the program starts. Checks the ingredient list for ingredient that is expiring in 3 days, expired or low quantity (\u003c 5)."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "For example, `beef` ingredient\u0027s expired date is 02/02/2020 and have quantity of 3. The program will list down the ingredient in the categories when the application start."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![NotificationIngredientCommand](images/notificationIngredient.png) "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following steps explained sequence diagram for `showNotification` method:  "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user starts `KitchenHelper`.  "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. `KitchenHelper` calls `showNotification()`.  "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. `KitchenHelper#IngredientNotification` object is created when the method `IngredientNotification#getNotifications(ingredientList)` is called.  "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. Result from `IngredientNotification#checkForExpiringIngr(ingredientList)`,`IngredientNotification#checkForLowQuantityIngr`, `IngredientNotification#checkForExpiredIngr` will be combined."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `IngredientNotification#checkForExpiringIngr(ingredientList)` checks for ingredients that is going to expire in 3 days."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `IngredientNotification#checkForLowQuantityIngr` checks for ingredients that has quantity of 5 or lower."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `IngredientNotification#checkForExpiredIngr` checks for ingredients that is expired."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "5. `IngredientNotification#getNotifications(ingredientList)` returns result to `KitchenHelper#ingredientNotification` and displays."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Aspects: How `showNotification` executes:  "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 1 (current choice): Create a function to compile results from the three different methods, "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | 1. Decreases the need to indicate three lines of code to call out the three different methods.|  "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | 1. Developer have to go into `IngredientNotification#getNotifications(ingredientList)` to find out what function |"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Create three different methods in `KitchenHelper.java`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | 1. Clear indication what the method is doing|  "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | 1. Not very \u0027OOP\u0027 like|"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 4.2. Diet-related Features"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.2.1. Addition of recipe"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Users can add a new recipe to the application where there must be at least one or more `ingredient`s. The failure to do so will trigger an exception where the user will be notified of an invalid command and the syntax of the addition of recipe will be displayed. "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u003e It is important that the name of the new recipe has not appeared in the list of recipes in the application."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user attempts to create a new recipe, the `AddRecipeCommand`, `Parser` and `Recipe` class will be accessed and the following sequence of actions are called to create a `recipe` object:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. User executes `addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable` "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `Ui` object will be created and calls `Ui#getUserCommand()`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `Parser#parseUserCommand()` and identified with the keyword `addrecipe`."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![Add Recipe Step 1](images/AddRecipe1.png)"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Parsing of user input and creation of command object"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will automatically trigger the parsing of the user’s input string into a suitable format for the addition of `recipe` object in `Parser#prepareAddRecipe()`."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `AddRecipeCommand` object will be created and calls `AddRecipeCommand#setAttributesOfCmd()` to set the contents of the command into reader friendly formats."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![Add Recipe Step 2](images/AddRecipe2.png)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The newly created object will call `AddRecipeCommand#execute()` which starts the process of adding a recipe, thus calling `Recipe#AddRecipe()`."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `Recipe` object will be created with its name that was parsed in step 2."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. An additional step is included where a check for an existing recipe with the same name is conducted with `AddRecipeCommand#checkIfRecipeExist()`. A `KitchenHelperException` exception will be triggered when there is an existing recipe."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![Add Recipe Step 3](images/AddRecipe3.png)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. `Ingredient`s parsed in step 2 will be added to the newly created recipe according to their category through the calling of `Recipe#addIngredientsToRecipe()`."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\t"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\t![Add Recipe Step 4](images/AddRecipe4.png)"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "All description and warnings to the user utilises the `UI` class, which controls the printing of the text on the console. "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following sequence diagram shows how the `addrecipe` command works"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![AddRecipeCommand](images/addRecipeSequenceDiagram.png) "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Aspect: Parsing of the user’s input command"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Alternative 1 (current choice): The key parameters that are required are divided by the delimiter of ‘/’ followed by a specific letter. `(i.e. /i)`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | User would be able to have strings that may contain spaces (i.e. /n Chicken Salad /i Breast meat:2:meat) |"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | The order of delimiters needs to be standardized, users will not be able to re-order the delimiters. |"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Alternative 2: Multiple prompts for user’s input of a recipe name and ingredient(s)"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | Users would not have to make sure that their command is syntactically right |"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | The constant prompting could subject the application to a negative experience in the difficulty to use the commands. |"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Alternative 3: User’s command are divided by space"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | The parsing can be easily done by calling Java built-in function `.split()` |"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Values for each variable cannot contain spaces which makes the application restrictive. |"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.2.2. List all/ specific recipe(s) "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The list feature allows showing details of a particular recipe created by the user.  All ingredients added into the recipe will be shown in a sorted order and shown by categories. The function will require valid string of a integer or `all` to be added as a parameter. Failure to do so will trigger an exception where the user will be notified of an invalid command and the syntax of the listing of the recipe will be displayed. "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user attempts to list the details of a particular recipe, the `listRecipeCommand`, ‘Parser’ and `Recipe` class will be accessed and the following sequence of actions are called to list details of  a particular `recipe` object:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following image below shows the sequence of steps for step 1 and 2:"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![ListRecipe Sequence Diagram](images/listRecipeSequenceDiagramPart1.png)"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. User executes `listrecipe 1`  "
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    2. A `Ui` object will be created and calls `Ui#getUserCommand()`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    3. Input will be parsed in `Command#parseUserCommand()` and identified with the keyword `listrecipe`."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![List Recipe Step 1](images/listRecipe1.png)"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Parsing of user input and creation of command object"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    2.This will automatically trigger the parsing of the user’s input string into a suitable format for the listing of `recipe` object in `Command#prepareListRecipe()`."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    3. A `ListRecipeCommand` object will be created."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![List Recipe Step 2](images/ListRecipeCommand.png)   "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    The following image below shows the sequence for the next steps:"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![Recipe Sequence Diagram](images/listRecipeSequenceDiagramPart2.png)"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    2. The newly created object will call `ListRecipeCommand#execute` which starts the process of listing a particular recipe’s details, thus, calling `ListRecipeCommand#listRecipe()`."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    3. The existing recipeList arraylist and the item number of the chosen recipe will be passed through to the `ListRecipeCommand#listRecipe()`."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    4. The function will find if the item number is valid and contains details of the recipe, thus, creates a CommandResult storing the details of the particular recipe."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![List Recipe Step 3](images/ListRecipeCommand2.png)"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. The details will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following shows the full sequence diagram for this command:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![List Recipe Sequence Diagram](images/listRecipeSequenceDiagram.png)    "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Aspect: Finding the recipe requested by the user."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Alternative 1: Looping through the whole recipeList arraylist to find the recipe requested by the user."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | The program will be able to locate the recipe accurately. |"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | This method will be slow when facing a huge amount of data in the arraylist as the program may have to go through every single item in the arraylist. |"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Alternative 2 (current choice): Using arrayList.get(item) to get the recipe requested by the user."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | Users would be able to get the details of the particular recipe accurately and fast. |"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Without proper checks done before running the command, it will result in error if the number indicated by the user exceeds the arraylist / does not exist in the arraylist.  |"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.2.3. Cooking of recipe"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows the user to cook a recipe if there are sufficient ingredients. The user will also indicate how many pax this recipe would be cooked for."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user attempts to cook `Chicken Salad` recipe from `Kitchen Helper`, the `Kitchen Helper`, `Parser` and `cookRecipeCommand` class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keyed in `cookrecipe /n Chicken Salad /p 1`."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `UI` object will be created and it will call `UI#getUserCommand()` method to take in the input that the user has keyed in. "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `String` object will be returned and saved into the `userCommandInput` variable in `Kitchen Helper`. "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The variable `userCommandInput` is being parsed into the `Parser` class as an argument for this method `Parser#parseUserCommand()`."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "   "
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![Cook Recipe State 1](images/cookRecipeState1.png)"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. The command inserted by the user is being parsed into the `Parser` and a new `Command` object is being created. "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The variable `userCommandInput` will be identified as `cookrecipe` in the `Parser#parseUserCommand()`.The `Parser#prepareCookRecipe()` is being called to prepare the `userCommandInput` string to create a `CookRecipeCommand` object."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![Cook Recipe State 2](images/cookRecipeState2.png)"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. The command is now being executed."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The `CookRecipeCommand#execute()` will be called."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The `CookRecipeCommand#cookRecipe()` is called and it checks whether the recipe inputted by the user exists by calling the `CookRecipeCommand#checkIfRecipeExists()` method."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. If recipe exists, the `CookRecipeCommand#checkIfRecipeExists()` method will return the index of the recipe, else it will return a number that is bigger than the size of `recipelist`. In this case, the recipe `Chicken Salad` exists, so it will return the index of the recipe "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Next, it is to check if there are sufficient non-expiring ingredients to be deducted from the ingredients\u0027 inventory to cater for the number of pax for the specific recipe by calling `CookRecipeCommand#checkForSufficientIngredients()` and `CookRecipeCommand#checkNotExpiredIngredientQty()` which their results are saved into `sufficientIngr` and `suffButLessExpiredIngr` boolean values respectively. "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        ![Cook Recipe Sequence Diagram Part 2](images/cookRecipeCommandSequenceDiagramPart2.png)"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. With respect to the point 4 above, the following cases may happen and has been summarised at the image above:"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "       1. Case 1: If both `sufficientIngr` and `suffButLessExpiredIngr` return true"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            1. `CookRecipeCommand#deductIngredients()` will be called to deduct the ingredients in the ingredients\u0027 inventory."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            1. Then, `Storage#saveIngredientData()` will be called to save the current `ingredientsList` into an output file."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "       2. Case 2:  If `sufficientIngr` returns true but `suffButLessExpiredIngr` returns false or both `sufficientIngr` and `suffButLessExpiredIngr` return false and the size of `expiredIngrNames` is not zero"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            1. `CookRecipeCommand#craftExpiredList()` will be called to craft the list of expired ingredients which will be returned to tell the users the ingredients that are expired. "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    The following image shows the state diagram for the command execution:"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        ![Cook Recipe State 3](images/cookRecipeState3.png)"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        "
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. The details will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following shows the full sequence diagram for this command:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Cook Recipe Sequence Diagram](images/cookRecipeCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Other than reducing the quantity of ingredients if the recipe can be cooked successfully, `CookRecipeCommand` has an additional feature that is linked to [Display Expenditure](#451-display-expenditure) which will add the total cost of cooking this recipe into the total expenditure. "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Aspect: Preparing the deduction of ingredients when cooking a recipe"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Alternative  1 (current choice): Checks for existence of recipe, existence of ingredients for the specified recipe and sufficiency of ingredients"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|   |   |"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|---|---|"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros**| Minimizes erroneous deduction of insufficient and nonexistent ingredients |"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons**|Additional computation and overhead |"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Alternative 2: Deductions are to be made to existing and available ingredients and users are notified when there are insufficient ingredients"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|   |   |"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|---|---|"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros**| Lesser overhead as there is lesser checks to be done"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons**| Hidden bugs and exceptions have to be well-covered to ensure that the deduction would be of the right value"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Aspect: Searching for the corresponding ingredients of a recipe/ Searching through list of recipes to check for existence of recipe"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Alternative 1 (current choice): Linear search, iterate through the arraylist of ingredients/ recipes and checking"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|   |   |"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|---|---|"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros**| Lesser use of complex data structure will save memory |"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons**| Not optimal as search will be O(n), larger amount of data may take a longer time |"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Alternative 2: building an index on the first letter of the recipe name"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|   |   |"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|---|---|"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros**| More efficient search as pool of search space would be significantly smaller"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons**| Needs to be constantly maintained which incurs overhead."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.2.4. Delete a specific recipe"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The deletion feature for specific recipes allows the user to delete recipes either by the name or index of the recipe. "
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user attempts to delete the `Chicken Rice` recipe from Kitchen Helper, the `Kitchen Helper`, `Parser` and `DeleteRecipeCommand` class will be called upon. The following sequence of steps will then occur: "
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keyed in `deleterecipe /n Chicken Rice`."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `UI` object will be created and it will call `UI#getUserCommand()` method to take in the input that the user has keyed in. "
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `String` object will be returned and saved into the `userCommandInput` variable in `Kitchen Helper`. "
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The variable `userCommandInput` is being parsed into the `Parser` class as an argument for this method `Parser#parseUserCommand()`."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![Delete Recipe State 1](images/deleteRecipeState1.png)"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. The command inserted by the user is being parsed into the `Parser` and a new `Command` object is being created. "
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The variable `userCommandInput` will be identified as `deleterecipe` in the `Parser#parseUserCommand()`.The `Parser#prepareDeleteRecipe()` is being called to prepare the `userCommandInput` string to create a `DeleteRecipeCommand` object."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![Delete Recipe State 1](images/deleteRecipeState2.png)"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. The command is now being executed."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The `DeleteRecipeCommand#execute()` will be called."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. As this is a deletion by recipe name, the `recipeIndex` variable is set as null. As the variable is null, `DeleteRecipeCommand#deleteRecipeByName()` will be called."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Next, the `DeleteRecipeCommand#getRecipeIndex()` to get the index based on the recipe name that the user has inputted. With the given index, `DeleteRecipeCommand#deleteRecipe()` will be called to delete the recipe. "
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Lastly, a String called `feedbackToUser` will be returned to the user to inform the user of the outcome of the command. "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    The following image shows the state diagram for the command execution:"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![Delete Recipe State 1](images/deleteRecipeState3.png)"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. The details will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following shows the full sequence diagram for this command:"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Delete Recipe Sequence Diagram](images/deleteRecipeSequenceDiagram.png)"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "+ Aspect 1: How is the `DeleteRecipeCommand` initialise. \u003cbr\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + Alternative 1 (Current Choice): Usage of 2 constructors \u003cbr\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        "
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Pros** | This gives us more flexibility on what object can be created with different variables since there are two methods of recipe deletion. |  "
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Cons** | There is an overload of constructors.|"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        "
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + Alternative 2: Usage of 1 constructor \u003cbr\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Pros** |The Parser can call for one main default constructor. |"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Cons** | The single constructor will need to deal with 2 different methods of deletion, causing the constructor to have more than one purpose.|"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    In the end, for `aspect 1`, we have chosen `alternative 1` as there are two different types of deletion, it would be simpler and increase cohesion as it is more easier to express these constructors\u0027 functionality at a higher level."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "+ Aspect 2: Deletion by both index and name for recipes"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + Alternative 1: Deletion by index only"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Pros**|A very specific recipe can be deleted.|"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Cons**|Users will not be able to delete the recipe by name.| "
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + Alternative 2 (Current Choice): Deletion by both index and name "
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Pros**|Users will be able to delete by recipe\u0027s name and index. As the recipe names are specific, it will be easier to get the recipe from list of recipe by getting the index from the recipe name given or the index given by the user.|"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        |**Cons**|There may be more overhead as there is a need to find the index of the recipe if the user has given the recipe name for deletion. | "
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    In the end, for `aspect 2`, we have chosen `alternative 2` which is to delete by index and name for recipes as the recipe names are unique when they are added, hence the users will be able to delete that specific recipe."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.2.5. Search for recipe based on keyword(s)"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The search for recipe feature allows the user to find recipes using a keyword in the recipe’s list.  "
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "For example, `searchrecipe Chicken` will find all recipes that contain `Chicken`.  "
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![SearchRecipeCommand](images/searchrecipe_update.png)"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following steps explained sequence diagram for `searchrecipe` command:  "
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user enters `searchrecipe Chicken`.  "
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()`.  "
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. `SearchRecipeCommand` object is created with the keyword passed in.  "
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. `KitchenHelper` calls it own method `executeCommand()` to execute the method in `SearchRecipeCommand#execute()`.  "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "5. On `SearchRecipeCommand#execute()`, display the list of recipe\u0027s name that matches the keyword."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Aspects: How `searchrecipe` executes:  "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 1 (current choice): Find if the keyword is part of the substring of the recipe’s name "
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "and returns the recipe’s name and the index of recipe in the recipe’s list.  "
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | 1. Easy to find similar recipe by their name.|  "
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | 1. Only shows the different recipe that contains the keyword.|"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Find the keyword within the recipe’s ingredient.  "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | 1. More accurate searching of the recipe that uses the ingredients.|  "
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | 1. Could be more memory intensive to find if the list is huge.|"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 4.3. Chore-related Features"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.1. Addition of chore"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature for addition of `chore`s allows the user to add `chore`s to a list to keep track of their completion. The deadline of the `chore` can be a String or Date object.  The status completion of a `chore` is always undone when it is created. "
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user attempts to add a `chore` `buy groceries` with deadline `13/04/2020 09:45`, the `Kitchen Helper`, `Parser` and `AddChoreCommand` class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keyed in `addchore buy groceries /by 13/04/2020 09:45`."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `UI` object will be created and calls `UI#getUserCommand()`. "
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `Parser#parseUserCommand()` and identified with the keyword `addchore`.   "
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Parsing of user input and creation of command object"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will automatically trigger the parsing of the user’s input string into a suitable format for the addition of `chore` object in `Parser#prepareAddChore()`."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `AddChoreCommand` object will be created with parameters `buy groceries` as String description and `13/04/2020 09:45` as Date deadline."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The newly created object will call `AddChoreCommand#execute()` which starts the process of adding a chore, thus calling `AddChoreCommand#addChore()`."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `Chore` object will be created with the description and deadline that was parsed in step 2. Since the String deadline value is null, the deadline of the `Chore` will be a `Date` object."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The `Chore` will be added to the `choreList`."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Then, `Storage#saveChoreData()` will be called to save the current `choreList` into an output file."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Lastly, a String called `feedbackToUser` containing the outcome of the command will be returned to `KitchenHelper`. "
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. The outcome of the command will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following sequence diagram shows how the `AddChoreCommand` works    "
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    ![AddChoreCommand](images/AddChoreCommand.png)"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 1(current implementation): The `Chore` with different deadline types is created by constructor overloading. "
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | It is neater and more OOP. It indicates that both `Chores` with different deadline types have the same object function, but just take in different parameters. |"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | The need to maintain both a String deadline and Date deadline variable within the `Chore` object even though one of them is not used.|"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Creation of `Chore` object by setting up variables using if-else loop."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | More basic implementation.|  "
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Less OOP and does not make it obvious that deadline is an essential attribute of a `Chore` object that has two type signatures to choose from. "
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2. List all chores"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature to list `chore`s allows the user to view the `chore`s currently in the `choreList` and their completion statuses. "
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user attempts to list `chore`s, the `Kitchen Helper`, `Parser` and `ListChoreCommand` class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keyed in `listchore`.  "
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `UI` object will be created and calls `UI#getUserCommand()`. "
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `Parser#parseUserCommand()` and identified with the keyword `listchore`.   "
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Parsing of user input and creation of command object"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will automatically trigger the parsing of the user’s input string in `Parser#prepareListChore()` to ensure the parameters are empty, or an exception will be thrown."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The `ListChoreCommand` object will be created. "
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The newly created object will call `ListChoreCommand#execute()` which starts the process of displaying all the chores, thus calling `ListChoreCommand#listChore()`."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The `choreList` will be looped through, displaying each `Chore` in String format and its corresponding position in the list."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Lastly, a String called `feedbackToUser` containing the displayed list of chores will be returned to `KitchenHelper`. "
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. The displayed list of chores will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 1(current implementation): Using for-loop to loop through the `Chore` ArrayList."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | It is easier to retrieve the position of each `Chore` in the list, just by looking at the iterator value."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | More basic implementation.|"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Using ListIterator to loop through the `Chore` ArrayList."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | Makes use of the Java Collection framework.|  "
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Requires another counter or variable to keep track of `Chore` position in the list.|"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.3. Delete a specific chore"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature for deletion of `chore`s allows the user to remove the `chore` specified by the index in the list. "
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user attempts to delete a `chore` by its index, the `Kitchen Helper`, `Parser` and `DeleteChoreCommand` class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keyed in `deletechore 1`."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `UI` object will be created and calls `UI#getUserCommand()`. "
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `Parser#parseUserCommand()` and identified with the keyword `deletechore`.   "
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Parsing of user input and creation of command object"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will automatically trigger the parsing of the user’s input string for the deletion of `chore` object in `Parser#prepareDeleteChore()` which ensures the parameter is a single number, or an exception will be thrown. "
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. If an exception is caught, an InvalidCommand will be created. Otherwise, a `DeleteChoreCommand` object will be created with parameters `1` as the index to delete."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The newly created object will call `DeleteChoreCommand#execute()` which starts the process of deleting a chore, thus calling `DeleteChoreCommand#deleteChore()`."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The index is checked to be an index within the `choreList`, then the `Chore` specified by the index in the `choreList` is removed."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Then, `Storage#saveChoreData()` will be called to save the current `choreList` into an output file."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Lastly, a String called `feedbackToUser` containing the outcome of the command will be returned to `KitchenHelper`. "
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. The outcome of the command will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 1(current implementation): Delete `Chore` by specifying index of `Chore` in `choreList`."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | Quick and easy deletion by using choreList.get() to retrieve Chore to delete. |"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Lesser alternatives for the user and user would have to identify the index first by executing `listchore` to get index of `Chore` in `choreList`. |"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Delete `Chore` by specifying `Chore` description or keywords in `Chore` description."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | More alternatives for user. |  "
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** |  1. Extra overhead required to search through entire `choreList` to identify `Chore` with similar description. \u003cbr\u003e 2. Possible accidental deletion of wrong `Chore` with identical descriptions or keywords. \u003cbr\u003e 3. More troublesome for the user to type out exact description of `Chore`. |"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.4. Search for chore based on keyword(s)"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The search for chore feature allows the user to find chores using a keyword in the chore’s list.  "
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "For example, `searchchore groceries` will find all chores that contain `groceries`.  "
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![SearchChoreCommand](images/searchchore_update.png)"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The following steps explained sequence diagram for `searchchore` command:  "
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user enters `searchchore groceries`.  "
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()`.  "
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. `SearchChoreCommand` object is created with the keyword passed in.  "
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. `KitchenHelper` calls it own method `executeCommand()` to execute the method in `SearchChoreCommand#execute()`.  "
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "5. On `SearchChoreCommand#execute()`, display the list of chore that matches the keyword."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 1 (current choice): Find if the keyword is part of the substring of the chore, "
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "`[x] buy groceries (by: Tuesday 12pm)`.   "
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "CFZeon"
        },
        "content": " "
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | 1. Easily to find by any attributes such as description and date.|  "
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | 1. Searching `buy groceries [x]` will fail to show any matching result.|"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Take in all the predicates given by the user and find using the predicates as a keyword  "
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | 1. More accurate searching of the chore is available for the user..|  "
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | 1. Requires users to enter more precise predicate keywords which could be more inconvenient.|"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.5. Mark chore as done"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature for marking of `chore` as done allows the user to change the completion status of the `chore` specified by the index in the list to done. "
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user attempts to mark a `chore` as done, the `Kitchen Helper`, `Parser` and `DoneCommand` class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keyed in `done 1`."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `UI` object will be created and calls `UI#getUserCommand()`. "
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `Parser#parseUserCommand()` and identified with the keyword `done`.       "
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Parsing of user input and creation of command object"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will automatically trigger the parsing of the user’s input string for the checking of `chore` object in `Parser#prepareDoneChore()` which ensures the parameter is a single number, or an exception will be thrown. "
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. If an exception is caught, an InvalidCommand will be created. Otherwise, a `DoneCommand` object will be created with parameters `1` as the index to check.   "
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The newly created object will call `DoneCommand#execute()` which starts the process of marking a chore as done, thus calling `DoneChoreCommand#markChoreDone()`."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The index is checked to be an index within the `choreList` and completion status of the `Chore` specified by the index is checked to be undone. Otherwise, an exception will be thrown."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The Chore is then marked as done."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Then, `Storage#saveChoreData()` will be called to save the current `choreList` into an output file."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Lastly, a String called `feedbackToUser` containing the outcome of the command will be returned to `KitchenHelper`. "
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. The outcome of the command will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Similar to DeleteChoreCommand."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.6. Notification for chores warning"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The notification for chores warning runs every time the program starts. It checks the `choreList` for `Chores` that are already overdue or have deadlines approaching in 3 days."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "For example, `take cake out of oven` is overdue since `11/04/2020 15:30`. Deadlines of `Chores` specified in String will not trigger notification warnings."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation   "
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user starts `KitchenHelper` and `KitchenHelper#run` is called.  "
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. `KitchenHelper` calls `showNotification()`.  "
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. `ChoreNotification` object is created and `ChoreNotification#getNotifications(choreList)` is called.   "
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. The results from `ChoreNotification#hasDateAsDeadline`, `ChoreNotification#isOverdue` and `ChoreNotification#isApproachingDeadline` will be combined."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `ChoreNotification#hasDateAsDeadline` checks for `Chores` that have Date object type deadline."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `ChoreNotification#isOverdue` checks for `Chores` that have exceeded their deadline."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `ChoreNotification#isApproachingDeadline` checks for `Chores` that have deadlines upcoming in the next 3 days."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "5. `ChoreNotification#getNotifications(choreList)` returns the String result containing the notifications to `KitchenHelper` and displays."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Aspects: How `showNotification` executes:  "
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 1 (current choice): Create a function that creates a ChoreNotification class object that gathers the notifications to print. "
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | More OOP as there is a specific class handling the sole function of notification display. |  "
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Developer has to go into `ChoreNotification` class to find out how to notifications are gathered. |"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Create the methods to gather notifications in `KitchenHelper.java`"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | More basic implementation. |  "
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Less OOP and the `KitchenHelper` main class will be overpopulated with methods that do not concern the overall running of the application.|"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 4.4. Workout-related Features"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "#### 4.4.1. Creation of new workout session"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Users can create a new workout session The failure to do so will trigger an exception where the user will be notified of the reason, e.g. invalid command or IO related errors. The action will be aborted. If the creation is successful, the user will go into the new workout session to edit the exercises in that session."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The user can specify tags for the session. Creation time, last edit time and saving file name will be auto generated by the application and saved. "
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When the user attempts to create a new workout session, the Ui, WorkoutManagerParser "
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "and CommandLib class will be accessed and the following sequence of "
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "actions are called to return a command object NewWs."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. User executes `new /t leg chest`"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `NewWs`."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `NewWS.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `NewWS` parse the arguments to identify the tags"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3. `NewWS` calls `WorkOutManagerStorage.add()` to create a new file to store information in this session. "
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    If the creation fails, the action is aborted. Else, this record will be stored and the file path will "
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    be returned."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    4. `NewWS` creates a new `WorkoutSession` Object with the file path. "
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    5.  `NewWS` calls `workoutSession. workoutSessionStart()` so that user can add information into this session."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    6. After user exits this workout, `WorkoutManager` returns a `ExecutionResult`."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Based on `ExecutionResult`, correct response will be be printed to user."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "All description, warnings and response will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The following sequence diagram shows how the new command works"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The sequence diagram below summarizes how creating new workout session works:"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "![Load Data Sequence Diagram](pictures/zesong/NewWS.png)"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Parsing of the user’s input command:  "
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 1 (current choice): User’s command are divided by space"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | The parsing can be easily done by calling Java built-in function .split(). Supports multiple tags or no tags.|"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Values for each variable cannot contain spaces which makes the application restrictive.|"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 2: Multiple prompts for user’s input of a recipe name and ingredient(s)"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Users would not have to make sure that their command is syntactically right.|  "
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | The constant prompting could subject the application to a negative experience in the difficulty to use the commands.|"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "#### 4.4.2. Listing past workout sessions"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The feature to list workoutSessions allows the user to view a summary of all the history "
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "workout sessions, including their index, creation date and tags."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When the user attempts to list workoutSessions, the WorkoutManger, WorkoutManagerParse, ListWS and "
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "WorkoutManagerStorage class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. User executes `list`"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `ListWS`."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `ListWS.execute()` to execute the command"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3. `NewWS` calls `WorkOutManagerStorage.list()`"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkOutManagerStorage` will call Ui to print a formated table of the past records."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    6. `WorkoutManager` returns a `ExecutionResult`."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Based on `ExecutionResult`, correct response will be be printed to user."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Aspects: Security of stored data"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 1 (current choice): call public methods of Storage class to "
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "print the list"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | pastRecord are private and it can only be manipulated through designed public methods. Only selected data will be printed and viewed.|  "
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Most methods Storage needs to be a static.|"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 2: Storage return a readonly list of pastRecord."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | More versatile operations can be done.|  "
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | All data of pastRecord will be exposed.|"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "#### 4.4.3. Editing of workout session"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "User can anytime go back to edit a workout session created in the past such as"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "adding or removing exercies in that session."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Each past workout session is stored in a different file name following its creation time."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The meta information of these past records such as file name, creation time are"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "stored in another file which will be loaded as the program initlises."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The actual workout session record will only be loaded if needed e.g. when editting is called. "
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When the user attempts to edit a past workout session, the Ui, WorkoutManagerParser, CommandLib"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "and WorkoutStorage class will be accessed and the following sequence of "
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "actions are called."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. User executes `edit 1`"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `EditWS`."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `EditWS.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3. `EditWS` calls `WorkOutManagerStorage.edit()` to locate the file. If the does not exist, the action is aborted."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    Else, `WorkOutManagerStorage` updates the meta information of the file. The file path will be returned."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    4. `EditWS` creates a new `WorkoutSession` Object with the file path. `WorkoutSession` is initilised by loading the "
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    data in the file."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    5.  `EditWS` calls `workoutSession.workoutSessionStart()` so that user start editing this session."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    6. After user exits this workout, `WorkoutManager` returns a `ExecutionResult`."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Based on `ExecutionResult`, correct response will be be printed to user."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "All description, warnings and response will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The following sequence diagram shows how the new command works"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The sequence diagram below summarizes how editting past record works:"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "![Load Data Sequence Diagram](pictures/zesong/EditWS.png)"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Past record storage and model design:  "
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 1 (current choice): store past workout sessions in different files and their "
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "meta information in a separate file"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Initialization will be faster as data loaded grows little even in long terms.|"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Deleting files and creating files need to handle file names carefully.|"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 2: Load all past records during initilization"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Run time can retrieve data faster as there is no need to access data in hard disk.|  "
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | The application initialization will grow quickly as the application scales.|"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "#### 4.4.4. Deletion of workout session"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "User can delete a workout session created in the past by giving its index."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Each past workout session is stored in a different file name following its creation time."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The meta information of these past records such as file name, creation time are"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "stored in another file which will be loaded as the program initlises."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When the user tries to delete a file, the application refers to the meta information of the file to locate the"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "file and delete it. Then the meta information of the record will be deleted."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "User can clear all data by iteratively delete the record until the meta data file is empty. To simplify that,"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "user can use `clear` command to achieve that."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When the user attempts to delete a past workout session, the Ui, WorkoutManagerParser, CommandLib"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "and WorkoutStorage class will be accessed and the following sequence of actions are called."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. User executes `delete 1` or `clear`"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `DeleteWS`"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     or `clearWS`."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `DeleteWS.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3. `DeleteWS` calls `WorkOutManagerStorage.delete()` to locate the file. If the does not exist, the action is aborted."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    Else, `WorkOutManagerStorage` remove the meta information of the file and delete the record file."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    6. After user exits this workout, `WorkoutManager` returns a `ExecutionResult`."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Based on `ExecutionResult`, correct response will be be printed to user."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "All description, warnings and response will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The following sequence diagram shows how the new command works"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 1 (current choice): Delete `workoutSession` by specifying index of it."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Quick and easy deletion by using ArrayList.get().|"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | DLesser alternatives for the user and user would have to identify the index first by executing `list` to get index of the session to be deleted.|"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 2: Delete `workoutSession` by specifying `workoutSession` tags or dates."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | More alteratives for users. Can bulk delete files with certain attributes|  "
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Tags and dates does not uniquely identify the record hence may result in accidental wrong deletion|"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "#### 4.4.5. Search based on conditions"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The feature `search` allows the user to view a summary of all the history "
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "workout sessions which satisfies certain conditions."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The user can search by the date of creation or the tags that the session has. User can put in 0"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "or 1 or 2 criteria during search. "
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Format: `search /t \u003ctag1\u003e \u003ctag2\u003e /d \u003cdate\u003e`"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The user can attach variable number of tags after `/t` and one date after `/d`. The date must be specified"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "in certain formats for it to be recognisable. Else, it will be treated as there is no date criteria given."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[See here](#appendix-g-supported-formats-of-date-input) for all supported formats."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The tag criterion selects sessions which contains all the tags that the user specified in the search."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The date criterion selects the sessions which is created on that date. Only sessoins that satisfies all condtions "
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "will be selected and displayed."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The result is displayed in a table with the index of the selected records so that users can easily "
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "do further operations on them, e.g. `delete` or `edit`."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " "
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When the user attempts to list workoutSessions, the WorkoutManger, DeleteWS, WorkoutManagerStorage and "
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "WorkoutManagerParse class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. User executes `search /t leg /d 20201017`"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `SearchWS`."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `SearchWS.execute()` to execute the command"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3. `SearchWS` calls `WorkOutManagerStorage.search()`"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkOutManagerStorage` will call `WorkoutManagerParser.parse` to parse the arguments into"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    an array of predicates"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkOutManagerStorage` filters the pastRecord arraylist and print out the ones"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    which satisfy the predication."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    6. `WorkoutManager` returns a `ExecutionResult`."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Based on `ExecutionResult`, correct response will be be printed to user."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The sequence diagram below summarizes how searching record works:"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "![Load Data Sequence Diagram](pictures/zesong/SearchWS.png)"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Aspects: indexing the selected results"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The index of an record is not stored in the schema because it easily varies with "
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "addition and deletion. Thus given a record, searching for its index will have higher"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "time complexity."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 1 (current choice): print out the actual index of the record "
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "in the meta info file."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | The index is useful for user to use for future actions.|  "
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Checking for the actual location complicates the search time complexity.|"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 2: print out the index of the element in the result list."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Easy to implement. Low time complexity|  "
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Since the index in result list is not the same as the index in actual record meta, user cannot use the index for further actions|"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 4.5. Recommendations"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.5.1. Display Expenditure"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature for displayexpenditure allows the user to keep track of their total expenditure and the amount they used in their cooking each week."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user attempts to display `expenditure`, the `Kitchen Helper`, `Parser` and `DisplayExpenditureCommand` class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keyed in `displayexpenditure`."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `UI` object will be created and calls `UI#getUserCommand()`. "
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `Parser#parseUserCommand()` and identified with the keyword `displayexpenditure`.   "
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Parsing of user input and creation of command object"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will automatically trigger the parsing of the user’s input string in `Parser#prepareDisplayExpenditure()` to ensure the parameters are empty, or an exception will be thrown."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The `DisplayExpenditureCommand` object will be created. "
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The newly created object will call `DisplayExpenditureCommand#execute()` which will format the expenditure information into how it will be displayed."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Lastly, a String called `feedbackToUser` containing the information to display will be returned to `KitchenHelper`. "
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. The expenditure information will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 1(current implementation): Create a class to handle display of expenditure."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | More OOP. `displayexpenditure` is a supported user command so it should have its own class for its specific function just like other commands. |"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Very abstract method and a lot of effort in order to print the value of two variables.|"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Have a method to display expenditure in `Parser` class."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | Simpler and more basic implementation.|  "
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Less OOP and will ruin the code style because its execution would be different from other commands. | "
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.5.2. Expenditure functionality"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The Expenditure function mainly keeps track of two variables, `totalExpenditure` and `amountUsedInCooking`. Total expenditure is the amount spent on purchase of ingredients for the week. Amount used in cooking indicates the price of all the ingredients used for cooking or consumption in the week. The latter variable reflects the extent to which the user makes use of his purchase and hence the amount of expenditure he benefited from."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The values of the variables in Expenditure change in the the following situations:"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "+ The user executes `addingredient`.  "
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. During the execution of `Parser#prepareAddIngredient`, `Expenditure#addToExpenditure` retrieves the price and quantity values of the ingredient being added. "
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `totalExpenditure` value increases by the value calculated by `Expenditure#addToExpenditure`. "
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `Storage#saveExpenditureData` saves the updated value.  "
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "+ The user executes `cookrecipe`."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. During the execution of `CookRecipeCommand#checkIfIngredientExpired`, `Expenditure#addAmountForCooking` retrieves the quantity used in cooking for each ingredient in the recipe. "
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    2. `amountUsedInCooking` value increases by the value calculated by `Expenditure#addAmountForCooking`."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `Storage#saveExpenditureData` saves the updated value.  "
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "+ The user executes `deleteingredient`."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. During the execution of `DeleteIngredientCommand#updateNewQuantity` and `DeleteIngredientCommand#deleteIngredient`, `Expenditure#editExpenditure` retrieves the quantity of the ingredient to delete."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `Expenditure#editExpenditure` first executes `Expenditure#removeFromExpenditure`, which prompts the user whether the user would like to deduct the cost of the ingredient being deleted from the total expenditure, in the case the user is deleting the ingredient due to wrong addition and would not like to count its cost in total expenditure."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. If the user responds with `yes`, the `totalExpenditure` value is decreased by the amount calculated by `Expenditure#changePrice`."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. If the user responds with `no`, `Expenditure#editExpenditure` will then execute `Expenditure#addToAmountUsed`, which prompts the user whether the user would like to add the cost of the ingredient being deleted to the amount used in cooking, in the case the user manually deletes ingredients that have been cooked or consumed."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. If the user responds with `yes`, the `amountUsedInCooking` value increases by the amount calculated by `Expenditure#changePrice`."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. If the user responds with `no`, the `totalExpenditure` value and `amountUseInCooking` value remain unchanged."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. `Storage#saveExpenditureData` saves the updated value."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Aspect: Singleton pattern for Expenditure class."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 1(current implementation): Making Expenditure a Singleton."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | The Expenditure values are accumulated, so the exact same variables have to be used every time. Using only one instance of the Expenditure object allows that. |"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | 1. Increases dependencies as it has a global state. It can be overused and be hard to track. \u003cbr\u003e 2. Makes testing harder. |"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Making Expenditure variables and methods static."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | Static variables can also update expenditure using the exact same variables.|  "
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Take up memory as they cannot be created and destroyed during program execution. |"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 3: Loading expenditure values from expenditure output text file to a local variable every time."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | Also allows the retrieval of most updated value.|  "
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | A lot of storing and loading to and from text files, which increases overhead. |"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Aspect: Storage of Expenditure data in its own output file."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 1(current implementation): Storage in its own Expenditure output file."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | Neater to have a specific output file solely for Expenditure data. |"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Create an entire storage function and output file for three variables. |"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Storage together with Chore data. "
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Pros** | Does not require additional storage implementation and save space not creating another file. |"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Whenever save Expenditure data, the whole data file overwritten and need to loop through entire choreList to save Chore data with the new Expenditure data.|"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 4.6. Logging"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Logging in the application refers to storing exceptions, warnings and messages that occur during the execution of Kitchen Helper. It was included to help developers to identify bugs and to simplify their debugging process. "
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The `java.util.logging` package in Java is used for logging. The logging mechanism can be managed from the `KitchenHelper` class through the `kitchenLogs` logger object."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "All control of the logger for the application can be viewed/ altered in the `setUpLogger()` method. The current settings for the logger are as follow:"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- All logs of `Level.SEVERE` level will be shown on the console when an input/ program flow has caused a possible disruption to the execution of the program. (See the levels of logging below)"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- All information above ‘Level.FINE’ level is logged into a log file, `KitchenLogs.log`."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Logging is made to be displayed in the `SimpleFormatter` style where the date, class and error description are logged."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Logging Levels:"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.SEVERE`: a serious failure, which prevents normal execution of the program, for end users and system administrators."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.WARNING`: a potential problem, for end users and system administrators."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.INFO`: reasonably significant informational message for end users and system administrators."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.CONFIG`: hardware configuration, such as CPU type."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.FINE`, `Level.FINER`, `Level.FINEST`: three levels used for providing tracing information for the software developers."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Additional logging can be done by adding the calling of the global logger and invoking the function `log()`. This will ensure that all loggings will be made to the same file across the various classes. "
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "An example is shown below:"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "```"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "kitchenLogs.log(Level.WARNING, description_of_warning_here, e.toString());"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "```"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "## Appendices "
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix A: Product Scope"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Target user profile__:"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Can type fast.    "
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Comfortable with using command line interface.  "
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Gyms regularly"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Value proposition__: Manage food inventory quickly compared to a typical mouse or graphic user interface driven application which saves time and makes it more convenient.  "
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix B: User Stories"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|New user|View user guide easily|I can learn more about the product before I use it|"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|New user|Create a user profile|I can store my profile in the database|"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|New user|Create a new workout session|I can start a recorded workout session|"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|User|Create a new workout session|I can start a recorded workout session|"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|User|Edit user profile|I can change my data if something changes|"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|User|Add actions into a session|I can personalise each workout session|"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|User|Delete session record|I can correct accidental errors|"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix C: Value proposition - Use cases"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "(For all use cases below, the __System__ is `Kitchen Helper` and the __Actor__ is the `user`, unless otherwise stated)"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "```"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Use case: UC01 - Add an ingredient"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. User purchases an ingredient."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. User wants to add to System for tracking purposes."
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. System adds the ingredient."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2a. System detects invalid format in the entered data."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "  2a1. System throws invalid input format and shows a valid format example."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2b. System detects zero quantity in the entered data."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "  2b1. Systems alerts you to enter a quantity more than zero."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2c. System detects a expired expiry date in the entered data."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "  2c1. System alerts you that Expired ingredient detected in input. Please enter a non-expired expiry"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "       date."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "```"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix D: Non-Functional Requirements"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. An user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Should not require user to install program file."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. Should work for single user."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "5. Should be able to run without internet connection."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix E: Glossary"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Category - The group of the ingredient belongs to"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Price - Unit cost of a single quantity"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Expiry - The expiry date of the ingredient"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* *Mainstream OS* - Windows, Linux, Unix, OS-X  "
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix F: Instructions for Manual Testing"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### F.1. Launch and Shutdown"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### Appendix G: Supported Formats of Date Input"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Here shows all 12 valid formats."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd HH:mm`"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd HH:mm`"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd HH:mm`"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd HH:mm`"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd HHmm`"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd HHmm`"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd HHmm`"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd HHmm`"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd`"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd`"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd`"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd`"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 240,
      "CFZeon": 1150,
      "-": 19
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "By: `Team F11-1` Since: `Sept 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## Table of content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Introduction**](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Quick Start**](#quick-start)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Features**](#features)\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.1. [Main Menu](#main-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.1. [Viewing help: `help`](#311-viewing-help-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.2. [Entering Profile Menu: `profile`](#312-entering-profile-menu-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.3. [Entering Diet Menu: `diet`](#313-entering-diet-menu-diet)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.4. [Entering Workout Menu: `workout`](#314-entering-workout-menu-workout)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.5.  [Exiting The Schwarzenegger: `end`](#315-exiting-the-schwarzenegger-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.2. [Profile Menu](#32-profile-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.1. [Viewing help: `help`](#321-viewing-help-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.2. [Adding a profile: `add`](#322-adding-a-profile-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.3. [Viewing a profile: `view`](#323-viewing-a-profile-view)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.4. [Deleting a profile: `delete`](#324-deleting-a-profile-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.5. [Editing a profile: `edit`](#325-editing-a-profile-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.6. [Returning to Main Menu: `end`](#326-ending-profile-menu-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.3. [Diet Menu](#33-diet-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.1. [Listing out all commands: `help`](#331-listing-out-all-commands-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2. [Starting to record diet data: `meal`](#332-starting-to-record-diet-data-meal)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.1. [Showing help message: `help`](#3321-showing-help-message-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.2. [Adding food items for the current meal: `add`](#3322-adding-food-items-for-the-current-meal-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.3. [Listing data for the current meal: `list`](#3323-listing-data-for-the-current-meal-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.4. [Deleting data from the current meal: `delete`](#3324-deleting-data-from-the-current-meal-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.5. [Clearing data from the current meal: `clear`](#3325-clearing-data-from-the-current-meal-clear)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.6. [Stopping the recording of person’s meal data: `end`](#3326-stopping-the-recording-of-persons-meal-data-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.3. [Listing all past diet sessions: `list`](#333-listing-all-past-diet-sessions-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.4. [Editing a past diet session: `edit`](#334-editing-a-past-diet-session-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.5. [Deleting a past diet session: `delete`](#335-deleting-a-past-diet-session-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.6. [Clearing all past diet sessions: `clear`](#336-clearing-all-past-diet-sessions-clear)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.7. [Returning to Main Menu: `end`](#337-returning-to-main-menu-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.4. [Workout Menu](#34-workout-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1. [Starting a new workout session: `new`](#341-starting-a-new-workout-session-new)\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1.1. [Adding data for current workout session: `add`](#3411-adding-data-for-current-workout-session-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1.2. [Listing data for the current workout session: `list`](#3412-listing-data-for-the-current-workout-session-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1.3. [Showing the commands available for workout session: `help`](#3413-showing-the-commands-available-for-workout-session-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1.4. [Deleting data from the current workout session: `delete`](#3414-deleting-data-from-the-current-workout-session-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1.5. [Stopping the recording data for the current workout session: `end`](#3415-stopping-the-recording-data-for-the-current-workout-session-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2. [Listing all past workout sessions: `list`](#342-listing-all-past-workout-sessions-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.3. [Editing a workout session: `edit`](#343-editing-a-workout-session-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.4. [Deleting a workout session: `delete`](#344-deleting-a-workout-session-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.5. [Searching a list of workout session: `search`](#345-searching-a-list-of-workout-session-search)\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.6. [Showing the commands available for workout menu: `help`](#346-showing-the-commands-available-for-workout-menu-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.7. [Clearing all workout sessions: `clear`](#347-clearing-all-workout-sessions-clear)\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.8. [Returning to Main Menu: `end`](#348-returning-to-main-menu-end)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Command summary**](#command-summary)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Notes**](#notes)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The Schwarzenegger is a desktop command line interface-based app for managing all your needs "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "regarding fitness. If you can type fast, The Schwarzenegger can help you "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "maximise your efficiency for maintaining fitness."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When you first start using The Schwarzenegger, please ensure that you follow the instructions below:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Download the latest duke.jar from [here](https://github.com/AY2021S1-CS2113T-F11-1/tp/releases)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Copy the file to the folder you want to use as the home folder for the gymming application."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Open terminal or command prompt and change to the directory of the folder of the application."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Key in java -jar duke.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 3. Features "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "This section includes 4 sub sections which will guide you through the features available in Main Menu, Profile Menu, Workout Menu and Diet Menu."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.1. Main Menu"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "You can get access to Profile Menu, Workout Menu and Diet Menu from Main Menu."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The available commands in Main Menu are listed below:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.1. Viewing help: `help`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The program will show a message explaining which commands are available for you to switch to the menu that you want (i.e. Profile Menu, Workout Menu and Diet Menu)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `help`  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.2. Entering Profile Menu: `profile`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The program will direct you to the Profile Menu."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `profile`  "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `profile`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.3. Entering Diet Menu: `diet`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The program will direct you to the Diet Menu."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `diet`  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `diet`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.4. Entering Workout Menu: `workout`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The program will direct you to the Workout Menu."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `workout`  "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `workout`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.5. Exiting The Schwarzenegger: `end`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Terminates The Schwarzenegger."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `end`  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.2. Profile Menu"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Profile Menu manages your profile including your name, age and physique data. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.1. Viewing help: `help`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The program will show a message explaining which commands are available Profile Menu."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `help`  "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.2. Adding a profile: `add`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "You can add your profile for the most customized experience in The Schwarzenegger. Your height should in centimeters and your input weight should be in kilograms."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `add /n [name] /a [age] /h [height] /w [weight] /e [expected weight]`  "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `add /n Schwarzenegger /a 30 /h 188 /w 113 /e 100`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "This command adds a profile with the name Schwarzenegger, age 30, height 188 cm, weight 113 kg and expected weight 100 kg."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.3. Viewing a profile: `view`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "You can view your profile recorded in the program. The Schwarzenegger will also show your current BMI and give you suggestions on your expected weight to be fitter."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `view`  "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `view`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.4. Deleting a profile: `delete`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "You can delete your profile from the program."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `delete`  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `delete`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.5. Editing a profile: `edit`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "You can edit the profile after adding to the program."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `edit /n [name or ]edit /h [height] or edit /w [weight] or edit /a [age] or edit /e [expection]`  "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `edit /h 180`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This command edits your current height in the system to 180 centimeters."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.6. Returning to Main Menu: `end`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "You use this command to switch back to the Main Menu."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `end`  "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.3. Diet Menu"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.1. Listing out all commands: `help`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "You can list out all the commands in the diet menu with a brief summary of how to use them with this command."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `help` "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.2. Starting to record diet data: `meal`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This command creates a new meal session."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "You will be directed immediately into the meal session."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The date and tag can be added on creation with \"/d\" for date and \"/t\" for meal type."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `meal /d [date] /t [type]`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CFZeon"
        },
        "content": " "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `meal /d 2020-08-05 /t lunch`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Situation | Example |  Outcome"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "----------|--------|------------------"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Create a meal session | `meal`| a meal session of type unspecified with today\u0027s date will be created"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Create a meal session with date and type| `meal /d 2020-05-04 breakfast`| A meal session with date 2020-05-04 and type breakfast will be created"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.1. Showing help message: `help`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "You can list out all the commands in the diet session with a brief summary of how to use them with this command."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `help` "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.2. Adding food items for the current meal: `add`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This command adds a food item into the current meal session"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `add [food name] /c [amount of calories]` "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `add chicken nuggets /c 120`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.3. Listing data for the current meal: `list`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Lists all the added dishes for the current meal, with a numbered sequence according to sequence entered."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `list` "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `list`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.4. Deleting data from the current meal: `delete`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Deletes the dish according to the ID in the current meal session list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `delete [dish ID]`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `delete 3` "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.5. Clearing data from the current meal: `clear`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Clears all the dishes in the current meal list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `clear` "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `clear`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.6. Stopping the recording of person’s meal data: `end`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Ends the current meal session and saves the data."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `end` "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.3. Listing all past diet sessions: `list`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Obtains a list of information about past diet sessions together with their numbered index."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `list`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `list`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.4. Editing a past diet session: `edit`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Edits a previous meal session based on a numbered index that can be found in the list."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `edit [index number]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `edit 3` "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.5. Deleting a past diet session: `delete`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Deletes a previous meal session based on a numbered index that can be found in the list."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `delete [index number]`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `delete 3` "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.6. Clearing all past diet sessions: `clear`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Deletes all previous diet sessions."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `clear`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `clear`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.7. Returning to Main Menu: `end`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Ends the current meal session and saves the data."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `end` "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Exits the diet manager and returns you back to the main menu."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `end`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.4. Workout Menu"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Shows a list of commands and their way of use."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `help`  "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.1. Starting a new workout session: `new`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Creates a new workout session and go into the session. "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Adds tags with “/t”. Tags are optional and more than one tag can be attached to a session."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `new /t \u003ctag1\u003e \u003ctag2\u003e`  "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Tags are optional and more than one tag can be attached to a session."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example: `new /t legs chest`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Situation | Example |  Outcome"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "----------|--------|------------------"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Create a workout session with tags \"leg\" and \"chest\" | `new /t legs chest`|sthst"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Repeated tags are attached| `new /t legs legs`| Only one will be added"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.4.1.1. Adding data for current workout session: `add`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Adds moves with number of moves per set and weights of equipment (if the move does not require weights, input 0 for weight)."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `add [name of move] /n [number of moves per set] /w [weight]`  "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `add squat /n 15 /w 40`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.4.1.2. Listing data for the current workout session: `list`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Lists all the added moves for the current workout session, with a numbered sequence according to sequence entered."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `list`  "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `list`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.4.1.3. Showing the commands available for workout session: `help`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Shows a list of commands and their way of use."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `help`  "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.4.1.4. Deleting data from the current workout session: `delete`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Deletes the move according to move ID in the current workout session list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `delete [move ID]`  "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `delete 1`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.4.1.5. Stopping the recording data for the current workout session: `end`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Ends the current workout session and saves the relevant data."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `end`  "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.2. Listing all past workout sessions: `list`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can see all your past workout sessions. They will be summarised and "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "printed in a table with their index, creation date and tags."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `list`  "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Command**: \u003cbr\u003e `list` \u003cbr\u003e\u003cbr\u003e| TODO:actual code UI output"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.3. Editing a workout session: `edit`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can edits a past workout session in the record list. You will go into "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "the specific workout session after typing this."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `edit \u003cINDEX\u003e` "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The index can be found by listing the results"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Command**: \u003cbr\u003e `edit 1` \u003cbr\u003e\u003cbr\u003e **Description:** \u003cbr\u003e Edit the record at index 1.| TODO:actual code UI output"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.4. Deleting a workout session: `delete`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can delete a past workout session in the record list."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `delete \u003cINDEX\u003e` "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The index can be found by listing the results"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Command**: \u003cbr\u003e `delete 1` \u003cbr\u003e\u003cbr\u003e **Description:** \u003cbr\u003e Delete the record at index 1.| TODO:actual code UI output"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.5. Searching a list of workout session: `search`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can searches for a list of workout sessions that matches certain conditions.For exmaple, "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "you can search for sessions created on a specific day or sessions that contains certain tags."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `Search /d \u003cDATE\u003e /t \u003ctag1\u003e \u003ctag2\u003e`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "You can search records containing (a list of) tags with `/t` followed by the tags. If multiple"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "tags are written, only sessions that contains all the tags will be selected."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can searches records created on a specific day with `/d` followed by a date."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Date should be keyed in  following one of the supported formats. "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[See here](#5-notes) for a complete list of format supported. If the format is not "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "recognised, sessions created on any day will be accepted."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The conditions are optional. You may have zero, one or both conditions while searching."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "If both conditions are specified, only sessions that meet both conditions will be selected."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can see all the sessions that meet the conditions. They will be summarised and "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "printed in a table with their index, creation date and tags."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Situation | Example |  Outcome"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "----------|--------|------------------"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Search all sessions created on Oct 17 2020 | `search /d 20201018`|TODO:sthst"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Search all sessions with \"arm\" tag| `search /t arm`|sth"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Search all sessions with \"arm\" tag on Oct 17 2020| `search /t arm /d 20201018`|sth"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.6. Showing the commands available for workout menu: `help`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can see a complete list of available commands under workout manager and how to use them."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `help`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Command**: \u003cbr\u003e `help` \u003cbr\u003e\u003cbr\u003e **Description:** \u003cbr\u003e show help manual| TODO:actual code UI output"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.7. Clearing all workout sessions: `clear`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can erase all workout sessions."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `clear`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "This command is dangerous as you will not be able to "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "recover the data."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "After typing this command, you will be asked to reconfirm it by typing in"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "`YES`. Else the action will be aborted. "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Command**: \u003cbr\u003e `clear`| TODO:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.8. Returning to main menu: `end`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "You can return to the main menu."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `end`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "After typing in this, you will see your prompt in your terminal"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "changes from `workout\u003e\u003e\u003e` to `main\u003e\u003e\u003e`. "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Command**: \u003cbr\u003e `clear`| TODO:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 4. Command summary"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "**Meal Menu**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "**Action** |  **Format**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "--------|----------------------"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Help|`help`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Start meal session |`meal /d [date] /t [type]`\u003cbr\u003e\u003cbr\u003eE.g. `meal /d 2020-05-04 /t breakfast`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "List|`list`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Edit|`edit [meal session ID]`\u003cbr\u003e\u003cbr\u003eE.g. `edit 1`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Delete|`delete [meal session ID]`\u003cbr\u003e\u003cbr\u003eE.g. `delete 1`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Clear|`clear`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Back to main menu|`end`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "**Meal Session**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "**Action** |  **Format**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "--------|----------------------"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Help|`help`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "add |`add [dish] /c [calorie count]`\u003cbr\u003e\u003cbr\u003eE.g. `add spinach /c 90`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "List|`list`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Delete|`delete [dish ID]`\u003cbr\u003e\u003cbr\u003eE.g. `delete 1`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Clear|`clear`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Back to meal menu|`end`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Workout Menu**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Action** |  **Format**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|----------------------"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Start workout session |`new /t \u003ctag1\u003e \u003ctag2\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `new /t leg chest`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "List|`list`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Edit|`edit \u003csession ID\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `edit 1`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Delete|`delete \u003csession ID\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `delete 1`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Search|`search /d \u003cdate\u003e /t \u003ctag1\u003e \u003ctag2\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `search /t leg chest /d 20201018`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Help|`help`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Clear|`clear`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Back to main menu|`end`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 5. Notes"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[1] Here shows all 12 valid formats."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd HH:mm`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd HH:mm`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd HH:mm`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd HH:mm`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd HHmm`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd HHmm`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd HHmm`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd HHmm`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd`"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 87,
      "tienkhoa16": 85,
      "wgzesg": 145,
      "CFZeon": 99,
      "-": 20
    }
  },
  {
    "path": "docs/team/jinyang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Yu Jinyang - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/shukai.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Zhang Shukai - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Develop Diet Manager."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 6
    }
  },
  {
    "path": "docs/team/tienkhoa.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Nguyen Tien Khoa - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Develop User Profile Manager."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 6
    }
  },
  {
    "path": "docs/team/zeon.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Zeon Chua Feiyi - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Develop Diet Manager."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 6
    }
  },
  {
    "path": "docs/team/zesong.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Zesong - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.SKIPPED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public ExecutionResult execute(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return SKIPPED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Profile execute(Profile profile) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void execute(String input, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] input, ArrayList\u003cExercise\u003e exercise,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, storage.workout.Storage storage, boolean[] endWorkoutSession) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult getExecutionResult(Profile profile) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void printResponse() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 6,
      "tienkhoa16": 11,
      "wgzesg": 26
    }
  },
  {
    "path": "src/main/java/commands/CommandLib.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietmanager.DietSessionClear;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionCreate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionDelete;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietmanager.DietSessionHelp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietmanager.DietSessionEdit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionWrong;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemAdd;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietsession.FoodItemClear;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemDelete;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietsession.FoodItemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietsession.FoodItemHelp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemWrong;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ByeWS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ClearWS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.DeleteWS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.EditWS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.HelpWS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ListWS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.NewWS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.workout.workoutmanager.SearchWS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.WrongWS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionEnd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionDelete;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionWrong;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class CommandLib {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public Hashtable\u003cString, Command\u003e library;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public CommandLib() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        library \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void initWorkoutManagerCL() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"list\", new ListWS());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"new\", new NewWS());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"delete\", new DeleteWS());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"end\", new ByeWS());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"edit\", new EditWS());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"clear\", new ClearWS());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"help\", new HelpWS());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"wrong\", new WrongWS());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"search\", new SearchWS());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void initWorkoutSessionCL() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"add\", new WorkoutSessionAdd());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"delete\", new WorkoutSessionDelete());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"list\", new WorkoutSessionList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"end\", new WorkoutSessionEnd());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"wrong\", new WorkoutSessionWrong());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void initDietManagerCL() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"list\", new DietSessionList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"meal\", new DietSessionCreate());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        library.put(\"help\", new DietSessionHelp());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        library.put(\"clear\", new DietSessionClear());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        library.put(\"edit\", new DietSessionEdit());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"delete\", new DietSessionDelete());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"wrong\", new DietSessionWrong());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void initDietSessionCL() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"add\", new FoodItemAdd());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"delete\", new FoodItemDelete());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        library.put(\"help\", new FoodItemHelp());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        library.put(\"clear\", new FoodItemClear());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        library.put(\"list\", new FoodItemList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(\"wrong\", new FoodItemWrong());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public Command get(String keyword) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (library.containsKey(keyword)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return library.get(keyword);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return library.get(\"wrong\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 34,
      "yujinyang1998": 10,
      "tienkhoa16": 36,
      "wgzesg": 9
    }
  },
  {
    "path": "src/main/java/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class representing result shown to user after executing the requested command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private String feedbackMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs CommandResult object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param feedbackMessage Feedback message after executing command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult(String feedbackMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.feedbackMessage \u003d feedbackMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides toString method of class Object to get string representation of CommandResult object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return String representation of CommandResult object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return feedbackMessage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 28
    }
  },
  {
    "path": "src/main/java/commands/ExecutionResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public enum ExecutionResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    OK,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    ABORTED,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    FAILED,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    SKIPPED,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    MISSING"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 1,
      "wgzesg": 8
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionClear.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionClear extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    public void execute(String input, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            File folder \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            for (int index \u003d 0; index \u003c Objects.requireNonNull(listOfFiles).length; index++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                listOfFiles[index].delete();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        System.out.println(\"You have cleared all diet sessions!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 10,
      "CFZeon": 15
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionCreate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import diet.dietsession.DietSession;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DietSessionCreate extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            DietSession ds \u003d new DietSession(ui.extractMeal(input), ui.extractDate(input));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            assert ds !\u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Diet session successfully created\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ds.start();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            saveToFile(storage, ds);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"It seems like we ran into some problems saving your session...\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.WARNING, \"Diet session failed to save\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    private void saveToFile(Storage storage, DietSession ds) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            storage.init(ds.getTypeInput() + \" \" + ds.getDate().toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            storage.writeToStorageDietSession(ds.getTypeInput() + \" \" + ds.getDate().toString(), ds);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.WARNING, \"save profile session failed\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            System.out.println(\"Failed to save your diet session!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 16,
      "tienkhoa16": 2,
      "wgzesg": 2,
      "CFZeon": 19
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionDelete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DietSessionDelete extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File folder \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            assert !input.isEmpty() : \"No files to delete or wrong folder\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            int index \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            assert listOfFiles !\u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String fileName \u003d listOfFiles[Integer.parseInt(input) - 1].getName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Oh no! You have deleted \" + fileName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            listOfFiles[Integer.parseInt(input) - 1].delete();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Deleted Diet Session successfully\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Sorry! It seems like you\u0027ve entered an invalid number or input!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 21,
      "tienkhoa16": 1,
      "wgzesg": 2,
      "CFZeon": 7
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionEdit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.DietSession;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionEdit extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File folder \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            DietSession ds \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            assert listOfFiles !\u003d null : \"List of files should not be null\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            ds \u003d storage.readDietSession(listOfFiles[Integer.parseInt(input) - 1].getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            ds.start();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            System.out.println(\"Sorry, there is no file at that index.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"No file found at array index\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            System.out.println(\"Sorry, there is no file at that index.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"No file found at array index\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"failed to execute diet session\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Sorry, there is no file at that index.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"wrong index for loading\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 23,
      "tienkhoa16": 4,
      "CFZeon": 15
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionHelp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import static ui.CommonUi.printHelpFormater;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionHelp extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        printHelpFormater(\"List\", \"list\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Show all past diet session\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        printHelpFormater(\"Meal\", \"meal /d date /t tag\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Create a new diet session\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        printHelpFormater(\"Delete\", \"delete x\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Delete the diet session indexed at x\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        printHelpFormater(\"Edit\", \"edit x\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Edit the diet session indexed at x\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        printHelpFormater(\"Clear\", \"clear\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Clear all past diet sessions\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        printHelpFormater(\"End\", \"end\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Go back to main menu\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 23
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DietSessionList extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File folder \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assert folder.exists();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            System.out.println(\"Here are all the saved diet sessions!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            if (Objects.requireNonNull(listOfFiles).length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                System.out.println(\"It seems like you do not have any diet sessions stored!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            for (int i \u003d 0; i \u003c Objects.requireNonNull(listOfFiles).length; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                System.out.println((i + 1) + \". \" + listOfFiles[i].getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Listed all available diet sessions\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Sorry, there is nothing in Diet Manager.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"No instances of diet sessions saved\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 14,
      "tienkhoa16": 4,
      "wgzesg": 2,
      "CFZeon": 14
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionWrong.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DietSessionWrong extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Sorry! It seems like you\u0027ve entered an invalid command!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        logger.log(Level.INFO, \"Invalid command\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 7,
      "tienkhoa16": 1,
      "wgzesg": 2,
      "CFZeon": 5
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.DietSessionParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class FoodItemAdd extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietSessionParser parser \u003d new DietSessionParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        SchwarzeneggerLogger.initSchwarzeneggerLogger();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            assert !input.isEmpty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            Food temp \u003d new Food(parser.processFoodName(input), parser.processFoodCalories(input));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            foodList.add(temp);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Yay! You have added \" + temp.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Added food to arraylist\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Please specify food info.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            System.out.println(\"Please input a number for calories.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 21,
      "tienkhoa16": 1,
      "wgzesg": 1,
      "CFZeon": 9
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemClear.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class FoodItemClear extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        foodList.clear();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Oops you have cleared all the food items.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 18
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemDelete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class FoodItemDelete extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            assert !input.isEmpty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            int index \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            Food temp \u003d foodList.get(index - 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Oh no! You have deleted \" + temp.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            foodList.remove(temp);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Removed food from arraylist\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Sorry! It seems like you\u0027ve entered an invalid number or input!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 20,
      "tienkhoa16": 1,
      "wgzesg": 1,
      "CFZeon": 5
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemHelp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import static ui.CommonUi.printHelpFormater;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class FoodItemHelp extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        printHelpFormater(\"List\", \"list\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Show all food items\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        printHelpFormater(\"Add\", \"add food name /c calories\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Add a new food item\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        printHelpFormater(\"Delete\", \"delete x\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Delete the food item indexed at x\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        printHelpFormater(\"Clear\", \"clear\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Clear all food items\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        printHelpFormater(\"End\", \"end\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Go back to diet manager menu\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 24
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class FoodItemList extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Here is your food list: \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            for (int i \u003d 0; i \u003c foodList.size(); i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                System.out.println((i + 1) + \". \" + foodList.get(i).toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Listed all foods in Diet Session\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Sorry, there is nothing in your food list.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 22,
      "tienkhoa16": 1,
      "wgzesg": 1,
      "CFZeon": 4
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemWrong.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class FoodItemWrong extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Sorry! It seems like you\u0027ve entered an invalid command!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 11,
      "tienkhoa16": 1,
      "wgzesg": 1,
      "CFZeon": 1
    }
  },
  {
    "path": "src/main/java/commands/profile/AddProfile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidAgeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidHeightException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidWeightException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Profile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.FAILED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.OK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.SKIPPED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_CREATE_PROFILE_ACK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_PROFILE_EXIST;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractAge;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractCommandTagAndInfo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractExpectedWeight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractHeight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractWeight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for adding profile."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class AddProfile extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private String commandArgs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private ExecutionResult executionResult;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs AddProfile object inheriting abstract class Command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs Command arguments from user\u0027s input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public AddProfile(String commandArgs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.commandArgs \u003d commandArgs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        executionResult \u003d SKIPPED;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute the view profile command requested by user\u0027s input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param profile User\u0027s Profile object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Profile execute(Profile profile) throws InvalidCommandFormatException, InvalidAgeException,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            InvalidHeightException, InvalidWeightException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"executing AddCommand\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (profile !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            executionResult \u003d FAILED;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return profile;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        HashMap\u003cString, String\u003e parsedParams \u003d extractCommandTagAndInfo(commandArgs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        profile \u003d new Profile("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                extractName(parsedParams),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                extractAge(parsedParams),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                extractHeight(parsedParams),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                extractWeight(parsedParams),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                extractExpectedWeight(parsedParams)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        executionResult \u003d OK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return profile;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult getExecutionResult(Profile profile) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandResult result \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (executionResult \u003d\u003d OK) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            result \u003d new CommandResult(String.format(MESSAGE_CREATE_PROFILE_ACK, profile.toString()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (executionResult \u003d\u003d FAILED) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            result \u003d new CommandResult(MESSAGE_PROFILE_EXIST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assert (result !\u003d null) : \"errors in setting execution flag\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 89
    }
  },
  {
    "path": "src/main/java/commands/profile/DeleteProfile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.RedundantParamException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_WORD_DELETE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_DELETE_PROFILE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for deleting user profile."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class DeleteProfile extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs DeleteCommand object inheriting abstract class Command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs Command arguments from user\u0027s input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws RedundantParamException If parameters are provided to Delete Command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public DeleteProfile(String commandArgs) throws RedundantParamException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new RedundantParamException(COMMAND_WORD_DELETE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute the delete profile command requested by user\u0027s input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param profile User\u0027s Profile object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Profile execute(Profile profile) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"executing DeleteCommand\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult getExecutionResult(Profile profile) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return new CommandResult(MESSAGE_DELETE_PROFILE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 46
    }
  },
  {
    "path": "src/main/java/commands/profile/EndProfile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.RedundantParamException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_WORD_END;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_EXIT_PROFILE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for exiting Profile session."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class EndProfile extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs EndProfile object inheriting abstract class Command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs Command arguments from user\u0027s input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws RedundantParamException If parameters are provided to Exit Command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public EndProfile(String commandArgs) throws RedundantParamException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new RedundantParamException(COMMAND_WORD_END);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute exit command requested by user\u0027s input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param profile User\u0027s Profile object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Profile execute(Profile profile) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"executing ExitCommand\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return profile;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult getExecutionResult(Profile profile) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_PROFILE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Checks if user wants to exit Schwarzenegger by checking given command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param command The command to be checked."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether the command is an object of type EndProfile."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean isEnd(Command command) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return command instanceof EndProfile;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 56
    }
  },
  {
    "path": "src/main/java/commands/profile/ViewProfile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.RedundantParamException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_WORD_VIEW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_PROFILE_NOT_EXIST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_VIEW_PROFILE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for viewing profile."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ViewProfile extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs ViewCommand object inheriting abstract class Command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs Command arguments from user\u0027s input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws RedundantParamException If parameters are provided to View Command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public ViewProfile(String commandArgs) throws RedundantParamException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new RedundantParamException(COMMAND_WORD_VIEW);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute the view profile command requested by user\u0027s input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param profile User\u0027s Profile object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Profile execute(Profile profile) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"executing ViewCommand\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return profile;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult getExecutionResult(Profile profile) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (profile \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_PROFILE_NOT_EXIST, COMMAND_WORD_VIEW));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_PROFILE, profile.toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 50
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/ByeWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.workout.workoutmanager.WorkoutManagerUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import workout.workoutmanager.ExitException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ByeWS extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public ExecutionResult execute(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"bye command carried out\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        throw new ExitException();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void printResponse() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        WorkoutManagerUi.printBye();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 7,
      "tienkhoa16": 6,
      "wgzesg": 9
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/ClearWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import storage.workout.WorkOutManagerStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import ui.workout.workoutmanager.WorkoutManagerUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ClearWS extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public ExecutionResult execute(String[] arg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (!checkConfirmation()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"The action aborted\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return ExecutionResult.ABORTED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        WorkOutManagerStorage.clear();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return ExecutionResult.OK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void printResponse() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        WorkoutManagerUi.printClearResponse();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static boolean checkConfirmation() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(\"Are you sure you want to clear all records? This action is irrevocable.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(\"Key in YES to confirm.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String input \u003d in.next();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return  input.equals(\"YES\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 2,
      "wgzesg": 32
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/DeleteWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.workout.WorkOutManagerStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.workout.workoutmanager.WorkoutManagerUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DeleteWS extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public ExecutionResult execute(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"entering delete command\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            index \u003d Integer.parseInt(args[0]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.warning(\"Number format exception caught\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Input is not a number\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return ExecutionResult.FAILED;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.warning(\"ArrayIndexOutOfBoundsException caught\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Insufficient arguments are given.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return ExecutionResult.FAILED;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        WorkOutManagerStorage.delete(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"deleted successfully\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return ExecutionResult.OK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void printResponse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        WorkoutManagerUi.printDeleteResponse();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 15,
      "tienkhoa16": 6,
      "wgzesg": 15
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/EditWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import storage.workout.WorkOutManagerStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import ui.workout.workoutmanager.WorkoutManagerUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import workout.workoutsession.WorkoutSession;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class EditWS extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public ExecutionResult execute(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"entering edit command\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            index \u003d Integer.parseInt(args[0]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.warning(\"Number format exception caught\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"Input is not a number\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return ExecutionResult.FAILED;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.warning(\"ArrayIndexOutOfBoundsException caught\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"Insufficient arguments are given.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return ExecutionResult.FAILED;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            filePath \u003d WorkOutManagerStorage.edit(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.warning(\"Index Out Of Bounds Exception caught\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"Could not found that record. Give an index within the range.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return ExecutionResult.FAILED;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        WorkoutSession ws \u003d new WorkoutSession(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"editing workout session created\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ws.workoutSessionStart();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"edit successfully\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return ExecutionResult.OK;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void printResponse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        WorkoutManagerUi.printFinishNewSessionResponse();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 4,
      "wgzesg": 44
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/HelpWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.CommonUi.printHelpFormater;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class HelpWS extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public ExecutionResult execute(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printHelpFormater(\"List\", \"list\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Show all past sessions\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printHelpFormater(\"New\", \"new\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Create a new workout session\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printHelpFormater(\"Delete\", \"delete x\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Delete the record indexed at x\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printHelpFormater(\"Edit\", \"edit x\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Edit the record indexed at x\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printHelpFormater(\"Clear\", \"clear\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Clear all past results\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printHelpFormater(\"End\", \"end\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Go back to main menu\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return ExecutionResult.OK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 2,
      "wgzesg": 24
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/ListWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.workout.WorkOutManagerStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.OK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ListWS extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public ExecutionResult execute(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        WorkOutManagerStorage.list(args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"listed successfully\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return OK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 7,
      "tienkhoa16": 4,
      "wgzesg": 6
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/NewWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.workout.WorkOutManagerStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.workout.workoutmanager.WorkoutManagerUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import workout.workoutsession.WorkoutSession;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.OK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseTags;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class NewWS extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public ExecutionResult execute(String[] args) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "         * When starting a new workout session, a new file is created first."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "         * The file path is passed into workoutSession constructor to instantiate"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "         * a new workoutSession instance."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d parseTags(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String filePath \u003d WorkOutManagerStorage.add(tags);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        WorkoutSession ws \u003d new WorkoutSession(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"new workout session created\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        WorkoutManagerUi.printStartNewSessionResponse();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        ws.workoutSessionStart();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"ended workout session\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return OK;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void printResponse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        WorkoutManagerUi.printFinishNewSessionResponse();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 19,
      "tienkhoa16": 6,
      "wgzesg": 16
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/SearchWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import storage.workout.WorkOutManagerStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class SearchWS extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public ExecutionResult execute(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        WorkOutManagerStorage.search(args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return ExecutionResult.OK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 14
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/WrongWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import ui.workout.workoutmanager.WorkoutManagerUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.MISSING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class WrongWS extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public ExecutionResult execute(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.WARNING, \"command not recognised\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        WorkoutManagerUi.commandNotFoundResponse();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return MISSING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 4,
      "wgzesg": 15
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.WorkoutSessionParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionAdd extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] input, ArrayList\u003cExercise\u003e exercise,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] endWorkoutSession) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            exercise.add(WorkoutSessionParser.addParser(input));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.writeToStorage(filePath, exercise);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.addFormatError();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 26
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionDelete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.WorkoutSessionParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionDelete extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] input, ArrayList\u003cExercise\u003e exerciseList,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] endWorkoutSession) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        exerciseList.remove(WorkoutSessionParser.deleteParser(input));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.writeToStorage(filePath, exerciseList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 22
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionEnd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionEnd extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] input, ArrayList\u003cExercise\u003e exerciseList,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] endWorkoutSession) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        setEndWorkoutSessionT(endWorkoutSession);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.writeToStorage(filePath, exerciseList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private void setEndWorkoutSessionT(boolean[] endWorkoutSession) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        endWorkoutSession[0] \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 27
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionList extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] input, ArrayList\u003cExercise\u003e exercise,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] endWorkoutSession) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        printList(exercise);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.writeToStorage(filePath, exercise);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private void printList(ArrayList\u003cExercise\u003e exercise) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        if (exercise.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.emptyListError();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (int i \u003d 0; i \u003c exercise.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            System.out.println((i + 1) + \": \" + exercise.get(i).toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 32
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionWrong.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionWrong extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] input, ArrayList\u003cExercise\u003e exercise,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] endWorkoutSession) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        WorkoutSessionUi.inputNotRecognisedError();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 16
    }
  },
  {
    "path": "src/main/java/diet/dietmanager/DietManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final CommandLib cl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final DietManagerParser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private final DietManagerUi dietManagerUI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public DietManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        parser \u003d new DietManagerParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        dietManagerUI \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi.printOpening();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d dietManagerUI.getInput();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assert input !\u003d null : \"Null input before input loop\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        while (!input.equals(\"end\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                processCommand(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } catch (ExitException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            input \u003d dietManagerUI.getInput();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"you have exited Diet Manager.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    private void processCommand(String input) throws ExitException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] commParts \u003d parser.parse(input.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            Command command \u003d cl.get(commParts[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            command.execute(commParts[1], storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            System.out.println(\"Looks like you\u0027ve typed an improper command!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 37,
      "tienkhoa16": 4,
      "wgzesg": 2,
      "CFZeon": 6
    }
  },
  {
    "path": "src/main/java/diet/dietmanager/DietManagerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietManagerParser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String[] parse(String comm) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (comm.contains(\" \")) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return comm.split(\" \", 2);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return new String[]{comm, \"filler\"};"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 11
    }
  },
  {
    "path": "src/main/java/diet/dietmanager/ExitException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class ExitException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public ExitException(String msg) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 8
    }
  },
  {
    "path": "src/main/java/diet/dietsession/DietSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.diet.dietsession.DietSessionUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSession {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final ArrayList\u003cFood\u003e foodList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final String dateInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final String typeInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private final DietSessionUi dietSessionUI;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private transient CommandLib cl;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final DietSessionParser parser \u003d new DietSessionParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public boolean endDietSession \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public DietSession(String typeInput, String dateInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.dateInput \u003d dateInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.date \u003d parser.parseDate(dateInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.typeInput \u003d typeInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        dietSessionUI \u003d new DietSessionUi();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String getDateInput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return dateInput;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String getTypeInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return typeInput;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void setEndDietSession(Boolean hasEnded) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.endDietSession \u003d hasEnded;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void start() throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"starting diet session\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        // command library is initialised again on start as it is transient variable"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        dietSessionUI.printOpening();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        setEndDietSession(false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d dietSessionUI.getInput();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        dietSessionInputLoop(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        setEndDietSession(true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        logger.log(Level.INFO, \"saving profile session to file\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        //saveToFile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        dietSessionUI.printExit();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    private void dietSessionInputLoop(String input) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        while (!input.equals(\"end\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                processCommand(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            input \u003d dietSessionUI.getInput();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    private void saveToFile() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            storage.init(typeInput + \" \" + date.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            storage.writeToStorageDietSession(typeInput + \" \" + date.toString(), this);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.WARNING, \"save profile session failed\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            System.out.println(\"Failed to save your diet session!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    private void processCommand(String input) throws NullPointerException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] commParts \u003d parser.parse(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d cl.get(commParts[0]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(commParts[1], foodList, storage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 68,
      "tienkhoa16": 9,
      "wgzesg": 1,
      "CFZeon": 22
    }
  },
  {
    "path": "src/main/java/diet/dietsession/DietSessionParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String[] parse(String comm) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (comm.contains(\" \")) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return comm.split(\" \", 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return new String[]{comm, \"filler\"};"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String processFoodName(String food) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] temp \u003d food.trim().split(\"/c\", 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return temp[0];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public double processFoodCalories(String food) throws NumberFormatException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] temp \u003d food.trim().split(\"/c\", 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return Double.parseDouble(temp[1]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Converts the date and time into a LocalDate object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param dateInput Date input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return LocalDate object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public LocalDate parseDate(String dateInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        // formatters for dates with time"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DateTimeFormatter formatterA \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DateTimeFormatter formatterB \u003d DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DateTimeFormatter formatterC \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        LocalDate date \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            date \u003d LocalDate.parse(dateInput, formatterA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            // puts the date and time through all available formatters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                date \u003d LocalDate.parse(dateInput, formatterB);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            // puts the date and time through all available formatters"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                date \u003d LocalDate.parse(dateInput, formatterC);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            // puts the date and time through all available formatters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                // this uses default formatter of yyyy-MM-dd"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                date \u003d LocalDate.parse(dateInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            // puts the date and time through all available formatters"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        // returns null if all the available formatters could not be used"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 70
    }
  },
  {
    "path": "src/main/java/diet/dietsession/ExitException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class ExitException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public ExitException(String msg) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 8
    }
  },
  {
    "path": "src/main/java/diet/dietsession/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    protected double calories;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public Food(String name, double calories) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return this.name + \" with calories: \" + this.calories;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 16
    }
  },
  {
    "path": "src/main/java/diet/dietsession/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietsession.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    Logger logger \u003d Logger.getLogger(\"java.diet.dietsession.command\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, Storage storage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 12,
      "CFZeon": 4
    }
  },
  {
    "path": "src/main/java/exceptions/ExceptionHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that deals with handling exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ExceptionHandler {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Handles checked exceptions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param e Checked exceptions in The Schwarzenegger."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String handleCheckedExceptions(SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Handles unchecked exceptions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param e Unchecked exception in Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Error message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String handleUncheckedExceptions(Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return e.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 27
    }
  },
  {
    "path": "src/main/java/exceptions/SchwarzeneggerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A base class for the checked exceptions in Schwarzenegger."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public abstract class SchwarzeneggerException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs SchwarzeneggerException object inheriting class Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param message Error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public SchwarzeneggerException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 16
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidAgeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_INVALID_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_INVALID_COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when input age is invalid."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidAgeException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidAgeException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidAgeException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_AGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 19
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidCommandFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when command format is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidCommandFormatException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidCommandFormatException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param command Command with invalid format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidCommandFormatException(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(String.format(\"%s command format is invalid. Please type \\\"help\\\" to see the correct format\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                command.toUpperCase()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 19
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidCommandWordException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_INVALID_COMMAND_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when command word is invalid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidCommandWordException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidCommandWordException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidCommandWordException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_COMMAND_WORD);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 18
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidHeightException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_INVALID_HEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when input height is invalid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidHeightException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidHeightException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidHeightException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_HEIGHT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 18
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidSaveFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_INVALID_SAVE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when there is corruption in data save format."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidSaveFormatException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidSaveFormatException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidSaveFormatException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_SAVE_FORMAT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 19
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidWeightException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_INVALID_WEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when input weight is invalid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidWeightException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidWeightException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidWeightException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_WEIGHT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 18
    }
  },
  {
    "path": "src/main/java/exceptions/profile/LoadingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_LOADING_ERROR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception while loading data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class LoadingException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs LoadingException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param message The cause of the error."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public LoadingException(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(String.format(MESSAGE_LOADING_ERROR, message));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 20
    }
  },
  {
    "path": "src/main/java/exceptions/profile/RedundantParamException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_REDUNDANT_PARAM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when input parameters are redundant."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class RedundantParamException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs RedundantParamException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandWord Command with redundant input parameters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public RedundantParamException(String commandWord) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(String.format(MESSAGE_REDUNDANT_PARAM, commandWord.toUpperCase()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 20
    }
  },
  {
    "path": "src/main/java/exceptions/profile/SavingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_SAVING_ERROR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception while saving data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class SavingException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs SavingException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param message The cause of the error."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public SavingException(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(String.format(MESSAGE_SAVING_ERROR, message));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 20
    }
  },
  {
    "path": "src/main/java/logger/SchwarzeneggerLogger.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package logger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.LOG_FILE_PATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class to handle file logging."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class SchwarzeneggerLogger {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static Logger logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static FileHandler fh;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Initialises SchwarzeneggerLogger object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static void initSchwarzeneggerLogger() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            File file \u003d new File(LOG_FILE_PATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            SimpleFormatter formatter \u003d new SimpleFormatter();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            fh \u003d new FileHandler(LOG_FILE_PATH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            fh.setFormatter(formatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger \u003d Logger.getLogger(\"SchwarzeneggerLogger\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (SecurityException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 40
    }
  },
  {
    "path": "src/main/java/profile/Constants.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Constants used in profile package."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int AGE_LOWER_BOUND \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int AGE_UPPER_BOUND \u003d 123;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int COMMAND_ARGS_INDEX \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int COMMAND_SPLIT_LIMIT \u003d 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int COMMAND_TYPE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String COMMAND_WORD_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String COMMAND_WORD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String COMMAND_WORD_END \u003d \"end\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String COMMAND_WORD_VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String DATA_FILE \u003d \"profile.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String DATA_FOLDER \u003d \"saves\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int EXAMPLE_AGE \u003d 30;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String EXAMPLE_BMI \u003d \"32.0 (Obesity Class 1)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double EXAMPLE_EXPECTED_WEIGHT \u003d 100;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int EXAMPLE_HEIGHT \u003d 188;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String EXAMPLE_NAME \u003d \"Schwarzenegger\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double EXAMPLE_WEIGHT \u003d 113;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String GREEDY_WHITE_SPACE \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int HEIGHT_LOWER_BOUND \u003d 63;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int HEIGHT_UPPER_BOUND \u003d 231;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_ADD_TITLE \u003d \"Please enter your details to add a new profile.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_CREATE_PROFILE_ACK \u003d \"Got it. Here\u0027s a confirmation of your profile:\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + CommonUi.LS + \"%s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_DELETE_PROFILE \u003d \"I\u0027ve deleted your profile.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_EXIT_PROFILE \u003d \"Exiting Profile Session...\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_PROFILE_EXIST \u003d \"There\u0027s currently a profile in the database. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"Please delete it using \\\"delete\\\" command before adding a new one.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_PROFILE_NOT_EXIST \u003d \"There\u0027s no profile to %s. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"Please add a new one using \\\"add\\\" command :D\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_VIEW_PROFILE \u003d \"Here\u0027s your profile:\" + CommonUi.LS + \"%s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Hi %s! How can I help you with your profile? :D\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String PROFILE_FOLDER \u003d \"profile\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String PROFILE_STRING_REPRESENTATION \u003d \"\\tName: %s\" + CommonUi.LS + \"\\tAge: %d\" + CommonUi.LS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"\\tHeight: %d cm\" + CommonUi.LS + \"\\tWeight: %.1f kg\" + CommonUi.LS + \"\\tExpected Weight: %.1f kg\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + CommonUi.LS + \"\\tYour BMI: %s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String EXAMPLE_PROFILE_STRING \u003d String.format(PROFILE_STRING_REPRESENTATION, EXAMPLE_NAME,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            EXAMPLE_AGE, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_BMI);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String PROJECT_ROOT \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final Path PATH_TO_PROFILE_FOLDER \u003d Paths.get(PROJECT_ROOT, DATA_FOLDER, PROFILE_FOLDER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final Path PATH_TO_PROFILE_FILE \u003d Paths.get(PROJECT_ROOT, DATA_FOLDER, PROFILE_FOLDER, DATA_FILE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String QUESTION_AGE \u003d \"How old are you?\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String QUESTION_EXPECTED_WEIGHT \u003d \"What\u0027s your expected weight in kilograms?\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String QUESTION_HEIGHT \u003d \"What\u0027s your height in centimeters?\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String QUESTION_NAME \u003d \"It seems like you\u0027re new to the Schwarzenegger. How should I call you?\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String QUESTION_WEIGHT \u003d \"What\u0027s your weight in kilograms?\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String SAD_FACE \u003d \":(  OOPS!!! \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_WORD \u003d SAD_FACE + \"Sorry, but I don\u0027t know what that means.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_SAVE_FORMAT \u003d SAD_FACE + \"Save format in \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"data\\\\profile\\\\profile.txt is invalid.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_AGE \u003d String.format("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            SAD_FACE + \"Please input an integer from %d to %d for age.\", AGE_LOWER_BOUND, AGE_UPPER_BOUND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_HEIGHT \u003d String.format("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            SAD_FACE + \"Please input an integer from %d to %d for height.\", HEIGHT_LOWER_BOUND, HEIGHT_UPPER_BOUND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_LOADING_ERROR \u003d SAD_FACE + \"An error has occurred while loading data.\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + CommonUi.LS + \"%s\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_SAVING_ERROR \u003d SAD_FACE + \"An error has occurred while saving data.\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + CommonUi.LS + \"%s\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_REDUNDANT_PARAM \u003d SAD_FACE + \"%s command does not take parameters.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double WEIGHT_LOWER_BOUND \u003d 2.1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double WEIGHT_UPPER_BOUND \u003d 635;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_WEIGHT \u003d String.format("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            SAD_FACE + \"Please input a number from %.1f to %.1f for weight.\", WEIGHT_LOWER_BOUND, WEIGHT_UPPER_BOUND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 77
    }
  },
  {
    "path": "src/main/java/profile/Profile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.PROFILE_STRING_REPRESENTATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.checkValidProfile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that manages user profile."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected int age;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected int height;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected double weight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected double expectedWeight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs Profile object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param name User\u0027s name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param age User\u0027s age."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param height User\u0027s height in centimeters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param weight User\u0027s weight in kilograms."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param expectedWeight User\u0027s expected weight in kilograms."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Profile(String name, int age, int height, double weight, double expectedWeight) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.expectedWeight \u003d expectedWeight;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides toString method of class Object to get string presentation of Profile object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return String presentation of Profile object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assert checkValidProfile(this) : \"Profile is invalid\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return String.format(PROFILE_STRING_REPRESENTATION, getName(), getAge(), getHeight(), getWeight(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                getExpectedWeight(), getBmiClassification());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s name."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s age."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s age."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s height."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s height."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s weight."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s weight."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s expected weight."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s expected weight."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public double getExpectedWeight() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return expectedWeight;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s bmi index and classification."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s bmi index and classification."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String getBmiClassification() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String classification;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        double bmiIndex \u003d weight / Math.pow((double) height / 100, 2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (bmiIndex \u003c 18.5) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Underweight\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (bmiIndex \u003c\u003d 24.9) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Normal weight\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (bmiIndex \u003c\u003d 29.9) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Overweight\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (bmiIndex \u003c\u003d 34.9) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Obesity Class 1\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (bmiIndex \u003c\u003d 39.9) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Obesity Class 2\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Extreme Obesity Class 3\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return String.format(\"%.1f (%s)\", bmiIndex, classification);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 116
    }
  },
  {
    "path": "src/main/java/profile/ProfileParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.AddProfile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.DeleteProfile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.EndProfile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ViewProfile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidAgeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidCommandWordException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidHeightException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidWeightException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.RedundantParamException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.AGE_LOWER_BOUND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.AGE_UPPER_BOUND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_ARGS_INDEX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_SPLIT_LIMIT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_TYPE_INDEX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_WORD_ADD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_WORD_DELETE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_WORD_END;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_WORD_VIEW;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EMPTY_STRING;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.GREEDY_WHITE_SPACE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.HEIGHT_LOWER_BOUND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.HEIGHT_UPPER_BOUND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.WEIGHT_LOWER_BOUND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.WEIGHT_UPPER_BOUND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that deals with making sense of user\u0027s command inside Profile Session."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Parses and returns the Command associated with the user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param userInputString User\u0027s raw input string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Associated command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidCommandWordException If command word is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws RedundantParamException If redundant parameters are provided."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Command parseCommand(String userInputString) throws InvalidCommandWordException, RedundantParamException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String[] commandTypeAndParams \u003d splitCommandWordAndArgs(userInputString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String commandType \u003d commandTypeAndParams[COMMAND_TYPE_INDEX].toLowerCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String commandArgs \u003d commandTypeAndParams[COMMAND_ARGS_INDEX];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        case COMMAND_WORD_ADD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new AddProfile(commandArgs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        case COMMAND_WORD_DELETE:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new DeleteProfile(commandArgs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        case COMMAND_WORD_VIEW:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new ViewProfile(commandArgs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        case COMMAND_WORD_END:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new EndProfile(commandArgs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidCommandWordException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Splits raw user\u0027s input into command word and command arguments string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param rawUserInput User\u0027s raw input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Size 2 array; first element is the command type and second element is the arguments string."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static String[] splitCommandWordAndArgs(String rawUserInput) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String[] split \u003d rawUserInput.trim().split(GREEDY_WHITE_SPACE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                COMMAND_SPLIT_LIMIT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return split.length \u003d\u003d COMMAND_SPLIT_LIMIT ? split : new String[]{split[COMMAND_TYPE_INDEX], EMPTY_STRING};"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static HashMap\u003cString, String\u003e extractCommandTagAndInfo(String commandArgs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throws InvalidCommandFormatException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (!commandArgs.contains(\"/\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidCommandFormatException(COMMAND_WORD_ADD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        HashMap\u003cString, String\u003e parsedParams \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        int startIndex \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        int endIndex \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            while (commandArgs.indexOf(\"/\", startIndex) !\u003d -1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                endIndex \u003d commandArgs.indexOf(\"/\", startIndex + 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                if (endIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    endIndex \u003d commandArgs.length();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                String parsedOption \u003d commandArgs.substring(startIndex + 2, endIndex).trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                String optionIndicator \u003d commandArgs.substring(startIndex, startIndex + 2).trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                parsedParams.put(optionIndicator, parsedOption);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                startIndex \u003d endIndex;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return parsedParams;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidCommandFormatException(COMMAND_WORD_ADD.toLowerCase());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static String extractName(HashMap\u003cString, String\u003e parsedParams) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return parsedParams.get(\"/n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static int extractAge(HashMap\u003cString, String\u003e parsedParams) throws InvalidAgeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            int age \u003d Integer.parseInt(parsedParams.get(\"/a\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!checkValidAge(age)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throw new InvalidAgeException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return age;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidAgeException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static int extractHeight(HashMap\u003cString, String\u003e parsedParams) throws InvalidHeightException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            int height \u003d Integer.parseInt(parsedParams.get(\"/h\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!checkValidHeight(height)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throw new InvalidHeightException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return height;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidHeightException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static double extractWeight(HashMap\u003cString, String\u003e parsedParams) throws InvalidWeightException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            double weight \u003d Double.parseDouble(parsedParams.get(\"/w\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!checkValidWeight(weight)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throw new InvalidWeightException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return weight;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidWeightException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static double extractExpectedWeight(HashMap\u003cString, String\u003e parsedParams) throws InvalidWeightException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            double expectedWeight \u003d Double.parseDouble(parsedParams.get(\"/e\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!checkValidWeight(expectedWeight)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throw new InvalidWeightException();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return expectedWeight;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidWeightException();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input when creating profile is valid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param profile User Profile object."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether input profile is valid."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidProfile(Profile profile) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return (checkValidName(profile.getName())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 checkValidAge(profile.getAge())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 checkValidHeight(profile.getHeight())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 checkValidWeight(profile.getWeight())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 checkValidWeight(profile.getExpectedWeight()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input name is not empty string."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param name User\u0027s input name."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether input name is valid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidName(String name) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return !name.isEmpty();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input age is in the valid range"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * (between {@link AGE_LOWER_BOUND} and {@link AGE_UPPER_BOUND} inclusive)."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param age User\u0027s input age."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether input age is valid."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidAge(int age) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return (age \u003e\u003d AGE_LOWER_BOUND \u0026\u0026 age \u003c\u003d AGE_UPPER_BOUND);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input height is in the valid range"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * (between {@link HEIGHT_LOWER_BOUND} and {@link HEIGHT_UPPER_BOUND} inclusive)."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param height User\u0027s input height."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether input height is valid."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidHeight(int height) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return (height \u003e\u003d HEIGHT_LOWER_BOUND \u0026\u0026 height \u003c\u003d HEIGHT_UPPER_BOUND);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input weight is in the valid range"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * (between {@link WEIGHT_LOWER_BOUND} and {@link WEIGHT_UPPER_BOUND} inclusive)."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param weight User\u0027s input weight."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether input weight is valid."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidWeight(double weight) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return (weight \u003e\u003d WEIGHT_LOWER_BOUND \u0026\u0026 weight \u003c\u003d WEIGHT_UPPER_BOUND);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 221
    }
  },
  {
    "path": "src/main/java/profile/ProfileSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.AddProfile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.EndProfile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.ExceptionHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.profile.ProfileUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.SCANNER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that is responsible for interacting with user when he/she enters Profile Session."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileSession {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private ProfileUi profileUi;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private ProfileParser profileParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private Profile profile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private ExceptionHandler exceptionHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs ProfileManager object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public ProfileSession() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"initialising ProfileSession object\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profileUi \u003d new ProfileUi();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            storage \u003d new Storage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profileParser \u003d new ProfileParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            exceptionHandler \u003d new ExceptionHandler();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profile \u003d storage.loadData(profileUi);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (profile \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                profile \u003d initProfile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.WARNING, \"processing SchwarzeneggerException\", e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profileUi.showToUser(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.WARNING, \"processing uncaught exception\", e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profileUi.showToUser(e.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Runs Profile Session."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        runCommandLoopTillEnd();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Starts up Profile Session with welcome message."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"starting profile session\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        profileUi.greetUser(profile.getName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private Profile initProfile() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        while (profile \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                while (profile \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    logger.log(Level.INFO, \"no existing profile in database\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    System.out.print(\"\u003e\u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    String input \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    Command command \u003d new AddProfile(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    profile \u003d command.execute(profile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    CommandResult result \u003d command.getExecutionResult(profile);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    storage.saveData(profile);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    profileUi.showToUser(result.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.WARNING, \"processing SchwarzeneggerException\", e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                profileUi.showToUser(e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.WARNING, \"processing uncaught exception\", e);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                profileUi.showToUser(e.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return profile;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s command and executes repeatedly until user requests to exit Profile Session."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void runCommandLoopTillEnd() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"executing profile session loop\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                String userCommand \u003d profileUi.getCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                command \u003d profileParser.parseCommand(userCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                profile \u003d command.execute(profile);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                CommandResult result \u003d command.getExecutionResult(profile);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                storage.saveData(profile);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                profileUi.showToUser(result.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.WARNING, \"processing SchwarzeneggerException\", e);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                profileUi.showToUser(exceptionHandler.handleCheckedExceptions(e));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.WARNING, \"processing uncaught exception\", e);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                profileUi.showToUser(exceptionHandler.handleUncheckedExceptions(e));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } while (!EndProfile.isEnd(command));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"exiting profile session loop\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 121
    }
  },
  {
    "path": "src/main/java/seedu/duke/Constant.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class Constant {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static final String WORKOUTSESSIONHISTORY \u003d \"saves/workout/history.json\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static final String WORKOUTSESSIONFOLDER \u003d \"saves/workout/workoutSession/\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static final String DIETSESSIONHISTORY \u003d \"saves/diet/history.json\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static final String DIETSESSIONFOLDER \u003d \"saves/diet/dietSession/\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String LOG_FILE_PATH \u003d \"logs/SchwarzeneggerLogs.log\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 8,
      "tienkhoa16": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietmanager.DietManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.ProfileSession;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import workout.workoutmanager.WorkoutManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * The Schwarzenegger program implements an application that keeps track of the user\u0027s gym and diet record."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private final DietManagerUi dietManagerUI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final DietManager dietManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        dietManagerUI \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        dietManager \u003d new DietManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        SchwarzeneggerLogger.initSchwarzeneggerLogger();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Unused in Duke."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Runs Schwarzenegger."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Greetings from Schwarzenegger!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String response \u003d dietManagerUI.getInput();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        while (!response.equals(\"exit\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (response.equals(\"diet\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                dietManager.start();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (response.equals(\"profile\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                System.out.println(\"Entering Profile Session...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ProfileSession profileSession \u003d new ProfileSession();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                profileSession.run();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (response.equals(\"workout\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                System.out.println(\"Entering Workout Session...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                WorkoutManager workoutManager \u003d new WorkoutManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                workoutManager.start();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            response \u003d dietManagerUI.getInput();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Bye, you have exited the Schwarzenegger.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 21,
      "tienkhoa16": 26,
      "CFZeon": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/storage/RuntimeTypeAdapterFactory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Copyright (C) 2011 Google Inc."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *      http://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.JsonPrimitive;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.TypeAdapter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.TypeAdapterFactory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.internal.Streams;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.stream.JsonWriter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Adapts values whose runtime type may differ from their declaration type. This"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * is necessary when a field\u0027s type is not the same type that GSON should create"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * when deserializing that field. For example, consider these types:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   abstract class Shape {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int x;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int y;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   class Circle extends Shape {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int radius;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   class Rectangle extends Shape {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   class Diamond extends Shape {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   class Drawing {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     Shape bottomShape;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     Shape topShape;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cp\u003eWithout additional type information, the serialized JSON is ambiguous. Is"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * the bottom shape in this drawing a rectangle or a diamond? \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * This class addresses this problem by adding type information to the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * serialized JSON and honoring that type information when the JSON is"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * deserialized: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"type\": \"Diamond\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"type\": \"Circle\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Both the type field name ({@code \"type\"}) and the type labels ({@code"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \"Rectangle\"}) are configurable."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003ch3\u003eRegistering Types\u003c/h3\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * name to the {@link #of} factory method. If you don\u0027t supply an explicit type"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * field name, {@code \"type\"} will be used. \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \u003d RuntimeTypeAdapterFactory.of(Shape.class, \"type\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Next register all of your subtypes. Every subtype must be explicitly"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * registered. This protects your application from injection attacks. If you"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * don\u0027t supply an explicit type label, the type\u0027s simple name will be used."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Rectangle.class, \"Rectangle\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Circle.class, \"Circle\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Diamond.class, \"Diamond\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Finally, register the type adapter factory in your application\u0027s GSON builder:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .registerTypeAdapterFactory(shapeAdapterFactory)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .create();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Like {@code GsonBuilder}, this API supports chaining: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory \u003d RuntimeTypeAdapterFactory.of(Shape.class)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .registerSubtype(Rectangle.class)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .registerSubtype(Circle.class)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .registerSubtype(Diamond.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003ch3\u003eSerialization and deserialization\u003c/h3\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * In order to serialize and deserialize a polymorphic object,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * you must specify the base type explicitly."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   Diamond diamond \u003d new Diamond();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   String json \u003d gson.toJson(diamond, Shape.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * And then:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   Shape shape \u003d gson.fromJson(json, Shape.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zsk612"
        },
        "content": " */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public final class RuntimeTypeAdapterFactory\u003cT\u003e implements TypeAdapterFactory {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final Class\u003c?\u003e baseType;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final String typeFieldName;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final Map\u003cString, Class\u003c?\u003e\u003e labelToSubtype \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final Map\u003cClass\u003c?\u003e, String\u003e subtypeToLabel \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final boolean maintainType;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private RuntimeTypeAdapterFactory(Class\u003c?\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (typeFieldName \u003d\u003d null || baseType \u003d\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.baseType \u003d baseType;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.typeFieldName \u003d typeFieldName;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.maintainType \u003d maintainType;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * {@code maintainType} flag decide if the type will be stored in pojo or not."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, typeFieldName, maintainType);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, typeFieldName, false);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Creates a new runtime type adapter for {@code baseType} using {@code \"type\"} as"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * the type field name."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, \"type\", false);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Registers {@code type} identified by {@code label}. Labels are case"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * sensitive."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IllegalArgumentException if either {@code type} or {@code label}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *     have already been registered on this type adapter."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type, String label) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (type \u003d\u003d null || label \u003d\u003d null) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new IllegalArgumentException(\"types and labels must be unique\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        labelToSubtype.put(label, type);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        subtypeToLabel.put(type, label);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Registers {@code type} identified by its {@link Class#getSimpleName simple"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * name}. Labels are case sensitive."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IllegalArgumentException if either {@code type} or its simple name"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *     have already been registered on this type adapter."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return registerSubtype(type, type.getSimpleName());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public \u003cR\u003e TypeAdapter\u003cR\u003e create(Gson gson, TypeToken\u003cR\u003e type) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (type.getRawType() !\u003d baseType) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        final Map\u003cString, TypeAdapter\u003c?\u003e\u003e labelToDelegate"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        final Map\u003cClass\u003c?\u003e, TypeAdapter\u003c?\u003e\u003e subtypeToDelegate"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        for (Map.Entry\u003cString, Class\u003c?\u003e\u003e entry : labelToSubtype.entrySet()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            TypeAdapter\u003c?\u003e delegate \u003d gson.getDelegateAdapter(this,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    TypeToken.get(entry.getValue()));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            labelToDelegate.put(entry.getKey(), delegate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            subtypeToDelegate.put(entry.getValue(), delegate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return new TypeAdapter\u003cR\u003e() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            @Override public R read(JsonReader in) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                JsonElement jsonElement \u003d Streams.parse(in);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                JsonElement labelJsonElement;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (maintainType) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    labelJsonElement \u003d jsonElement.getAsJsonObject().get(typeFieldName);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    labelJsonElement \u003d jsonElement.getAsJsonObject().remove(typeFieldName);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (labelJsonElement \u003d\u003d null) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    throw new JsonParseException(\"cannot deserialize \" + baseType"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + \" because it does not define a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                String label \u003d labelJsonElement.getAsString();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                TypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) labelToDelegate.get(label);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    throw new JsonParseException(\"cannot deserialize \""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + baseType + \" subtype named \""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + label + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                return delegate.fromJsonTree(jsonElement);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            @Override public void write(JsonWriter out, R value) throws IOException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                Class\u003c?\u003e srcType \u003d value.getClass();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                final String label \u003d subtypeToLabel.get(srcType);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                TypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) subtypeToDelegate.get(srcType);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    throw new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                JsonObject jsonObject \u003d delegate.toJsonTree(value).getAsJsonObject();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (maintainType) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    Streams.write(jsonObject, out);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                JsonObject clone \u003d new JsonObject();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (jsonObject.has(typeFieldName)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    throw new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + \" because it already defines a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                clone.add(typeFieldName, new JsonPrimitive(label));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                for (Map.Entry\u003cString, JsonElement\u003e e : jsonObject.entrySet()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    clone.add(e.getKey(), e.getValue());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                Streams.write(clone, out);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }.nullSafe();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 280
    }
  },
  {
    "path": "src/main/java/storage/diet/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package storage.diet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.DietSession;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * This class holds the data loaded during runtime and read and writes to the local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static Gson gson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static File file \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Initialise the database with locally stored data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * If the local file is not found. It creates the relevant file and folder."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IOException If director or file cannot be created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void init(String filePath) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"creating diet session save file\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        gson \u003d new GsonBuilder().setPrettyPrinting()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                .create();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        //creates the file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String fileName \u003d \"saves/diet/\" + filePath + \".json\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file \u003d new File(fileName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Write the content in dietSession to a local file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * If the local file is not found. It creates the relevant file and folder."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IOException If director or file cannot be created."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void writeToStorageDietSession(String filePath, DietSession dietSession) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"saving file to location\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(FILEPATH + filePath + \".json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        FileWriter writer \u003d new FileWriter(file.getPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        gson.toJson(dietSession, writer);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"file saving complete\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        writer.flush();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    public DietSession readDietSession(String filePath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietSession dietSession;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        dietSession \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            File file \u003d new File(System.getProperty(\"user.dir\") + \"/\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                    + FILEPATH + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            Reader reader \u003d new FileReader(file.getPath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            dietSession \u003d gson.fromJson(reader, DietSession.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            System.out.println(\"There seems to be no file\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return dietSession;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 66,
      "tienkhoa16": 2,
      "CFZeon": 18
    }
  },
  {
    "path": "src/main/java/storage/profile/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package storage.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.JsonSyntaxException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.LoadingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.SavingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Profile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.profile.ProfileUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EMPTY_STRING;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.PATH_TO_PROFILE_FILE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.PATH_TO_PROFILE_FOLDER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.checkValidProfile;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that saves and loads user profile data on local hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private boolean hasExistingProfile;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs Storage object where data file is assumed to be existed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        hasExistingProfile \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Returns boolean stating if data file is existed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Boolean stating if data file is existed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public boolean getHasExistingProfile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return hasExistingProfile;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Loads user profile from data file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param profileUi Ui to show exception message to user if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User profile."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws LoadingException If there are failed or interrupted I/O operations."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Profile loadData(ProfileUi profileUi) throws LoadingException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (Files.exists(PATH_TO_PROFILE_FOLDER)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.INFO, \"starting to decode profile data\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                profile \u003d decodeProfile(PATH_TO_PROFILE_FILE.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                assert profile !\u003d null : \"profile should not be null\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.INFO, \"finishing profile data decoding\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                createDataFile(PATH_TO_PROFILE_FILE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (InvalidSaveFormatException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                profileUi.showToUser(e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                hasExistingProfile \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            createDataFolder(PATH_TO_PROFILE_FOLDER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            createDataFile(PATH_TO_PROFILE_FILE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return profile;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Decodes user profile save data to a profile object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param filePath Path to data file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Profile object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidSaveFormatException If the saving format is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws FileNotFoundException If data file is not found."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Profile decodeProfile(String filePath) throws InvalidSaveFormatException, FileNotFoundException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"decoding profile data\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Type profileType \u003d new TypeToken\u003cProfile\u003e() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }.getType();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            JsonReader reader \u003d new JsonReader(new FileReader(file.getPath()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Profile profile \u003d gson.fromJson(reader, profileType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (profile \u003d\u003d null || !checkValidProfile(profile)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.WARNING, \"processing invalid profile data\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throw new InvalidSaveFormatException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return profile;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (JsonSyntaxException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.WARNING, \"processing invalid syntax in data file\", e);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidSaveFormatException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Creates data file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param pathToDataFile Path to data file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws LoadingException If there are failed or interrupted I/O operations."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void createDataFile(Path pathToDataFile) throws LoadingException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            hasExistingProfile \u003d false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Files.createFile(pathToDataFile);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"created data/profile/profile.txt\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new LoadingException(e.getMessage());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Creates data folder."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param pathToDataFolder Path to data folder."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws LoadingException If there are failed or interrupted I/O operations."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void createDataFolder(Path pathToDataFolder) throws LoadingException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Files.createDirectories(pathToDataFolder);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"created data/profile\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new LoadingException(e.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Saves user profile data to hard disk after profile changes."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param profile User\u0027s profile."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SavingException If there are failed or interrupted I/O operations."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void saveData(Profile profile) throws SavingException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"starting to save profile data\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            FileWriter fw \u003d new FileWriter(PATH_TO_PROFILE_FILE.toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (profile \u003d\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                fw.write(EMPTY_STRING);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                gson.toJson(profile, fw);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                fw.flush();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"finishing data saving\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.WARNING, \"processing IOException while saving data\", e);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new SavingException(e.getMessage());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 169
    }
  },
  {
    "path": "src/main/java/storage/workout/PastWorkoutSessionRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package storage.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class PastWorkoutSessionRecord implements Comparable\u003cPastWorkoutSessionRecord\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final LocalDateTime creationTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private LocalDateTime lastEditTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public PastWorkoutSessionRecord(String filePath, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        creationTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        lastEditTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public PastWorkoutSessionRecord(String filePath, LocalDateTime creationTime,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                                    LocalDateTime lastEditTime, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.creationTime \u003d creationTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.lastEditTime \u003d lastEditTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public boolean containsAll(ArrayList\u003cString\u003e tgs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return tags.containsAll(tgs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public boolean isCreatedOn(LocalDate date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return date.equals(creationTime.toLocalDate());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return String.format(\"%-15s %s\", creationTime.toLocalDate(), tags.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public int compareTo(PastWorkoutSessionRecord o) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (creationTime.isBefore(o.creationTime)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (!(o instanceof PastWorkoutSessionRecord)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return creationTime.equals(((PastWorkoutSessionRecord) o).creationTime)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \u0026\u0026 lastEditTime.equals(((PastWorkoutSessionRecord) o).lastEditTime)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \u0026\u0026 tags.equals(((PastWorkoutSessionRecord) o).tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public PastWorkoutSessionRecord edit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new PastWorkoutSessionRecord(filePath, creationTime, LocalDateTime.now(), this.tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 27,
      "wgzesg": 40
    }
  },
  {
    "path": "src/main/java/storage/workout/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package storage.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import workout.workoutsession.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * This class holds the data loaded during runtime and read and writes to the local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static final String FILEPATH \u003d \"./saves/workout\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private static Gson gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static File file \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Initialise the database with locally stored data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * If the local file is not found. It creates the relevant file and folder."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IOException If director or file cannot be created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void initialise(String filePath) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        /*RuntimeTypeAdapterFactory\u003cTask\u003e taskAdapterFactory \u003d RuntimeTypeAdapterFactory"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                .of(Task.class, \"type\", true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                .registerSubtype(ToDo.class, \"Todo\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                .registerSubtype(Deadline.class, \"Deadline\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                .registerSubtype(Event.class, \"Event\");*/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        gson \u003d new GsonBuilder().setPrettyPrinting()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                .create();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        //creates the file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String fileName \u003d \"saves/workout/\" + Integer.toString(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file \u003d new File(fileName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Write the content in TaskList to a local file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * If the local file is not found. It creates the relevant file and folder."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IOException If director or file cannot be created."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void writeToStorage(String filePath, ArrayList\u003cExercise\u003e taskList) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        FileWriter writer \u003d new FileWriter(file.getPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        gson.toJson(taskList, writer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        writer.flush();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void readFileContents(String filePath, ArrayList\u003cExercise\u003e taskList) throws FileNotFoundException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        Type taskListType \u003d new TypeToken\u003cArrayList\u003cExercise\u003e\u003e() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }.getType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        JsonReader reader \u003d new JsonReader(new FileReader(file.getPath()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            taskList.addAll(gson.fromJson(reader, taskListType));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            System.out.printf(\"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 67,
      "yujinyang1998": 11
    }
  },
  {
    "path": "src/main/java/storage/workout/WorkOutManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package storage.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import seedu.duke.Constant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.workout.workoutmanager.WorkoutManagerUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.printTabeleHeader;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseSearchConditions;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkOutManagerStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * This list contains all the past record files\u0027 file name and some other relevant info."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * It is saved in a file called history.json."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Each time it initilises, it will read history.json file and save it to this list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Each time adding/removing record will update this list and write again to local storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static List\u003cPastWorkoutSessionRecord\u003e pastFiles;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static Gson gson;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * This variable keeps track of file name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * It should be replaced with something else,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * TODO:e.g. a hashcode that can identify each file distinctly."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static int recordCount \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void init() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        readPastRecords();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void list(String[] args) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"the length of list is \" + pastFiles.size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printTabeleHeader();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        for (PastWorkoutSessionRecord wsr : pastFiles) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.printf(\"%-8s\", index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(wsr);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            index +\u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String add(ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String newFilePath \u003d Constant.WORKOUTSESSIONFOLDER + recordCount + \".json\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        int code \u003d createfile(newFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord newRecord \u003d new PastWorkoutSessionRecord(newFilePath, tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        pastFiles.add(newRecord);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        recordCount \u003d pastFiles.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        writePastRecords();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return  newFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void delete(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        PastWorkoutSessionRecord deletedRecord;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            deletedRecord \u003d pastFiles.get(index - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            pastFiles.remove(index - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"The index is out of bound!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        File myFile \u003d new File(deletedRecord.getFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        myFile.delete();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        recordCount \u003d pastFiles.size();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        writePastRecords();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String edit(int index) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord editedRecord;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        editedRecord \u003d pastFiles.get(index - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord newRecord \u003d editedRecord.edit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        pastFiles.set(index - 1, newRecord);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        recordCount \u003d pastFiles.size();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        writePastRecords();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return newRecord.getFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void search(String[] args) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e conditions \u003d parseSearchConditions(args);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cPastWorkoutSessionRecord\u003e result \u003d pastFiles.stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                .filter(conditions.stream().reduce(x -\u003e true, Predicate::and))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(result.size() + \" records found.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        printTabeleHeader();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (PastWorkoutSessionRecord wsr : result) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            int index \u003d pastFiles.indexOf(wsr) + 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.printf(\"%-8s\", index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(wsr);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void clear() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        while (pastFiles.size() !\u003d 0) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            delete(1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static void readPastRecords() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(Constant.WORKOUTSESSIONHISTORY);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        WorkoutManagerUi.printStartLoading();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Type taskListType \u003d new TypeToken\u003cArrayList\u003cPastWorkoutSessionRecord\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            JsonReader reader \u003d new JsonReader(new FileReader(file.getPath()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            pastFiles \u003d gson.fromJson(reader, taskListType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            createfile(Constant.WORKOUTSESSIONHISTORY);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            pastFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        recordCount \u003d pastFiles.size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        WorkoutManagerUi.printFinishLoading();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static void writePastRecords() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(Constant.WORKOUTSESSIONHISTORY);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        FileWriter writer;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            writer \u003d new FileWriter(file.getPath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            gson.toJson(pastFiles, writer);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Error occured when saving the progress...\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static int createfile(String path) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"The local storage file cannot be created at \" + path);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 110,
      "tienkhoa16": 3,
      "wgzesg": 44
    }
  },
  {
    "path": "src/main/java/ui/CommonUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class CommonUi {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected static final String LINE_PREFIX \u003d \"\\t \";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String LS \u003d System.lineSeparator() + LINE_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected static final String HORIZONTAL_LINE \u003d LINE_PREFIX"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"____________________________________________________________\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected static final String MESSAGE_FORMAT_GENERAL \u003d HORIZONTAL_LINE + LS + \"%s\" + System.lineSeparator()"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + HORIZONTAL_LINE + System.lineSeparator();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Shows a message to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param result Message to be displayed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void showToUser(String result) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        System.out.println(String.format(MESSAGE_FORMAT_GENERAL, result));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void printHelpFormater(String commandName, String commandFormat, String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.format(\"%-8s - %s\\n\", commandName, commandFormat);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.format(\"%-8s %s\\n\", \"\", description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 19,
      "wgzesg": 5
    }
  },
  {
    "path": "src/main/java/ui/diet/dietmanager/DietManagerUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class DietManagerUi {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printOpening() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"You\u0027re now in diet manager!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printBye() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Exiting diet manager!!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String check \u003d in.nextLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assert check !\u003d null : \"input has to at least be \\\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Extracts out date and time by looking for date strings in YYYY-MM-DD format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input date string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return date in MMM dd yyyy if the user inputs date in YYYY-MM-DD format;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *      else returns original string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws DateTimeParseException if the date string input is not a valid date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String extractDate(String input) throws DateTimeParseException, IllegalStateException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String dateString \u003d input.split(\"/t\")[0].split(\" \", 2)[1].trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            Pattern pattern \u003d Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            Matcher matcher \u003d pattern.matcher(dateString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            boolean isValidDate \u003d matcher.find();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String match \u003d matcher.group();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return LocalDate.parse(match).format(DateTimeFormatter.ofPattern(\"MM-dd-yyyy\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"I do not understand your date input!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            System.out.println(\"It looks like there is no date input\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"I\u0027ve replaced it with today\u0027s date.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return dtf.format(now);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String extractMeal(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return input.split(\"/t\")[1].trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Please specify your diet session tag, i.e. breakfast, lunch, dinner\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            System.out.println(\"It looks like there\u0027s no input after /t\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Session is tagged as unspecified.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return \"unspecified\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"-----------------------------------------\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void printStartLoading() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Loading past diet sessions...\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void printFinishLoading() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Loading completed!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 69,
      "tienkhoa16": 2,
      "CFZeon": 8
    }
  },
  {
    "path": "src/main/java/ui/diet/dietsession/DietSessionUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class DietSessionUi {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void printOpening() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Starting Diet Session!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void printExit() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"you have exited Diet Session.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 17,
      "tienkhoa16": 2
    }
  },
  {
    "path": "src/main/java/ui/profile/ProfileUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.GREEDY_WHITE_SPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_WELCOME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.SCANNER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that deals with interactions with user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileUi extends CommonUi {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Greets user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param name User\u0027s name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void greetUser(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        showToUser(String.format(MESSAGE_WELCOME, name));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Prompts for the command and reads the text entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Full line entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        System.out.print(\"\u003e\u003e\u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String inputLine \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        // Silently consume all blank lines"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        while (inputLine.trim().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            System.out.print(\"\u003e\u003e\u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            inputLine \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return inputLine.trim().replaceAll(GREEDY_WHITE_SPACE, \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 41
    }
  },
  {
    "path": "src/main/java/ui/workout/workoutmanager/WorkoutManagerUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class WorkoutManagerUi {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printOpening() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Let\u0027s manage your workout sessions!\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printBye() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Bye!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printStartLoading() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Loading history records...\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printFinishLoading() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Loading completed!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printSeperationLine() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(\"---------------------------------\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printDeleteResponse() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"You have deleted that record!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void printClearResponse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(\"You have cleared all records!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printStartNewSessionResponse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"You have started a new workout session!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printFinishNewSessionResponse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Congratulations! You have finished today\u0027s workout!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void printTabeleHeader() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.printf(\"%-7s %-15s %s%n\", \"Index\", \"Created on\", \"Tags\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void commandNotFoundResponse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"The command not recognised!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 37,
      "tienkhoa16": 2,
      "wgzesg": 9
    }
  },
  {
    "path": "src/main/java/ui/workout/workoutsession/WorkoutSessionUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class WorkoutSessionUi {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printError() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"There is an error, please restart the session\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void addFormatError() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        System.out.println(\"Wrong format, please enter in the format: \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                + \"add [workout] /n [number of sets] /w \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                + \"[weight]\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void inputNotRecognisedError() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        System.out.println(\"Command not recognised.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void emptyListError() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        System.out.println(\"List is empty. Please enter something.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 5,
      "yujinyang1998": 14,
      "tienkhoa16": 2
    }
  },
  {
    "path": "src/main/java/workout/DateParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e dtFormaters \u003d Arrays.asList("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd HH:mm\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd HH:mm\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd HHmm\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e dFormaters \u003d Arrays.asList("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Parse a given string following one of the accepted format into date-time format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param targetString String input to be parsed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return Parsed result in the form of LocalDateTime or null if no value parsing is found"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static LocalDateTime parseDate(String targetString) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (DateTimeFormatter dtf : dtFormaters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                return LocalDateTime.parse(targetString, dtf);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (DateTimeFormatter dtf : dFormaters) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                return LocalDate.parse(targetString, dtf).atStartOfDay();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 51
    }
  },
  {
    "path": "src/main/java/workout/workoutmanager/ExitException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class ExitException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public ExitException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 8
    }
  },
  {
    "path": "src/main/java/workout/workoutmanager/WorkoutManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.workout.WorkOutManagerStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.workout.workoutmanager.WorkoutManagerUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkoutManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final CommandLib cl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public WorkoutManager() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        WorkOutManagerStorage.init();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"initialised workout manager command library\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"entered workout manager\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        WorkoutManagerUi.printOpening();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String command \u003d getCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.log(Level.FINE, \"received input\" + command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            WorkoutManagerUi.printSeperationLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String[] commParts \u003d WorkoutManagerParser.parse(command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                processCommand(commParts);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } catch (ExitException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                logger.log(Level.INFO, \"exiting workout manager\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            WorkoutManagerUi.printSeperationLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private void processCommand(String[] commands) throws ExitException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d cl.get(commands[0]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ExecutionResult result \u003d command.execute(Arrays.copyOfRange(commands, 1, commands.length));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (result \u003d\u003d ExecutionResult.OK) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            command.printResponse();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static String getCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.print(\"\u003e\u003e\u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String inputLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        // Silently consume all blank lines"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        while (inputLine.trim().isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.print(\"\u003e\u003e\u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            inputLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return inputLine;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 33,
      "tienkhoa16": 9,
      "wgzesg": 26
    }
  },
  {
    "path": "src/main/java/workout/workoutmanager/WorkoutManagerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import storage.workout.PastWorkoutSessionRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import workout.DateParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkoutManagerParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final int NOTHING \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final int TAG \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final int DATE \u003d 2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static String[] parse(String comm) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return comm.split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static ArrayList\u003cString\u003e parseTags(String[] arr) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            if (!arr[0].equals(\"/t\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                if (!result.contains(arr[i])) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    result.add(arr[i]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e parseSearchConditions(String[] arr) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int lookingFor \u003d NOTHING;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (String s: arr) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            if (s.equals(\"/t\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                lookingFor \u003d TAG;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } else if (s.equals(\"/d\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                lookingFor \u003d DATE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } else if (lookingFor \u003d\u003d TAG) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                System.out.println(\"adding a tag\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                tags.add(s);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } else if (lookingFor \u003d\u003d DATE) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                LocalDate finalDate \u003d DateParser.parseDate(s).toLocalDate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                if (finalDate !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    test.add(x -\u003e x.isCreatedOn(finalDate));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        test.add(x -\u003e x.containsAll(tags));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return test;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 10,
      "wgzesg": 52
    }
  },
  {
    "path": "src/main/java/workout/workoutsession/WorkoutSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import workout.workoutsession.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static logger.SchwarzeneggerLogger.logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkoutSession {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private String filePath \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private boolean[] endWorkoutSession;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public ArrayList\u003cExercise\u003e exerciseList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private transient CommandLib cl;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private final WorkoutSessionParser parser \u003d new WorkoutSessionParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public WorkoutSession(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.exerciseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.endWorkoutSession \u003d new boolean[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private void setEndWorkoutSessionF() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.endWorkoutSession[0] \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Starts workout session."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void workoutSessionStart() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        setEndWorkoutSessionF();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        logger.log(Level.INFO, \"starting workout session\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.readFileContents(filePath, exerciseList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        while (!endWorkoutSession[0]) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                workoutSessionProcessCommand(in.nextLine().trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private void workoutSessionProcessCommand(String input) throws NullPointerException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] commParts \u003d WorkoutSessionParser.workoutSessionParser(input.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        Command command \u003d cl.get(commParts[0]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        command.execute(commParts, exerciseList, filePath, storage, endWorkoutSession);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 31,
      "yujinyang1998": 27,
      "tienkhoa16": 4,
      "wgzesg": 5
    }
  },
  {
    "path": "src/main/java/workout/workoutsession/WorkoutSessionParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import workout.workoutsession.exercise.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkoutSessionParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static String[] workoutSessionParser(String input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return input.split(\" \");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static Exercise addParser(String[] input) throws NumberFormatException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        Exercise exercise \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] returnString \u003d new String[4];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (int i \u003d 0; i \u003c returnString.length; i++) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            returnString[i] \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        int tracker \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        for (String s : input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (s.compareTo(\"/n\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                tracker \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } else if (s.compareTo(\"/w\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                tracker \u003d 3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } else if (s.compareTo(\"add\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                tracker \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } else if (tracker \u003d\u003d 2 || tracker \u003d\u003d 3) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                returnString[tracker] \u003d s;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                returnString[tracker] +\u003d s;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        exercise \u003d new Exercise(returnString[1], Integer.parseInt(returnString[2]), Integer.parseInt(returnString[3]));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return exercise;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static int deleteParser(String[] input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return Integer.parseInt(input[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 27,
      "yujinyang1998": 16
    }
  },
  {
    "path": "src/main/java/workout/workoutsession/exercise/Exercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutsession.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private String moveName \u003d null;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private int repetitions \u003d 0;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private int weight \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public Exercise(String moveName, int repetitions, int weight) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.moveName \u003d moveName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.repetitions \u003d repetitions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return  moveName"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \", Repetitions:\" + repetitions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \", Weight\u003d\" + weight;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 20,
      "yujinyang1998": 3
    }
  },
  {
    "path": "src/test/java/diet/DietTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemAdd;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemDelete;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void extractDate_dateCorrectFormat_returnsDateString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d 2020-11-11 /t lunch\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String dateString \u003d ui.extractDate(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(dateString, \"11-11-2020\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void extract_dateWrongFormat_expectsException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d 2020-22-22 /t lunch\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e ui.extractDate(input));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void extract_dateNoDate_returnsCurrentDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String dateString \u003d ui.extractDate(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String outputString \u003d dtf.format(now);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(dateString, outputString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void extractMeal_mealCorrectFormat_returnsMealString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d 2020-11-11 /t lunch\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String mealString \u003d ui.extractMeal(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(mealString, \"lunch\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void extract_dateNoMeal_returnsUnspecified() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d 2020-11-11 /t\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String mealString \u003d ui.extractMeal(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(mealString, \"unspecified\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void toString_correctInput_returnsCorrectString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Food fd \u003d new Food(\"biscuit\", 400.00);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String output \u003d fd.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(\"biscuit with calories: 400.0\", output);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testAdd_correctInput_returnsMoreFood() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemAdd();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        command.execute(\"melon /c 500\", foodList, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(1, foodList.size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testDelete_correctInput_returnsFewerFood() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemDelete();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        command.execute(\"1\", foodList, storage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(0, foodList.size());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testAdd_noCalories_returnsWarning() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemAdd();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"melon\", foodList, storage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"Please specify your food info.\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(warning, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testAdd_wrongFormatForCalories_returnsWarning() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemAdd();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"melon /c no calories\", foodList, storage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"Please specify your food info.\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(warning, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testDelete_IndexTooLarge_returnsWarning() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemDelete();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(Integer.toString((foodList.size() + 4)), foodList, storage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"Sorry, the index is not found.\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(outputStreamCaptor.toString().trim(), warning);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testDelete_WrongFormatForIndex_returnsWarning() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemDelete();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"a\", foodList, storage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"Sorry, the index is not found.\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(outputStreamCaptor.toString().trim(), warning);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void processCommandForDietSession_WrongCommand_returnsWarning() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemWrong();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"hahaha\", foodList, null);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"I do not understand your date input!\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \"I\u0027ve replaced it with today\u0027s date.\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \"Yay! You have added melon with calories: 500.0\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \"Sorry! It seems like you\u0027ve entered an invalid command!\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(warning, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void processCommandForDietManager_WrongCommand_returnsWarning() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        diet.dietmanager.command.Command command \u003d new DietSessionWrong();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"hahaha\", null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"I do not understand your date input!\\n\" +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"I\u0027ve replaced it with today\u0027s date.\\n\" +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Yay! You have added melon with calories: 500.0\\n\" +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Sorry! It seems like you\u0027ve entered an invalid command!\\n\" +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Sorry! It seems like you\u0027ve entered an invalid command!\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(warning, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 151,
      "tienkhoa16": 8,
      "wgzesg": 1,
      "CFZeon": 2
    }
  },
  {
    "path": "src/test/java/diet/dietsession/DietSessionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import storage.diet.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class DietSessionTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    static final String FILEPATH \u003d \"/saves/diet/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void testSaveDietSession_noInput_returnsDietSession() throws FileNotFoundException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        SchwarzeneggerLogger.initSchwarzeneggerLogger();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietManagerUi dietManagerUi \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietSession ds \u003d new DietSession(dietManagerUi.extractMeal(null), dietManagerUi.extractDate(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        ds.saveToFile();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assertEquals(ds, storage.readDietSession(dietManagerUi.extractMeal(null) + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                + dietManagerUi.extractDate(null) + \".json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CFZeon": 25
    }
  },
  {
    "path": "src/test/java/diet/dietsession/DietSessionUiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class DietSessionUiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void extractDate_dateCorrectFormat_returnsDateString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String input \u003d \"/d 2020-11-11 /t lunch\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String dateString \u003d ui.extractDate(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assertEquals(dateString, \"11-11-2020\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void extract_dateWrongFormat_expectsException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String input \u003d \"/d 2020-22-22 /t lunch\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e ui.extractDate(input));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CFZeon": 27
    }
  },
  {
    "path": "src/test/java/profile/storage/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_PROFILE_STRING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Tests decodeProfile method of class Storage when data from file is valid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are exceptions while decoding data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testDecodeProfile_exampleProfileData_returnsExampleProfileString() throws SchwarzeneggerException,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        SchwarzeneggerLogger.initSchwarzeneggerLogger();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String inputFilePath \u003d System.getProperty(\"user.dir\") + \"/src/test/java/profile/storage/exampleProfileData.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d storage.decodeProfile(inputFilePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(EXAMPLE_PROFILE_STRING, testProfile.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Tests decodeProfile method of class Storage when data from file is invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testDecodeProfile_invalidDataInput_throwsInvalidSaveFormatException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        SchwarzeneggerLogger.initSchwarzeneggerLogger();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String inputFilePath \u003d System.getProperty(\"user.dir\") + \"/src/test/java/profile/storage/invalidProfileData.txt\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertThrows(InvalidSaveFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            storage.decodeProfile(inputFilePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 45
    }
  },
  {
    "path": "src/test/java/profile/storage/exampleProfileData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  \"name\": \"Schwarzenegger\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  \"age\": 30,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  \"height\": 188,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  \"weight\": 113.0,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  \"expectedWeight\": 100.0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 7
    }
  },
  {
    "path": "src/test/java/profile/storage/invalidProfileData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  \"name\": \"Schwarzenegger\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  \"age\": 30,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 4
    }
  },
  {
    "path": "src/test/java/workout/workoutmanager/CommandLibTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.WrongWS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ByeWS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.DeleteWS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ListWS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.NewWS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "class CommandLibTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_WorkoutManagerUnrecognisedCommand_returnNull() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertTrue(cl.get(\"asdf\") instanceof WrongWS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_list_returnListCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertTrue(cl.get(\"list\") instanceof ListWS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_delete_returnDeleteCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertTrue(cl.get(\"delete\") instanceof DeleteWS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_new_returnNewCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertTrue(cl.get(\"new\") instanceof NewWS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_bye_returnByeCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertTrue(cl.get(\"end\") instanceof ByeWS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 5,
      "wgzesg": 44
    }
  },
  {
    "path": "src/test/java/workout/workoutmanager/WorkoutManagerParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import storage.workout.PastWorkoutSessionRecord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseSearchConditions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseTags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "class WorkoutManagerParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseTags_ValidInput_Success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] args \u003d {\"/t\", \"legs\", \"chest\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d parseTags(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        expected.add(\"legs\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        expected.add(\"chest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseTags_MissingOrWrongIdentifierKey_Empty() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in1 \u003d {\"/tt\", \"legs\", \"chest\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e out1 \u003d parseTags(in1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected, out1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in2 \u003d {\"legs\", \"/t\", \"chest\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e out2 \u003d parseTags(in2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected, out2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in3 \u003d {\"legs\", \"chest\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e out3 \u003d parseTags(in3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected, out3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseSearchConditions_CorrectDateTagCondition_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                10,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                17,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                12,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                date, date, tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in1 \u003d {\"/d\", \"20201017\"};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected1 \u003d Arrays.asList(true, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d parseSearchConditions(in1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults1.add(t.test(record));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected1, testResults1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in2 \u003d {\"/d\", \"20201017\", \"/t\", \"arms\"};"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected2 \u003d Arrays.asList(true, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        tests \u003d parseSearchConditions(in2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults2.add(t.test(record));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected2, testResults2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in3 \u003d {\"/d\", \"20201017\", \"/t\", \"legs\", \"chest\"};"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected3 \u003d Arrays.asList(true, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults3 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        tests \u003d parseSearchConditions(in3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults3.add(t.test(record));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected3, testResults3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseSearchConditions_WrongConditionFormat_EmptyChecks() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                10,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                17,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                12,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                date, date, tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in1 \u003d {\"20201017\", \"/d\"};"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected1 \u003d Arrays.asList(true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d parseSearchConditions(in1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults1.add(t.test(record));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected1, testResults1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in2 \u003d {\"20201017\", \"arms\"};"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected2 \u003d Arrays.asList(true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        tests \u003d parseSearchConditions(in2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults2.add(t.test(record));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected2, testResults2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 120
    }
  },
  {
    "path": "src/test/java/workout/workoutsession/CommandLibTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutmanager.ByeWS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutmanager.DeleteWS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutmanager.ListWS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutmanager.NewWS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutmanager.WrongWS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionAdd;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionDelete;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionEnd;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionWrong;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "class CommandLibTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_WorkoutManagerUnrecognisedCommand_returnNull() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertTrue(cl.get(\"asdf\") instanceof WorkoutSessionWrong);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_list_returnListCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertTrue(cl.get(\"list\") instanceof WorkoutSessionList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_delete_returnDeleteCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertTrue(cl.get(\"delete\") instanceof WorkoutSessionDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_new_returnNewCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertTrue(cl.get(\"add\") instanceof WorkoutSessionAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_bye_returnByeCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertTrue(cl.get(\"end\") instanceof WorkoutSessionEnd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 54
    }
  },
  {
    "path": "src/test/java/workout/workoutsession/WorkoutSessionParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.PastWorkoutSessionRecord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseSearchConditions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseTags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "class WorkoutSessionParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void parseTags_ValidInput_Success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] args \u003d {\"/t\", \"legs\", \"chest\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d parseTags(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        expected.add(\"legs\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        expected.add(\"chest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void parseTags_MissingOrWrongIdentifierKey_Empty() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in1 \u003d {\"/tt\", \"legs\", \"chest\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e out1 \u003d parseTags(in1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected, out1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in2 \u003d {\"legs\", \"/t\", \"chest\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e out2 \u003d parseTags(in2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected, out2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in3 \u003d {\"legs\", \"chest\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e out3 \u003d parseTags(in3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected, out3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void parseSearchConditions_CorrectDateTagCondition_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                10,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                17,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                12,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                date, date, tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in1 \u003d {\"/d\", \"20201017\"};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        List\u003cBoolean\u003e expected1 \u003d Arrays.asList(true, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d parseSearchConditions(in1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            testResults1.add(t.test(record));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected1, testResults1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in2 \u003d {\"/d\", \"20201017\", \"/t\", \"arms\"};"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        List\u003cBoolean\u003e expected2 \u003d Arrays.asList(true, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        tests \u003d parseSearchConditions(in2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            testResults2.add(t.test(record));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected2, testResults2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in3 \u003d {\"/d\", \"20201017\", \"/t\", \"legs\", \"chest\"};"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        List\u003cBoolean\u003e expected3 \u003d Arrays.asList(true, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults3 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        tests \u003d parseSearchConditions(in3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            testResults3.add(t.test(record));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected3, testResults3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void parseSearchConditions_WrongConditionFormat_EmptyChecks() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                10,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                17,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                12,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                date, date, tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in1 \u003d {\"20201017\", \"/d\"};"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        List\u003cBoolean\u003e expected1 \u003d Arrays.asList(true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d parseSearchConditions(in1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            testResults1.add(t.test(record));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected1, testResults1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in2 \u003d {\"20201017\", \"arms\"};"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        List\u003cBoolean\u003e expected2 \u003d Arrays.asList(true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        tests \u003d parseSearchConditions(in2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            testResults2.add(t.test(record));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected2, testResults2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 120
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "zsk612": 1
    }
  }
]
